<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2022-04-03T03:14:46-05:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Random Thoughts</subtitle><entry><title type="html">Post Format</title><link href="www.ankushchoubey.com/post-format/" rel="alternate" type="text/html" title="Post Format" /><published>2050-09-26T00:00:00-05:00</published><updated>2050-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/post-format</id><content type="html" xml:base="www.ankushchoubey.com/post-format/">&lt;p&gt;&lt;img src=&quot;/images/switch-jobs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;writing-steps&quot;&gt;Writing Steps&lt;/h2&gt;

&lt;p&gt;If I write from POV that how I got the this idea and how I thought about it, readers will know thinking behing an idea and not just the preachiness. Plus, I‚Äôll always have the right words to write.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Done&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Structure Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Written&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Edited&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Grammar Check Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Perfect Grammarly Score:&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Added  https://www.canva.com/&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Links to Other Posts if Any&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tags Added&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Released Publically&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Blurry lines between Unit and Integration Tests</title><link href="www.ankushchoubey.com/bluring-line-between-unit-integration-test/" rel="alternate" type="text/html" title="Blurry lines between Unit and Integration Tests" /><published>2022-04-03T00:00:00-05:00</published><updated>2022-04-03T15:52:08-05:00</updated><id>www.ankushchoubey.com/bluring-line-between-unit-integration-test</id><content type="html" xml:base="www.ankushchoubey.com/bluring-line-between-unit-integration-test/">&lt;h2 id=&quot;problem-with-mocks-in-unit-testing&quot;&gt;Problem with Mocks in Unit Testing&lt;/h2&gt;

&lt;p&gt;Typically, unit tests includes testing a certain class/method without involving other methods. The other methods are simulated with Mocks.&lt;/p&gt;

&lt;p&gt;Mocking frameworks like Mockito provide functionality like: verifying how many times a mock method was called or if there were no interaction.&lt;/p&gt;

&lt;p&gt;While mocks do provide make tests faster to run, they aren‚Äôt very accurate since they are built by hand.&lt;/p&gt;

&lt;h2 id=&quot;problem-with-typical-integration-testing&quot;&gt;Problem with typical Integration Testing&lt;/h2&gt;

&lt;p&gt;Typically, integration tests include creating a separate environment all together and running tests from middleware to database aka everything backend.&lt;/p&gt;

&lt;p&gt;These tests are bulkier, require a lot of infra-setup and take longer to run.&lt;/p&gt;

&lt;h2 id=&quot;bluring-line&quot;&gt;Bluring line&lt;/h2&gt;

&lt;p&gt;Java has many ‚Äúembedded‚Äù implementation of common external systems like database, kafka, mockservers, etc. These allow for writing tests without having to create a separate infrastructure.&lt;/p&gt;

&lt;p&gt;Thus they are integration tests but not in integration fashion.&lt;/p&gt;

&lt;p&gt;Also, tests written this way are more accurate than using mocks but do lack certain good features of mock as described in first section. Though the benefits outway the loss. Though we can mix and match using Mockito‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SpyBean&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One can write accurate ‚Äúunit‚Äù tests and still use ‚Äúembedded‚Äù database. This has become harder to distinquish between unit and integration tests. Because this is a hybrid of both the overall effect is more accurate tests.&lt;/p&gt;</content><author><name></name></author><category term="testing" /><summary type="html">Problem with Mocks in Unit Testing</summary></entry><entry><title type="html">Whenever you encounter a bug</title><link href="www.ankushchoubey.com/encounter-a-bug/" rel="alternate" type="text/html" title="Whenever you encounter a bug" /><published>2022-03-26T00:00:00-05:00</published><updated>2022-03-26T15:52:08-05:00</updated><id>www.ankushchoubey.com/encounter-a-bug</id><content type="html" xml:base="www.ankushchoubey.com/encounter-a-bug/">&lt;h1 id=&quot;write-a-test&quot;&gt;Write a test&lt;/h1&gt;

&lt;p&gt;Encountering a bug after development means your tests aren‚Äôt good enough. (or you weren‚Äôt doing TDD üòâ)&lt;/p&gt;

&lt;p&gt;To make sure the bug doesn‚Äôt repeat, write a test for it.&lt;/p&gt;

&lt;p&gt;By writing a test, you‚Äôd have simulated the exact situation where the bug arose.&lt;/p&gt;

&lt;p&gt;When you fix the code, you know the bug is perfectly fixed. And anyone modifying the code in the future won‚Äôt miss it.&lt;/p&gt;

&lt;h1 id=&quot;make-sure-right-things-are-logged&quot;&gt;Make sure right things are logged&lt;/h1&gt;

&lt;p&gt;Logs should provide accurate enough description of the state of the system.&lt;/p&gt;

&lt;p&gt;If it takes you too long to find the cause of the bug, it maybe that your logs aren‚Äôt good enough.&lt;/p&gt;</content><author><name></name></author><category term="testing" /><summary type="html">Write a test</summary></entry><entry><title type="html">Thoughts &amp;amp; Notes on User Stories</title><link href="www.ankushchoubey.com/user-stories/" rel="alternate" type="text/html" title="Thoughts &amp;amp; Notes on User Stories" /><published>2022-03-21T00:00:00-05:00</published><updated>2022-03-21T15:52:08-05:00</updated><id>www.ankushchoubey.com/user-story</id><content type="html" xml:base="www.ankushchoubey.com/user-stories/">&lt;p&gt;I have had a love-hate relationship with Agile. The reason has likely been I didn‚Äôt realize it‚Äôs effectiveness.&lt;/p&gt;

&lt;p&gt;These are my thoughts and notes on User Stories. I hope to improve and expand on these ideas in upcoming months.&lt;/p&gt;

&lt;h1 id=&quot;user-stories&quot;&gt;User Stories&lt;/h1&gt;

&lt;p&gt;The goal with user story is to deliver the best value in smallest/most efficient package.&lt;/p&gt;

&lt;h1 id=&quot;size-of-user-stories&quot;&gt;Size of User Stories&lt;/h1&gt;

&lt;p&gt;INVEST is a good acronymn to start with to decide how big story should be.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Independent&lt;/li&gt;
  &lt;li&gt;Negotiable&lt;/li&gt;
  &lt;li&gt;Valuable&lt;/li&gt;
  &lt;li&gt;Estimatable&lt;/li&gt;
  &lt;li&gt;Small&lt;/li&gt;
  &lt;li&gt;Testable&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;writing-user-stories&quot;&gt;Writing User Stories&lt;/h1&gt;

&lt;p&gt;Guiding phrases help narrow focus.&lt;/p&gt;

&lt;p&gt;The description can be phrased this way.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nc&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;business&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Often &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;outcome&amp;gt;&lt;/code&gt; can be used as story title.&lt;/p&gt;

&lt;h1 id=&quot;definition-of-ready&quot;&gt;Definition Of Ready&lt;/h1&gt;

&lt;p&gt;Definition of Ready is when it‚Äôs right to start a user story. We don‚Äôt want to have a lot of context switches because it reduces productivity.&lt;/p&gt;

&lt;p&gt;U-INVEST&lt;/p&gt;

&lt;p&gt;The invest remains same as sizing of stories.&lt;/p&gt;

&lt;p&gt;The U is for User Interface.&lt;/p&gt;

&lt;h1 id=&quot;definition-of-done&quot;&gt;Definition of Done&lt;/h1&gt;

&lt;p&gt;Defination of done is when we can say the story ended.&lt;/p&gt;

&lt;p&gt;The following I believe is must.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TDD followed&lt;/li&gt;
  &lt;li&gt;Deployed&lt;/li&gt;
  &lt;li&gt;Product Owner Accepted Story&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="business" /><category term="agile" /><summary type="html">I have had a love-hate relationship with Agile. The reason has likely been I didn‚Äôt realize it‚Äôs effectiveness.</summary></entry><entry><title type="html">One Month Microservice</title><link href="www.ankushchoubey.com/one-month-microservice/" rel="alternate" type="text/html" title="One Month Microservice" /><published>2022-03-21T00:00:00-05:00</published><updated>2022-03-21T15:52:08-05:00</updated><id>www.ankushchoubey.com/1-month-microservice</id><content type="html" xml:base="www.ankushchoubey.com/one-month-microservice/">&lt;p&gt;I aspire to build microservices/microfrontends and deploy to production within a month.&lt;/p&gt;

&lt;p&gt;A microservice should not be super big. If it is, it‚Äôs not micro anymore.&lt;/p&gt;

&lt;p&gt;The idea with One Month Microservice is this.&lt;/p&gt;

&lt;p&gt;One month and a synchronized-3-man-squad is enough to code up a microservice and deploy to production.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Assuming 3 weeks of coding.&lt;/li&gt;
  &lt;li&gt;One week of deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it‚Äôs takes more than 1 month the following may be reasons,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Learning curve for the particular microservice is too high&lt;/li&gt;
  &lt;li&gt;New Team&lt;/li&gt;
  &lt;li&gt;Design could be improved&lt;/li&gt;
  &lt;li&gt;Microservice infrastucture (chassis) is not in place.&lt;/li&gt;
  &lt;li&gt;Team isn‚Äôt a synchronized 3 man squad. aka it‚Äôs too big with a lot of moving pieces.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I aspire to build microservices/microfrontends and deploy to production within a month.</summary></entry><entry><title type="html">Big 5 Personality Assessment</title><link href="www.ankushchoubey.com/big-5/" rel="alternate" type="text/html" title="Big 5 Personality Assessment" /><published>2022-03-20T00:00:00-05:00</published><updated>2050-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/big-5</id><content type="html" xml:base="www.ankushchoubey.com/big-5/">&lt;p&gt;I am having a lot of problems with understanding different types of people and want map to understand them easily.&lt;/p&gt;

&lt;p&gt;Hopefully, by trying to practice estimating Big 5, I‚Äôll learn to estimate people better.&lt;/p&gt;

&lt;p&gt;Big 5 is personality test developed by Jordan Peterson.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4IdzC6mJzLA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><category term="team-work" /><category term="draft" /><summary type="html">I am having a lot of problems with understanding different types of people and want map to understand them easily.</summary></entry><entry><title type="html">Writing cleaner tests with method/when/should blocks</title><link href="www.ankushchoubey.com/method-when-should/" rel="alternate" type="text/html" title="Writing cleaner tests with method/when/should blocks" /><published>2022-03-19T00:00:00-05:00</published><updated>2022-03-19T15:52:08-05:00</updated><id>www.ankushchoubey.com/method-when-should</id><content type="html" xml:base="www.ankushchoubey.com/method-when-should/">&lt;h1 id=&quot;problem-description&quot;&gt;Problem Description&lt;/h1&gt;

&lt;p&gt;Often tests code style is ignored. Having different test writing styles makes it harder to write quality tests. Tests quality is as important as code. This post explores a effective template I developed to help write cleaner tests and keep them uniform.&lt;/p&gt;

&lt;h1 id=&quot;methodwhenshould-blocks&quot;&gt;method/when/should blocks&lt;/h1&gt;

&lt;p&gt;there are 3 main blocks. each block in nested within parent block.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt; block
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;WHEN&lt;/strong&gt; block
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;SHOULD&lt;/strong&gt; block
            &lt;ul&gt;
              &lt;li&gt;given/when/then mini-blocks&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;method block&lt;/strong&gt;: is name of method. all tests related to a particular method will be within this block.abstract&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHEN block&lt;/strong&gt;: describes the condition over a method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SHOULD block&lt;/strong&gt;: describes the assertion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GIVEN/WHEN/THEN mini-blocks&lt;/strong&gt;: helps keep tests clean&lt;/p&gt;

&lt;p&gt;You may have noticed &lt;strong&gt;WHEN&lt;/strong&gt;, &lt;strong&gt;SHOULD&lt;/strong&gt; and &lt;strong&gt;AND&lt;/strong&gt; are capitalized. This is by design. This helps highlight logic.&lt;/p&gt;

&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;

&lt;p&gt;1 - &lt;strong&gt;We are creating a method which inserts new value if id does not exists in database else updates existing value.class&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;upsert&lt;/strong&gt; method
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;WHEN&lt;/strong&gt; value exists
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;SHOULD&lt;/strong&gt; update value&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;WHEN&lt;/strong&gt; does not exists
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;SHOULD&lt;/strong&gt; insert new value&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2 - &lt;strong&gt;We have a UI components which should message ‚ÄúNo Content‚Äù if data items is not present. Else it shows a list of item names&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;displayItems&lt;/strong&gt; method
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;WHEN&lt;/strong&gt; data is not present
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;SHOULD&lt;/strong&gt; display ‚ÄúNo Content‚Äù&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;WHEN&lt;/strong&gt; data exists
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;SHOULD&lt;/strong&gt; display list of item names&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;benefits&quot;&gt;Benefits&lt;/h1&gt;

&lt;p&gt;method/when/should block is perfect companion for TDD, is language agnostic and can be easily used with templating features like IntelliJ‚Äôs live template.&lt;/p&gt;

&lt;p&gt;Having specific blocks means that test descriptions are always written a certain way. This clarifies thinking and makes sharing and understanding easier.&lt;/p&gt;

&lt;p&gt;Blocks group tests together, making them easier to find.&lt;/p&gt;

&lt;p&gt;Also, when tests run in IDE like IntelliJ, the output is much cleaner. The example section above is a good representation of this.&lt;/p&gt;

&lt;h1 id=&quot;template-for-junit&quot;&gt;Template for JUnit&lt;/h1&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NameOfClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{methodName} method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MethodName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     
        &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WHEN {condition description}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConditionDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
            &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SHOULD {assertion description}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AssertionDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// GIVEN&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conditions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          
                &lt;span class=&quot;c1&quot;&gt;// WHEN&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                
                &lt;span class=&quot;c1&quot;&gt;// THEN&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Given, When and Then are mini-blocks. The code will be written after an tab intend.&lt;/p&gt;

&lt;!-- &lt;script src=&quot;https://gist.github.com/ankschoubey/ea3cb41308c19f56c69eb40d7e05cec1.js&quot;&gt;&lt;/script&gt; --&gt;

&lt;h1 id=&quot;more-extentions&quot;&gt;More extentions&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;AND block&lt;/strong&gt;: Describes more conditions for &lt;strong&gt;WHEN&lt;/strong&gt; block.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;WHEN&lt;/strong&gt; a condition
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;AND&lt;/strong&gt; another conditions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;More SHOULD Blocks&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SHOULD-NOT&lt;/li&gt;
  &lt;li&gt;SHOULD THROW&lt;/li&gt;
  &lt;li&gt;SHOULD-NOT THROW&lt;/li&gt;
  &lt;li&gt;SHOULD CALL&lt;/li&gt;
  &lt;li&gt;SHOULD-NOT CALL&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="testing" /><category term="clean-code" /><category term="favorite" /><summary type="html">Problem Description</summary></entry><entry><title type="html">Stratergies on Saving Time</title><link href="www.ankushchoubey.com/saving-time/" rel="alternate" type="text/html" title="Stratergies on Saving Time" /><published>2022-03-18T00:00:00-05:00</published><updated>2022-03-18T15:52:08-05:00</updated><id>www.ankushchoubey.com/saving-time</id><content type="html" xml:base="www.ankushchoubey.com/saving-time/">&lt;p&gt;Categorize the type of activities you want to do.&lt;/p&gt;

&lt;p&gt;Plan and track your day diligently. Every hour. But maybe not every minute.&lt;/p&gt;

&lt;p&gt;Meditate. You need attention.&lt;/p&gt;

&lt;p&gt;Perform activities that give back time. -&amp;gt; Time Assets.&lt;/p&gt;

&lt;p&gt;Mono Task. Do one thing at a time. You‚Äôll save 50% more time.&lt;/p&gt;

&lt;p&gt;You only have 4 productive focus hours. Don‚Äôt let anyone distract you.&lt;/p&gt;

&lt;p&gt;Prioritize task: Use Eisenhower Matrix&lt;/p&gt;</content><author><name></name></author><summary type="html">Categorize the type of activities you want to do.</summary></entry><entry><title type="html">Human Intuition while working in Technology</title><link href="www.ankushchoubey.com/human-intuition/" rel="alternate" type="text/html" title="Human Intuition while working in Technology" /><published>2022-03-18T00:00:00-05:00</published><updated>2022-03-18T15:52:08-05:00</updated><id>www.ankushchoubey.com/human-element</id><content type="html" xml:base="www.ankushchoubey.com/human-intuition/">&lt;p&gt;Often when talking about process improvement, we focus on only technology element.&lt;/p&gt;

&lt;p&gt;Human element is ignored. This is understandable. technology can enforce rules that improve the process easily. Technology can also remove a lot of human evidence.&lt;/p&gt;

&lt;p&gt;Developing the human intuition is about understanding why something is being done more than how something is being done.&lt;/p&gt;

&lt;p&gt;Because once someone understands why something is done, they can suggest ways to prove it for themselves locally.&lt;/p&gt;

&lt;p&gt;This is usually the thing I find lacking in most devops, Agile, TDD and similar concepts.&lt;/p&gt;</content><author><name></name></author><summary type="html">Often when talking about process improvement, we focus on only technology element.</summary></entry><entry><title type="html">The Synchonized 3 Man Squad +/-1</title><link href="www.ankushchoubey.com/3-man-squad/" rel="alternate" type="text/html" title="The Synchonized 3 Man Squad +/-1" /><published>2022-03-17T00:00:00-05:00</published><updated>2022-03-17T15:52:08-05:00</updated><id>www.ankushchoubey.com/3-man-squad</id><content type="html" xml:base="www.ankushchoubey.com/3-man-squad/">&lt;p&gt;I have come to the belief that 3 people working on a particular micro-service/micro frontends/unit is the most optimal.&lt;/p&gt;

&lt;p&gt;Small teams are more effective than larger teams. Keeping a large team in sync is hard.&lt;/p&gt;

&lt;p&gt;They have to be dedicated to a single MS/MF because the cost of bringing someone later makes the project delay more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt; man isn‚Äôt enough because they‚Äôll have too much freedom/dependency. Code would be written in such a way that only 1 person knows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt; is good. It helps in synchronization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; is perfect. It‚Äôs a synchronized and shared workload. If a person is on leave, 2 can manage easily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt; is the upper limit. This is a warning zone. Though it may be perfect is project requires a lot of support. But if the project requires a lot of support, it may mean that it isn‚Äôt designed well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More than 4&lt;/strong&gt;: You have spaghetti. Shortcuts. People doing their own things. High communication bottlenecks.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;The idea for this post was developed while talking to my friend Austin Lewis&lt;/sup&gt;&lt;/p&gt;</content><author><name></name></author><category term="business" /><category term="teams" /><category term="agile" /><summary type="html">I have come to the belief that 3 people working on a particular micro-service/micro frontends/unit is the most optimal.</summary></entry></feed>