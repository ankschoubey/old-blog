<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2023-12-11T11:36:08-06:00</updated><id>https://www.ankushchoubey.com/feed.xml</id><title type="html">Ankush Choubey</title><subtitle>Full Stack Developer - Cloud/Microservices</subtitle><entry><title type="html">Using ApplicationContext to Debug Spring Boot Faster</title><link href="https://www.ankushchoubey.com/v1/application-content-debug-spring-boot" rel="alternate" type="text/html" title="Using ApplicationContext to Debug Spring Boot Faster" /><published>2023-12-11T00:00:00-06:00</published><updated>2023-12-11T14:52:08-06:00</updated><id>https://www.ankushchoubey.com/v1/v1-application-content-debug-spring-boot</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/application-content-debug-spring-boot"><![CDATA[<p>Often, we have multiple steps in reaching a piece of code to debug. For example, we’d set up infrastructure like doing an API call or setting up a database, Kafka, or something else.</p>

<p>A better way to debug is to <a href="https://www.ankushchoubey.com/encounter-a-bug/">create a unit test</a> where you call your code with the same set of parameters you want to debug. Once your code is fixed, your test can stay for the future.</p>

<p>I usually keep a <a href="https://www.ankushchoubey.com/v1/junit-bug-tracking">template for these regression bug kinds of tests</a>.</p>

<p>For example, suppose I have an error in my MongoDB database. I know what database record causes the error. I can replicate this in the <code class="language-plaintext highlighter-rouge">@DataMongoTest</code> and validate it.</p>

<p>But assuming you have not written a unit test for debugging, there is another way to debug that doesn’t involve setting up the entire application infrastructure, and that’s to use ApplicationContext directly.</p>

<p>Using <code class="language-plaintext highlighter-rouge">ApplicationContext</code>, you can access any <code class="language-plaintext highlighter-rouge">@Bean</code> and call its method.</p>

<p>Here’s an example. (Don’t forget to put debug points)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
  <span class="nc">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">ClassName</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
  <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span> <span class="c1">// often it would help if you debugged multiple times.</span>
    <span class="k">try</span><span class="o">{</span>
      <span class="nc">ABeanYouWant</span> <span class="n">bean</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">ABeanYouWant</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
      <span class="nc">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">bean</span><span class="o">.</span><span class="na">methodOfTheBean</span><span class="o">(</span><span class="s">"Parameter1"</span><span class="o">,</span> <span class="s">"Parameter2"</span><span class="o">);</span> <span class="c1">// DEBUG POINT</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"response"</span><span class="o">);</span><span class="c1">// DEBUG POINT</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span> <span class="c1">// DEBUG POINT</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This was one of my favorite ways to debug before <a href="https://ankushchoubey.com/tdd">entering the world of Test Driven Development</a>. Post TDD, my debugging has been even more easier and effective.</p>]]></content><author><name></name></author><category term="spring-boot" /><summary type="html"><![CDATA[Using ApplicationContext directly can indeed be a handy approach for debugging without setting up the entire application infrastructure.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/application-content-debug-spring-boot.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/application-content-debug-spring-boot.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lessons Learned From The Movie Pinocchio</title><link href="https://www.ankushchoubey.com/v1/truth/pinocchio" rel="alternate" type="text/html" title="Lessons Learned From The Movie Pinocchio" /><published>2023-12-10T00:00:00-06:00</published><updated>2023-12-10T14:52:08-06:00</updated><id>https://www.ankushchoubey.com/v1/truth/v1-pinocchio</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/truth/pinocchio"><![CDATA[<p>I watched Pinocchio recently, and I loved the movie. It’s philosophical and in the purest sense.</p>

<p>Here’s my description of the movie, along with the lesson learned.</p>

<h2 id="pinnocheos-dad-created-him">Pinnocheo’s Dad Created Him</h2>

<p>Pinnocheo’s father is an old guy who lives and enjoys his life. He seems to be single. He does have the company of his cat and fish, and he enjoys his life a lot.</p>

<p>He makes Pinocchio, a wooden puppet. And wishes him for a dying star for a wish that may the boy come true.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>The guy already enjoyed his life.
</div>
<p>When he wished from the dying star, the fairy didn’t just give him a complete boy. She made the wooden puppet alive.</p>

<p>When the puppet came, he was given a chance to become alive. And it was up to him to become alive. No one else could do it. But he could do it himself.</p>

<p>And to help him along the path, he was gifted a conscience. Gemini The Cricket. Who can guide him to choose right over wrong?</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b5/Jiminy_Cricket.png" alt="" /></p>

<p>To become a complete boy, Pinnocheo would have to listen to his conscience and choose the path of being selfless, honest and courageous. If he does all these, he’ll become a complete boy one day.</p>

<p>Fairy wishes the best of luck to both Pinnocheo and the conscience.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>Both a person and conscience take a journey together. i.e. they both learn and grow with time and experience.
</div>
<p>When temptation is strong, whistle to your conscience. Always let your conscience be your guide.</p>

<p>When you are slipping, call your conscience. Let your conscience be your guide. :)</p>

<p>When you feel you are not being brave, give a little whistle and let your conscience guide you.</p>

<h2 id="first-thing-going-to-education">First Thing: Going to Education</h2>

<p>The first thing Pinnocheo has to do the next day is get out of his house and go to school to meet other kids.</p>

<p>Pinocchio goes happily, carrying an apple given to him by his father.</p>

<p>Since Pinocchio and his conscience are separate, the conscience does not travel with him always. So, while Pinnocheo is going, the conscience is late running, though he is sure what bad can happen on the first day.</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/7/7c/Pinochio2_1940.jpg" alt="" /></p>

<h2 id="personal-evil">Personal Evil</h2>

<p>Pinocchio meets a Fox, Honest John. Honest John is anything but honest.</p>

<p>Honest John sees Pinocchio as a gold mine and takes advantage of him. #goldDigger.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>sometimes people see you as a gold mine, so they decide to take advantage of you.
</div>
<p>He traps Pinocchio and eats the apple that was given to him by his father. Pinocchio doesn’t even get concerned with his apple being eaten away. Honest John is acting too well. Pinocchio thinks he is a good man.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>People with Malavelant intent work Charmly. No one acts dishonestly in front of you. Until you are away from all drama and can exclude a person's charm to look at their action, you will stay trapped.
</div>
<p>Then Honest John entices him to become an actor. He says he’ll be world famous. Pinocchio has the awareness that he needs to go to school, but eventually, after Honest Johns’s persistence, he gets enticed. And goes along with Honest John. Happily,<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>We are happy even if we don't realize we are going to lose. And sometimes we are too satisfied. Maybe if it sounds too good to be true, it is.
</div>
<p>His conscience suddenly sees Pinocchio and Honest John walking and singing happily. He slowly goes to Pinocchio while avoiding honest John, trying to hint at him. You had to go to the school.</p>

<p>Pinocchio sees Gemini (conscience) and reveals to Honest John that he is there. The first thing honest John tries to do is get rid of Gemini.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>People who are evil start first by taking away your autonomy. Avoid that.
</div>
<p>Gemini Cricket manages to get rid of Honest John and talks of Pinocchio when he is alone. Gemini rarely talks in front of other people except the fairy. In front of others, especially people he thinks are doing wrong. Here, the sprite could be equated to god.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>Your conscience talks to you when you allow for some silence.
</div>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/3/3b/Stromboli_in_Walt_Disney%27s_Pinocchio.png" alt="" /></p>

<h2 id="group-evil">Group Evil</h2>

<p>Someone has evil intent for the entire group, and you are a part of it. Just being part of the group.</p>

<p>The steps to get out are still the same. Listen to your conscience and act.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>Be careful who your company is.
</div>
<p>Pinnocheo’s father went out on a journey to bring Pinnocheo back. But he got swallowed by a whale and reached the depth of the sea. This is also a thing that Pinnocheo’s father may not have gone out to protect his son. At the same time, when you go out to do important things, even if your intention is pure, you may get swollen by the whale.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>When you are doing something with yourself, it can affect people around you.
</div>
<p>For Pinnocheo, this is a shock, And he goes to get his father out of the belly of the whale.</p>

<p>His conscience is in disagreement, and he is scared. It wants to avoid getting to the bottom of the ocean to get the father. Pinocchio is disintegrated. i.e. he wants something, but his conscience wants something else.</p>

<p>Pinocchio has to convince his conscience, and the way he convinces them is to talk to him. He takes a moment to speak with his conscience. The conscience and Pinnocheo align, and the conscience can give tips for things further.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>We often take journeys with our conscience. It's only sometimes that the conscience is correct. We learn together with our conscience. When we are aligned, i.e. we and the conscience think in the same direction, we can move much faster in that direction. 🙂 You have to love yourself and talk to yourself enough to get yourself aligned. 🙂 We have a little ourselves inside of us.
</div>
<p>Pinocchio also aligns himself with facing a challenge. i.e. to protect his father from the belly of the whale.</p>

<p>Often, tragedy befalls us. It takes us, or it brings our family members or community. Not always, but sometimes, we must face the whale voluntarily at the bottom of the ocean. This journey to the bottom of the sea is feared by everyone, as described by all the fishes. It’s an abyss.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>JP says: If you stare into the abyss long enough and voluntarily, you'll not only find the abyss staring back at you, you'll find the light.
</div>
<p>Important things need to be faced. It’s luck to meet essential stuff with all your strength and knowledge. That certainly helps. But sometimes you don’t have all the power or all the ability, yet you have to face the whale at the bottom of the ocean voluntarily and to your best capacity for yourself and the people around you.</p>

<h2 id="pinocchio-meets-his-dad-inside-the-belly-of-the-whale">Pinocchio meets his Dad inside the belly of the whale.</h2>

<p>This can also be thought of as a revelation met inside darkness. Darkness, once understood and voluntarily accepted, can reveal important things.</p>

<p>To get out of darkness, Pinnocheo did not use brute force. He doesn’t have the strength. He uses his intellect. he isn’t the smartest. Yet he tries what he knows.</p>

<p>We should, too. We often can’t attack the whale directly; we must be smart about it. Look around us. Be humble to use things that we didn’t use before and ask for help about things from people we have never asked before. And do our best even if we don’t know enough.</p>

<p>Finally, Pinocchio and his father get out of the whale’s belly. The whale chases them even after for some time. But they can protect themselves enough so they don’t get eaten again.<br /></p>
<div class="flash flash-success">
    <svg class="octicon octicon-checklist" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"></path></svg>
    <strong>Lesson: </strong>Once you get out of darkness, it's not like it's all bright instantly. You must solidify the light so that darkness doesn't get over you. The best way to do this is to understand it fully and transcend it 🙂.
</div>
<h2 id="pinocchio-becomes-a-real-boy">Pinocchio becomes a real boy.</h2>

<p>Pinocchio finally becomes a real boy after all the ups and downs and the adventures.</p>

<p>He tried out stupid things and found out he didn’t want to go in that direction.</p>

<p>He saved his father from the belly of the whale. He exercised courage despite malevolence and goodness towards his family members. He integrated with his conscience. i.e. he let his conscience be his guide. And he developed a better, more aligned relationship with his concise.</p>

<p>Eventually, he becomes a real boy. This can be thought of as he entirely fulfilled his potential.</p>

<hr />

<p>By following some of his examples, we can fulfill our potential too. 💎🙂</p>

<p>If you haven’t watched Pinocchio. I recommend you do, and if you have watched it yet, let me know what you think. ❤️</p>

<p>Is there any other movie you know that’s similar and philosophical?</p>

<hr />

<p>More lessons:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/8fXwOAeDKdo?si=SEtuvjQsyv4hnufZ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="non-technical" /><category term="truth" /><summary type="html"><![CDATA[A cartoon can teach you about importance of self-discovery, aligning with one's conscience, and facing challenges voluntarily.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://upload.wikimedia.org/wikipedia/commons/9/94/Pinocchio_1940.jpg" /><media:content medium="image" url="https://upload.wikimedia.org/wikipedia/commons/9/94/Pinocchio_1940.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">5 Step Process to Planning and Building a UI DOM Efficiently with Boxes, BEM and TDD</title><link href="https://www.ankushchoubey.com/tdd/planning-dom/" rel="alternate" type="text/html" title="5 Step Process to Planning and Building a UI DOM Efficiently with Boxes, BEM and TDD" /><published>2023-10-28T00:00:00-05:00</published><updated>2023-10-28T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/tdd/planning-dom</id><content type="html" xml:base="https://www.ankushchoubey.com/tdd/planning-dom/"><![CDATA[<p>I recently had to develop a complex table layout. I had coded it directly without planning, and later, I found a lot of stuff that needed to be included.</p>

<p>For the last two years, I have been working on the backend, so my frontend skills were soft. Then I realized what I used to do. Here is the process I have consistently used to design complex UI with ease.</p>

<p>I later used the process to rebuild my UI from scratch completely. In a very efficient way!</p>

<p>The process involves five steps:</p>

<ol>
  <li><strong>Copy the Visual Design into drawing software</strong>. I prefer presentation software like Google Slides. 🛝</li>
  <li><strong>Draw boxes</strong> around all UI components you would like to make.</li>
  <li>While drawing the <strong>name the UI component’s CSS</strong> using BEM!</li>
  <li>Create a basic component with <strong>just HTML DOM! No logic</strong>! This should be the look and feel!</li>
  <li><strong>Start doing TDD</strong>! This is where logic is written!</li>
</ol>

<p>BEM and TDD are new additions to my toolkit! That has significantly improved my productivity with UI!</p>

<p>As you’ll see, the goal here is #fastFeedback! If you can re-arrange your approach and thinking before development, you’ll save much time later.</p>

<p>Here are the details, along with examples of how you might think about developing the UI of the Google Home Page.</p>

<h2 id="1-copy-the-vdi-into-a-drawing-tool-like-google-slides">1. Copy the VDI into a drawing tool like Google Slides</h2>

<p>Instead of creating a UI directly on HTML, it’s much better to map out all the UI on paper, wireframe or complete VDI tools like Figma. You want to get early feedback on your UI before you start coding it up so that you won’t have to go back and forth on changes. The later the change is introduced, the costlier it is.</p>

<p>It’s much easier to redraw a box than to rewrite a code.</p>

<p>So, assuming you have a nice UI VDI, which you have validated #earlyFeedback and have confirmed, start by copying it into a tool like Google Slides. You can also use Figma, of course.</p>

<p>Since we are taking an example of building the Google Homepage, below, I have copied a screenshot of the Google Homepage in Webview and Mobile view into Google Sheets.s</p>

<p><img src="/images/planning-dom/step-1-copying-ui-into-slides.png" alt="" /></p>

<p><a href="https://docs.google.com/presentation/d/1MS5YxpJEKsgWrRnx0iZEgMwFLaPTMQtzroofcs3wTvc/edit?usp=sharing">Google Slides Link</a></p>

<h2 id="2-draw-boxes-around-all-ui-components">2. Draw boxes around all UI components</h2>

<p>I’ll start by drawing boxes around all UI components; this will help give a good idea of what and how things should be in the dom.</p>

<p><img src="/images/planning-dom/step-2.1-drawing-boxes-around-components.png" alt="" /></p>

<p>Once I have drawn all the boxes, since both mobile and UI views are open, I’ll colour code the box making it easier to identify their positions in different layouts.</p>

<p><img src="/images/planning-dom/step-2.2-color-coding-boxes.png" alt="" /></p>

<h2 id="3-naming-each-box-using-bem">3. Naming each box using BEM</h2>

<p>BEM allows us to name out components and use them as CSS. I have used BEM, and it works great. There is a common issue, though, that it can sometimes be too lengthy to name things, but I can live with it happily.</p>

<p>BEM involves a maximum of three parts in naming a CSS class selector.</p>

<ul>
  <li>Block</li>
  <li>Element</li>
  <li>Modifier</li>
</ul>

<p>The syntax is like this <code class="language-plaintext highlighter-rouge">.{block}__{element}--{modifier}</code></p>

<p>If {block}, {element} or {modifier} is multiply words, then it can be split by hyphens <code class="language-plaintext highlighter-rouge">-</code>.</p>

<p>Block is the main functionality; for example, since we are building a homepage, we could name our  <code class="language-plaintext highlighter-rouge">{block}</code> <code class="language-plaintext highlighter-rouge">home.</code></p>

<p>Elements are parts of the Block. For our <code class="language-plaintext highlighter-rouge">home</code> block, we could have <code class="language-plaintext highlighter-rouge">{element} 's could be</code>logo<code class="language-plaintext highlighter-rouge">,</code>search-box<code class="language-plaintext highlighter-rouge">,</code>footer`, etc.</p>

<p>Modifiers are different states of elements. For example, when we clicked on the <code class="language-plaintext highlighter-rouge">search-box</code> element, it could show an effect. This can be <code class="language-plaintext highlighter-rouge">--clicked</code> modifier.</p>

<p>So, combining all 3, we get the following CSS classes for each component.</p>

<p><code class="language-plaintext highlighter-rouge">.home</code> - main box
<code class="language-plaintext highlighter-rouge">home__logo</code>
<code class="language-plaintext highlighter-rouge">.home__search-box</code>
<code class="language-plaintext highlighter-rouge">.home__search-box--clicked</code>
<code class="language-plaintext highlighter-rouge">home__footer</code></p>

<p>I’ll go ahead and name each component in Google Sheets.</p>

<p><img src="/images/planning-dom/step-3-css-naming.png" alt="" /></p>

<p>Tip: You can also add the name of the HTML element you will use. For example, I prefer <code class="language-plaintext highlighter-rouge">Box</code> in the MUI React Library. So I’d often write <code class="language-plaintext highlighter-rouge">Box .home.</code></p>

<h2 id="4-create-a-simple-static-html-dom">4. Create a simple static HTML DOM</h2>

<p>Now, I’d create a simple React Project with Static DOM. The structure would proceed from plain to complex, and by the end, you’d see a page that’s closer to what we wanted.</p>

<p>This is a tutorial, so don’t focus, so don’t judge my CSS skills here. 😛. I would spend longer when working on a prod-grade application.</p>

<p>Here’s a video of it. You can freely jump around or follow the guide below.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/58UCMdK33_k?si=y-WnccOE-GdVQ65-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p>I created a simple dom with the header, body and footer. I usually like to display the component names as they go.
<img src="/images/planning-dom/step-4.1-simple-dom.png" alt="" /></p>

<p>Now, iteration two.</p>

<p><img src="/images/planning-dom/step-4.2-dom-takes-shape.png" alt="" /></p>

<p>Now that the DOM has taken shape, I’d have to plan more components. So, I returned to the board, drew boxes and wrote CSS classes for the header and footer.
<img src="/images/planning-dom/step-4.2.1-header.png" alt="" />
<img src="/images/planning-dom/step-4.2.2-footer.png" alt="" /></p>

<p>Now that this is done, I added them to the HTML. And whoah. We have our DOM!</p>

<p><img src="/images/planning-dom/step-4.3-final-dom.png" alt="" /></p>

<p><img src="/images/planning-dom/step-4.4-complete website.png" alt="" /></p>

<p>You can see the final code on <a href="https://stackblitz.com/edit/stackblitz-starters-f7clcp?file=src%2Fhome%2Fhome.css">StackBlitz</a></p>

<h2 id="next-step--tdd">Next Step? 👉🏽 TDD</h2>

<p>TDD for the front end is a big topic in itself. I’ll cover it in a different blog post.</p>

<h2 id="wrapping-it-up">Wrapping it up</h2>

<p>Planning your DOM before coding is essential as it can significantly make the mental model of what to develop easier. Use simple tools to draw boxes and name CSS classes using a system like BEM.</p>

<p>Once that’s done, create a simple DOM structure without logic. Make sure your UI looks as it is in your design software.</p>

<p>The next step is to build a bug-free UI. We’ll use TDD for it.</p>

<h2 id="heres-the-final-ui">Here’s The Final UI</h2>

<iframe src="https://stackblitz.com/edit/stackblitz-starters-f7clcp?embed=1&amp;file=src%2Fhome%2Fhome.css&amp;view=preview">
</iframe>]]></content><author><name></name></author><category term="web-development" /><category term="tdd" /><summary type="html"><![CDATA[BEM, TDD, and thoughtful design supercharge web development by streamlining UI DOM planning for maximum efficiency.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/planning-dom/step-3-css-naming.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/planning-dom/step-3-css-naming.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Values are ‘now’. Act!</title><link href="https://www.ankushchoubey.com/v1/values-are-now/" rel="alternate" type="text/html" title="Values are ‘now’. Act!" /><published>2023-09-30T00:00:00-05:00</published><updated>2023-09-30T15:42:15-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-values-are-now</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/values-are-now/"><![CDATA[<p>Photo by <a href="https://unsplash.com/@fridalannerstrom?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Frida Lannerström</a> on <a href="https://unsplash.com/photos/76dgUcMupv4?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>

<h2 id="thinking-about-the-outcomes--thinking-in-valueskarma">Thinking about the outcomes != Thinking in values/karma</h2>

<p>Values-based thinking allows you to exercise your value in any situation. The situation may have any outcome, whether in your favour or not. But you can still exercise your values.</p>

<p>Values provide meaning to the present moment instantly. They provide a path to follow in the present moment.</p>

<p>For example, if your value is honesty, you’ll be truthful even when things are not in your favour.</p>

<p>That is, you are <strong>more loyal to your values than to anything or anyone else</strong>.</p>

<p>The outcome, for the most part, is about a past result or a future worry. Therefore, you have control over it only some of the time. Making decisions for outcomes means you’d decide each time what to do.</p>

<h2 id="values-dont-change-for-every-situation">Values don’t change for every situation</h2>

<p>Values stay mostly the same each time you have to make a decision. You have already decided what to do, i.e. you have chosen your value. You need to act on it.</p>

<p>So, think about the outcome only when you follow your values.</p>

<h2 id="karma-yog-sacrifice-what-you-want-for-needs-and-need-to-do-something-greater">Karma Yog: Sacrifice what you want for needs and need to do. (Something greater)</h2>

<p>Some things in life require sacrificing what we want for the greater good. For example, if you are 100 and want to lose weight, you can’t eat Donuts 🍩 all day; you must give up the doughnut for the greater good.</p>

<p>This concept applies to non-personal situations too. Suppose you sense that your friend is doing something that you don’t like. You want to set up a boundary. But you don’t think this may hurt your friend at the moment. But you’ll get hurt daily if you don’t set the limit. It would be best if you sacrificed what you want now for what you need to do—something for the greater.</p>

<p>Similarly, if a kid and we are hungry, we don’t steal the kid’s food even though they can’t defend themselves. We generously offer as much as we can to the kid.</p>]]></content><author><name></name></author><category term="responsibility" /><category term="non-technical" /><summary type="html"><![CDATA[Give up on thinking about the outcome. Do what needs to be done. Following your values is complete in itself. The outcome is a bonus.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/values-are-now.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/values-are-now.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Why psychological work and/or therapy are important and shouldn’t be ignored?</title><link href="https://www.ankushchoubey.com/optimism/why-therapy" rel="alternate" type="text/html" title="Why psychological work and/or therapy are important and shouldn’t be ignored?" /><published>2023-09-10T00:00:00-05:00</published><updated>2023-09-10T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/optimism/v1-why-theraphy</id><content type="html" xml:base="https://www.ankushchoubey.com/optimism/why-therapy"><![CDATA[<p>Photo by <a href="https://unsplash.com/@ashlynciara?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Ashlyn Ciara</a> on <a href="https://unsplash.com/photos/WA_O4UAUfxc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>

<p><strong>I am not a therapist or a medical professional</strong>. I didn’t go to therapy for a long time and didn’t understand when to go for it. The reasoning was likely that I didn’t understand what psychology is and what psychological work means.</p>

<p>In the following blog post, I’ll lay out some reasons I found why therapy is helpful. I have a very logical mind, so the below will be from a logical point of view. Towards the end, I’ll share what I am going through and what I would have done differently.</p>

<h2 id="what-is-psychology-and-therapy">What is Psychology and Therapy?</h2>

<p>Psychology is the study of human behaviour. And therapy is just an appointment with an expert who has studied psychology.</p>

<p>We humans adapt to our environments. And we are a creature of habit. When we create habits, it physically changes our brains. We are also a creature of thoughts and emotions, and these affect how we feel and can control our actions. There is always a possibility that we learn habits that are not good for us. And similarly, we might learn thought and emotional habits that aren’t good for us.</p>

<p>And these unhealthy habits (physical, emotional, thought or behaviour) can cause psychological trouble.</p>

<h2 id="medical-vs-psychological-problem">Medical vs Psychological problem</h2>

<p>We can only fix a problem by fixing the root cause of it.</p>

<p>Here’s an example I’ll refer to often that illustrates the importance of fixing a problem at the root: <strong>The broken car example</strong>.</p>

<p><strong>The problem</strong>: We have a car with a broken window. When it rains, the driver and the passengers get wet. The driver and passengers open umbrellas within the vehicle to avoid getting wet. They get wet less, but they have a new problem. They can’t see outside the broken window. This covering keeps them vulnerable to more significant problems like accidents.</p>

<p><strong>The solution</strong>: A broken window is the root cause of the problem. Avoiding fixing the problem using an umbrella within the card only leads to more problems. To restore the problem, one needs to fix the root cause. So, mending or repairing the window will fix the problem. Once the window is replaced or repaired, all issues are solved.</p>

<p>Something similar happens to psychological issues.</p>

<p>A psychological issue is when you are troubled by a thought pattern or behaviour. The thought pattern or behaviour could be something you got from the external world or yourself.</p>

<p>If you have a physical/medical illness, go to a doctor and get diagnosed; they’ll give you medicines. If the treatment works, it means you have a physical condition.</p>

<p>Similarly, one medicine cannot fix the problem with another treatment. You can’t heal a physical injury with cold-related medication. It would be best to have painkillers and other drugs for treating physical injury.</p>

<p>Now, let’s look at the parallel with psych issues.</p>

<p>Sometimes, psychological issues such as high stress can manifest as physical issues, for example, Irritable Bowel Syndrome (IBS), where you can have stomach issues due to stress. If you go to a doctor, he might give you pills that can help relieve the symptoms. But, like me, you’ll be referred to meet a psychiatrist. This is because the cause of IBS most often is high stress, which is a psych issue. And unless it’s not addressed in psychological terms, it’ll continue to affect us. Medicines can relieve the symptoms, but they can’t fix it.</p>

<p>Solutions to fixing medical problems do not fix psychological issues. Solutions that improve psychological problems do not fix physical problems.</p>

<p>Medical treatment might work mildly, like medicines that suppress thoughts. But they can’t fix them permanently.</p>

<p><strong>You need to work on the psychological problem similar to how you work on medical problems.</strong></p>

<p>Psychological issues are a bit different as they often don’t require medication. And they are counter-intuitive and can take time to understand, which is why most people skip it.</p>

<h2 id="anxietydepression-doesnt-mean-pagal">Anxiety/Depression doesn’t mean pagal</h2>

<p>A common thing which people think is that anxiety and depression mean pagal! This may be the most common reason why therapy and psychology are often stigmatized. But that’s not the case. Even brilliant and intense people can get into thought or behavioural patterns that can keep them stuck or in fear. <a href="https://www.ankushchoubey.com/v1/can-not-logic-your-way-out-of-depression">On the contrary, the more intelligent you are, the more likely you are to get depressed</a>.</p>

<p>And usually, pagal means something that generally happens to someone else. And that people want to avoid becoming pagal. They also think of particular people as pagal.</p>

<p>Pagal is a very loaded term and something that people fear because they don’t understand it.</p>
<ul>
  <li>Does being angry make you pagal?</li>
  <li>Does being scared and worried make you pagal?</li>
</ul>

<p>If you study psychological issues, you realize most are simple. You could say schizophrenia is pagal where people see abnormality in reality. But that’s an extreme case.</p>

<p>Most people who avoid therapy or psychological work avoid it for more superficial reasons like trauma trying to justify saying their condition is not that bad that it can’t be handled themselves.</p>

<p>That may be true. But if you go to a therapist and do psychological work, you could have half the time to go through a solution yourself. And you know you’ll be given proper treatment given their scientific problem.</p>

<p>The below point explains things better.</p>

<h2 id="people-think-that-the-person-who-is-anxious-or-depressed-is-lazy-and-they-need-to-do-it">People think that the person who is anxious or depressed is lazy. And they need to do it.</h2>

<p>But that’s not the case; the person’s mind is in full force, running in survival mode.</p>

<p>Suppose you are frightened by something; your heart rate will go up, and blood will flow to your body, legs and hands so that you can run. The blood flows away from your brain and your stomach. And towards hands and arms.</p>

<p>If you run, you’ll get away from danger. And your heart rate will come down. And other functions will get normal. So the body is in high stress for a short time. Suppose you are in the same state when you are merely sitting still or walking. You can’t run. Nor does the situation demand running.</p>

<p>But the body is accustomed to the exact survival mechanisms as in the past. So your body is in high stress but for a long time.</p>

<p>Since blood is not flowing to your brain, your brain can’t function properly. And since it’s not rushing to your stomach, you get things like IBS.</p>

<h2 id="gym-is-not-enough">Gym is not enough</h2>

<p>We all know that drinking when stressed is bad for you.</p>

<p>Similarly, exercising when stressed is good for you. Some people may say travelling is what helps me burst stress. Or some “status signalling” people may say I meditate (when all day do it a fake meditation)</p>

<p>Suppose, What should you do when you are in a situation where you can’t exercise? Is there any other way out?</p>

<p>Also, how much can you exercise? Yes, exercise does make you stronger in the short term. But does it solve the problem? Like the broken window example from above, does it solve the root cause?</p>

<p>You can sort out and solve the root cause of your psychological troubles with some psychological effort. Simple things that you may have ignored, like your needs, your desires to connect with other people, the way you grew up, the healthy or unhealthy coping mechanisms you learn, and what you do when you are threatened, i.e. defence mechanisms, can go a long way to understanding the root cause and fixing it so that you won’t have 20 other symptoms caused by the exact root cause.</p>

<h3 id="but-i-cant-spend-money-or-they-cant-solve-my-problem">“But I can’t spend money” or “They can’t solve my problem.”</h3>

<p>Psychological treatments aren’t quick fixes, and they require work. Most psych treatment doesn’t involve medication, so people don’t believe it.</p>

<p>You get good grades if you have studied hard for an exam. For this, you may have paid extra tuition, and you trust that the tuition teacher can teach you something or help you in a way that would lead to faster progress. The tutor does not give you brain pills to make you smarter. Neither tutor goes and gives the exam on your behalf.</p>

<p>The tutor’s role is to help you form your thoughts through understanding so that you can pass the exam yourself. Once the exam ends, the tutor is no longer needed, and you can do something else.</p>

<p>Similarly, if you go to therapy to learn how to do psychological work so that you don’t need to go to the therapist again and again, once the problem is fixed, it’s fixed.</p>

<p>The therapist won’t solve the problems for you. But they’ll help you form your thoughts and make them more scientific.</p>

<h2 id="ending-get-it-over-with-and-go-do-something-else">Ending: Get it over with and go do something else.</h2>

<p>I started the blog post by explaining why I didn’t go to therapy. It was because I didn’t know it. I over-relied on philosophy and self-improvement and overestimated my abilities, which are less scientific than the field of psychology.</p>

<p>Therapists spend six years learning Psychology. They study human behaviours and how one can turn their day-to-day anxiety towards something a happier life. You can trust the collective knowledge of the scientists who created the field of psychology.</p>

<p>And the trust need not be naive. Work along with them. Study the concepts of psychology. Become a partner to your therapist in understanding your thoughts and behaviours and set yourself free from common psychological issues that manifest as multiple problems.</p>

<p>Then go do something else. There are more exciting things to do than remain stuck on one problem. So fix it at the source and set yourself free.</p>

<p><img src="/images/why-therapy.jpg" alt="" /></p>]]></content><author><name></name></author><category term="peace" /><category term="non-technical" /><category term="psychology" /><summary type="html"><![CDATA[Psychology and therapy are evidence-based approaches that can expedite problem-solving. Common misconceptions include the belief that therapy is unnecessary and that therapists solely resolve issues. Addressing these misconceptions aids in determining the need for therapy, either for yourself or someone you know.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/why-therapy.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/why-therapy.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Synchronous Request-Response over Kafka with Redis</title><link href="https://www.ankushchoubey.com/v1/kafka-request-response-redis/" rel="alternate" type="text/html" title="Synchronous Request-Response over Kafka with Redis" /><published>2023-09-07T00:00:00-05:00</published><updated>2023-09-07T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-kafka-request-response-redis</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/kafka-request-response-redis/"><![CDATA[<h2 id="kafka-is-async">Kafka is async</h2>

<p>Kafka is made for asynchronous communication. It’s fire and forget. Once a message is published by a producer, the producer doesn’t expect a response and will move to doing some other task.</p>

<p>The consumer consumes the message at its will and doesn’t respond back to the producer.</p>

<p>Ideally, this should be the case. Synchronous communication requires synchronous mediums and Kafka is not one.</p>

<p><img src="https://cdn.sanity.io/images/sczeoy4w/production/c0db44fb8695a8b3d3d0c32abcdeda887d121a57-1600x602.png?w=1000&amp;q=80&amp;fit=min&amp;auto=format&amp;dpr=1.5" alt="" /></p>

<p><a href="https://aiven.io/blog/kafka-simply-explained">Image Source</a></p>

<p>However, due to some reasons that I can’t explain, I had to develop a request-response scenario with Kafka. Here’s how I did it.</p>

<h2 id="correlating-request-and-response">Correlating request and response</h2>

<p>Each message sent by a producer would include a unique correlation-id. Once the message is received and processed by the consumer, it will publish a response message back to Kafka with the same correlation-id.</p>

<p>This way the producer can correlate request and response.</p>

<h2 id="implementation-details">Implementation details</h2>

<p>Suppose we have two microservices, <code class="language-plaintext highlighter-rouge">Service A</code> and <code class="language-plaintext highlighter-rouge">Service A</code>. <code class="language-plaintext highlighter-rouge">Service A</code> is accessible via REST API. Whenever a request is made on <code class="language-plaintext highlighter-rouge">Service A</code> via REST, the service publishes a message on Kafka. The <code class="language-plaintext highlighter-rouge">Service A</code> is another microservice that processes the request and its own time. <code class="language-plaintext highlighter-rouge">Service A</code> is not aware of whether <code class="language-plaintext highlighter-rouge">Service A</code> has processed the request or not.</p>

<p>Note: <code class="language-plaintext highlighter-rouge">Service A</code> is the producer and <code class="language-plaintext highlighter-rouge">Service A</code> is the consumer.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0ICBURFxuUkVTVF9BUEkgIC0tPiAgQVxuc3ViZ3JhcGggIHlvdXIgIG5ldHdvcmtcbkFbU2VydmljZSBBOiBwcm9kdWNlcl0gIC0tS2Fma2EgTWVzc2FnZS0tPiAgS2Fma2FcbkJbU2VydmljZSBCOiBDb25zdW1lcl0gIC0tIFBvbGwgS2Fma2EgZm9yIG1lc3NhZ2UtLT4gIEthZmthXG5lbmQiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p>Now, we receive a requirement that <code class="language-plaintext highlighter-rouge">Service A</code> should also respond with status of what happened on <code class="language-plaintext highlighter-rouge">Service A</code></p>

<p>To make it request a response, <code class="language-plaintext highlighter-rouge">Service A</code> will also publish a message back to a Kafka, and <code class="language-plaintext highlighter-rouge">Service A</code> will consume it. In the meantime, <code class="language-plaintext highlighter-rouge">Service A</code> should wait for <code class="language-plaintext highlighter-rouge">Service A</code> to publish the message. Once <code class="language-plaintext highlighter-rouge">Service A</code> receives the message from B, it can respond back to the rest request.</p>

<p>The problem here is there can be many replicas of <code class="language-plaintext highlighter-rouge">Service A</code> and with Kafka, we can’t predict which consumer.</p>

<p><em><strong>Here are the details</strong></em>: Suppose <code class="language-plaintext highlighter-rouge">Service A</code>: Node 1 publishes a message in Kafka. Now <code class="language-plaintext highlighter-rouge">Service A: Node 1</code>. <code class="language-plaintext highlighter-rouge">Service A</code> puts the response back into Kafka. But instead of <code class="language-plaintext highlighter-rouge">Service A: Node 1</code> receiving the Kafka message, Service A: Node 2 receives the Kafka message. So, <code class="language-plaintext highlighter-rouge">Service A: Node 1</code> will never receive the Kafka message.</p>

<p>There are two ways to fix this:</p>

<ol>
  <li>Consumer Groups</li>
  <li>Cache</li>
</ol>

<h2 id="consumer-group-approach">Consumer Group approach</h2>

<p>Set a Kafka message key such that it’ll always be processed by one microservice. This approach is much harder.</p>

<h2 id="cache-approach">Cache approach</h2>

<p>When any node of <code class="language-plaintext highlighter-rouge">Service A</code> puts a Kafka message, it adds a correlation-id. The correlation-id is unique to the Kafka message that was put and the node that put it. i.e. no other node can generate the same correlation-id.</p>

<p>Now the <code class="language-plaintext highlighter-rouge">Service A</code> node will keep polling the shared cache to see it’s there is any data against the correlationKey. If it finds any data, it’ll respond back to the rest API.</p>

<p>When the <code class="language-plaintext highlighter-rouge">Service A</code> processes the Kafka message and puts its response back into Kafka, it’ll add the same correlation-id to the response.</p>

<p>When any <code class="language-plaintext highlighter-rouge">Service A</code> node receives the Kafka message it’ll put the message into a shared cache against the distribution key.</p>

<p>Here’s how the cache would be:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
 </span><span class="nl">"uniqueCorrelationKey"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">data</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">kafka</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Since the <code class="language-plaintext highlighter-rouge">Service A</code> node is polling the shared cache it’ll find the data against its correlationKey and send that data to the client.</p>

<p>While implementing this, there may be a failure of <code class="language-plaintext highlighter-rouge">Service A</code>. In this case, <code class="language-plaintext highlighter-rouge">Service A</code> will also publish an error status as a kafka message against correlationKey.</p>

<p>Yet, it may happen that <code class="language-plaintext highlighter-rouge">Service A</code> is unable to publish the error status. In such a case, we should introduce a timeout. This could be a few seconds like 3 or 6 after which the waiting <code class="language-plaintext highlighter-rouge">Service A</code> will timeout and return a <code class="language-plaintext highlighter-rouge">503 Gateway Timeout</code>.</p>

<p>And since we are adding things to the cache and that record will not be used after the timeout, we should evict the cache after the timeout time.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5SRVNUX0FQSSAtLVNUQVJUIEhFUkU6IFxcbjAuIENsaWVudCBtYWtlcyBhIFJFU1QgQVBJLS0-IEExXG5zdWJncmFwaCB5b3VyIG5ldHdvcmtcbmNhY2hlXG5BMVtTZXJ2aWNlIEE6IE5vZGUgMV0gLS0xLiBwdWJsaXNoZXMgYSBtZXNzYWdlIHdpdGggY29ycmVsYXRpb25LZXktLT4gS2Fma2FcbkEyW1NlcnZpY2UgQTogTm9kZSAyOiBDb25zdW1lcl0gLS01LiByZXNwb25zZSBhZ2FpbnN0IGNvcnJlbGF0aW9uS2V5IC0tPiBjYWNoZVtTaGFyZWQgQ2FjaGUgbGlrZSBSZWRpc11cbkExIC0tMi4gS2VlcHMgcG9vbGluZ1xcS2Fma2FcXG5hZ2FpbnN0XFxuY29ycmVsYXRpb25LZXktLT4gY2FjaGVcbkthZmthLS00LiBNZXNzYWdlIHJlY2VpdmVkIGJ5IHNvbWUgXFxuIG5vZGUgb2YgU2VydmljZSBBIC0tPiBBMlxuS2Fma2EgLS0yLiB0aGUgbWVzc2FnZSBpcyByZWNlaXZlZCBieSBTZXJ2aWNlIEItLT4gQltTZXJ2aWNlIEJdXG5CLS0zLiBwcm9kdWNlciBSZXNwb25zZSBtZXNzYWdlIC0tPiBLYWZrYVxuY2FjaGUgLS02LiBTZXJ2aWNlIEEgcmVjZWl2ZWQgdGhlIFxcbnJlc3BvbnNlIGluIGNhY2hlLS0-IEExXG5lbmQiLCJtZXJtYWlkIjpudWxsfQ" /></p>]]></content><author><name></name></author><category term="web-development" /><category term="software-architecture" /><summary type="html"><![CDATA[Each message sent by a producer would include a unique correlation-id. Once the message is received and processed by the consumer, it will publish a response message back to Kafka with the same correlation-id.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/kafka-request-response-redis.svg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/kafka-request-response-redis.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Write Cleaner UI Tests with Page Object Model Pattern</title><link href="https://www.ankushchoubey.com/tdd/page-object-model" rel="alternate" type="text/html" title="Write Cleaner UI Tests with Page Object Model Pattern" /><published>2023-08-28T00:00:00-05:00</published><updated>2023-08-28T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/tdd/v1-page-object-model</id><content type="html" xml:base="https://www.ankushchoubey.com/tdd/page-object-model"><![CDATA[<p>I have covered many testing patterns. Some of them are <a href="https://www.ankushchoubey.com/test-data-factories/">Test Data Factories</a>, <a href="https://www.ankushchoubey.com/method-when-should/">the when/should way</a> and more. The Page Object Model complements all those patterns.</p>

<p>The Page Object Model is a great way to write clean tests for UI-related code. The POM Pattern is usable with any UI testing, selenium, react tests with enzyme or react testing library, TestCafe, Cypress or other test framework.</p>

<h2 id="a-test-without-page-object-model">A test without Page Object Model</h2>

<p>To write UI tests without a Page Object Model, follow these steps. The below example assumes React with Enzyme but can apply to any framework.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// given:</span>
 <span class="kd">const</span> <span class="p">{</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">}</span> <span class="o">=</span> <span class="nx">getSomeProps</span><span class="p">();</span>
 <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MovieListComponent</span> <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">)
</span><span class="c1">// when:</span>
 <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">div .random-css-selector:first tr th span[data-value='some data value']</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
<span class="c1">// then:</span>
 <span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">div .random-css-selector:first tr th span[data-value='some data value']</span><span class="dl">"</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">(</span><span class="dl">"</span><span class="s2">someValue</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p>The above test is miswritten on purpose to illustrate some important points.</p>

<p>The CSS selectors like <code class="language-plaintext highlighter-rouge">div .random-css-selector:first td tr span[data-value='some data value']</code> make it hard to understand what the test is for.</p>

<p>Suppose you have five things to check, meaning you’ll write five different such CSS selectors.</p>

<p>Tests repeat, resulting in encountering multiple repetitions of these similar blocks. If there are widespread changes in the UI DOM, you will need to modify them.</p>

<p>In addition, the above test could be more fluent. Fluent tests are English-like, and they make it very easy to read the test.</p>

<h2 id="a-test-with-page-object-model">A test with Page Object Model</h2>

<p>Here’s how the Page Object Model can avoid all these things.</p>

<p>The Page Object Model encapsulated everything related to a component or a page in a specific class.</p>

<p>To illustrate the POM, we can create a separate <code class="language-plaintext highlighter-rouge">MovieListPageObject</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">MovieListPageObject</span><span class="p">{</span>
 <span class="kd">constructor</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">wrapper</span><span class="p">;</span>
 <span class="p">}</span>
 <span class="nx">getColumnHeader</span><span class="p">(</span><span class="nx">index</span><span class="p">:</span> <span class="kr">number</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">selector</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">div .random-css-selector</span><span class="dl">"</span><span class="p">)</span>
       <span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">selector</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">tr th span[data-value='some data value']</span><span class="dl">"</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="nx">clickColumnHeader</span><span class="p">(</span><span class="nx">index</span><span class="p">:</span> <span class="kr">number</span><span class="p">){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getColumnHeader</span><span class="p">(</span><span class="nx">index</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
 <span class="p">}</span>
 <span class="nx">expectColumnHeaderName</span><span class="p">(</span><span class="nx">index</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">expectedValue</span><span class="p">:</span> <span class="kr">string</span><span class="p">){</span>
  <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getColumnHeader</span><span class="p">().</span><span class="nx">text</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the test, we can write:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// given:</span>
 <span class="kd">const</span> <span class="p">{</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">}</span> <span class="o">=</span> <span class="nx">getSomeProps</span><span class="p">();</span>
 <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MovieListComponent</span> <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">)
</span> <span class="kd">const</span> <span class="nx">movieListPO</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MovieListPageObject</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">);</span>
<span class="c1">// when:</span>
 <span class="kd">const</span> <span class="nx">firstColumn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
 <span class="nx">movieListPO</span><span class="p">.</span><span class="nx">clickColumnHeader</span><span class="p">(</span><span class="nx">firstColumn</span><span class="p">);</span>
<span class="c1">// then:</span>
 <span class="nx">movieListPO</span><span class="p">.</span><span class="nx">expectColumnHeaderName</span><span class="p">(</span><span class="nx">firstColumn</span><span class="p">,</span> <span class="dl">"</span><span class="s2">someValue</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>Here are the benefits seen with the above PageObjectModel.</p>

<ol>
  <li>The above test is much more English-like</li>
  <li>The POM encapsulates all the hard-to-read CSS selectors. Therefore, in case of modification, we can modify it in one place.</li>
  <li>POM can be reused in multiple tests.</li>
  <li>The POM makes tests shorter.</li>
</ol>

<h2 id="a-small-optimization">A small optimization</h2>

<p>In the above test, I’d also create a <code class="language-plaintext highlighter-rouge">mount{Component}</code> method to return the Page Object.</p>

<p><strong>Before</strong>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MovieListComponent</span> <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">)
</span> <span class="kd">const</span> <span class="nx">movieListPO</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MovieListPageObject</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Before</strong>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">const</span> <span class="nx">movieListPO</span> <span class="o">=</span> <span class="nx">mountMovieList</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MovieListComponent</span> <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">)
</span></code></pre></div></div>

<p>Declare the <code class="language-plaintext highlighter-rouge">mountMovieList</code> somewhere.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mountMovieList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">reactElement</span><span class="p">:</span><span class="nx">ReactElement</span><span class="p">)</span><span class="o">=&gt;</span> <span class="p">{</span>
 <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span><span class="nx">reactElement</span><span class="p">)</span>
 <span class="k">return</span> <span class="k">new</span> <span class="nx">MovieListPageObject</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="testing" /><category term="tdd" /><summary type="html"><![CDATA[Page Object Model can be used with any testing framework to write cleaner and simpler tests that are fast to write.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/tdd/page-object-model.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/tdd/page-object-model.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Journey Through Phase 1 Challenge of the Live Hard Program</title><link href="https://www.ankushchoubey.com/v1/phase-1" rel="alternate" type="text/html" title="Journey Through Phase 1 Challenge of the Live Hard Program" /><published>2023-08-27T00:00:00-05:00</published><updated>2023-08-27T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-phase-1</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/phase-1"><![CDATA[<h3 id="why-did-i-do-the-phase-1-challenge">Why did I do the phase 1 challenge?</h3>

<p>After 75 Hard, I was in really good shape. It might have been the best shape of my life.</p>

<p>The reason to start 75 Hard was depression. During the end of the phase, I was almost out of it.</p>

<p>I was supposed to take a 10-day break before starting phase 1. But the 10-day break turned into a 30-day break and this was because I was trying to time it with lunch with friends. That timing got postponed multiple times, so I started the challenge anyway because I had my IBS symptoms return. So I had to start the challenge again with urgency. I declared to family and friends that I’ll start the challenge. And I did.</p>

<h3 id="differences">Differences</h3>

<p>I planned how I would get everything done. I had become good solid with 75 Hard rules. Adding Phase 1 rules would be a bit challenging.</p>

<p>I listened to the podcast again and noted down the rules of the Phase 1 challenge.</p>

<p>I decided to take a picture early in the morning so that I wouldn’t fail it like last time. And I did.</p>

<p>The <a href="https://www.ankushchoubey.com/v1/75-hard">75 hard tasks</a> were the same as I did before so in this post I’ll describe the new activities.</p>

<h4 id="3-power-list">3 Power List</h4>

<p>The power list was the most ambiguous part. In some places, it was written to be 3 tasks.
And some places it was 3 additional tasks over the 5 tasks.</p>

<p>In the podcast, Andy said when ambiguous pick the hardest so I picked the 8 tasks.</p>

<p>And it was hard. I was doing my tasks till 2 AM on multiple days.</p>

<p>Later, I realized that I wasn’t prioritizing tasks early in the day. Rather I was waiting for the night before doing my tasks.</p>

<p>So, <strong>I started prioritizing my tasks early.</strong></p>

<h4 id="deleting-whatsapp-and-youtube">Deleting WhatsApp and YouTube</h4>

<p>I was over-prepared for the power list.
I deleted WhatsApp from my phone and decided not to use it for 30 days from phone. I could use it from Laptop if needed. But not the phone. 13 days before the end of the challenge, WhatsApp on my laptop got logged out and I could not log in.
I had also deleted YouTube like I did in 75 Hard.</p>

<p>Both these helped boost my focus beyond what I thought was possible.</p>

<p>A kind of monk mode.</p>

<h4 id="pomodoro">Pomodoro</h4>

<p>I started using the Pomodoro technique to help me focus. And it helped. I am using a Pomodoro to write this article too.</p>

<p><img src="/images/phase1/5.jpg" alt="" /></p>

<h4 id="kind-of-tasks-included">Kind of tasks included</h4>

<p>Listening to the podcast, I knew I could include some tasks that I was trying to make into a habit. But I could only add them for 21 days as after 21 days they get formed.</p>

<p>So I added,</p>

<ul>
  <li>Meditation for 10 minutes</li>
  <li>Sleep system (keep phone outside, make the room pitch black, AC on, put the sleep mask on, and sleep)</li>
  <li>Learning and doing power nap</li>
</ul>

<p>I hadn’t done a power nap well so I practiced the jocko way.</p>

<p>After multiple days of not sleeping properly, I realized that sleep was critical. So I had to add the sleep system and power nap to the list and both of them helped.</p>

<p>I also added tasks related to my goals: finding a new high-paying job and writing a series of blog posts on Test Driven Development. I added these too.</p>

<p>During the challenge, I had my depression up. I wasn’t able to do a lot of my other tasks if I didn’t take care of myself enough. I have been going through therapy and decided that these tasks and homework are critical too. So I added the homework and tasks as part of the power list too.</p>

<p><img src="/images/phase1/6.jpg" alt="" /></p>

<h4 id="planning-tasks">Planning tasks</h4>

<p>Initially, I had a lot of planning tasks because I didn’t know what to do as part of the power list. I needed to plan what to add.</p>

<p>These plans included:</p>

<ol>
  <li>Plan for how to find a high-paying job</li>
  <li>Plan what to add to the power list</li>
  <li>Plan Test First Test Everything Blogpost.</li>
</ol>

<p>These may seem trivial but they were critical because I lacked direction at the time. And spending time on them did help me form a proper vision for the upcoming days.</p>

<h4 id="splitting-large-tasks-to-1-pomodoro">Splitting Large Tasks to 1 Pomodoro</h4>

<p>In the case of learning tasks and coding tasks, I cannot do many tasks in a day. And if I do a learning task within a day, I will have no comprehension. So I decided to do a minimum of 25 minutes of each task. size of 1 Pomodoro.</p>

<p>This was I had 2 or 3 days of learning I could do for 25 minutes per day.</p>

<p>But I didn’t do 3 Pomodoro in a day and count it as 3 tasks. If I did 3 pomo in a day for a task it would be 1 task only. but if I do 1 pomo each day for 3 days, I would count it as 3 tasks.</p>

<p>My mind didn’t get bored because I was doing so many tasks. It wasn’t the same task. And I had my energy up.</p>

<h3 id="scrum">Scrum</h3>

<p>I started practicing scrum at the end of 75 Hard. I modified my practice and created many boards.</p>

<p>I’ll be writing a blog post on how I implemented Scrum.</p>

<p>Scrum and the Power List were perfect companions in getting my productivity up by around 5 times.</p>

<h4 id="visualization">Visualization</h4>

<p>I changed my visualization a bunch of times.</p>

<h5 id="scientific-visualization">Scientific Visualization</h5>

<p>For visualization, I listened to Andrew Huberman’s podcast on visualization. And that helped me clarify how to visualize better.</p>

<ol>
  <li>Think in first person</li>
  <li>Visualize for 7-15 seconds.</li>
  <li>Repeat the visualization multiple times</li>
  <li>Involve eye movement</li>
  <li>Keep the number of senses low.</li>
  <li>Label the visualization. Then practice saying the label before starting the activity in the real world.</li>
  <li>Visualization is not a replacement for real-world activity. But it can enhance it. And it can help preserve the activity when you are not able to do the real-world activity.</li>
  <li>Have clear start and stop signs that you visualize and imagine yourself stopping.</li>
</ol>

<h5 id="core-values">Core Values</h5>

<p>I wrote a vision of how I would implement my core values and imagine myself going through them.</p>

<p>I practiced many aspects, especially the morning routine. Over the weeks through visualization, I was able to get less groggy and being able to do morning rituals at a nice pace.</p>

<iframe width="768" height="432" src="https://miro.com/app/live-embed/uXjVM1AleJk=/?moveToViewport=-1471,-1120,3030,1917&amp;embedId=289337874145" frameborder="0" scrolling="no" allow="fullscreen; clipboard-read; clipboard-write" allowfullscreen=""></iframe>

<h5 id="modifications">Modifications</h5>

<p>I also sometimes visualize what I plan to do, or what problems I am facing and how could I solve them. These were very reflective and forward-planning sessions that were very helpful.</p>

<h5 id="app">App</h5>

<p>I used the Oak meditation app for a 10-minute visualization. I would ring after every 2 min, so I could keep my focus.</p>

<h5 id="time">Time</h5>

<p>I found EOD to be the worst time as I was too sleepy and having visualization as the last item on the list was annoying.</p>

<p>I did visualization mostly before bed. However, I experimented with morning visualization. Especially during the morning bathroom, which was the most productive. I had to force myself to visualize as I wanted to get the task off my plate so that I could sleep better.</p>

<h3 id="cold-shower">Cold shower</h3>

<p>Cold showers were the simplest. I would come home from a walk, and put on hot water first. Then put a 5-minute timer and turn cold.</p>

<p>Someday I will use music and someday I will not use music.</p>

<p>Overall it was simple.</p>

<h2 id="result">Result</h2>

<p>My weight went from 73Kgs to 69.8 Kgs.</p>

<p><img src="/images/phase1/1.jpg" alt="" /></p>

<p><img src="/images/phase1/3.jpg" alt="" /></p>

<p><img src="/images/phase1/4.jpg" alt="" /></p>

<p>My confidence went up infinitely. And it’s hard to understand why. People have been coming and talking to me. Asking me if I am a college student. They are amazed when I say, I’m 26.</p>

<ol>
  <li>I learned that 75 hard was much much easier than Phase 1. But I was able to do it fully.</li>
  <li>I lacked the focus to do tasks in the early part of the day. Which would lead to me doing tasks at the end of the day.</li>
</ol>

<p>WhatsApp is not necessary.</p>

<h3 id="its-more-fun-to-switch-between-work-and-fun-than-to-just-do-either">It’s more fun to switch between work and fun than to just do either</h3>

<p>The switch between work when doing the challenge and having fun in life when not doing the challenge really makes a big difference.</p>

<p>I couldn’t continue to work non-stop while not on the challenge. It was because I was on a challenge that I was able to complete the tasks.</p>

<p>When the challenge was over, the fun tasks that I used to enjoy became even more enjoyable. :)</p>

<h3 id="focus-in-the-early-part-of-the-day">Focus in the early part of the day</h3>

<p>I treated EOD like a deadline where all the work gets done just before the deadline.</p>

<p>This leads to a lot of stress.</p>

<p>Later I started doing work earlier in the day so that I could have more time later. :) And that helped.</p>

<h2 id="what-i-am-experimenting-to-do-after-phase-1">What I am experimenting to do after phase 1?</h2>

<p>For me, Phase 1 was not sustainable. But there were many valuable things I learned. Here are some things I have planned.</p>

<h3 id="start-consuming-protein-in-drink-form">Start consuming protein in drink form</h3>

<p>Either protein shake or sattu milkshake. This should reduce the effect of not having a diet for at least 30 days.</p>

<h3 id="continue-exercising">Continue exercising</h3>

<p>I like the gym. It’s fun and I get to meet my friends.</p>

<h3 id="do-the-5-critical-item-power-list">Do the 5 critical item power list</h3>

<p>The amount of productivity was infinite and I want to continue it.</p>

<h3 id="30-days-of-munching-and-traveling">30 days of Munching and Traveling</h3>

<p>I want to enjoy life for 30 days so I have a list of activities.</p>]]></content><author><name></name></author><category term="non-technical" /><category term="responsibility" /><summary type="html"><![CDATA[Phase 1 in the second part of the live hard program after 75 Hard. I was able to do all the tasks of 75 Hard and 3 other tasks that were needed including the 8 critical taks. In this post, I share my journey and tips.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/phase1/2.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/phase1/2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Notes on Here’s Why Trauma Is So Common (A Deep Dive Into Understanding Trauma)</title><link href="https://www.ankushchoubey.com/v1/can-not-logic-your-way-out-of-depression" rel="alternate" type="text/html" title="Notes on Here’s Why Trauma Is So Common (A Deep Dive Into Understanding Trauma)" /><published>2023-08-27T00:00:00-05:00</published><updated>2023-05-06T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-trauma-deep-dive</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/can-not-logic-your-way-out-of-depression"><![CDATA[<h2 id="before-the-notes">Before the notes</h2>

<p>I am not a psychologist or a therapist. The following are notes from a video from HealthyGamerGG. Please refer to his video for details as he explains much better than what’s written below. Use the below notes only as a revision.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/8TkbP4XfggM?si=Tm8ou-nLaWL_KOmu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p>This video can be paired up with the previous note I took on <a href="https://www.ankushchoubey.com/v1/can-not-logic-your-way-out-of-depression">You can’t logic your way out of depression.</a></p>

<h2 id="from-0009-trauma-manifests-as-so-many-problems">From 00:09 Trauma manifests as so many problems</h2>

<p>Trauma affects the whole person and whole brain and therefore it can’t be chopped into pieces.</p>

<p>Dr. K will describe the whole thing like a painting and hopefully, it clicks.</p>

<h2 id="from-0100-what-is-trauma">From 01:00 What is trauma?</h2>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/2/24/FurciferPardalisMale.JPG" alt="" /></p>

<p>By <a href="//commons.wikimedia.org/wiki/User:B.navez" title="User:B.navez">B.navez</a>; - <span class="int-own-work" lang="en">Own work</span>, <a href="http://creativecommons.org/licenses/by-sa/3.0/" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=269650">Link</a></p>

<p>Trauma is the great chameleon because it manifests as different things. It looks like different things.</p>

<h2 id="from-0150-looking-at-the-manifestations-of-trauma">From 01:50 Looking at the manifestations of trauma</h2>

<ol>
  <li><strong>Chronic Depression:</strong> Depressed their whole life. A study suggested, depression is not caused by serotonin. It is basically trauma.</li>
  <li><strong>Impulsivity</strong> or Lack of unifying direction.</li>
  <li><strong>Vulnerability to repeated mistakes</strong>. Making the same damn mistake over and over again.</li>
  <li><strong>In-ability to take risks</strong>.</li>
  <li><strong>Being a people pleaser</strong>. I don’t know how to stop.</li>
  <li><strong>Paralysis of initiation</strong>. We can’t bring ourselves to start stuff. We live life reactively or via external stimuli. (Like a NPC)</li>
  <li><strong>Can’t moderate relationships</strong>. Can’t engage in moderate relationships. Either we are BFFs, enemies, or doormats. No balance in relationships.</li>
  <li><strong>Sematic Problems</strong>: Problems with your body that aren’t medically diagnostical. IBS, Chronic Fatique Syndrome, Fibromiolge, Posture O Hypertemsive syndrome</li>
</ol>

<p>You may think that this is common stuff that everyone deals with and it turns out that it’s related to trauma.</p>

<h2 id="from-0704-analysis-of-statistics">From 07:04 Analysis of statistics</h2>

<p>ACEs: Adverse childhood experiences in 60% of people.</p>

<p>PTST: Requires 5 out of 9. (Hypervigilance, Reexprienceing, nightmares)</p>

<p>It can manifest in 1 of 9. Even if you aren’t affected.</p>

<h2 id="from-0817-why-trauma-is-so-common">From 08:17 Why trauma is so common</h2>

<p>Trauma is unique because it’s not a pathology of the brain or the mind. It’s a normal adaptation to a normal circumstance or experience.</p>

<p>Auto-immune is a pathology because the immune system is malfunctioning.</p>

<p>Bipolar is a pathology/malfunction.</p>

<p><strong>Trauma is adaptation</strong>. It’s not pathology. <strong>It’s a survival mechanism.</strong> And therefore, it’s just an attempt to adapt badly. So it can be changed.</p>

<h2 id="from-1038-how-does-our-mind-adapt-to-things">From 10:38 How does our mind adapt to things?</h2>

<p>Emotions are ment to give you a instant response. For example, if you suddently start feeling Angry, you know how to respond in the situation. It’s a body’s mechanism.</p>

<p>Eastern psychology has a better answer.</p>

<p>With sensory experience comes emotions. Emotion is a very rapid way to respond. If you are angry, you know</p>

<p><strong>Experience brings emotions</strong>. if <strong>emotions aren’t processed nicely</strong>, they <strong>sink in</strong> and they come back <strong>when the experience is similar</strong>. #trigger.</p>

<h2 id="from-1225-the-5-major-domains-that-trauma-affects">From 12:25 The 5 major domains that trauma affects</h2>

<ol>
  <li><strong>Affect</strong>: Emotions. Changes the way we relate to emotions. Especially anger and self-destructive behavior. Disregulated the way we process emotions.</li>
  <li><strong>Consciousness and atten</strong>tion. Ability to sleep and to check it. We’ll check it out.</li>
  <li><strong>Self preception</strong> or identity. The way we view ourselves</li>
  <li><strong>Relationships</strong>. Trauma is almost always put via relationships. So we changed our views on relationships.</li>
  <li><strong>Sematic</strong>. People with a lot of stress have body changes.</li>
</ol>

<h2 id="from-1439-coercive-control">From 14:39 Coercive control</h2>

<p>What does it take for something to be traumatic? An environment of coercive control.</p>

<p>Is X traumatic? It can be that not everyone in a situation experiences PTST.</p>

<p>The key aspect is coercive control.</p>

<p>From guards at a prison camp to parents or anyone, it doesn’t have to be taught how to control another human being. It’s discovered.</p>

<h2 id="from-1608-what-happens-in-the-mind-of-an-abuser">From 16:08 What happens in the mind of an abuser</h2>

<p>They want to destroy your autonomy by imposing certain kinds of limits. Here they make petty or arbitrary rules. (Do it like this because I told you so)</p>

<p>If you treat you unfairly all the time, you’ll check out. But the moment person starts to treat you nicely, you feel you are in control by not pissing the other person off. “if I behave nicely, this person will treat me nicely”.</p>

<p>i.e. Person is capable of kindness.</p>

<blockquote>
  <p>Dependence of abuser for all things good and all things bad. But if you get treats from one and bad from others we’ll go.</p>

  <p>This is love bombing</p>
</blockquote>

<p>In the mind of the abused, this person is god. This person is bestower off not having bruises on my body before bed. Abusers have unpredictability. You keep playing the game as it’s random.</p>

<p>Abusers → Casino 1.0.</p>

<h2 id="from-1917-being-dependent-on-the-abuser">From 19:17 Being dependent on the abuser</h2>

<p>As we become dependent on abusers,</p>

<ol>
  <li>Independent action becomes insubordination. (sense of autonomy gets destroyed).</li>
  <li>no room for trial and error. Can’t test the boundary. It’s about survival. (It has to be a perfect success, if it can’t be a perfect success, I can’t start.</li>
</ol>

<p>If you look for perfection before starting, it could be a trauma response.</p>

<p>People with trauma use emotional-coping mechanisms, because that’s what they feel is under control. (internal state).</p>

<p>Changing out there is futile.</p>

<h2 id="from-2123-the-correlation-between-substance-use-and-trauma">From 21:23 The correlation between substance use and trauma</h2>

<p>You carry that learning with you.</p>

<p>We fix the problem by emotional coping.</p>

<blockquote>
  <p>When things hurt, I can’t fix them on the outside.</p>

  <p>Problems are fixed by fixing emotions.</p>

  <p>So we do stuff like get addicted to substances.</p>

  <p>Cuz that’s all I know is the strategy that worked.</p>

  <p>Become a cycle.</p>
</blockquote>

<p>And it manifests as so many different things.</p>

<blockquote>
  <p>I want what other people want. I don’t know who I am.</p>

  <p>Since I have negative emotions and anger, it starts manifesting in different ways.</p>
</blockquote>

<h2 id="from-2458-solutions-for-trauma">From 24:58 Solutions for trauma</h2>

<p>Our brain is fragmented but it isn’t broken.</p>

<p>91% of BPD will be in remission in 10 years.</p>

<p><strong>Our human body and mind have automatic circuits to heal.</strong></p>

<h2 id="from-2628-safety-and-stabilization-most-important">From 26:28 Safety and Stabilization <strong>(Most important)</strong></h2>

<p>High anxiety and emotion lead to dissociation.</p>

<h3 id="stop-repeated-trauma-because-that-is-what-happens-most-time">Stop repeated trauma. because that is what happens most time.</h3>

<p>Starts by fixing the environment. Strive from independence or limitation around toxic people.</p>

<p>Can be 1 one-hour visit to a therapist at the base.</p>

<h2 id="from-2804-anxiety-emotional-coping">From 28:04 Anxiety Emotional Coping</h2>

<p>Address the disintegration</p>

<p>Evidence-based treatments</p>

<ul>
  <li>DBT: Dialectical behavior therapy (DBT): <strong>type of talk therapy for people who experience emotions very intensely</strong>.</li>
  <li>EMDR: Eye movement desensitization and reprocessing: involves moving your eyes a specific way while you process traumatic memories.</li>
</ul>

<p>Meditation and exercise can also work.</p>

<p>If you are experiencing some kind of emotion, don’t go towards an emotional coping mechanism.</p>

<p>The right hemisphere is turned off in emotional coping. We need the right hemisphere. we need emotion to solve the problem.</p>

<p><strong>Psychotherapy</strong>: We take the emotion and put it into language.</p>

<blockquote>
  <p>Language can substitute for action.</p>

  <p>Misunderstanding in society is if we have a problem, we have to fix the problem. not true.</p>
</blockquote>

<p>When you articulate, there is integration. When there is integration → flow state. Flow state → Improvement.</p>

<p>Frontal lobes plan and execute tasks, but if the corpus callosum is severed frontal lobes are not connected.</p>

<p>When people do psychotherapy, the brain integrates and you do everything.</p>

<blockquote>
  <p><strong>Language can substitute for action. Crazy but true.</strong></p>
</blockquote>

<p><em>Cognitive dissonance. If you say something, it’s hard for you not to do it.</em></p>

<p>You can’t articulate you can’t understand it. When you understand it. This is easy.</p>

<p>Integration comes from understanding. Understanding comes from articulation.</p>

<h2 id="from-3335-the-ek-tattva-abhyas-meditation">From 33:35 The Ek Tattva Abhyas meditation</h2>

<p>Take 10 min. 15 min. Just do one thing.</p>

<p>When taking a poop, poop completely.</p>

<p>When we do ek tattva abhyas, do it completely one thing. For a moment, think about nothing. 1 thing at a time. That’s it.</p>

<h2 id="from-3504-trauma-is-the-goldmine-to-transform-your-life">From 35:04 Trauma is the goldmine to transform your life</h2>

<p>Don’t give up hope cuz the majority of research says things will get better.</p>

<h2 id="trauma-is-the-goldmine-to-transform-your-life">Trauma is the goldmine to transform your life</h2>

<p>Trauma is the fundamental way we work, the way we form relationships, the way we direct, etc. Therefore, it is the great chameleon.</p>

<p>Therefore if we concur on this one thing, we’ll be so good in all areas.</p>

<h2 id="from-3615-the-reason-we-suffer">From 36:15 The reason we suffer</h2>

<p>The reason we suffer, Avindya.</p>

<p>If we don’t understand the rules of the game, it’ll be painful. Once we understand the rules, we play better.</p>

<p>If there is one thing we need to learn about how to play the game of life well, understand trauma.</p>

<h2 id="ending">Ending</h2>

<p>Hope the above notes helped.</p>]]></content><author><name></name></author><category term="peace" /><category term="non-technical" /><category term="psychology" /><summary type="html"><![CDATA[Notes from HealthyGamerGG podcast. If there is one thing we need to learn about how to play the game of life well, understand trauma.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://upload.wikimedia.org/wikipedia/commons/2/24/FurciferPardalisMale.JPG" /><media:content medium="image" url="https://upload.wikimedia.org/wikipedia/commons/2/24/FurciferPardalisMale.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TDD example for REST API - CRUD</title><link href="https://www.ankushchoubey.com/tdd/rest-api-example" rel="alternate" type="text/html" title="TDD example for REST API - CRUD" /><published>2023-08-17T00:00:00-05:00</published><updated>2023-08-17T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/tdd/tdd-rest-api-example</id><content type="html" xml:base="https://www.ankushchoubey.com/tdd/rest-api-example"><![CDATA[<p>Before reading the current blog post, make sure you have read the previous blog post on <a href="https://www.ankushchoubey.com/tdd-backend-example" title="‌">TDD example on a backend with Upsert Method</a> as it provides explains the thinking and the TDD stages in depth. The same thinking and stages would be used in this blog post but this post won’t explain those steps in depth. Rather the post will focus on providing new information specific to REST APIs.</p>

<p>Like the last post, this post will only focus on the TDD aspect and therefore will be lost on other aspects. In particular, for this post, it’s API Security and how HTTP Status and Responses are used. Though I’ll mention what could have been done better when I come to the post.</p>

<h2 id="continuing-with-the-movie-example">Continuing with the Movie example</h2>

<p>In the previous post on <a href="https://www.ankushchoubey.com/tdd-backend-example" title="‌">TDD on Upsert Method</a> we created a simple method in <strong>MovieService.java</strong> that can <strong>upsert</strong> data in the DB.</p>

<p>The signature of the methods is as follows:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">Movie</span> <span class="nf">upsert</span><span class="o">(</span><span class="nc">Movie</span> <span class="n">movieToUpsert</span><span class="o">);</span>
</code></pre></div></div>

<p>Now that we have a service method, we want to view our <code class="language-plaintext highlighter-rouge">Movie</code> in a browser. While we will cover the frontend portion of the Movies application, let’s first focus on the backend API.</p>

<p>We decide to create a simple CRUD operation on Movie. Let’s start with CREATE.</p>

<h2 id="step-1-planning">Step 1: Planning</h2>

<p>Planning is the first stage for us. The better we plan the less we’ll have to pivot later. In the upsert example, we planned and created a skeleton. Here we’ll plan and create a structure for our  APIs. This would be a mini-version of the API First Approach.</p>

<p>While, I am writing the CRUD API signatures below, in real life I can plan directly within the test file using <a href="https://www.ankushchoubey.com/method-when-should/" title="‌">api/when/should blocks</a>. You’ll see the usage of the format in the APIs below.</p>

<p>We need to CRUD for movies via REST. Our resource is <code class="language-plaintext highlighter-rouge">Movie</code> therefore our endpoint would be <code class="language-plaintext highlighter-rouge">/movies</code>.</p>

<p>CRUD has 4 parts that are captured nicely by HTTP Methods.</p>

<p>We’ll use the following:</p>

<h3 id="create">Create</h3>

<h4 id="request-format">Request Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">POST /movies
body {
 "movieId": String,
 "movieName": String
}
</span></code></pre></div></div>

<h4 id="response-format">Response Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK if successful in saving the movie
</span></code></pre></div></div>

<h3 id="read">Read</h3>

<p>For Read, we’ll have two endpoints;</p>

<h4 id="first-get-all-movies">First, get all movies</h4>

<h5 id="request-format-1">Request Format</h5>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET /movies
</span></code></pre></div></div>

<h5 id="response-format-1">Response Format</h5>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK
body [{
 {
   "movieId": "movie1",
   "movieName": "name of movie2"
 },
 {
  "movieId": "movie2",
  "movieName": "name of movie 2"
 },
 ...
}]
</span></code></pre></div></div>

<h4 id="second-to-get-a-specific-movie">Second, to get a specific movie</h4>

<h5 id="request-format-2">Request Format</h5>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET /movies/{movieId}
</span></code></pre></div></div>

<h5 id="response-format-2">Response Format</h5>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK
body {
  "movieId": String,
  "movieName": String
}
</span></code></pre></div></div>

<h3 id="update">Update</h3>

<h4 id="request-format-3">Request Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">PUT /movies/{movieId}
body {
 "movieName": String
}
</span></code></pre></div></div>

<h4 id="response-format-3">Response Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK if successful in updating the movie
</span></code></pre></div></div>

<h3 id="delete">Delete</h3>

<h4 id="request-format-4">Request Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">DELETE /movies/{movieId}
</span></code></pre></div></div>

<h4 id="response-format-4">Response Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK if successful in deleting the movie
</span></code></pre></div></div>

<p>Now that we have a plan for API signatures, we can start with writing CREATE.</p>

<h2 id="step-2-tdd-on-first-scenario-create">Step 2: TDD on First Scenario: Create</h2>

<p>In TDD, we always start with failing tests, however, in upsert as well as this blog post, we did planning first. An explicit plan helps get into TDD initially and it can serve as a good training wheel. Once you have crossed the training wheel, you can however use your test as a plan. And if you think about it, your tests are just a plan for your code will be written.</p>

<p>Some tests are easier to write without a skeleton, testing REST APIs is one of these tests.</p>

<p>We’ll start by writing a test for an endpoint that doesn’t exist. Then we’ll write the code. And then move to the next scenario.</p>

<p>As discussed before, this post will be faster-paced than the previous TDD example.</p>

<h4 id="failing-test">Failing test</h4>

<p>In Spring Boot, Controllers defined the REST APIs. We’ll start with a <strong>MovieControllerTest</strong> file.</p>

<p><strong>MovieControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="kd">class</span> <span class="nc">MovieControllerTest</span><span class="o">{</span>
 <span class="nd">@Autowired</span>
 <span class="nc">WebTestClient</span> <span class="n">webTestClient</span><span class="o">;</span>
 
 <span class="nd">@Autowired</span>
 <span class="nc">MovieRepository</span> <span class="n">movieRepository</span><span class="o">;</span>

 <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"POST /movies"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">UpsertMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD insert movie in the database"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldInsertMovieInTheDatabase</span><span class="o">(){</span>
            <span class="c1">// given: a movie</span>
            <span class="nc">Movie</span> <span class="n">unsavedMovie</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M1"</span><span class="o">,</span> <span class="s">"Avengers"</span><span class="o">);</span>
         <span class="c1">// when: POST /movies is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">post</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies"</span><span class="o">)</span>
           <span class="o">.</span><span class="na">bodyValue</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">)</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">();</span>
            <span class="c1">// then: movies should get saved in the database.</span>
                <span class="nc">Movie</span> <span class="n">movieFromDatabase</span> <span class="o">=</span> <span class="n">movieRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
                <span class="n">assertThat</span><span class="o">(</span><span class="n">movieFromDatabase</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">isNotNull</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> 
<span class="o">}</span>
</code></pre></div></div>

<p>In this test, we called a REST API, and then,</p>

<ol>
  <li>we validated if the response is 200 OK</li>
  <li>we validated if the body is not present. Because this request just adds everything to the database, it need not return anything.</li>
  <li>we check the database to see if the movie is saved.</li>
</ol>

<p>Now that we have written the test, when we run it, we’ll get a 404 NOT FOUND error because we haven’t implemented our API.</p>

<p>Let’s write the code,</p>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@RestController</span>
 <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/movies"</span><span class="o">)</span>
 <span class="kd">class</span> <span class="nc">MovieController</span><span class="o">{</span>
  <span class="nd">@Autowired</span>
  <span class="nc">MovieService</span> <span class="n">movieService</span><span class="o">;</span>

  <span class="nd">@PostMapping</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;</span> <span class="nf">postMovie</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Movie</span> <span class="n">unsavedMovie</span><span class="o">){</span>
   <span class="nc">Movie</span> <span class="n">savedMovie</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">);</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">savedMovie</span><span class="o">);</span>
  <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<p>We run the code and see that our test fails, this is because we passed the body and we were expecting no body.</p>

<p>We go ahead and modify our code.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@PostMapping</span>
  <span class="nc">ResponseEntity</span> <span class="nf">postMovie</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Movie</span> <span class="n">unsavedMovie</span><span class="o">){</span>
   <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">);</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>We run the code again, and our code passes! We switch back to code up our new scenario.</p>

<p>But before that, we remember, that for creation the response status should not be 200. <a href="https://www.ankushchoubey.com/good-rest-api-design/" title="‌">It should be 201 CREATED with a location header.</a>. So, we aren’t done yet, let’s make the change, starting first in the code.</p>

<p>PAUSE. TDD is test-first. Modifying in code isn’t test-first. So, let’s modify the #testFirst.</p>

<p>In the test, we change expecting 200 OK to 201 created and validate the location header.</p>

<p>When doing 201 CREATED, we send the location header which points to the URL to access the newly created resource. Since we will have a READ endpoint at <code class="language-plaintext highlighter-rouge">/movies/{movieId}</code>. I have pointed to this location.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// then: response should be 200 OK</span>
  <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isCreated</span><span class="o">();</span>
  <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">expectHeader</span><span class="o">(</span><span class="s">"location"</span><span class="o">,</span> <span class="s">"/movies/"</span><span class="o">+</span><span class="n">movie</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
  <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">();</span>
</code></pre></div></div>

<p>The others are short.</p>

<h3 id="read-1">Read</h3>

<p>We have two scenarios, first to get all movies and second to get a particular movie.</p>

<p>We’ll do TDD for one scenario at a time. Starting with getting all movies</p>

<p><strong>MoviesControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Autowired</span>
 <span class="nc">MovieService</span> <span class="n">movieService</span><span class="o">;</span>
 
 <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"GET /movies"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">GetMoviesMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD return all movies"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldReturnAllMoviesThatAreInDB</span><span class="o">(){</span>
            <span class="c1">// given: a few movies in the database</span>
         <span class="nc">Movie</span> <span class="n">avengers</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M1"</span><span class="o">,</span> <span class="s">"Avengers"</span><span class="o">));</span>
         <span class="nc">Movie</span> <span class="n">oppenheimer</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M2"</span><span class="o">,</span> <span class="s">"Oppenheimer"</span><span class="o">));</span>
         <span class="c1">// when: GET /movies is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">get</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies"</span><span class="o">)</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">ofType</span><span class="o">(</span><span class="k">new</span> <span class="nc">TypedReference</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;);</span>
            <span class="c1">// then: movies should get saved in the database.</span>
              <span class="n">assertThat</span><span class="o">(</span><span class="n">responseBody</span><span class="o">)</span>
               <span class="o">.</span><span class="na">hasSize</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
               <span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">avengers</span><span class="o">,</span> <span class="n">oppenheimer</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> 
</code></pre></div></div>

<p>You may have noticed I set the variables as <code class="language-plaintext highlighter-rouge">avengers</code> and <code class="language-plaintext highlighter-rouge">oppenheimer</code>. I find writing the variable names related to domain or movies <a href="https://www.ankushchoubey.com/creative-variable-names/" title="‌">keeps tests interesting and fun, and at the same time</a>, it’s closer to the actual movie domain.</p>

<p>Let’s write the code,</p>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@RestController</span>
 <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/movies"</span><span class="o">)</span>
 <span class="kd">class</span> <span class="nc">MovieController</span><span class="o">{</span>
  <span class="nd">@Autowired</span>
  <span class="nc">MovieService</span> <span class="n">movieService</span><span class="o">;</span>
  
  <span class="c1">// POST /movies code is here</span>
 
  <span class="nd">@GetMapping</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;</span> <span class="nf">getMovies</span><span class="o">(){</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">movieService</span><span class="o">.</span><span class="na">getAll</span><span class="o">());</span>
  <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<p>Actually, we forgot to add <code class="language-plaintext highlighter-rouge">getAll</code> method in the movie service. At this point, we’ll go ahead and write a <code class="language-plaintext highlighter-rouge">MovieService::getAll</code> test and then the method while following TDD.  After that’s done we’ll come to the controller test again and run it and fix it until it passes.</p>

<h2 id="lets-pause">Let’s pause</h2>

<p>I guess you get the point.</p>

<p>Every time we write the test first even if it’s a small change. And even when we need to add new methods to an existing class.</p>

<p>There is a one-on-one mapping between the code and its test. So</p>

<ul>
  <li><strong>MovieController</strong> -&gt; <strong>MovieControllerTest</strong>.</li>
  <li><strong>MovieService</strong> -&gt; <strong>MovieServiceTest</strong> (<a href="https://www.ankushchoubey.com/tdd-backend-example" title="‌">MovieService was covered in the previous post on Upsert</a>)
//TODO</li>
</ul>

<p>In the rest of the blogpost I’ll just write test and code, just glance through it to understand it. It’s pretty simple. If you have doubts, you always write a comment and I’ll respond and update the post if needed.</p>

<p>GET a single movie</p>

<p><strong>MovieControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"GET /movies/{movieId}"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">GetMoviesMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD return a single movie"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldReturnAllMoviesThatAreInDB</span><span class="o">(){</span>
            <span class="c1">// given: a few movies in the database</span>
         <span class="nc">Movie</span> <span class="n">oppenheimer</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M2"</span><span class="o">,</span> <span class="s">"Oppenheimer"</span><span class="o">));</span>
         <span class="c1">// when: GET /movies is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">get</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies/"</span><span class="o">+</span><span class="n">oppenheimer</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">())</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="nc">Movie</span> <span class="n">responseMovie</span> <span class="o">=</span> <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">ofType</span><span class="o">(</span><span class="nc">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="c1">// then: movies should get saved in the database.</span>
              <span class="n">assertThat</span><span class="o">(</span><span class="n">responseMovie</span><span class="o">)</span>
               <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">oppenheimer</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> 
</code></pre></div></div>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{movieId}"</span><span class="o">)</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;</span> <span class="nf">getMovies</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">movieId</span><span class="o">){</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">movieService</span><span class="o">.</span><span class="na">getOne</span><span class="o">(</span><span class="n">movieId</span><span class="o">));</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>We’ll do TDD for creating the <code class="language-plaintext highlighter-rouge">MovieService::getOne</code> method with the repository.</p>

<h3 id="update-1">Update</h3>

<p><strong>MovieControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"PUT /movies/{movieId}"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">GetMoviesMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD update movie name"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldReturnAllMoviesThatAreInDB</span><span class="o">(){</span>
            <span class="c1">// given: save a movie in db</span>
         <span class="nc">Movie</span> <span class="n">inception</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M3"</span><span class="o">,</span> <span class="s">"Inception"</span><span class="o">));</span>
      <span class="c1">// and: a new movie to save</span>
         <span class="nc">Movie</span> <span class="n">inceptionUpdated</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M3"</span><span class="o">,</span> <span class="s">"Inception by Christopher Nolan"</span><span class="o">));</span>
         <span class="c1">// when: GET /movies is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">put</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies/"</span><span class="o">+</span><span class="n">inception</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">())</span>
           <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">inceptionUpdated</span><span class="o">)</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="nc">Movie</span> <span class="n">responseMovie</span> <span class="o">=</span> <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">ofType</span><span class="o">(</span><span class="nc">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
       <span class="n">assertThat</span><span class="o">(</span><span class="n">responseMovie</span><span class="o">)</span>
               <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">inceptionUpdated</span><span class="o">);</span>
            <span class="c1">// then: movies should get saved in the database.</span>
            <span class="nc">Movie</span> <span class="n">inceptionFromDB</span> <span class="o">=</span> <span class="n">movieRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">inception</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
                <span class="n">assertThat</span><span class="o">(</span><span class="n">inceptionFromDB</span><span class="o">.</span><span class="na">getMovieName</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">inceptionUpdated</span><span class="o">.</span><span class="na">getMovieName</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span> 
</code></pre></div></div>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{movieId}"</span><span class="o">)</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;</span> <span class="nf">putMovies</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">movieId</span><span class="o">,</span> <span class="nd">@ResponseBody</span> <span class="nc">Movie</span> <span class="n">movie</span><span class="o">){</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="n">movieId</span><span class="o">,</span> <span class="n">movie</span><span class="o">)));</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>You may have noticed I did some duplicate bad code. I usually <a href="https://www.ankushchoubey.com/2023/01/07/Separating_Request,_Entity_and_Response.html" title="‌">separate request, response, and entity objects</a>, but this isn’t a scope for that so skipping for now.</p>

<h3 id="delete-1">Delete</h3>

<p><strong>MovieControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"DELETE /movies/{movieId}"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">DeleteMoviesMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD remove the movie from DB"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldReturnAllMoviesThatAreInDB</span><span class="o">(){</span>
            <span class="c1">// given: save a movie in db</span>
         <span class="nc">Movie</span> <span class="n">inception</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M3"</span><span class="o">,</span> <span class="s">"Inception"</span><span class="o">));</span>
         <span class="c1">// when: DELETE /movies/{movieId} is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">delete</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies/"</span><span class="o">+</span><span class="n">inception</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">())</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">();</span>
            <span class="c1">// then: movies should get saved in the database.</span>
            <span class="nc">Movie</span> <span class="n">inceptionFromDB</span> <span class="o">=</span> <span class="n">movieRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">inception</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
                <span class="n">assertThat</span><span class="o">(</span><span class="n">inceptionFromDB</span><span class="o">)</span>
           <span class="o">.</span><span class="na">isNull</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span> 
</code></pre></div></div>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{movieId}"</span><span class="o">)</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;</span> <span class="nf">deleteMovies</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">movieId</span><span class="o">){</span>
   <span class="n">movieService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">movieId</span><span class="o">);</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>Again we do TDD, do build the code.</p>

<p>I’ll be adding a GitHub link with the code as soon as I’m in the final stage of the series. It’s a #todo for me.</p>

<h2 id="closing">Closing</h2>

<p>What you may have noticed is, we never ran Postman or Swagger to test our REST APIs. We just ran the tests. And we didn’t even start the code. #todo: add a link here to the blog post on TDD RedFlags. When doing TDD we usually don’t need to start the application.</p>

<p>All that debugging time that would have taken with Postman is now a documented-automated test. That we can run many times.</p>

<p>There are a lot of things that can be done for REST API TDD. Request Validation, checking for user permissions, correct status response, etc and these things are quite standing. I’ll be writing a cheat sheet version for REST API TDD soon. #todo: link to Rest Api TDD Cheatsheet.</p>]]></content><author><name></name></author><category term="testing" /><category term="tdd" /><summary type="html"><![CDATA[Extending our Movie example creating a REST API with TDD. Scenarios covered are Create, Read, Update and Delete.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/tdd-rest-api-example.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/tdd-rest-api-example.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>