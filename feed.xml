<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2021-08-01T09:33:00-05:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Random Thoughts</subtitle><entry><title type="html">Solving N+1 Problem in Hibernate</title><link href="www.ankushchoubey.com/n-plus-one-hibernate/" rel="alternate" type="text/html" title="Solving N+1 Problem in Hibernate" /><published>2021-07-15T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/n-plus-1-hibernate</id><content type="html" xml:base="www.ankushchoubey.com/n-plus-one-hibernate/">&lt;h2 id=&quot;n1-problem&quot;&gt;N+1 Problem&lt;/h2&gt;

&lt;p&gt;If you are working with JPA entities and you have joins. Then you might have faced this problem.&lt;/p&gt;

&lt;p&gt;If you have something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@OneToMany&lt;/code&gt; mapping between a parent and a child and fetch parent. All the child entities will be fetch one by one is a kind of a loop.&lt;/p&gt;

&lt;p&gt;You can check this behavior by using the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; and then checking logs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So if you have 2 records for parent and 4 corresponding child records.&lt;/p&gt;

&lt;p&gt;A total of 2*8 separate queries wil be run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/n-plus-one.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Query Number&lt;/th&gt;
      &lt;th&gt;Purpose&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Fetch Parent Entity: id_1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_b&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Fetch Parent Entity: id_2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_d&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_e&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_f&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If similarly you have a 1000 records and 10 corresponding child records.&lt;/p&gt;

&lt;p&gt;Then 1000*10 = 10,000 queries will be run.&lt;/p&gt;

&lt;p&gt;This is inefficient.&lt;/p&gt;

&lt;p&gt;We need some way to reduce the number of query calls. Even if the amount of data is the same, the cost of running more queries is much higher that getting the same amout of work done with less number of queries.&lt;/p&gt;

&lt;h2 id=&quot;fetchmodes&quot;&gt;FetchModes&lt;/h2&gt;

&lt;p&gt;FetchModes allow you to say to Hibernate to fetch all childrens at once instead of fetching them one at the time.&lt;/p&gt;

&lt;p&gt;FetchMode is different from FetchType.EAGER or LAZY. The former is used to decides where to fetch children along with parent or later when needed.&lt;/p&gt;

&lt;h3 id=&quot;fetchmodejoin&quot;&gt;FetchMode.JOIN&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FetchMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;JOIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EntityType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One a single query will be run.&lt;/p&gt;

&lt;p&gt;If you are using this, all data will be fetch at once using join but the payload size will be huge.&lt;/p&gt;

&lt;h3 id=&quot;fetchmodesubselect&quot;&gt;FetchMode.SUBSELECT&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FetchMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUBSELECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EntityType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If used a minimum of 2 queries will be run.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One for parent @Entity&lt;/li&gt;
  &lt;li&gt;One for for each child @Entity type will be run. After the query is run all chilren of particular type will be fetched.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FetchMode.SUBSELECT is also seems to better when used to FetchType.LAZY. Here, all parent entities will be fetched first. When child entities are needed, all child entities will be fetched at once instead of multiple queries.&lt;/p&gt;</content><author><name></name></author><category term="spring-boot" /><category term="database" /><summary type="html">N+1 Problem</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My First Program</title><link href="www.ankushchoubey.com/first-program/" rel="alternate" type="text/html" title="My First Program" /><published>2021-06-16T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/first-program</id><content type="html" xml:base="www.ankushchoubey.com/first-program/">&lt;p&gt;My first piece of code was a calculator in Visual Basic. It was 2005 and I was in 4th grade. My father sat beside be and taught me how to make it.&lt;/p&gt;

&lt;p&gt;Then after a year or so, in Mumbai Mirrors Newspaper’s Sci-Tech section there was a piece on a kids programming languge called Scratch.edu.&lt;/p&gt;

&lt;p&gt;I went out playing that morning and told my friend that I’ll be building my own GTA Vice City.&lt;/p&gt;

&lt;p&gt;These are the few things I published on Scratch.&lt;/p&gt;

&lt;h1 id=&quot;mad-shark&quot;&gt;&lt;a href=&quot;https://scratch.mit.edu/projects/226045&quot;&gt;MAD Shark&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;jul-27-2008&quot;&gt;Jul 27, 2008&lt;/h2&gt;

&lt;iframe src=&quot;https://scratch.mit.edu/projects/226045/embed&quot; allowtransparency=&quot;true&quot; width=&quot;485&quot; height=&quot;402&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;exploring-the-heavens&quot;&gt;&lt;a href=&quot;https://scratch.mit.edu/projects/281470/&quot;&gt;Exploring the Heavens&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;oct-03-2008&quot;&gt;Oct 03, 2008&lt;/h2&gt;

&lt;p&gt;Frames taken from Britannica Encyclopedia.&lt;/p&gt;

&lt;iframe src=&quot;https://scratch.mit.edu/projects/281470/embed&quot; allowtransparency=&quot;true&quot; width=&quot;485&quot; height=&quot;402&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;great-american-speeches&quot;&gt;&lt;a href=&quot;https://scratch.mit.edu/projects/281482/&quot;&gt;Great AMERICAN SPEECHES&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;oct-03-2008-1&quot;&gt;Oct 03, 2008&lt;/h2&gt;

&lt;p&gt;Frames taken from Britannica Encyclopedia.&lt;/p&gt;

&lt;iframe src=&quot;https://scratch.mit.edu/projects/281482/embed&quot; allowtransparency=&quot;true&quot; width=&quot;485&quot; height=&quot;402&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;3d-project&quot;&gt;3D Project&lt;/h1&gt;

&lt;p&gt;I did not post this but I remember it well.&lt;/p&gt;

&lt;p&gt;I created a room layout. A rectangular box in middle and 3 lines from corner of image to corner of rectangle.&lt;/p&gt;

&lt;p&gt;When I pressed up key, the image zoomed in. I hoped to make more changes such that it would looked like that old Wolf Dom Game.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My first real taste of programming was first year of Diploma (11th Grade) in C language.&lt;/p&gt;</content><author><name></name></author><category term="personal" /><summary type="html">My first piece of code was a calculator in Visual Basic. It was 2005 and I was in 4th grade. My father sat beside be and taught me how to make it.</summary></entry><entry><title type="html">Art of Reducing Lines of Code in Java/Spring Boot</title><link href="www.ankushchoubey.com/clean-code-spring-boot/" rel="alternate" type="text/html" title="Art of Reducing Lines of Code in Java/Spring Boot" /><published>2021-06-12T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/spring-boot-tips</id><content type="html" xml:base="www.ankushchoubey.com/clean-code-spring-boot/">&lt;p&gt;While there are many techniques which are language agnostic, these are some of my favorites with Spring Boot.&lt;/p&gt;

&lt;h1 id=&quot;project-lombok&quot;&gt;&lt;a href=&quot;https://projectlombok.org/features/all&quot;&gt;Project Lombok&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Use this if you don’t use Spring Boot with Kotlin. This will module will reduce side of code by around 15-25%.&lt;/p&gt;

&lt;p&gt;Lombok allows you to generate java boilerplate at runtime by using Annotations such as: @ToString, @EqualsAndHashCode, @Getter/@Setter, etc.&lt;/p&gt;

&lt;p&gt;My favorite onces are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;@Data&lt;/strong&gt;: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, and @Setter on all non-final fields, and @RequiredArgsConstructor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@Cleanup&lt;/strong&gt;: Automatically calls close() method in case of Streams and Connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;requestparam-without-arguments&quot;&gt;@RequestParam without Arguments&lt;/h1&gt;

&lt;p&gt;If the name of variable is same as value in @RequestParam, remove @Request Param.&lt;/p&gt;

&lt;h1 id=&quot;remove-column-on-entity&quot;&gt;Remove @Column on @Entity&lt;/h1&gt;

&lt;p&gt;In a @Entity, if the name of variable is same name of column writing @Column is unnecessary.&lt;/p&gt;

&lt;p&gt;By doing this, not only remove a line from every variable, the quality of code is better as there is naming is consistent between DB and backend.&lt;/p&gt;

&lt;h1 id=&quot;use-jpa-repository-methods-instead-of-hibernate-entitymanagerjdbctemplate&quot;&gt;Use JPA @Repository Methods instead of Hibernate EntityManager/JdbcTemplate&lt;/h1&gt;

&lt;p&gt;Ideally your queries should be so simple such that the only type of read operation you do is simple CRUD.&lt;/p&gt;

&lt;p&gt;Such simple queries are easier to understand and are a good sign of a well designed database.&lt;/p&gt;

&lt;p&gt;Such operations are available out of the box with @Repository.&lt;/p&gt;</content><author><name></name></author><category term="clean-code" /><category term="spring-boot" /><category term="database" /><summary type="html">While there are many techniques which are language agnostic, these are some of my favorites with Spring Boot.</summary></entry><entry><title type="html">Faster SQL Batch Save in Spring Data JPA</title><link href="www.ankushchoubey.com/batch-save-spring-jpa/" rel="alternate" type="text/html" title="Faster SQL Batch Save in Spring Data JPA" /><published>2021-06-12T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/faster-write-spring-data-jpa</id><content type="html" xml:base="www.ankushchoubey.com/batch-save-spring-jpa/">&lt;p&gt;By default in Spring Data JPA, when you save a list of entities a for…loop runs storing each record one at a time.&lt;/p&gt;

&lt;p&gt;This would take a lot of time to execute. This is because the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; often needs to be fetched from database and set to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Entity&lt;/code&gt; before save. Therefore multiple transactions need to me made.&lt;/p&gt;

&lt;p&gt;You can check this behavior by using the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; and then checking logs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;speeding-up-writes&quot;&gt;Speeding Up Writes&lt;/h2&gt;

&lt;p&gt;Spring Data JPA allows for storing multiple records at once but multiple things have to be set first.&lt;/p&gt;

&lt;h3 id=&quot;1-switch-to-sequence-generator-for-primary-key&quot;&gt;1. Switch to Sequence Generator for primary key&lt;/h3&gt;
&lt;p&gt;Batch writes does not work with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenerationType.IDENTITY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make using sequence_generator&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@SequenceGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;seqName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequenceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;seqName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocationSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocationSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The {allocationSize} is how many writes you wish to do at once in case of a large list of entities.&lt;/p&gt;

&lt;h4 id=&quot;2-create-the-sequence-in-your-database&quot;&gt;2. Create the sequence in your database&lt;/h4&gt;

&lt;p&gt;Make sure that increment size is equal to {allocatedSize} used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@GenerateValue&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-add-jpa-property&quot;&gt;3. Add JPA Property&lt;/h4&gt;

&lt;p&gt;Add the following property&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.jpa.properties.hibernate.jdbc.batch_size={allocatedSize}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;within-code&quot;&gt;Within Code&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listOfEntities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-things-work-under-the-hood&quot;&gt;How things work under the hood?&lt;/h2&gt;

&lt;p&gt;Once a list of entities need to be saved, JPA will make request to database for getting the next value of sequence generator.&lt;/p&gt;

&lt;p&gt;This value will be set to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; of the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Entity&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since we already have already provided {allocationSize}, JPA knows can automatically fill in values exist between the current value of sequence generator and the next.&lt;/p&gt;

&lt;p&gt;Therefore JPA does not need to ask DB each time for the value to be set as primary key.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example:&lt;/h2&gt;

&lt;p&gt;There is a sequence which increments by 1000.&lt;/p&gt;

&lt;p&gt;We want to save a list of 500 entities to the database.&lt;/p&gt;

&lt;p&gt;JPA asks database for value of sequence.&lt;/p&gt;

&lt;p&gt;Database return value of 1.&lt;/p&gt;

&lt;p&gt;JPA knows that the next increment is at 1000 so, it can fill in values between 1 and 1000.&lt;/p&gt;

&lt;p&gt;JPA sets 1 to 500 to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; field to entities. All the entities are together sent to the DB as a single transaction.&lt;/p&gt;

&lt;p&gt;Suppose we get around want to save another 100 new entities.&lt;/p&gt;

&lt;p&gt;JPA knows the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; it set was 500 and it was 499 more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; values it can use.&lt;/p&gt;

&lt;p&gt;So it for the new 100 entities, it set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; values between 500-600 without asking Database for sequence value.&lt;/p&gt;</content><author><name></name></author><category term="spring-boot" /><category term="database" /><category term="information-system" /><summary type="html">By default in Spring Data JPA, when you save a list of entities a for…loop runs storing each record one at a time.</summary></entry><entry><title type="html">Keeping SQL DB Simple</title><link href="www.ankushchoubey.com/simple-sql-db/" rel="alternate" type="text/html" title="Keeping SQL DB Simple" /><published>2021-06-05T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/simple-sql-db</id><content type="html" xml:base="www.ankushchoubey.com/simple-sql-db/">&lt;p&gt;Around 2 years ago, I wrote a blogpost detailing how to keep backend DB Quering code simple but it missed a very critical piece which is having a simpler DB.&lt;/p&gt;

&lt;p&gt;This post highlights some of my DB preferences. A Database design is highly dependent on the application so there may not apply to every DB.&lt;/p&gt;

&lt;p&gt;You’re DB for the most part should be such that the only operation you to CRUD and simple lookups.&lt;/p&gt;

&lt;p&gt;Therefore a lot of effort should be taken to designing extremely resuable and simple tables.&lt;/p&gt;

&lt;p&gt;In one of my projects, I had created an extremely efficient data pipeline.&lt;/p&gt;

&lt;p&gt;Their were multiple views in a heirarchical tree calling one another. If you looked up on root view and applied some filters, you would get the data you want. This data needed to be inserted into a separate table so I created stored procedure to do it.&lt;/p&gt;

&lt;p&gt;In coming months, new things were added the stored procedure and it became so complex that it is now to risky to tinker with.&lt;/p&gt;

&lt;p&gt;Therefore now, I prefer DB which has no DB side functions or procedures, or if possible without views. If there is a complex query I every much prefer storing and triggering the queries from on the backend server.&lt;/p&gt;

&lt;p&gt;There shouldn’t be multiple tables doing the same job.&lt;/p&gt;

&lt;h2 id=&quot;simple-and-resuable-tables&quot;&gt;Simple and Resuable Tables&lt;/h2&gt;

&lt;h2 id=&quot;column-names&quot;&gt;Column Names&lt;/h2&gt;

&lt;p&gt;For primary key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; is enough.&lt;/p&gt;

&lt;p&gt;Many prefer using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table_name&amp;gt;_id&lt;/code&gt; as primary key but adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;table_name&lt;/code&gt; is unneccesary. We already know what table it is.&lt;/p&gt;

&lt;p&gt;In case of joins between, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table_name&amp;gt;_id&lt;/code&gt; will be same length as selecting column with dot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table_name&amp;gt;.id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, if you have just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; you can quickly identify a forignkey which has column in this format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table_name&amp;gt;_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For forign key&lt;/p&gt;

&lt;h2 id=&quot;indexing&quot;&gt;Indexing&lt;/h2&gt;

&lt;p&gt;I identify the columns which require joins or search.&lt;/p&gt;

&lt;p&gt;And then index in the order in ehich they are called most.&lt;/p&gt;

&lt;h2 id=&quot;sequences&quot;&gt;Sequences&lt;/h2&gt;

&lt;h2 id=&quot;table-with-no-stored-procedures-functions-or-views&quot;&gt;Table with No Stored Procedures, Functions or Views&lt;/h2&gt;

&lt;h2 id=&quot;liquibase-xml-format&quot;&gt;Liquibase XML Format&lt;/h2&gt;

&lt;h2 id=&quot;concepts-that-i-have-heard-of-not-used-yet&quot;&gt;Concepts that I have heard of not used yet&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;For complex things that use DB processing. use cron jobs to store data in separate table.&lt;/li&gt;
  &lt;li&gt;Make use of redis/memcache to cache things &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Database Sharding&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;TechLead &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="draft" /><category term="database" /><category term="information-system" /><summary type="html">Around 2 years ago, I wrote a blogpost detailing how to keep backend DB Quering code simple but it missed a very critical piece which is having a simpler DB.</summary></entry><entry><title type="html">Gist of DevOps</title><link href="www.ankushchoubey.com/devops/" rel="alternate" type="text/html" title="Gist of DevOps" /><published>2021-05-25T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/devops</id><content type="html" xml:base="www.ankushchoubey.com/devops/">&lt;div style=&quot;display: none&quot;&gt;

My dear younger self, 

You believed DevOps is bs and a buzzword. It kind of is. But it is highly valuable and important too.

Though you won’t always build something awesome from scratch and instead configure an existing tool to do the job, without DevOps you won’t be free to code.

You’ll spend all your time maintaining and deploying your code manually.

In this post, I’ll try to convince you why upper management likes DevOps so much.

&lt;/div&gt;

&lt;h2 id=&quot;where-did-devops-come-from&quot;&gt;Where did DevOps come from?&lt;/h2&gt;

&lt;p&gt;There are 2 separate engineers.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One who made the product -&amp;gt; Developer&lt;/li&gt;
  &lt;li&gt;The other who made sure the product is running properly -&amp;gt; Operations Engineer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Operations Engineer’s role included:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Deploying application to server&lt;/li&gt;
  &lt;li&gt;Making sure it is operating properly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Increasingly, some of the roles of Operation Engineers became so repeatable that it could be automated. Also, certain problems that operation engineer might face was much more easily handles if softwares were developed a certain way.&lt;/p&gt;

&lt;p&gt;These gave rise to DevOps.&lt;/p&gt;

&lt;h2 id=&quot;what-is-devops&quot;&gt;What is DevOps?&lt;/h2&gt;

&lt;p&gt;DevOps is a mixture if tools and practices that make it efficient to build and maintain code.&lt;/p&gt;

&lt;p&gt;Agile is what to do. DevOps is how to do.&lt;/p&gt;

&lt;p&gt;DevOps practices occupies different stages of product development and beyond.&lt;/p&gt;

&lt;p&gt;DevOps is such a broad term with loose definition that many other concepts are plugged into DevOps as a “best practice”. For example: Pair Programming.&lt;/p&gt;

&lt;p&gt;DevOps also get’s merged with security and called DevSecOps. Security is usually an afterthought. But DevSecOps aims to fix security problems in the phase that created it making it much less costly to fix it.&lt;/p&gt;

&lt;p&gt;You cannot copy another organizations DevOps structure as it is. Your organization and products are unique. Make your own style. Don’t copy everything that google or facebook do, though you can learn a lot from them.&lt;/p&gt;

&lt;p&gt;Since DevOps relies so much on automation tools, some things can be achieved faster.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Increase compliance&lt;/li&gt;
  &lt;li&gt;Streamlining of processes&lt;/li&gt;
  &lt;li&gt;Automating repeatable tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the tools and practices results to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Increasing speed of deployments
    &lt;ul&gt;
      &lt;li&gt;Very important to stay ahead of competition even if core of business is not software.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Increasing quality of software
    &lt;ul&gt;
      &lt;li&gt;Allowing making changes easily and reducing bugs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reducing cost of discovery and fixing issues
    &lt;ul&gt;
      &lt;li&gt;Bugs discovered faster can be fixed early&lt;/li&gt;
      &lt;li&gt;All this reduces downtime.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some DevOps practices and accompanying tool that are very helpful are.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Build Automation: Jenkins&lt;/li&gt;
  &lt;li&gt;DB Automation: Liquibase, Flyway&lt;/li&gt;
  &lt;li&gt;Code Linting: Sonar, CAST&lt;/li&gt;
  &lt;li&gt;Continuous Integration (CI)&lt;/li&gt;
  &lt;li&gt;Continuous Delivery (CD)&lt;/li&gt;
  &lt;li&gt;Continuous Deployment (CD)&lt;/li&gt;
  &lt;li&gt;Continuous Monitoring: ELK, Databriks&lt;/li&gt;
  &lt;li&gt;API Management: Mulesoft&lt;/li&gt;
  &lt;li&gt;Test Driven Development (TDD)&lt;/li&gt;
  &lt;li&gt;Behavious Driven Development (BDD)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll be writing posts on these when I have enough experience working with each.&lt;/p&gt;</content><author><name></name></author><category term="devops" /><category term="information-system" /><summary type="html"></summary></entry><entry><title type="html">Applications of Recommender Systems</title><link href="www.ankushchoubey.com/recommender-systems/" rel="alternate" type="text/html" title="Applications of Recommender Systems" /><published>2021-05-16T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/recommender-systems</id><content type="html" xml:base="www.ankushchoubey.com/recommender-systems/">&lt;p&gt;&lt;img src=&quot;/images/recommender-systems.jpg&quot; alt=&quot;&quot; /&gt;
Photo by &lt;a href=&quot;https://unsplash.com/@charlesdeluvio?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Charles Deluvio&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/suggestion?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recommender systems are easiest and probably most lucritive ML Application.&lt;/p&gt;

&lt;p&gt;The whole of social media, content sites and E-Commerce Companies are built around it.&lt;/p&gt;

&lt;p&gt;The goal is said to be to provide right information at the right time and avoiding information overload. The statement seems ideal and a recommender system can be made to work such a way.&lt;/p&gt;

&lt;p&gt;Most often for consumer facing products, the real reason is the opposite. Keep people hooked to using the product for longer.&lt;/p&gt;

&lt;p&gt;In social media, it would be used to recommended content/people similar to once you are viewing or something you might like.&lt;/p&gt;

&lt;p&gt;For E-Commerce companies, the focus is on recommended you the product you’ll likely purchase.&lt;/p&gt;

&lt;p&gt;Recommender systems are also used at a smaller scale like Keyboard Suggestions on your phone.&lt;/p&gt;

&lt;p&gt;For Enterprise, recommender systems can help improve productivity by a lot.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;By having documents/data grouped, the right information can found faster.&lt;/li&gt;
  &lt;li&gt;By having similar documents groups/recommended, comparing between documents can be made simpler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommender Systems often require much less data to operate than other Machine/Deep Learning problems.&lt;/p&gt;</content><author><name></name></author><category term="applications-of-ml" /><category term="information-system" /><summary type="html">Photo by Charles Deluvio on Unsplash</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/recommender-systems.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/recommender-systems.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Gist of Cryptocurrencies</title><link href="www.ankushchoubey.com/crypto/" rel="alternate" type="text/html" title="Gist of Cryptocurrencies" /><published>2021-05-07T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/gist-of-cryptocurrency</id><content type="html" xml:base="www.ankushchoubey.com/crypto/">&lt;p&gt;&lt;img src=&quot;/images/crypto.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@nick604?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Nick Chong&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/crypto?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;INFO: Economics (specially Macro economics) and effects of each and every minor details is beyond my understanding. So I may be off in this post&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;money&quot;&gt;Money&lt;/h2&gt;

&lt;p&gt;Money 💰 is a form of value.&lt;/p&gt;

&lt;p&gt;A money is valid only if enough people are willing to enchange it for goods/services.&lt;/p&gt;

&lt;p&gt;Once upon a time, sea shells 🐚 were used as value/money. But sea shells or other exhanges were hard to carry so later inventions such as coins, then cash and now money also includes numbers in a computer followed.&lt;/p&gt;

&lt;h2 id=&quot;value-of-money&quot;&gt;Value of Money&lt;/h2&gt;

&lt;p&gt;Money is only valuable when it is limited. If there is infinite money, the value of each individual unit will reduce and you need more money in exchange of same value.&lt;/p&gt;

&lt;h4 id=&quot;simplified-example&quot;&gt;Simplified example&lt;/h4&gt;

&lt;p&gt;Imagine there if there is 1000 unit of a currency in circulation.&lt;/p&gt;

&lt;p&gt;At this place, 1 unit buys you a house.&lt;/p&gt;

&lt;p&gt;Let’s suppose, the government decided to print more money and now 1000 more printed units are being added.&lt;/p&gt;

&lt;p&gt;Now, the same house will hypothetically require 2 units of currency.&lt;/p&gt;

&lt;p&gt;The value of single unit was reduced by half.&lt;/p&gt;

&lt;h2 id=&quot;commodity-currency&quot;&gt;Commodity Currency&lt;/h2&gt;
&lt;p&gt;To avoid this, previously gold was used to set an upper limit. For each note you could exchange it for a real gold kept somewhere safe. This is called commodity currency.&lt;/p&gt;

&lt;p&gt;There were even gold coins. If you had gold even if you don’t believe in the currency, you could still use it in other ways because gold was valuable.&lt;/p&gt;

&lt;h2 id=&quot;fiat-currency&quot;&gt;Fiat Currency&lt;/h2&gt;

&lt;p&gt;But around 1960s in US, gold was removed because governments could not simply print money to pay of their debts.&lt;/p&gt;

&lt;p&gt;This got called as Fiat currency. The current which has no backing. Enough people believe in the value of the fiat currency, therefore it is used ad money.&lt;/p&gt;

&lt;p&gt;Essentially with fiat currency like dollar, government make life easier for them but at the same time make life difficult for normal people holding the money.&lt;/p&gt;

&lt;h2 id=&quot;cryptocurrencies&quot;&gt;Cryptocurrencies&lt;/h2&gt;

&lt;p&gt;Cryptocurrencies remove this power from the government and aim to decentralize it amoung individuals.&lt;/p&gt;

&lt;p&gt;Bitcoin has an upper limit. There can never be more 21 million and inflation in Bitcoin is accurately predictable.&lt;/p&gt;

&lt;p&gt;Governments cannot just control how many bitcoins or another other decentralized currency are exchanged.&lt;/p&gt;

&lt;p&gt;Money for most of history was believed and regulated by the free market. It is only in recent history that it became highly regulated and centralized by governments.&lt;/p&gt;

&lt;p&gt;Cryptocurrencies can only succeed as long as enough people believe it is valid.&lt;/p&gt;</content><author><name></name></author><category term="blockchain" /><category term="information-system" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/crypto.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/crypto.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Tough</title><link href="www.ankushchoubey.com/tough/" rel="alternate" type="text/html" title="Tough" /><published>2021-05-04T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/tough</id><content type="html" xml:base="www.ankushchoubey.com/tough/">&lt;p&gt;I used to love Deep Learning and wanted it to be my career option.&lt;/p&gt;

&lt;p&gt;I learned it for many about 2 years. After work, sitting for an hour or two. There were often weeks when I understood nothing. I was early in my career then and things would likely be different of I try things out now.&lt;/p&gt;

&lt;p&gt;Though I never used Deep Learning as a job, there are a few skills I learned that have persisted.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Watching Videos at 2x Speed&lt;/li&gt;
  &lt;li&gt;Understanding many technological field&lt;/li&gt;
  &lt;li&gt;Grasping hard technological concepts much faster&lt;/li&gt;
  &lt;li&gt;Pushing through a mental limit break&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is immense upside to doing hard things even if they are not directly use.&lt;/p&gt;

&lt;p&gt;Indirectly doing hard things changes us for the better.&lt;/p&gt;</content><author><name></name></author><category term="philosophical" /><category term="for-future-me" /><category term="personal" /><summary type="html">I used to love Deep Learning and wanted it to be my career option.</summary></entry><entry><title type="html">Quick Refactoring Tips</title><link href="www.ankushchoubey.com/refactoring/" rel="alternate" type="text/html" title="Quick Refactoring Tips" /><published>2021-05-04T00:00:00-05:00</published><updated>2021-08-01T09:31:30-05:00</updated><id>www.ankushchoubey.com/refactoring-tips</id><content type="html" xml:base="www.ankushchoubey.com/refactoring/">&lt;p&gt;It may be good to have unit test cases&lt;/p&gt;

&lt;p&gt;Study the code layout.&lt;/p&gt;

&lt;p&gt;Create base classes, Interfaces etc&lt;/p&gt;

&lt;p&gt;Create your own library&lt;/p&gt;

&lt;p&gt;Make Copy of Class files before modifying.&lt;/p&gt;

&lt;p&gt;Refactoring is easier with Injectables. Just create a new class.&lt;/p&gt;

&lt;p&gt;Commit in small increments.&lt;/p&gt;

&lt;p&gt;Continuously Integrate your code&lt;/p&gt;

&lt;p&gt;Refactor one functionality at a time instead of everything at once.&lt;/p&gt;</content><author><name></name></author><category term="information-system" /><category term="for-future-me" /><summary type="html">It may be good to have unit test cases</summary></entry></feed>