<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2022-01-26T01:21:54-06:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Random Thoughts</subtitle><entry><title type="html">Post Format</title><link href="www.ankushchoubey.com/post-format/" rel="alternate" type="text/html" title="Post Format" /><published>2050-09-26T00:00:00-05:00</published><updated>2021-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/post-format</id><content type="html" xml:base="www.ankushchoubey.com/post-format/">&lt;p&gt;&lt;img src=&quot;/images/switch-jobs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;writing-steps&quot;&gt;Writing Steps&lt;/h2&gt;

&lt;p&gt;If I write from POV that how I got the this idea and how I thought about it, readers will know thinking behing an idea and not just the preachiness. Plus, I’ll always have the right words to write.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Done&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Structure Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Written&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Edited&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Grammar Check Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Perfect Grammarly Score:&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Added  https://www.canva.com/&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Links to Other Posts if Any&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tags Added&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Released Publically&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="draft" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Time Assets and Liabilities</title><link href="www.ankushchoubey.com/time-assets-and-liabilities/" rel="alternate" type="text/html" title="Time Assets and Liabilities" /><published>2022-01-26T00:00:00-06:00</published><updated>2021-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/time-assets-liabilities</id><content type="html" xml:base="www.ankushchoubey.com/time-assets-and-liabilities/">&lt;p&gt;Time is the most precious finite resource we have. We should make good use of it. If we do, we make time our ally.&lt;/p&gt;

&lt;p&gt;Like any resource, one can think of time in numeric terms. This allows us to categorize activities as assets that add back time or liabilities, which take time away. Our goal then is to create more time-assets with high time-ROI.&lt;/p&gt;

&lt;p&gt;80% of our activities during a given day are not new. They are merely routines.&lt;/p&gt;

&lt;p&gt;So essentially, carefully observing, choosing, and forming our habits would lead to more &lt;strong&gt;time-assets&lt;/strong&gt; and less &lt;strong&gt;time-liabilities&lt;/strong&gt;. Usually, time-assets and time-liabilities are opposites of each other.&lt;/p&gt;

&lt;p&gt;Most time-liabilities snap our attention and lead us to care about wrong things. Therefore, time-assets help us course correct. Therefore, time management is closely linked to attention management.&lt;/p&gt;

&lt;p&gt;Some of the most impactful time-assets and liabilities are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Time-Assets&lt;/th&gt;
      &lt;th&gt;Time Liabilities&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Planning&lt;/strong&gt;: Even a little bit of planning, something like 10 minutes alone creating a written plan could save hours, days, or even years. &lt;br /&gt;&lt;br /&gt;Planning allows course correction. Ideally, don’t start working without a plan.&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Rushing&lt;/strong&gt;: Though it may seem you are making progress. The probability is higher that you are moving in the wrong direction. It’s better to fix a plan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Meditation&lt;/strong&gt;:&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Instagram&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;5 Min Rule&lt;/strong&gt;: Don’t allow yourself to be down or procrastinate for more than 5 minutes. &lt;br /&gt;&lt;br /&gt;During such time ask yourself: Is this worth the return on my time?&lt;br /&gt;&lt;br /&gt;Remember you can’t live forever.&lt;/td&gt;
      &lt;td&gt;Forever Rule: &lt;strong&gt;The opposite of 5 min rule&lt;/strong&gt;: Letting fear/laziness/indecision stop you.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;WIP Limit&lt;/strong&gt;: Focus on a few things and complete them. If your WIP limit is exceeded, don’t add work on newer tasks unless older ones are complete.&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Trying to change people&lt;/strong&gt;: You cannot change people. You can suggest but cannot force. Leading by example. It’s the best option you have.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Pomodoro&lt;/strong&gt;: Working in Pomodoros keeps you focused. If you can’t work with Pomodoro, you haven’t planned carefully enough.&lt;br /&gt;&lt;br /&gt;To have Pomodoro sessions.&lt;br /&gt;1. Create a distraction-free zone.&lt;br /&gt;2. Plan your tasks. Ideally, pick a deliverable.&lt;br /&gt;3. Put on headphones and play instrumental/&lt;a href=&quot;https://www.youtube.com/playlist?list=PLx65qkgCWNJIs3FPaj8JZhduXSpQ_ZfvL&quot;&gt;focus music&lt;/a&gt;.&lt;br /&gt;4. Work on the task using &lt;a href=&quot;https://pomofocus.io/&quot;&gt;a Pomodoro app&lt;/a&gt;.&lt;br /&gt;5. Stick to break schedule religiously. Get away from the room during the break but no internet. &lt;br /&gt;&lt;br /&gt;One Pomodoro is better than zero Pomodoro.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;During normal decision-making, one can calculate the ROI of their actions: think about how much time you’ll invest and how much return you’ll get back. This calculation needs to be a specific number in terms of both hours and percentage even if it’s an estimate.&lt;/p&gt;</content><author><name></name></author><category term="core-values" /><category term="time-matters" /><category term="philosophical" /><summary type="html">Time is the most precious finite resource we have. We should make good use of it. If we do, we make time our ally.</summary></entry><entry><title type="html">Maintaining Documentation</title><link href="www.ankushchoubey.com/documentation/" rel="alternate" type="text/html" title="Maintaining Documentation" /><published>2022-01-25T00:00:00-06:00</published><updated>2022-01-25T14:52:08-06:00</updated><id>www.ankushchoubey.com/documentation</id><content type="html" xml:base="www.ankushchoubey.com/documentation/">&lt;p&gt;We ideally want to write code so well that someone reading the code can understand it in one go.&lt;/p&gt;

&lt;p&gt;But the ideal isn’t always practical in the real world because people come from different backgrounds and experiences.&lt;/p&gt;

&lt;p&gt;So, you want to make sure your documentation is as perfect as possible given the project scope.&lt;/p&gt;

&lt;p&gt;If the API/Library is going to be used by the public, it needs to be perfect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2022-01-25-documentation/shared-between-single-team-multiple.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The biggest problem is maintaining up-to-date documentation. These are a few things I have learned recently about this:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: left; width: 300px;&quot; src=&quot;https://docs.google.com/drawings/d/e/2PACX-1vS1EYND3yzq_zmJEZ1rEJogTD9tbXucE2k33rcUYIVTcA2ZQZlYfPf_MSVk8kvHZhjcKo7fByRiXFpy/pub?w=453&amp;amp;h=723&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-the-best-way-to-document-is-to-automate&quot;&gt;1. The best way to document is to automate&lt;/h2&gt;

&lt;p&gt;Tools like Swagger for APIs and storybook from UI components make it very easy to auto-document code in most cases.&lt;/p&gt;

&lt;h2 id=&quot;2-encourage-use-of-your-own-documentation&quot;&gt;2. Encourage use of your own documentation&lt;/h2&gt;

&lt;p&gt;Using your own documentation would help you find and fix bugs in it.&lt;/p&gt;

&lt;p&gt;For example, You could encourage your team to use Swagger UI instead of Post Man for testing APIs.&lt;/p&gt;

&lt;h2 id=&quot;3-for-within-the-team-have-a-shared-wiki&quot;&gt;3. For within the team: Have a shared wiki&lt;/h2&gt;

&lt;p&gt;Wiki helps keep everyone in sync and like the previous point, encourages updations wherever necessary.&lt;/p&gt;

&lt;h2 id=&quot;4-tests-are-also-documentation-of-sorts-but-for-the-internal-team-only&quot;&gt;4. Tests are also documentation of sorts but for the internal team only.&lt;/h2&gt;

&lt;p&gt;Tests capture what the code would do. So for a new dev on a team, going and reading through tests can give him an idea of what the code does.&lt;/p&gt;</content><author><name></name></author><category term="clean-code" /><summary type="html">We ideally want to write code so well that someone reading the code can understand it in one go.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://docs.google.com/drawings/d/e/2PACX-1vS1EYND3yzq_zmJEZ1rEJogTD9tbXucE2k33rcUYIVTcA2ZQZlYfPf_MSVk8kvHZhjcKo7fByRiXFpy/pub?w=453&amp;amp;h=723" /><media:content medium="image" url="https://docs.google.com/drawings/d/e/2PACX-1vS1EYND3yzq_zmJEZ1rEJogTD9tbXucE2k33rcUYIVTcA2ZQZlYfPf_MSVk8kvHZhjcKo7fByRiXFpy/pub?w=453&amp;amp;h=723" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Writing Clean and Fast Unit Tests</title><link href="www.ankushchoubey.com/clean-fast-unit-tests/" rel="alternate" type="text/html" title="Writing Clean and Fast Unit Tests" /><published>2022-01-02T00:00:00-06:00</published><updated>2022-01-02T14:52:08-06:00</updated><id>www.ankushchoubey.com/formatting-tests</id><content type="html" xml:base="www.ankushchoubey.com/clean-fast-unit-tests/">&lt;p&gt;Clean tests are as important as clean code. Same kind of principles apply here.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Test only what is neccessary&lt;/li&gt;
  &lt;li&gt;Keep code clean&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;while TDD, is shown to keep test cases to a minimum, this post explains some other ways tests can be organize&lt;/p&gt;

&lt;h1 id=&quot;group-tests-together&quot;&gt;Group Tests Together&lt;/h1&gt;

&lt;p&gt;You should group your tests together. This would make it easier to find your tests&lt;/p&gt;

&lt;p&gt;Junit and Jest both allow for grouping of tests.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In JUnit 5 you can use @NestClasses&lt;/li&gt;
  &lt;li&gt;In Jest you can use describe&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example:&lt;/h2&gt;

&lt;h3 id=&quot;junit&quot;&gt;JUnit:&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainTestClass&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Group of tests&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MethodNameTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jest&quot;&gt;Jest:&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Group of tests&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;


    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;have-global-mocksstub-object&quot;&gt;Have global mocks/stub object&lt;/h1&gt;

&lt;p&gt;Your tests should be as small as possible. Rather than create objects in every test method, Create a dummy stub and use it in all subsiqueny tests&lt;/p&gt;

&lt;p&gt;In Junit you can have @BeforeEach and @BeforeAll annotations to have methods run before each test case or test class.&lt;/p&gt;

&lt;h1 id=&quot;mock-object&quot;&gt;Mock object&lt;/h1&gt;

&lt;h2 id=&quot;naming&quot;&gt;Naming&lt;/h2&gt;

&lt;p&gt;In case I am testing a positive response, I usually name variable as such.&lt;/p&gt;

&lt;p&gt;If it is a variable which is bad, prefix it with bad&lt;/p&gt;

&lt;p&gt;example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;idealHttpHeader&lt;/li&gt;
  &lt;li&gt;goodFuture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it’s a bad response,&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;badHttpHeader&lt;/li&gt;
  &lt;li&gt;badHttpHeaderWithoutContentType&lt;/li&gt;
  &lt;li&gt;badFuture&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;never-generate-random-inputs-always-use-fixed-values-&quot;&gt;Never generate random inputs. Always use fixed values. &lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h1 id=&quot;start-with-method_should__whenwith_-or-itshould__when_&quot;&gt;Start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method_should_&amp;lt;&amp;gt;_when/with_&amp;lt;&amp;gt;()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;itShould_&amp;lt;&amp;gt;_When_&amp;lt;&amp;gt;&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;This makes you focus on exactly what you are testing.&lt;/p&gt;

&lt;p&gt;Though you can remove the should part too.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;GroupName: Add function&lt;/li&gt;
  &lt;li&gt;TestName: Should work with negative values: add_shouldWork_withNegativeValues&lt;/li&gt;
  &lt;li&gt;TestName: Should work with positive values: add_shouldWork_withPositiveValues&lt;/li&gt;
  &lt;li&gt;TestName: Should work with floating point values: add_shouldWork_withFloatingPoint&lt;/li&gt;
  &lt;li&gt;TestName: Should raise exception when input is null: add_shouldRaiseException_whenInputisNull&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;given-when-then&quot;&gt;Given When Then&lt;/h1&gt;

&lt;p&gt;Given When then is how most tests are written.&lt;/p&gt;

&lt;p&gt;Start the tests which fixing the input values and mocking -&amp;gt; Given
Call the function in test -&amp;gt; when
Assert Responses -&amp;gt; then&lt;/p&gt;

&lt;h1 id=&quot;size-of-tests-should-be-less-than-size-of-your-display&quot;&gt;Size of tests should be less than size of your display&lt;/h1&gt;

&lt;p&gt;This is a useful guideline which applies to a normal clean code too.&lt;/p&gt;

&lt;h2 id=&quot;assertions&quot;&gt;Assertions&lt;/h2&gt;

&lt;p&gt;Best Practice: One logical assertion per test method. &lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Have clear error messages &lt;sup id=&quot;fnref:5:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Aim for asserting behavior and not implementation detail. More coupled your tests are with implementation, harder the refactoring would be.&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&quot;writing-tests-that-run-fast&quot;&gt;Writing tests that run fast&lt;/h1&gt;

&lt;h2 id=&quot;time-complexity-of-tests-shoud-be-o1-&quot;&gt;Time complexity of tests shoud be O(1) &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Cyclomatic time complexity of your tests should be O(1).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No loops&lt;/li&gt;
  &lt;li&gt;No if statements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;for-spring-boot&quot;&gt;For Spring Boot&lt;/h2&gt;

&lt;h3 id=&quot;initialize-only-beans-you-need-using-contextconfiguration-&quot;&gt;Initialize only beans you need using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ContextConfiguration&lt;/code&gt; &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ContextConfiguration&lt;/code&gt; won’t start the whole spring infrastructure. This making your tests faster.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=fr1E9aVnBxw&quot;&gt;YouTube: DevOxx: Effective Unit Testing by Eliotte Rusty Harold&lt;/a&gt; (This includes tips on debugging and refactoring) &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:5:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.testim.io/blog/unit-testing-best-practices/&quot;&gt;Unit Testing Best Practices: 9 to Ensure You Do It Right&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://cucumber.io/blog/bdd/getting-started-with-bdd-part-1/&quot;&gt;Cucumber: Blog: Getting Started with BDD (Part 1)&lt;/a&gt; &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=W40mpZP9xQQ&quot;&gt;YouTube: Continous Delivery: The 3 Types of Unit Test in TDD&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Ekr4jxOIf4c&quot;&gt;YouTube: Defog Tech: Spring Boot - Testing basics&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="clean-code" /><category term="testing" /><summary type="html">Clean tests are as important as clean code. Same kind of principles apply here.</summary></entry><entry><title type="html">Thoughts on Test Driven Development</title><link href="www.ankushchoubey.com/tdd/" rel="alternate" type="text/html" title="Thoughts on Test Driven Development" /><published>2021-12-24T00:00:00-06:00</published><updated>2021-12-24T14:52:08-06:00</updated><id>www.ankushchoubey.com/tdd</id><content type="html" xml:base="www.ankushchoubey.com/tdd/">&lt;p&gt;Software engineering isn’t only about code. It’s engineering&lt;/p&gt;

&lt;p&gt;TDD need not be a big deal. It can seem cubersome but there are mindsets and tools that can make transition smoother.&lt;/p&gt;

&lt;p&gt;TDD is shown to reduce defectsby a large margin. Tests will save you time in the long run.&lt;/p&gt;

&lt;p&gt;There are my initial thoughts on test driven development.&lt;/p&gt;

&lt;h2 id=&quot;why-tdd&quot;&gt;Why TDD?&lt;/h2&gt;

&lt;p&gt;If you are doing TDD, you do not need to setup and interact external systems before implementation.&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; You can use their mocks.&lt;/p&gt;

&lt;p&gt;Both tests and code is cleaner and precise.&lt;/p&gt;

&lt;h2 id=&quot;the-three-laws-of-tdd&quot;&gt;The Three Laws of TDD&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;You are not allowed to write any production code unless it is to make a failing unit test pass.&lt;/li&gt;
  &lt;li&gt;You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.&lt;/li&gt;
  &lt;li&gt;You are not allowed to write any more production code than is sufficient to pass the one failing unit test.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-tdd&quot;&gt;How to TDD?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Assume the test will work properly, what is the minimum test? Write that test.&lt;/li&gt;
  &lt;li&gt;Fix compilation errors if any. &lt;sup id=&quot;fnref:1:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Write minimum code required to pass the test.&lt;/li&gt;
  &lt;li&gt;Run all the tests&lt;/li&gt;
  &lt;li&gt;Iterate&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;making-tdd-easier&quot;&gt;Making TDD easier&lt;/h1&gt;

&lt;h2 id=&quot;usually-tdd-can-be-cumbersome-because&quot;&gt;Usually TDD can be cumbersome because:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Testing is extra code&lt;/li&gt;
  &lt;li&gt;You have to switch between current code and tests&lt;/li&gt;
  &lt;li&gt;you have to rerun tests&lt;/li&gt;
  &lt;li&gt;No one does it&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mitigrations&quot;&gt;Mitigrations&lt;/h2&gt;

&lt;h3 id=&quot;1-tdd-is-a-todo-list-of-feature-to-do&quot;&gt;1. TDD is a todo list of feature to do&lt;/h3&gt;

&lt;p&gt;By writing test first, you get clear on what you want to implement. This leads to better design.&lt;/p&gt;

&lt;h3 id=&quot;2-switch-between-testing-and-code-easily&quot;&gt;2. Switch between testing and code easily&lt;/h3&gt;

&lt;p&gt;In intellij press Ctrl + Shift + T
for vs code : https://marketplace.visualstudio.com/items?itemName=Acino.jump-source&lt;/p&gt;

&lt;h3 id=&quot;3-rerun-tests-automatically&quot;&gt;3. Rerun tests automatically&lt;/h3&gt;

&lt;p&gt;On local: have tests run automatically after each save&lt;/p&gt;

&lt;p&gt;Given when tehn
Search for libraries that make easier to test&lt;/p&gt;

&lt;h3 id=&quot;4-no-one-does-it&quot;&gt;4. No one does it&lt;/h3&gt;

&lt;p&gt;Yeah. It takes times to learn. TDD/any development practice is easier when whole company is aiming at it or enforcing it.&lt;/p&gt;

&lt;p&gt;https://spring.io/guides
https://daveceddia.com/what-to-test-in-react-app/
https://daveceddia.com/getting-started-with-tdd-in-react/&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;draft&lt;/p&gt;

&lt;p&gt;write experimental/learning code in a separate project. but always write production code with TDD.&lt;/p&gt;

&lt;p&gt;fast feedback&lt;/p&gt;

&lt;p&gt;find fastest and tighest feedback&lt;/p&gt;

&lt;p&gt;TDD leads to fast feedback&lt;/p&gt;

&lt;p&gt;to refactor you need really good tests&lt;/p&gt;

&lt;p&gt;seeing a test fail is a test that feature is not implemented. sometimes it may happen that the new test passes which means the feature is already implemented and you had forgotten to assert it. or your system is not working properly.&lt;/p&gt;

&lt;p&gt;“I don’t know what I am going to build” 
business? -&amp;gt; ask them for clarificaiton
logic -&amp;gt; get away from screen and plan properly 
side effect -&amp;gt; read documentation. write a lot of little program. repl command line interface to test/learn libraries. jshell?&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/watch?v=9-cyC6O81Bk&lt;/p&gt;

&lt;p&gt;// it’s hard to decide what to test when you are writing tests later
if you write tests later, you do it for what is working.&lt;/p&gt;

&lt;p&gt;TDD only that much functionality and nothing more
only test what’s within the class. not outside it [ANkush]&lt;/p&gt;

&lt;p&gt;mentally it can be worth thinking as red green refactor as checklist&lt;/p&gt;

&lt;p&gt;refactoring while doing tdd&lt;/p&gt;

&lt;p&gt;read the tests first&lt;/p&gt;

&lt;p&gt;// it’s hard to decide what to test when you are writing tests later
if you write tests later, you do it for what is working.&lt;/p&gt;

&lt;p&gt;ATDD: THe team decides acceptance criteria first before implementing 
acceptance criteria should be defined well for each story. Tips:&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAAAGmNOsBErk1_7cbjUHllOPVUE5M-NvcOKc/?lipi=urn%3Ali%3Apage%3Ad_flagship3_feed%3Bd5ZjyftfQoKiUju1OpMyEA%3D%3D&quot;&gt;Anadi Misra&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="testing" /><category term="clean-code" /><category term="draft" /><summary type="html">Software engineering isn’t only about code. It’s engineering</summary></entry><entry><title type="html">Angular and React Comparison</title><link href="www.ankushchoubey.com/angular-react-comparison/" rel="alternate" type="text/html" title="Angular and React Comparison" /><published>2021-12-04T00:00:00-06:00</published><updated>2021-12-04T14:52:08-06:00</updated><id>www.ankushchoubey.com/angular-react-comparison</id><content type="html" xml:base="www.ankushchoubey.com/angular-react-comparison/">&lt;p&gt;&lt;img src=&quot;/images/angular-react-comparison.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Angular and React though they are competitors aren’t in a completely fair league. This is because one is a full-fledged framework and one is not. It may be better to compare Angular with a React framework like Next.js.&lt;/p&gt;

&lt;p&gt;There are things I like about both.&lt;/p&gt;

&lt;h2 id=&quot;language&quot;&gt;Language&lt;/h2&gt;

&lt;p&gt;Angular comes with typescript by default. Typescript is much more superior to JS. React can be used with typescript too but it’s a developer’s choice.&lt;/p&gt;

&lt;h2 id=&quot;react-is-easy-to-get-started&quot;&gt;React is easy to get started&lt;/h2&gt;

&lt;p&gt;Especially with functional components, getting started with react is too easy.&lt;/p&gt;

&lt;h2 id=&quot;react-has-too-many-little-things-to-take-care-of&quot;&gt;React has too many little things to take care of.&lt;/h2&gt;

&lt;p&gt;Strength can be a weakness or one could say React isn’t a full framework.&lt;/p&gt;

&lt;p&gt;React has too much to learn. And every project is essentially different.&lt;/p&gt;

&lt;p&gt;Angular comes with preferred ways of doing things which I like more than base React. Angular has everything important built-in. So you’ll find every Angular project uses the same set of libraries for common tasks like rest call (HttpClient). There is less to learn and remember.&lt;/p&gt;

&lt;p&gt;You essentially want to reduce knowing a lot of things so that you can focus on getting stuff done.&lt;/p&gt;

&lt;h2 id=&quot;code-cleanliness&quot;&gt;Code Cleanliness&lt;/h2&gt;

&lt;p&gt;Assuming React is used with Typescript, functional react with hooks is a much better way of creating components than class-based React and Angular.&lt;/p&gt;

&lt;p&gt;Plus I like JSX (React) than HTML templating(Angular), it’s concise and there is less to remember. HTML templating in angular requires remembering an additional set of code (ngFor, ngIf, etc). In JSX, it’s the same language used while creating components.&lt;/p&gt;

&lt;p&gt;The code structure is much better in angular projects.&lt;/p&gt;

&lt;p&gt;Every angular project is structured similarly.&lt;/p&gt;

&lt;p&gt;By default, CSS management is also better in angular. Every component has its own CSS. Parent components can have the same CSS namings and it would not affect child components unless specified (:host ::ng-deep).&lt;/p&gt;

&lt;p&gt;React can also do this by using css modules.&lt;/p&gt;</content><author><name></name></author><category term="web-development" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/angular-react-comparison.png" /><media:content medium="image" url="www.ankushchoubey.com/images/angular-react-comparison.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Typescript</title><link href="www.ankushchoubey.com/typescript" rel="alternate" type="text/html" title="Typescript" /><published>2021-11-15T00:00:00-06:00</published><updated>2021-12-01T14:52:08-06:00</updated><id>www.ankushchoubey.com/typescript</id><content type="html" xml:base="www.ankushchoubey.com/typescript">&lt;p&gt;&lt;img src=&quot;/images/typescript.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typescript is probably my favorite programming language. Switching from typescript to javascript should save around 60% of a developers time.&lt;/p&gt;

&lt;p&gt;There are many reasons for it which I’ll try to present in this post.&lt;/p&gt;

&lt;h2 id=&quot;typescript&quot;&gt;Typescript&lt;/h2&gt;

&lt;p&gt;Typescript is a super set of Javascript which means everything which is available in Javascript is automatically available in Typescript.&lt;/p&gt;

&lt;p&gt;Typescript only adds a few extra features which are convenient for developers.&lt;/p&gt;

&lt;h2 id=&quot;typechecks&quot;&gt;Typechecks&lt;/h2&gt;

&lt;p&gt;Probably the main reason to use typescript is this.&lt;/p&gt;

&lt;p&gt;Having typechecks remove unneccesary errors. Types makes code more predictable.&lt;/p&gt;

&lt;p&gt;Dynamically typed programming language have bad IDE support.&lt;/p&gt;

&lt;p&gt;VS Code has fantastic support for Typescript with typeaheads which are and will probably always be missing with Javascript.&lt;/p&gt;

&lt;h2 id=&quot;everything-is-configurable&quot;&gt;Everything is configurable.&lt;/h2&gt;

&lt;p&gt;Every typescript project has a “tsconfig.json” file which can be used to control everything typescript can do.&lt;/p&gt;

&lt;p&gt;These include but are not limited to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Where to put the final output&lt;/li&gt;
  &lt;li&gt;Ability to choose how strict the language is aka enable/disable following
    &lt;ul&gt;
      &lt;li&gt;null checks&lt;/li&gt;
      &lt;li&gt;any assignments&lt;/li&gt;
      &lt;li&gt;etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shortcut paths&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;typescript-compiles-to-js&quot;&gt;Typescript compiles to JS&lt;/h2&gt;

&lt;p&gt;You don’t miss anything with typescript because in the end it compiles down to javascript.&lt;/p&gt;

&lt;p&gt;You can choose which version of javascript to compile into from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;typescript-works-fantastically-with-many-libraries-are-framework&quot;&gt;Typescript works fantastically with many libraries are framework.&lt;/h2&gt;

&lt;p&gt;Both major web libraries (React and Angular) support typescript.&lt;/p&gt;

&lt;h2 id=&quot;how-to-transition-from-js-to-ts&quot;&gt;How to transition from js to ts.&lt;/h2&gt;

&lt;p&gt;When you have a large application with lots of connected pieces, it makes sense to have connections between them standard.&lt;/p&gt;

&lt;p&gt;So that as the application grows, the connections stay strong. And if parameters in a connection changes, it can be detected and changed at all places that use the connection.&lt;/p&gt;

&lt;p&gt;This is missing in Dynamically typed languages like Javascript. But is available with a static checker like typescript.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Typescript does only a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Applies types and checks them&lt;/li&gt;
  &lt;li&gt;Checks code quality to a level desired&lt;/li&gt;
  &lt;li&gt;Compiles to JS version of your choice.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;https://www.typescriptlang.org/why-create-typescript&lt;/p&gt;

&lt;p&gt;There are tools available that allow migration like ts-migrate https://github.com/airbnb/ts-migrate
but ts can be used along with existing js code too.&lt;/p&gt;

&lt;p&gt;My recommendation is always, if you try to create a new project, use typescript.&lt;/p&gt;

&lt;p&gt;https://www.reddit.com/r/typescript/comments/n0w2k7/how_to_go_about_convincing_team_to_buy_into_ts/
https://news.ycombinator.com/item?id=18591424
https://dev.to/andyrewlee/how-to-convince-team-to-adopt-typescript-323a
https://www.typescriptlang.org/why-create-typescript&lt;/p&gt;

&lt;p&gt;we need typescript because specially as project gets&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;gets bigger&lt;/li&gt;
  &lt;li&gt;get older&lt;/li&gt;
  &lt;li&gt;Lots of people work&lt;/li&gt;
  &lt;li&gt;has more developers working on it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Draft:&lt;/p&gt;

&lt;p&gt;https://tsh.io/blog/why-use-typescript/&lt;/p&gt;</content><author><name></name></author><category term="web-development" /><category term="draft" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/typescript.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/typescript.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Keep most of your configuration within application not Jenkins</title><link href="www.ankushchoubey.com/configuration-within-application/" rel="alternate" type="text/html" title="Keep most of your configuration within application not Jenkins" /><published>2021-09-27T00:00:00-05:00</published><updated>2021-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/application-not-jenkins</id><content type="html" xml:base="www.ankushchoubey.com/configuration-within-application/">&lt;p&gt;If you haave a separate DevOps teams, Jenkins will usually be configured by them.&lt;/p&gt;

&lt;p&gt;Developer will have an easier life if they have as less dependency on external team as possible.&lt;/p&gt;

&lt;p&gt;Sometimes, Jenkinsfile includes every minor detail. For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In a node project, Jenkinsfile could include things like running an application in production mode along with certain parameters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be okay if the paramaters are configured via Jenkins UI. But if same configuration is going to be used, it is easier to maintain and adapt by keeping them inside application and using Jenkins to only trigger script within application.&lt;/p&gt;

&lt;p&gt;In node applications, you can use following to configure default behaviors.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;scripts in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.npmrc&lt;/code&gt; file for npm&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; for Typescript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Maven projects, you can have operations such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ignoring File during build&lt;/li&gt;
  &lt;li&gt;Coping certain files&lt;/li&gt;
  &lt;li&gt;To disable test cases for certain builds etc.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="devops" /><summary type="html">If you haave a separate DevOps teams, Jenkins will usually be configured by them.</summary></entry><entry><title type="html">Core Values</title><link href="www.ankushchoubey.com/core-values/" rel="alternate" type="text/html" title="Core Values" /><published>2021-09-26T00:00:00-05:00</published><updated>2021-09-26T15:52:08-05:00</updated><id>www.ankushchoubey.com/values</id><content type="html" xml:base="www.ankushchoubey.com/core-values/">&lt;p&gt;&lt;img src=&quot;/images/core-values.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is something I have been developing for a few months &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;human-is-not-a-rational-agent&quot;&gt;Human is not a rational agent&lt;/h2&gt;

&lt;p&gt;Human is rational agent only withing the scenario he/she is in aka local minima.&lt;/p&gt;

&lt;p&gt;By not choosing a set of guidelines/principles/values once chooses to be nothing. One has to give up the idea of being everyhing. And rather be something.&lt;/p&gt;

&lt;h2 id=&quot;values-simplify-decision-making&quot;&gt;Values simplify decision making&lt;/h2&gt;

&lt;p&gt;Values are things that you regard highly and that you don’t compromise on. They can act as rough guidelines for making decisions. And also serve as a standard to judge your actions on.&lt;/p&gt;

&lt;p&gt;Every individual is different, therefore it is important to build your own set of values to follow. Don’t borrow someone’s values. Define your own.&lt;/p&gt;

&lt;p&gt;To have your values articulated, means you can use them much more easily into making decisions.&lt;/p&gt;

&lt;p&gt;While this post talks about personal values, same can be applied to businesses.&lt;/p&gt;

&lt;p&gt;“Core values are choices you make”&lt;/p&gt;

&lt;h2 id=&quot;some-use-cases-for-values&quot;&gt;Some use cases for values&lt;/h2&gt;

&lt;p&gt;You can compare your core values with someone to see how aligned you are. Usually of you are aligned things to smoothly. &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;You can usually pick up other’s value if you listen to them cuz most people essentially speak the same things over and over again.&lt;/p&gt;

&lt;p&gt;If you have a particularly bad event, you can verify your actions on your values. You may find that you might not have lived up to your values fully. Or it maybe time to tweak your value a bit.&lt;/p&gt;

&lt;h2 id=&quot;tips-for-finding-and-picking-values&quot;&gt;Tips for Finding and Picking Values&lt;/h2&gt;

&lt;p&gt;These are some of my tips for picking values:&lt;/p&gt;

&lt;h3 id=&quot;pick-only-a-few-values-at-first&quot;&gt;Pick only a few values at first&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;I would recommend 3-4 at first and then adding a few overtime as need arises.&lt;/li&gt;
  &lt;li&gt;To pick the most personalized values, look at your past events. What motivated you make certain decisions?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shorter the length of each value the easier you can remember. Lesser the number of values, more you can remember.&lt;/p&gt;

&lt;h3 id=&quot;reframe-your-values-to-fit-perfectly&quot;&gt;Reframe your values to fit perfectly&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Test and modify for your values. Maybe adding a few words would solidify a value which was previously too vague.&lt;/li&gt;
  &lt;li&gt;I have renamed my values multiple times where they essentially mean the same thing but with words that make more sense.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;keep-them-as-abstract-as-possible&quot;&gt;Keep them as abstract as possible&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The more abstract your values, the more decisions you can slot in to them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compress-dont-add-a-new-value-unless-you-absolutely-need-it&quot;&gt;Compress. Don’t add a new value unless you absolutely need it&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Value discovery is like finding new elements. You don’t want to add a new element if a value already exists.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;build-habits-around-them&quot;&gt;Build habits around them&lt;/h3&gt;

&lt;p&gt;You want your core values to be second nature. Build habits around each of them so that they stick long term. Habits need not be long, they need to be second nature.&lt;/p&gt;

&lt;h3 id=&quot;here-are-a-few-things-i-discovered&quot;&gt;Here are a few things I discovered:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;I can develop habits around my values. -&amp;gt; Identity Level Change&lt;/li&gt;
  &lt;li&gt;I can have a few people to look up to for each of my values. This is because visualizing becomes easier.&lt;/li&gt;
  &lt;li&gt;I can make my core values my standard.&lt;/li&gt;
  &lt;li&gt;While trying to decide if should follow a value, I can think og the best thing that would habppend and the worst thing that would happen.&lt;/li&gt;
  &lt;li&gt;All values boil down to choosing long term over short term.&lt;sup id=&quot;fnref:1:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The inspiration for this post of Digital Minimalism by Cal Newport &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Naval Ravikant &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="philosophical" /><category term="draft" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/core-values.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/core-values.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Learning Strategies</title><link href="www.ankushchoubey.com/learning-strategy/" rel="alternate" type="text/html" title="Learning Strategies" /><published>2021-09-26T00:00:00-05:00</published><updated>2021-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/how-i-learn-x</id><content type="html" xml:base="www.ankushchoubey.com/learning-strategy/">&lt;p&gt;These are some strategies I use to learn any new thing including programming languages.&lt;/p&gt;

&lt;p&gt;These are probably very influenced by Tim Ferriss’s 4 Hour Chef which I had read around 2016.&lt;/p&gt;

&lt;h2 id=&quot;material-beats-method-&quot;&gt;Material beats Method &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Usually, it’s not fault of the student, it’s fault of the teacher.&lt;/p&gt;

&lt;p&gt;How a teacher teaches determines a lot.&lt;/p&gt;

&lt;p&gt;I don’t like live teachings. It sometimes gets to fast sometimes too slow. I prefer learning on my own.&lt;/p&gt;

&lt;p&gt;I pick resources that are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Step by step&lt;/li&gt;
  &lt;li&gt;Have a clear road to some kind of implementation&lt;/li&gt;
  &lt;li&gt;As real world as possible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;For Music:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I tried learning Piano by reading book but it was no boring and vage. So I purchased SimplyPiano.&lt;/li&gt;
  &lt;li&gt;Similarly for guitar I got SimplyGuitar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Programming Topics,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I prefer platform allow trying out code online without any local installation.
    &lt;ul&gt;
      &lt;li&gt;Codecademy is a good one. I used it for many things.&lt;/li&gt;
      &lt;li&gt;Recently I started learning&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;role-of-books&quot;&gt;Role of Books&lt;/h2&gt;

&lt;p&gt;I don’t use books for learning everything.&lt;/p&gt;

&lt;p&gt;But certain concepts are such that they require an entire book.&lt;/p&gt;

&lt;p&gt;I don’t go out to but book instantly. I wait a few days to see if I really need to.&lt;/p&gt;

&lt;p&gt;Sometimes YouTube videos are enough to cure curiosity or find the answer.&lt;/p&gt;

&lt;p&gt;Books are great for deep topics have a lot of details in it.&lt;/p&gt;

&lt;h2 id=&quot;learn-in-chunks&quot;&gt;Learn in chunks&lt;/h2&gt;

&lt;p&gt;I cannot learn something at one. If I try to do it I will have to recollection of the concepts. So I prefer doing a little every day or regularly.&lt;/p&gt;

&lt;p&gt;This also forces me to recall what I had previously learned.&lt;/p&gt;

&lt;p&gt;So for,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Piano and Guitar: 10 Min a Day&lt;/li&gt;
  &lt;li&gt;Technical Topics: Max 2 Pomodoros (25 min timers twice with 5-10 min break in middle)&lt;/li&gt;
  &lt;li&gt;Books: 10-20 minutes max&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;clear-doubts-along-the-way&quot;&gt;Clear Doubts along the way&lt;/h2&gt;

&lt;p&gt;If you are stuck, search for the solution.&lt;/p&gt;

&lt;p&gt;Usually learning from different sources helps.&lt;/p&gt;

&lt;h2 id=&quot;have-cheat-sheets&quot;&gt;Have Cheat Sheets&lt;/h2&gt;

&lt;p&gt;Cheat sheets allow recalling what you have learned instantly!&lt;/p&gt;

&lt;p&gt;Often googling cheatsheets is sufficient.&lt;/p&gt;

&lt;h2 id=&quot;put-into-practice-fast&quot;&gt;Put into Practice Fast&lt;/h2&gt;

&lt;p&gt;Deployable.&lt;/p&gt;

&lt;p&gt;Record yourself.&lt;/p&gt;

&lt;p&gt;Talk to other people/&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;4 Hour Chef &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">These are some strategies I use to learn any new thing including programming languages.</summary></entry></feed>