<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2022-09-11T06:28:46-05:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Full Stack Developer - Cloud/Microservices</subtitle><entry><title type="html">PREFER UPDATING A BLOG OVER WRITING NEW ONES</title><link href="www.ankushchoubey.com/post-format/" rel="alternate" type="text/html" title="PREFER UPDATING A BLOG OVER WRITING NEW ONES" /><published>2050-09-26T00:00:00-05:00</published><updated>2022-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/post-format</id><content type="html" xml:base="www.ankushchoubey.com/post-format/">&lt;p&gt;&lt;img src=&quot;/images/switch-jobs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prefer-updating-a-blog-over-writing-new-ones&quot;&gt;PREFER UPDATING A BLOG OVER WRITING NEW ONES&lt;/h1&gt;

&lt;h2 id=&quot;writing-steps&quot;&gt;Writing Steps&lt;/h2&gt;

&lt;p&gt;If I write from POV that how I got the this idea and how I thought about it, readers will know thinking behing an idea and not just the preachiness. Plus, I’ll always have the right words to write.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Done&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Structure Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Written&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Edited&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Grammar Check Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Perfect Grammarly Score:&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Added  https://www.canva.com/&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Links to Other Posts if Any&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tags Added&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Released Publically&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Perfection isn’t an attainable goal. We are always a step closer to it.</title><link href="www.ankushchoubey.com/perfection/" rel="alternate" type="text/html" title="Perfection isn’t an attainable goal. We are always a step closer to it." /><published>2022-09-11T00:00:00-05:00</published><updated>2022-09-08T15:52:08-05:00</updated><id>www.ankushchoubey.com/perfection</id><content type="html" xml:base="www.ankushchoubey.com/perfection/">&lt;p&gt;&lt;img src=&quot;/images/perfection.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Often we fail to do something because we fear we’ll be bad at it.&lt;/p&gt;

&lt;p&gt;This fear is counter-productive. It is not a useful thought.&lt;/p&gt;

&lt;p&gt;Only by doing do we learn. Only by failing do we recognize and avoid situations that would cause problems. In this sense, we are constantly failing forward.&lt;/p&gt;

&lt;p&gt;Things, if they are progressing well, will always be an upwards spiral. As long as they is an upwards spiral, it doesn’t matter that we currently failed. Eventually, we’ll succeed, and that’s enough.&lt;/p&gt;

&lt;p&gt;Failure is a sign we are doing&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Something out of our comfort zone. -&amp;gt; This is good because it means we are doing something.&lt;/li&gt;
  &lt;li&gt;Something we are doing wrong -&amp;gt; means we can fix it, and then we won’t have a problem.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having a good perspective on failure is highly underestimated.&lt;/p&gt;

&lt;p&gt;If we are failing all the time, however, it could mean a few things. All of these things provide an opportunity for us to improve.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Maybe we don’t know something -&amp;gt; in which case we need to find an answer.&lt;/li&gt;
  &lt;li&gt;Maybe we are trying to solve the wrong problem or from a bad angle-&amp;gt; we need good root cause analysis both post-mortem and pre-mortem.&lt;/li&gt;
  &lt;li&gt;Maybe we are asking the wrong question -&amp;gt; find the right question to ask then.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Often the best approach to move towards perfection is:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Do something.&lt;/li&gt;
  &lt;li&gt;Fail&lt;/li&gt;
  &lt;li&gt;Learn&lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sometimes after this loop, you’ll be good enough and still now perfect. But that’s okay; maybe this is an optimal stopping point, especially if the problem is solved.&lt;/p&gt;

&lt;p&gt;Or maybe it’s time to stop focusing on this problem for a while and solve another problem. After some time, we’ll have a fresh perspective, and if this problem still exists, we’ll have more tools in our belts to fix it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/03/Diminishing_Returns_Graph.png&quot; alt=&quot;Diminishing Returns Graph: Source Wikipedia&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="non-professional" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/perfection.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/perfection.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TDD over JSON</title><link href="www.ankushchoubey.com/tdd-over-json/" rel="alternate" type="text/html" title="TDD over JSON" /><published>2022-09-08T00:00:00-05:00</published><updated>2022-09-08T15:52:08-05:00</updated><id>www.ankushchoubey.com/tdd-over-json</id><content type="html" xml:base="www.ankushchoubey.com/tdd-over-json/">&lt;p&gt;&lt;img src=&quot;/images/tdd-over-json.jpg&quot; alt=&quot;&quot; /&gt;
Photo by RealToughCandy.com: https://www.pexels.com/photo/man-love-people-woman-11035481/&lt;/p&gt;

&lt;p&gt;Somethings TDD isn’t straightforward. Here is such a case I faced.&lt;/p&gt;

&lt;p&gt;I was developing an app for a third-party service which required data in a particular JSON format.&lt;/p&gt;

&lt;p&gt;The particular JSON would render as UI in the third-party app’s view.&lt;/p&gt;

&lt;p&gt;Here is how I approached it with TDD.&lt;/p&gt;

&lt;h1 id=&quot;step-1-creating-the-ideal-json&quot;&gt;Step 1: Creating the ideal JSON.&lt;/h1&gt;

&lt;p&gt;Lucky for me, the third part app had a UI builder to see what the end UI would look. I created the UI and copied JSON into my code.&lt;/p&gt;

&lt;p&gt;The UI builder also gave a link which became part of my BDD specs.&lt;/p&gt;

&lt;h1 id=&quot;step-2-created-a-test-with-json-asserts&quot;&gt;Step 2: Created a Test with JSON Asserts&lt;/h1&gt;

&lt;p&gt;I followed the method/when/then format to create a test and added the following assertion:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nc&quot;&gt;JSONAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSONCompareMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENIENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/a/33481923&quot;&gt;StackOverflow: The best way to compare two JSON files in Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I know what the final state of my POJO should be.&lt;/p&gt;

&lt;p&gt;I went and updated the POJO to reflect the expected JSON.&lt;/p&gt;

&lt;p&gt;Another point of luck for me was that the third-party app had an SDK, so I didn’t have to build a custom POJO from scratch. I just had to customize it.&lt;/p&gt;</content><author><name></name></author><category term="tdd-example" /><summary type="html">Photo by RealToughCandy.com: https://www.pexels.com/photo/man-love-people-woman-11035481/</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/tdd-over-json.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/tdd-over-json.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A responseType field for all response classes</title><link href="www.ankushchoubey.com/response-type-field/" rel="alternate" type="text/html" title="A responseType field for all response classes" /><published>2022-09-08T00:00:00-05:00</published><updated>2022-09-08T15:52:08-05:00</updated><id>www.ankushchoubey.com/response-type</id><content type="html" xml:base="www.ankushchoubey.com/response-type-field/">&lt;p&gt;The inspiration for this blog post is &lt;a href=&quot;https://youtu.be/7sQiIR9qCdA?t=690&quot;&gt;API response in a video by Chaos Monkey for Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A typical pattern for handling network assaults is Circuit Breaker.&lt;/p&gt;

&lt;p&gt;A circuit breaker would replace a network delay or failure code with a fallback code, making the code resilient.&lt;/p&gt;

&lt;p&gt;Ideally, the user is indicated when fallback data is used.&lt;/p&gt;

&lt;p&gt;This can be as simple as adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseMetadata&lt;/code&gt; field within HTTP Response.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;actualData&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;responseMetadata:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;STALE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;STALE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;LATEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;FALLBACK&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;updatedDate:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{dateObject}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; could be&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STALE&lt;/code&gt; for old data&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LATEST&lt;/code&gt; to indicate the data is current&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FALLBACK&lt;/code&gt; indicates neither &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LATEST&lt;/code&gt; nor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STATE&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updatedDate&lt;/code&gt; field&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;date of when something is updated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The frontend or client could read the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseMetadata&lt;/code&gt; and show a message to the user indicating that old data.&lt;/p&gt;

&lt;p&gt;The client could also take further action on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseMetadata&lt;/code&gt;, like polling, after a little while until the response is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CURRENT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseMetadata&lt;/code&gt; can be part of a parent class for all response classes. An ArchUnit test canenforce this behaviour.&lt;/p&gt;</content><author><name></name></author><category term="chaos-engineering" /><summary type="html">The inspiration for this blog post is API response in a video by Chaos Monkey for Spring Boot</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/response-type-field.png" /><media:content medium="image" url="www.ankushchoubey.com/images/response-type-field.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Feature Flagging</title><link href="www.ankushchoubey.com/feature-flagging/" rel="alternate" type="text/html" title="Feature Flagging" /><published>2022-08-28T00:00:00-05:00</published><updated>2022-08-28T15:52:08-05:00</updated><id>www.ankushchoubey.com/feature-flagging</id><content type="html" xml:base="www.ankushchoubey.com/feature-flagging/">&lt;p&gt;&lt;img src=&quot;/images/feature-flagging.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@isaactanlishung?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Isaac Li Shung Tan&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/on-off?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-are-feature-flags&quot;&gt;What are feature flags?&lt;/h1&gt;

&lt;p&gt;The concept of feature flags is simple. You can toggle a feature on or off based on certain conditions. And ideally, this requires zero downtime.&lt;/p&gt;

&lt;p&gt;For example, an experiment feature can be turned on for some users but disabled for others.&lt;/p&gt;

&lt;p&gt;There are many levels to feature flagging:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Disable feature for specific users&lt;/li&gt;
  &lt;li&gt;Disable the feature completely&lt;/li&gt;
  &lt;li&gt;Disable the feature in case of certain conditions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feature flagging can also help in AB Testing.&lt;/p&gt;

&lt;h1 id=&quot;feature-flagging-for-cd&quot;&gt;Feature Flagging for CD&lt;/h1&gt;

&lt;p&gt;Feature flags also help in CD. Rather than feature branching, everyone can work on a single branch, but the features that aren’t ready yet can be disabled on prod. This decouples release and feature. Feature flagging is probabilistic because, in practice, it leads to stale branches.&lt;/p&gt;

&lt;p&gt;In case of chaos engineering, a feature flag can help reduce blast radius and improve resiliency. Suppose a feature fails; that feature can be disabled at a run time until fixed.&lt;/p&gt;

&lt;h1 id=&quot;common-ways-of-implementing-feature-flagging&quot;&gt;Common ways of implementing Feature Flagging&lt;/h1&gt;

&lt;h2 id=&quot;storing-flags&quot;&gt;Storing flags&lt;/h2&gt;
&lt;p&gt;The simplest implementation of the feature flag is DB based. A list of features is stored along with a flag to enable or disable it. Each time a decision comes, DB is called to fetch the flag’s status.&lt;/p&gt;

&lt;p&gt;Environment variables can also be used. Configuration management systems like Spring Cloud Config can also be used to store flags.&lt;/p&gt;

&lt;h1 id=&quot;enabling-disabling&quot;&gt;Enabling disabling&lt;/h1&gt;
&lt;p&gt;The code has an IF else statement that enables or disables the feature.&lt;/p&gt;

&lt;p&gt;An even better approach to IF else is dependency injection. If a class can be instantiated conditionally, then we solved the feature flagging problem cleanly.&lt;/p&gt;

&lt;p&gt;Having a class per feature and inheriting a common interface is the best approach here. In the planning features section of this blog post, you’ll find more ideas on how to reach this.&lt;/p&gt;

&lt;h2 id=&quot;end-to-end-services&quot;&gt;End-to-end services&lt;/h2&gt;
&lt;p&gt;There are also full-blown services that help with feature flagging, like &lt;a href=&quot;https://launchdarkly.com/blog/what-are-feature-flags/&quot;&gt;LaunchDarkly&lt;/a&gt; and &lt;a href=&quot;https://www.flagship.io/&quot;&gt;FlagShip&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/feature-toggles.html#CategoriesOfToggles&quot;&gt;Feature Toggles (aka Feature Flags)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/UwrJaOtS4ys&quot;&gt;DevOps Concepts: Feature Flags&lt;/a&gt;: An introductory video that explains feature flagging and branching.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-feature-flags&quot;&gt;Feature Flags with Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.togglz.org/quickstart.html&quot;&gt;Togglz&lt;/a&gt;: A java library for feature flagging. It comes with a UI.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ff4j.github.io/&quot;&gt;FF4j&lt;/a&gt;: A java library similar to Togglz&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="feature-flagging" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/feature-flagging.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/feature-flagging.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Towards Data Driven Decisions</title><link href="www.ankushchoubey.com/data-driven-decisions/" rel="alternate" type="text/html" title="Towards Data Driven Decisions" /><published>2022-08-20T00:00:00-05:00</published><updated>2022-08-13T15:52:08-05:00</updated><id>www.ankushchoubey.com/towards-data-driven-decisions</id><content type="html" xml:base="www.ankushchoubey.com/data-driven-decisions/">&lt;h1 id=&quot;what-are-data-driven-decisions&quot;&gt;What are Data Driven Decisions?&lt;/h1&gt;

&lt;p&gt;Data-Driven decisions are the ability to formulate and make decisions out of the data from the real world.&lt;/p&gt;

&lt;h1 id=&quot;why-am-i-interested-in-data-driven-decisions&quot;&gt;Why am I interested in Data Driven Decisions?&lt;/h1&gt;

&lt;p&gt;For 2 years in my college, I was very driven to become a data scientist. During that time, I worked a lot with data. Not just looking at data but understanding it. So I have an intuitive sense of it.&lt;/p&gt;

&lt;p&gt;I have studied value-based decision making, where we define a value and act according to that value in all situations.&lt;/p&gt;

&lt;p&gt;There are some loopholes in the value-based approach and which is feedback. Systems need to be improvised somehow. And especially when we are optimizing a system, we need to know when we have peaked.&lt;/p&gt;

&lt;p&gt;We also need to know MED (Minimum Effective Dose). So that we can prioritize other tasks too.&lt;/p&gt;

&lt;p&gt;I am also interested in Data-Driven Decisions for deciding what feature to work on and optimizing my workflows.&lt;/p&gt;

&lt;p&gt;An interest of mine is Observability in distributed systems.&lt;/p&gt;

&lt;h1 id=&quot;what-are-some-preliminary-observations-i-have-about-data-driven-decisions&quot;&gt;What are some preliminary observations I have about data-driven decisions?&lt;/h1&gt;

&lt;p&gt;Data-driven decisions can be totally quantity or qualitative.&lt;/p&gt;

&lt;p&gt;Qualitative decisions can be converted to qualitative if they are in the form of a questionnaire.&lt;/p&gt;

&lt;p&gt;Qualitative:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Agile Maturity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quantitative:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DORA&lt;/li&gt;
  &lt;li&gt;Agile Metrics&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pomodoros sessions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Custom
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1YsS40schcRMpdaqmuDj_UhGGv4e0S3N7oDOlrIincpw/edit?usp=sharing&quot;&gt;Tracking progress on Grokking Coding Interview&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="decision-making" /><summary type="html">What are Data Driven Decisions?</summary></entry><entry><title type="html">Speed up Pipelines</title><link href="www.ankushchoubey.com/speeding-up-pipelines/" rel="alternate" type="text/html" title="Speed up Pipelines" /><published>2022-08-20T00:00:00-05:00</published><updated>2022-08-20T15:52:08-05:00</updated><id>www.ankushchoubey.com/speeding-up-pipelines</id><content type="html" xml:base="www.ankushchoubey.com/speeding-up-pipelines/">&lt;p&gt;&lt;img src=&quot;/images/speeding-up-pipelines.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Disclaimer: I have primarily worked on Jenkins. But the tips mentioned aren’t Jenkins specific. It seems though that pipelines tools that come with SCM services like Gitlab are better.&lt;/p&gt;

&lt;h1 id=&quot;why-we-should-have-a-speedy-pipeline&quot;&gt;Why we should have a speedy pipeline?&lt;/h1&gt;

&lt;p&gt;Pipelines such as CI and deployment are used very frequently. We don’t want these pipelines to be slow because we can’t push changes faster. And sometimes developers have to wait for a pipeline to finish before doing something else. #developerMoneyHoney&lt;/p&gt;

&lt;h1 id=&quot;how-can-we-speedup-our-pipelines&quot;&gt;How can we speedup our pipelines?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Eliminate unnecessary steps: Look at each step in your pipeline and eliminate unnecessary ones.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optimize each step: After elimination, look at each step and optimize.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run steps in parallel: this is specially true for tests/sonar things. Run them in parallel.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;for-example-a-problem-i-faced-was-with-pipeline-for-java&quot;&gt;For example: a problem I faced was with pipeline for java.&lt;/h1&gt;

&lt;p&gt;there were 3 steps&lt;/p&gt;

&lt;p&gt;mvn install
mvn release:prepare
mvn release:perform&lt;/p&gt;

&lt;p&gt;After analyzing it, I realized mvn install was unnecessary. Since release perform would do the same thing.&lt;/p&gt;

&lt;p&gt;Removing mvn install saved 33%time.&lt;/p&gt;

&lt;p&gt;now, i saw tests been run thrice. One with mvn install so removing that eliminated it. But also during prepare and perform.&lt;/p&gt;

&lt;p&gt;So I decided to skip tests in releas:perform.&lt;/p&gt;

&lt;p&gt;This saved 30%time.&lt;/p&gt;

&lt;p&gt;Overall the pipeline time was reduced by 63%.&lt;/p&gt;

&lt;p&gt;In some cases, 28 min became 10 min.&lt;/p&gt;</content><author><name></name></author><category term="devops" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/speeding-up-pipelines.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/speeding-up-pipelines.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Becoming a bit lean with Kanban</title><link href="www.ankushchoubey.com/implementing-kanban/" rel="alternate" type="text/html" title="Becoming a bit lean with Kanban" /><published>2022-08-20T00:00:00-05:00</published><updated>2022-08-20T15:52:08-05:00</updated><id>www.ankushchoubey.com/implementing-kanban</id><content type="html" xml:base="www.ankushchoubey.com/implementing-kanban/">&lt;h1 id=&quot;what-is-agility&quot;&gt;What is Agility?&lt;/h1&gt;

&lt;p&gt;Agility means working in small and delivering in small increments frequently. Following a set of values and principles that allow this and make it easier.&lt;/p&gt;

&lt;h1 id=&quot;why-be-a-bit-more-agile&quot;&gt;Why be a bit more Agile?&lt;/h1&gt;

&lt;p&gt;After rejecting TDD-BDD for years, I switched camps too it. Now is the same moment with Agile.&lt;/p&gt;

&lt;p&gt;I’m very passionate about Continous Deployment. To work towards continuous deployment requires improving engineering quality and processes surrounding SDLC. Therefore, Agile.&lt;/p&gt;

&lt;p&gt;By being more agile, we can increase our delivery speed and ensure people are in sync and have a certain disciplined way of working.&lt;/p&gt;

&lt;p&gt;While Agile is a set of values and principles, there are frameworks to implement it, most popularly, scrum. There is a similar set of values principles, called lean, whose most popular implementation is Kanban. &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-kanban&quot;&gt;What is Kanban?&lt;/h1&gt;

&lt;p&gt;Kanban is multiple things &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Tool&lt;/li&gt;
  &lt;li&gt;Principles&lt;/li&gt;
  &lt;li&gt;Framework&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This post is going to focus on Tools and principles.&lt;/p&gt;

&lt;h1 id=&quot;what-are-some-kanban-principles-how-do-they-look-in-practice&quot;&gt;What are some Kanban principles? How do they look in practice?&lt;/h1&gt;

&lt;h2 id=&quot;board-is-the-single-source-of-truth&quot;&gt;Board is the single source of truth.&lt;/h2&gt;

&lt;p&gt;Everything is visible on the board. And everyone works off from the board.&lt;/p&gt;

&lt;p&gt;The board should keep track of each and everything you do.&lt;/p&gt;

&lt;p&gt;Each activity, however small, should be captured.&lt;/p&gt;

&lt;p&gt;Each workflow step should be present. Therefore board structure needs to be updated regularly too.&lt;/p&gt;

&lt;p&gt;Kanban is visual. And the way it is helps everyone in a team be in sync. And reduces handover.&lt;/p&gt;

&lt;p&gt;In practice,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You’ll likely see and use and update the Kanban board multiple times a day.&lt;/li&gt;
  &lt;li&gt;And the start and end of your day will be on the board.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are few more tips I came up with to help in this.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I prefer keeping the board open in a tab at all times. And working off the board.&lt;/li&gt;
  &lt;li&gt;I transfer all items in personal todo’s to the board.&lt;/li&gt;
  &lt;li&gt;In every commit: I capture card details and how much time I spent on that card. And after each commit, I update the card with time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For teams,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Teams can play a game: it’s called “Moment of Glory” &lt;sup id=&quot;fnref:1:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moment of Glory is a game where anyone in the team can ask someone about the board. If that card isn’t updated or in the right column, it’s a moment of glory, and the facilitator or the person updates the card.&lt;/p&gt;

&lt;h2 id=&quot;pull-system&quot;&gt;Pull System&lt;/h2&gt;

&lt;p&gt;You always work on the rightmost card assigned to you and push it towards completion.&lt;/p&gt;

&lt;p&gt;The card/task which gets completed and on production is of must higher value than the 50% done card.&lt;/p&gt;

&lt;p&gt;In practice,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Look at the board, look at the right most items and start working on them first.&lt;/li&gt;
  &lt;li&gt;If you have a new task, add a card to the start of the board (the backlog) but don’t start working on it just yet. Come back to your current card and finish it.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/c/VibhorChandel&quot;&gt;Vibhor Chandel&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/c/Developmentthatpays&quot;&gt;Development That Pays&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="lean" /><category term="agile" /><summary type="html">What is Agility?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/implementing-kanban.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/implementing-kanban.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ideal Development Workflow</title><link href="www.ankushchoubey.com/dev-workflow/" rel="alternate" type="text/html" title="Ideal Development Workflow" /><published>2022-08-15T00:00:00-05:00</published><updated>2022-09-08T15:52:08-05:00</updated><id>www.ankushchoubey.com/resume-tips</id><content type="html" xml:base="www.ankushchoubey.com/dev-workflow/">&lt;p&gt;&lt;img src=&quot;/images/dev-workflow.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@altumcode?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;AltumCode&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/developer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a value-stream mapping exercise in an effort to reduce cognitive overload and enable continous improvement.&lt;/p&gt;

&lt;p&gt;Ideally, all these steps can be columns on a Kanban Board.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;mermaid&quot; src=&quot;https://mermaid.ink/svg/eyJjb2RlIjoiZ3JhcGggVERcbnN1YmdyYXBoIEJERFxuQVsxLiBSZWFkIEJERCBzcGVjaWZpY2F0aW9ucyByZWxhdGVkIHRvIHRoZSBjYXJkXSAtLT4gQlxuQlsyLiBVcGRhdGUgc3BlY2lmaWNhdGlvbnNdXG5lbmRcbiUlLVxuc3ViZ3JhcGggUGxhbm5pbmdcbkIgLS0-IHBsYW5Db21taXRzXG5wbGFuQ29tbWl0c1szLiBQbGFuIHdpdGggYXRvbWljcyBjb21taXRzXSAtLT4gZXN0aW1hdGVDb21taXRzXG5lc3RpbWF0ZUNvbW1pdHNbNC4gRXN0aW1hdGUgZWFjaCBjb21taXQgdGltZSB3aXRoIFBPTU9ET1JPc10gLS0-IGVzdGltYXRlUGxhbm5lZEZpbmlzaERhdGVcbmVzdGltYXRlUGxhbm5lZEZpbmlzaERhdGVbNS4gQWRkIHBsYW5uZWQgZmluaXNoZWQgZGF0ZSB0aGUgY2FyZF1cbmVuZFxuJSUtXG5lc3RpbWF0ZVBsYW5uZWRGaW5pc2hEYXRlIC0tPiB8bW92ZSBjYXJkfCBwb21vZG9yb1xuJSUtXG5zdWJncmFwaCBjb2RlW1RERCB3aXRoIFBvbW9kb3JvXVxucG9tb2Rvcm9bNi4gUmVtb3ZlIGFsbCBkaXN0cmFjdGlvbnMgYW5kIHN0YXJ0IHBvbW9kb3JvIHNlc3Npb25dIC0tPiB0ZGRcbnRkZFs3LiBzdGFydCBpbmNyZW1lbnRhbGx5IHdpdGggVEREIGFuZCBjb21taXQvcHVzaCBlYWNoIGF0b21pYyBjb21taXRdLS0-IHBvbW9kb3JvXG5lbmRcbiUlLVxudGRkIC0tPiB8ZGV2ZWxvcG1lbnQgZG9uZXwgZGVwbG95XG5kZXBsb3lbOC4gRGVwbG95IGZlYXR1cmUgb24gZW52aXJvbm1lbnQgYW5kIG1vdmUgY2FyZF0gLS0-IHB1bGxSaWdodFxucHVsbFJpZ2h0WzkuIFB1bGwgcmlnaHQgdGhlIGNhcmQgdGlsbCBBY2NlcHRlZF0iLCJtZXJtYWlkIjpudWxsfQ&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Clear Local
    &lt;ol&gt;
      &lt;li&gt;Clean up your space.&lt;/li&gt;
      &lt;li&gt;Commit everything you&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;BDD Cycle
    &lt;ol&gt;
      &lt;li&gt;Read BDD specifications related to the card&lt;/li&gt;
      &lt;li&gt;Update specifications&lt;/li&gt;
      &lt;li&gt;NEW #Collaboration: Connect with Product or QA person to get specs verified.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Planning
    &lt;ol&gt;
      &lt;li&gt;Break down card into atomic commits&lt;/li&gt;
      &lt;li&gt;Estimate each commit with pomodoros&lt;/li&gt;
      &lt;li&gt;Add planned finish date to the card&lt;/li&gt;
      &lt;li&gt;NEW #Collaboration: Discuss your plan with a team mate to help identify potential risks and pitfalls.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Coding
    &lt;ol&gt;
      &lt;li&gt;Remove all distractions&lt;/li&gt;
      &lt;li&gt;Move card to In-progress lane&lt;/li&gt;
      &lt;li&gt;Start the &lt;a href=&quot;https://lazy-guy.github.io/tomodoro/index.html&quot;&gt;pomodoro timer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Start working incrementally with TDD. Commit and push non-stop.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Release
    &lt;ol&gt;
      &lt;li&gt;Manually deploy if there is no CD pipeline&lt;/li&gt;
      &lt;li&gt;Pull card towards right until accepted&lt;/li&gt;
      &lt;li&gt;At end of each day, fill in card timesheet activity.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Review
    &lt;ol&gt;
      &lt;li&gt;NEW #Collaboration: Present your code for code-review to a team make.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="dev" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/dev-workflow.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/dev-workflow.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Encapsulate Blocking Call the Reactor Way</title><link href="www.ankushchoubey.com/encapsulate-blocking-reactive-way/" rel="alternate" type="text/html" title="Encapsulate Blocking Call the Reactor Way" /><published>2022-08-15T00:00:00-05:00</published><updated>2022-08-15T15:52:08-05:00</updated><id>www.ankushchoubey.com/encapsulate-reactive-way</id><content type="html" xml:base="www.ankushchoubey.com/encapsulate-blocking-reactive-way/">&lt;p&gt;The one rule you aren’t allowed to break with project reactor is this: Don’t Block over Event Loop!&lt;/p&gt;

&lt;p&gt;Event loops are main threads that shouldn’t be blocked.&lt;/p&gt;

&lt;p&gt;If there is a blocking code, they should be run on a separate thread.&lt;/p&gt;

&lt;p&gt;Here are some ways to fix these issues that I have noted down while watching Avoiding Reactor Meldown video. I have added an additional tip at the end.&lt;/p&gt;

&lt;h2 id=&quot;use-blockhound-to-find-blocking-calls-during-testing&quot;&gt;Use BlockHound to find blocking calls during testing&lt;/h2&gt;

&lt;p&gt;BlockHound is a plugin provided by Project Reactor that helps find blocking calls.&lt;/p&gt;

&lt;p&gt;If you are doing TDD, use junit version.&lt;/p&gt;

&lt;p&gt;If you are aren’t doing TDD, use normal version but remove it in prod.&lt;/p&gt;

&lt;p&gt;https://github.com/reactor/BlockHound&lt;/p&gt;

&lt;p&gt;Remember that blockhound will only detect blocks on main thread. This means that if you are writing junit tests, if blocking call is not made on event loop, then it won’t be detected.&lt;/p&gt;

&lt;h1 id=&quot;avoid-significant-work-before-subscribe&quot;&gt;Avoid Significant Work Before Subscribe&lt;/h1&gt;

&lt;h1 id=&quot;always-look-for-async-implementations&quot;&gt;Always look for async implementations&lt;/h1&gt;

&lt;p&gt;Completable futures can be converted to mono. Many java libraries have completable future implementations.&lt;/p&gt;

&lt;h2 id=&quot;encapsulate-blocking-calls&quot;&gt;Encapsulate blocking calls&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://trello.com/1/cards/62d3b3432dae600b8db5d7f4/attachments/62d585b52e381a43331ded5a/download/Screenshot_2022-07-17_at_12.23.22_PM.png&quot; alt=&quot;Screenshot_2022-07-17_at_12.23.22_PM.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://trello.com/1/cards/62d3b3432dae600b8db5d7f4/attachments/62d585b266fbbc5ae9751808/download/Screenshot_2022-07-17_at_12.22.57_PM.png&quot; alt=&quot;Screenshot_2022-07-17_at_12.22.57_PM.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;find-if-a-method-is-reactive&quot;&gt;Find if a method is reactive&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://trello.com/1/cards/62d3b3432dae600b8db5d7f4/attachments/62d5826d1010e7165d435b8c/download/Screenshot_2022-07-17_at_12.24.19_PM.png&quot; alt=&quot;Screenshot_2022-07-17_at_12.24.19_PM.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="reactive" /><category term="spring-boot" /><summary type="html">The one rule you aren’t allowed to break with project reactor is this: Don’t Block over Event Loop!</summary></entry></feed>