<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2023-04-06T23:29:53-05:00</updated><id>https://www.ankushchoubey.com/feed.xml</id><title type="html">Ankush Choubey</title><subtitle>Full Stack Developer - Cloud/Microservices</subtitle><entry><title type="html">One service should serve multiple mediums (REST, Kafka, gRPC, etc)</title><link href="https://www.ankushchoubey.com/v1/building-your-own-immutable-infrastructure/" rel="alternate" type="text/html" title="One service should serve multiple mediums (REST, Kafka, gRPC, etc)" /><published>2023-04-07T00:00:00-05:00</published><updated>2023-04-07T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-building-your-own-immutable-infrastructure</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/building-your-own-immutable-infrastructure/"><![CDATA[<p>In a previous post, I talked about why <a href="https://www.ankushchoubey.com/immutable-objects/" title="‌">immutability is so important</a>. After writing that post, I came to see immutability in different forms at many places. One such place is Configuration and Immutable Infrastructure.</p>

<p>Immutable Configuration means, your configuration will not change once deployed. It’ll remain the same. It’s a combination of two things:</p>

<ol>
  <li>Your application does not maintain a state and neither maintains a database.</li>
  <li>If you need to make changes, you don’t make changes to the existing deployment. You’ll instead create a new deployment with the changes.</li>
  <li>The configuration is usually via JSON.</li>
</ol>

<hr />

<h2 id="advantages">Advantages</h2>

<p>This has a few advantages:</p>

<ol>
  <li>Your deployments are clear: You know the if you have deployed something, they are exact. For example, if you are deploying with new changes and it fails. You still have the previous perfectly running deployment state.</li>
  <li>Immutable means this is fast. Immutable infrastructures don’t have to provision for changes.</li>
</ol>

<p>One of the most common places to use immutable infrastucture is Gateways. You set up the gateway once by providing config in form of <code class="language-plaintext highlighter-rouge">json</code> or <code class="language-plaintext highlighter-rouge">yaml</code>. Once that config is provided, there is no way to make changes to it.</p>

<h2 id="considerations-when-building-your-own-immutable-infra">Considerations when building your own immutable infra</h2>

<h3 id="finding-good-use-case">Finding Good Use case</h3>

<p>If you have a functionality where:</p>

<ol>
  <li>You have a set of configurations that are less likely to change.</li>
  <li>The functionality does not need to maintain state.</li>
</ol>

<p>You can choose to use immutable configuration.</p>

<p>For example, you have a list of items to be displayed that do not change regularly. You can save these as JSON configuration instead of DB. This way when you want to read that data, you don’t have to make a network call to the DB. This makes your config fast.</p>

<p>There is always a tradeoff associated.</p>

<h3 id="tool">Tool</h3>

<p>If you are using Spring Boot, you can use <code class="language-plaintext highlighter-rouge">properties</code> or <code class="language-plaintext highlighter-rouge">yaml</code> files to load up configuration at run time. For <code class="language-plaintext highlighter-rouge">javascript</code>, you can use <code class="language-plaintext highlighter-rouge">.ENV</code> files.</p>

<p>You can also create separate <code class="language-plaintext highlighter-rouge">json</code> files for your configuration.</p>

<p>Try to make these configurations modular.</p>

<h1 id="validate-your-configuration">Validate your configuration</h1>

<p>Run a script when the application starts to make sure all your configurations are loaded properly. The application should fail to start if the configuration provided isn’t provided well.</p>

<p>If you are using Spring Boot <code class="language-plaintext highlighter-rouge">@ConfigurationProperties</code> with <code class="language-plaintext highlighter-rouge">@Validated</code> would work.</p>

<p>In <code class="language-plaintext highlighter-rouge">javascript</code> you may have to write your own validator.</p>

<p>For <code class="language-plaintext highlighter-rouge">json</code>, you can create JSON Schema annotations.</p>]]></content><author><name></name></author><category term="web-development" /><category term="software-architecture" /><summary type="html"><![CDATA[In a previous post, I talked about why immutability is so important. After writing that post, I came to see immutability in different forms at many places. One such place is Configuration and Immutable Infrastructure.]]></summary></entry><entry><title type="html">GraphQL - Understanding its Advantages, Query Types, and Technical Functioning</title><link href="https://www.ankushchoubey.com/v1/what-is-graphql/" rel="alternate" type="text/html" title="GraphQL - Understanding its Advantages, Query Types, and Technical Functioning" /><published>2023-04-06T00:00:00-05:00</published><updated>2023-04-06T15:42:15-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-graphql</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/what-is-graphql/"><![CDATA[<p><img src="/images/v1-graphql.png" alt="GraphQL Logo" /></p>

<p>I recently consume GraphQL queries. Here’s what I learned:</p>

<h2 id="what-is-graphql">What is GraphQL?</h2>

<p>GraphQL is a way of getting data over HTTP in the form of JSON where the client has control over what data it receives.</p>

<p>While there are other JSON + HTTP standards, like Rest (for resources), OData (especially for higher complexity), etc.</p>

<p>GraphQL is what I believe is easier to implement for both client and server.</p>

<h2 id="advantages-of-graphql-for-consumerclient">Advantages of GraphQL for Consumer/Client</h2>

<h3 id="the-client-gets-only-the-fields-it-wants">The client gets only the fields it wants</h3>

<p>Suppose you have a <code class="language-plaintext highlighter-rouge">User</code> record with the following schema,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
  <span class="nc">String</span> <span class="n">userId</span><span class="o">;</span>
  <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="nc">String</span> <span class="n">address</span><span class="o">;</span>
  <span class="nc">String</span> <span class="n">education</span><span class="o">;</span>
  <span class="o">...</span><span class="na">thousand</span> <span class="n">other</span> <span class="n">fields</span>
<span class="o">}</span>
</code></pre></div></div>

<p>You can define a GraphQL schema like this. This is the format the server can give data in:</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">user</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="n">User</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="k">type</span><span class="w"> </span><span class="n">User</span><span class="p">{</span><span class="w">
  </span><span class="n">userId</span><span class="p">,</span><span class="w">
  </span><span class="n">name</span><span class="p">,</span><span class="w">
  </span><span class="n">address</span><span class="p">,</span><span class="w">
  </span><span class="n">education</span><span class="p">,</span><span class="w">
  </span><span class="err">...</span><span class="n">thousand</span><span class="w"> </span><span class="n">other</span><span class="w"> </span><span class="n">fields</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Now the client can decide what data it actually needs.</p>

<p>The client will write the query as follows</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">query</span><span class="p">{</span><span class="w">
  </span><span class="n">user</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="p">,</span><span class="w">
    </span><span class="n">name</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Here the client will receive only the list of <code class="language-plaintext highlighter-rouge">{id, name}</code> and not other fields like <code class="language-plaintext highlighter-rouge">{address, education}</code>. Therefore, ideally,</p>

<ul>
  <li>The payload size is less. So network transmission is ideally fast.</li>
  <li>Processing of data is fast, as certain fields that are not to be fetched can be ignored. For example, suppose some field like <code class="language-plaintext highlighter-rouge">image</code> takes a lot of processing to generate. If the client isn’t asking for <code class="language-plaintext highlighter-rouge">image</code>, we don’t need to process that field.</li>
</ul>

<p>This also includes nested items</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query{
  user{
    name: {
      firstName
    }
  }
}
</code></pre></div></div>

<h3 id="the-client-can-ask-for-different-types-of-data-within-the-same-request">The client can ask for different types of data within the same request</h3>

<p>GraphQL allows for fetching multiple requests at once. For example, you can have a query like below where both User data and Jobs data are being fetched</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">query</span><span class="p">{</span><span class="w">
  </span><span class="n">users</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="p">,</span><span class="w">
    </span><span class="n">name</span><span class="p">,</span><span class="w">
    </span><span class="n">education</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">jobs</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">name</span><span class="p">,</span><span class="w">
    </span><span class="n">publishedDate</span><span class="p">,</span><span class="w">
    </span><span class="n">educationQualificationRequired</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>‌</p>

<p>This would mean multiple records would be fetched in a single request.</p>

<h2 id="types-of-graphql-queries">Types of GraphQL queries</h2>

<p>There are two main types of GraphQL Queries:</p>

<ol>
  <li><strong>Query</strong>: retrieves data from the server.</li>
  <li><strong>Mutation</strong>: modifies data on the server.</li>
</ol>

<p>I have explained the query above. So here I’ll explain Mutation.</p>

<p>Suppose you want to add a new user</p>

<p>You can create a GraphQL schema like this</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="w"> </span><span class="n">mutation</span><span class="p">{</span><span class="w">
  </span><span class="n">createUser</span><span class="p">(</span><span class="nv">$username</span><span class="p">):</span><span class="w"> </span><span class="n">User</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The above schema means that <code class="language-plaintext highlighter-rouge">createUser</code> when called with a username will return the <code class="language-plaintext highlighter-rouge">User</code> object.</p>

<p>The client mutation query would involve two parts.</p>

<ol>
  <li>The query</li>
  <li>Variables</li>
</ol>

<h3 id="the-mutation-query">The mutation query</h3>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">mutate</span><span class="p">{</span><span class="w">
  </span><span class="n">createUser</span><span class="p">(</span><span class="err">$</span><span class="n">username</span><span class="p">){</span><span class="w">
    </span><span class="n">id</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="variables">Variables</h3>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">username</span><span class="p">:</span><span class="w"> </span><span class="err">"</span><span class="n">Tony</span><span class="w"> </span><span class="n">Stark</span><span class="err">"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">createUser</code> would be called with the <code class="language-plaintext highlighter-rouge">username</code> as “Tony Stark” and only the <code class="language-plaintext highlighter-rouge">id</code> would be returned. The client can choose to return other values like <code class="language-plaintext highlighter-rouge">name</code> as <code class="language-plaintext highlighter-rouge">createUser</code> supports them too.</p>

<h2 id="how-does-a-graph-ql-work-technically">How does a Graph QL work technically?</h2>

<p>GraphQL operates on a single endpoint, typically <code class="language-plaintext highlighter-rouge">/graphql</code>, that receives <code class="language-plaintext highlighter-rouge">POST</code> requests with a <code class="language-plaintext highlighter-rouge">JSON</code> body containing a <code class="language-plaintext highlighter-rouge">query</code> field, which specifies the data to be retrieved or modified, and an optional <code class="language-plaintext highlighter-rouge">variables</code> field for passing in arguments.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"query"</span><span class="p">:</span><span class="w"> </span><span class="s2">"schema which the client wants"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"variables"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"in case your GraphQL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"has multiple queries"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The server then returns a JSON response with a data field containing the requested data.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"whatever"</span><span class="p">:</span><span class="w"> </span><span class="s2">"was defined in your schema"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Ideally, you would have very limited headers like <code class="language-plaintext highlighter-rouge">authorization</code>.</p>

<p>Overall, GraphQL provides a more efficient and flexible way to query and modify data, making it a popular choice for modern API development.</p>]]></content><author><name></name></author><category term="web-development" /><category term="graphql" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/v1-graphql.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/v1-graphql.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Release and Development Snapshot Version Semantic Versioning with Maven</title><link href="https://www.ankushchoubey.com/v1/release-semantic-versioning" rel="alternate" type="text/html" title="Release and Development Snapshot Version Semantic Versioning with Maven" /><published>2023-03-30T00:00:00-05:00</published><updated>2023-03-30T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-release-semantic-versioning</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/release-semantic-versioning"><![CDATA[<p>Semantic Versioning allows us to understand the nature of a release by comparing the newly released version with the previous version.</p>

<p>Each version number would comprise of 3 numbers. <code class="language-plaintext highlighter-rouge">major.minor.patch</code></p>

<p>For example, <code class="language-plaintext highlighter-rouge">3.1.2</code> means</p>

<ol>
  <li>Major version is <code class="language-plaintext highlighter-rouge">3</code></li>
  <li>Minor Version is <code class="language-plaintext highlighter-rouge">1</code></li>
  <li>Patch Version is <code class="language-plaintext highlighter-rouge">2</code></li>
</ol>

<p>Major indicated a Breaking Change, meaning this version is not backward compatible. For example, Major version 3 is not backward compatible with major version 2.</p>

<p>The minor version is for backward-compatible features. For example, version <code class="language-plaintext highlighter-rouge">3.1.2</code> means there has been <code class="language-plaintext highlighter-rouge">1</code> feature added over Major version <code class="language-plaintext highlighter-rouge">3</code>.</p>

<p>The patch version is for bug fixes, non-breaking refactoring, performance improvements, etc. <code class="language-plaintext highlighter-rouge">3.1.2</code> means there have been <code class="language-plaintext highlighter-rouge">2</code> patch releases over minor release <code class="language-plaintext highlighter-rouge">1</code>.</p>

<h2 id="upgrading-using-semantic-versioning">Upgrading using Semantic Versioning</h2>

<p>This way, when we say if we have version <code class="language-plaintext highlighter-rouge">2.1.0</code> and the newest version is <code class="language-plaintext highlighter-rouge">3.0.0</code> we’ll be more careful upgrading because this is a major release. And therefore contains breaking changes.</p>

<p>If the new version is <code class="language-plaintext highlighter-rouge">2.2.0</code> we’ll be okay updating as the version number change indicates it’s a minor release.</p>

<p>If it’s a patch release like <code class="language-plaintext highlighter-rouge">2.1.1</code> we’ll update it right away.</p>

<p>Note: This version number depends on the programmer. While upgrading from one version to another, make sure to run all your automated tests to verify that nothing breaks.</p>

<hr />

<h2 id="using-semantic-versioning-in-maven">Using Semantic Versioning in Maven</h2>

<p>In maven projects, we have two versions</p>

<ol>
  <li>Release version: Released to the public.</li>
  <li>Development version: Indicating this is the next development. The development version has <code class="language-plaintext highlighter-rouge">-SNAPSHOT</code> assigned to it.</li>
</ol>

<p>So, if the release is <code class="language-plaintext highlighter-rouge">2.0.0</code>, the development snapshot will be <code class="language-plaintext highlighter-rouge">2.0.1-SNAPSHOT</code>.</p>

<p>The problem here is what you do on the next release.</p>

<p>You can’t have <code class="language-plaintext highlighter-rouge">3.0.1</code> as the major release. Nor you can have <code class="language-plaintext highlighter-rouge">3.0.2</code> as the next patch release.</p>

<p>The major should be <code class="language-plaintext highlighter-rouge">3.0.0</code> and patch should be <code class="language-plaintext highlighter-rouge">3.0.1</code> with <code class="language-plaintext highlighter-rouge">3.0.2-SNAPSHOT</code> as dev version.</p>

<p>So here’s what I did,</p>

<ol>
  <li>Remove <code class="language-plaintext highlighter-rouge">-SNAPSHOT</code> from the development snapshot.</li>
  <li>if the release is <code class="language-plaintext highlighter-rouge">major</code>, increment <code class="language-plaintext highlighter-rouge">major</code> and set <code class="language-plaintext highlighter-rouge">minor</code> and <code class="language-plaintext highlighter-rouge">patch</code> to <code class="language-plaintext highlighter-rouge">0</code>.
if the release is minor<code class="language-plaintext highlighter-rouge">, set</code> patch<code class="language-plaintext highlighter-rouge">to</code>0`</li>
  <li>If the release is <code class="language-plaintext highlighter-rouge">patch</code>, do nothing.</li>
</ol>

<p>Now, the patch version would just be the same as the snapshot with <code class="language-plaintext highlighter-rouge">-</code>SNAPSHOT` removed.</p>

<p>The next development version will always be <code class="language-plaintext highlighter-rouge">{major}.{minor}.{patch+1}-SNAPSHOT</code>.</p>]]></content><author><name></name></author><category term="configuration-management" /><category term="release-cycle" /><summary type="html"><![CDATA[Semantic Versioning allows us to understand the nature of a release by comparing the newly released version with the previous version.]]></summary></entry><entry><title type="html">Manage Configuration Better By Avoiding Deleting or Making it Last Step</title><link href="https://www.ankushchoubey.com/v1/avoid-or-mitigate-deleting" rel="alternate" type="text/html" title="Manage Configuration Better By Avoiding Deleting or Making it Last Step" /><published>2023-03-26T00:00:00-05:00</published><updated>2023-03-26T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-avoid-or-mitigate-delete</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/avoid-or-mitigate-deleting"><![CDATA[<p>I have tried this in the past.</p>

<p>I wanted to restart something on Kubernetes.</p>

<p>I wrote a nice script. Which goes and deletes a prod.</p>

<p>Here was the problem. I forgot to add grep to filter out which pod to delete.</p>

<p>Thankfully, this was the dev environment and not production. And thankfully I don’t have access to run non-read commands on PROD.</p>

<p>And ended up deleting every pod.</p>

<p>My <strong>wrong script</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> config.yaml
kubectl get pods| <span class="nb">awk</span> <span class="s1">'{print $1}'</span> | kubectl delete pod <span class="nt">-n</span> <span class="o">{</span>namespace<span class="o">}</span>
</code></pre></div></div>

<p>The <strong>right script</strong> would have been to grep first:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> config.yaml
kubectl get pods| <span class="nb">awk</span> <span class="s1">'{print $1}'</span> | <span class="nb">grep</span> <span class="o">{</span>searchTerm<span class="o">}</span> | kubectl delete pod <span class="nt">-n</span> <span class="o">{</span>namespace<span class="o">}</span>
</code></pre></div></div>

<p>There was a <strong>better solution</strong>:</p>

<p>rolling restart. I could have used rolling restart here to just restart one deployment.</p>

<p><strong>This way only when the new is ready we delete the old.</strong></p>

<hr />

<p>I found a parallel of this principle in git.</p>

<p>I “proud” myself for not learning git well. Instead of resolving a complex merge between the dev and the upper branch. I would delete the upper branch.</p>

<p>The better approach would be to create a branch and rename branches. Test and delete the old main branch.</p>

<p>This is what I would try to follow.</p>

<p>Avoid deleting. Or if deleting can’t be avoided. Create a backup and move deleting to an end state after testing everything.</p>]]></content><author><name></name></author><category term="configuration-management" /><summary type="html"><![CDATA[I have tried this in the past.]]></summary></entry><entry><title type="html">7 Tools To Make Good Love Choices</title><link href="https://www.ankushchoubey.com/v1/7-tools-for-making-good-love-choices/" rel="alternate" type="text/html" title="7 Tools To Make Good Love Choices" /><published>2023-03-25T00:00:00-05:00</published><updated>2023-03-25T15:42:15-05:00</updated><id>https://www.ankushchoubey.com/v1/7-tools-for-making-good-love-choices</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/7-tools-for-making-good-love-choices/"><![CDATA[<p>I wrote these 7 tools as a way to advise a friend. These came from the struggle and learning I had over the months.</p>

<p>These tools are arranged in order or 3-3-1.</p>

<ol>
  <li>The first three would help you calm down and understand what to do.</li>
  <li>The next three would help you think long-term.</li>
  <li>The last one is a human mistake we all make.</li>
</ol>

<p><img src="/images/tommy-love.jpeg" alt="Thomas Shelby Love" /></p>

<p><sub>Even Thomas Shelby has his moments</sub></p>

<hr />

<h2 id="set-1-to-help-you-calm-down-and-to-understand-what-to-do">Set 1: To help you calm down and to understand what to do</h2>

<h3 id="tool-1-process-your-feelings">Tool 1: Process your feelings</h3>

<p>No one understands you as well as you understand yourself. It’s no one else’s responsibility to process your emotions.</p>

<p>Suppose you expect someone else to solve emotional problems for you. It’s too much for them.</p>

<p>Ever had someone cry in front of you? Because of you?? How did you react? We all have different levels of emotional capabilities. And it’s not always right or fair to put something that we understand and we can deal with on someone else.</p>

<p>We can take guidance from others. But we shouldn’t give up our own sense of rationality to others.</p>

<p>All of our major problems in life are emotional problems. We solve logical problems super quickly but have a hard time solving emotional problems.</p>

<p>The way to solve emotional problems is to learn to sit. Sit down for a long period and ask yourself questions when emotions pop up.</p>

<p>Don’t dwell on the emotions. Just try to logically break them down.</p>

<p>If you are facing something bad, remember it’ll be better in a few days and better in a few months. <strong>Give yourself space</strong>.</p>

<h3 id="tool-2-know-what-you-want">Tool 2: Know what you want</h3>

<p>We often don’t know what we want. We have a vague sense of it. But we don’t really know.</p>

<p>When we don’t know what they want clearly, we have a hard time having conversations or negotiating with others.</p>

<p>What do you want? Why do you want them? Articulate it fully for yourself and then to others.</p>

<h3 id="tool-3-have-clear-communication">Tool 3: Have clear communication</h3>

<p>You can’t have what you want if you can’t communicate properly. Remember, displaying anger and annoyance won’t help you persuade. The way to persuade is to be assertive and yet be kind. To know what their problem is and to know yours. And to balance out both your interests and theirs.</p>

<hr />

<h2 id="set-2-to-help-you-think-long-term">Set 2: To help you think long term</h2>

<h3 id="tools-4-needs-over-wants">Tools 4: Needs over Wants</h3>

<p>What we want is not always good for us. We may want to do drugs, but that doesn’t mean it is good for us.</p>

<p>We should do what we “need”. With this, we can ask “Do I really need drugs?“. Obviously “No“. We don’t need it.</p>

<p>Needs are always good for us. So, focus on needs over wants.</p>

<p>At the same time, we cannot sustain without “needs“. Therefore <strong>needs are non-negotiable.</strong></p>

<h3 id="tool-5-things-needed-for-a-healthy-relationship-are-non-negotiable">Tool 5: Things “needed“ for a healthy relationship are non-negotiable</h3>

<p>Like the previous tool. Some things are “needed“ and without those needs, we won’t have a base.</p>

<p>Similarly, some things that are “needed“ for a good relationship.</p>

<ul>
  <li>Mutual Respect</li>
  <li>Good Communication</li>
  <li>Willingness to solve problems</li>
  <li>etc</li>
</ul>

<p>Without these “needs” how can’t we even have a good relationship. Therefore, things “needed” to make a relationship work are also non-negotiable.</p>

<p>While expressing yourself, and while deciding what you want, make sure to focus highly on things “needed“ for a good relationship.</p>

<p>We all should hope to not get what we want but to get what we need.</p>

<h3 id="tool-6-know-your-core-values-and-never-compromise-try-to-make-decisions-using-them">Tool 6: Know your core values. And never compromise. Try to make decisions using them.</h3>

<p>When in doubt consult your core values. Your core values are who you are.</p>

<p>For example, my ideal core values are:</p>

<ol>
  <li>Clarity</li>
  <li>Responsibility</li>
  <li>Inputs</li>
  <li>Systems</li>
  <li>Time</li>
  <li>Optimism</li>
  <li>Team Work</li>
  <li>Adventure</li>
</ol>

<p>If I have a problem, which is an emotional problem, I’ll rely on these core values to solve them.</p>

<hr />

<h2 id="set-3-a-mistake-we-all-make">Set 3: A mistake we all make</h2>

<h3 id="tool-7-never-try-to-manipulate">Tool 7: Never try to manipulate</h3>

<p>We try to manipulate the person or the situation to get what we want.</p>

<p>We try to think in terms of if I do X, they’ll think Y. “Mai aasa karungi to vo aasa soch lenge“. This all is manipulation.</p>

<p>Remember, having a partner or even marriage is just one stage of a relationship, there are stages after it too.</p>

<p>Some things are outside our control, and it’s best if they are outside our control. They are not meant to be in our control. Nature is efficient. And by trying to control it, we make things worse.</p>

<p>So let certain things be and never try to manipulate.</p>

<blockquote>
  <p>Do good and let go of the outcome.</p>
</blockquote>

<blockquote>
  <p>कर्म करो और फल की चिंता मत करो</p>
</blockquote>]]></content><author><name></name></author><category term="love" /><category term="team-work" /><category term="non-technical" /><summary type="html"><![CDATA[कर्म करो और फल की चिंता मत करो]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/tommy-love.jpeg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/tommy-love.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">BDD vs UI/UX/TDD - Understanding the Key Differences for Customer-Centric Problem Solving</title><link href="https://www.ankushchoubey.com/v1/bdd-vs-tdd" rel="alternate" type="text/html" title="BDD vs UI/UX/TDD - Understanding the Key Differences for Customer-Centric Problem Solving" /><published>2023-03-22T00:00:00-05:00</published><updated>2023-03-22T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-what-should-go-into-bdd</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/bdd-vs-tdd"><![CDATA[<p>We are often confused about what constitutes BDD.</p>

<p>This makes us add un-necessarily details to BDD spec file.</p>

<p>Here’s how one should think about this</p>

<blockquote>
  <p>Stop thinking about how the product would look or feel. And focus on the customer’s interaction with the product.</p>
</blockquote>

<blockquote>
  <p>Does your product behaviors actually solve the customer’s problem.</p>
</blockquote>

<p>If yes, find the best way to implement and represent those behaviours. This means UI design in wireframes and UI functionality covered by UI TDD and backend implementation covered by BackendTDD are not relevant here.</p>

<p>Therefore, <strong>BDD drives your UI/UX and TDD</strong>.</p>

<p><img src="https://docs.google.com/drawings/d/e/2PACX-1vRONWHyF6MDLxwYnnUeZHvg9jPjWjKoxTOfaJdu_roqlYPvS2LA3FLhGp-h2xM2iUAF3I76yylz4pFd/pub?w=1232&amp;h=875" alt="" /></p>

<h2 id="example">Example</h2>

<p>You believe the customer would often forget his/her password. So, how should you solve this problem.
Doing some brainstorming you come up with an example map.</p>

<p>User comes and logges in. He leaves the tab and comes back. He is shown an prompt to enter his 4 digit pin.</p>

<p>This leads to another example where he sets his 4 digit ping.</p>

<p>When user selects a password, he is allowed to set a shorter 4 digit pin.</p>

<p>Now you convert this into Gherkin.</p>

<blockquote>
  <p>Given a user has logged in
When they leave the tab untouched for 10 minutes
Then they should be prompted to enter their 4 digit pin.</p>
</blockquote>

<blockquote>
  <p>Given user is prompted 4 digit pin
When pin is valid
Then user’s session should resume</p>
</blockquote>

<blockquote>
  <p>Given user is prompted to enter 4 digit pin
When pin in invalid for 4 times
Then user should be logged out</p>
</blockquote>

<p>Now for each of the steps, you can decide the best wireframe, frontend, and backend implementation strategies.</p>

<p>Note: The above gherkins don’t define how something should look. They just define behavior that would solve the user’s problem.</p>]]></content><author><name></name></author><category term="bdd" /><summary type="html"><![CDATA[BDD focuses on solving customer problems, not implementation details like UI. Those are addressed in other activities like wireframing and TDD.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://docs.google.com/drawings/d/e/2PACX-1vRONWHyF6MDLxwYnnUeZHvg9jPjWjKoxTOfaJdu_roqlYPvS2LA3FLhGp-h2xM2iUAF3I76yylz4pFd/pub?w=1232&amp;amp;h=875" /><media:content medium="image" url="https://docs.google.com/drawings/d/e/2PACX-1vRONWHyF6MDLxwYnnUeZHvg9jPjWjKoxTOfaJdu_roqlYPvS2LA3FLhGp-h2xM2iUAF3I76yylz4pFd/pub?w=1232&amp;amp;h=875" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Implementing an OAuth Server Manually</title><link href="https://www.ankushchoubey.com/v1/implementing-oauth" rel="alternate" type="text/html" title="Implementing an OAuth Server Manually" /><published>2023-03-22T00:00:00-05:00</published><updated>2023-03-22T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-implementing-oauth-server</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/implementing-oauth"><![CDATA[<p>This blogpost will cover what OAuth is and how I went about implementing OAuth. It does not include theorotical details. It includes practical questions that lead me to the implementation.</p>

<p>When you read a question, you can search for it yourself. I have provided all the resources that I used along the way below too.</p>

<p>I’ll explain OAuth in layman’s terms in the beginning and then go on to explain it in more technical terms.</p>

<p>OAuth is easier to implement than developers think. There are a lot of jargons involved. But you’ll find at its core it’s very easy and cost-effective.</p>

<h1 id="what-is-oauth-and-where-it-is-used">What is OAuth? And where it is used?</h1>

<p>OAuth is a protocol for allowing access to a user’s data to a third party app.</p>

<p>OAuth is not login. OAuth expects the user is logged in and has allowed the access.</p>

<p>You may have seen screen pages like these where you allow one application to access data from your Google account. This is done via OAuth.</p>

<p><img src="/images/implementing-oauth.png" alt="image.png" /></p>

<p>The above image is from redirecting to “authorize“ url.</p>

<h1 id="how-is-oauth-different-from-login-and-how-does-it-work">How is OAuth different from Login? And how does it work</h1>

<p>A normal login just requires username and password.</p>

<p>OAuth is a step that happens after login. If the user is not logged in OAuth step won’t happen.</p>

<p>For example, suppose you create an app called “Chain Mailer“ and you want access to the user’s Gmail data.</p>

<p>You initiate the OAuth flow, this means you redirect the user to Gmail with some special parameters. If the user is not logged in, he is asked to log in into Gmail but Gmail itself. Our “Chain Mailer” app has no control over what Gmail does or what the user does. We have just redirected to Gmail.</p>

<p>If the user logs in they’ll see the permissions page. And if they accept, the <code class="language-plaintext highlighter-rouge">3-Legged OAuth flow</code> would happen between Gmail and our Application.</p>

<p>Note: How OAuth Flow only happened after user logged in into the service.</p>

<p>After the <code class="language-plaintext highlighter-rouge">3-Legged OAuth Flow</code> our application would receive a special token called <code class="language-plaintext highlighter-rouge">Authorization Token</code>. We can use this token while accessing data from Gmail.</p>

<p>The <code class="language-plaintext highlighter-rouge">Authorization Token</code> would include information that we have the permission to access the data.</p>

<p>Note: From here on things would get technical</p>

<h1 id="how-i-implemented-the-oauth-server-myself">How I implemented the OAuth Server myself</h1>

<p>I’ll split the next parts into:</p>

<ol>
  <li>Learning Phrase</li>
  <li>Coding Phrase</li>
  <li>Nuances</li>
</ol>

<h2 id="learning-phrase">Learning Phrase</h2>

<p>Before implementing OAuth Server, I had done the <code class="language-plaintext highlighter-rouge">3-Legged OAuth Flow</code> with another service myself. So, I knew what the <code class="language-plaintext highlighter-rouge">3-Legged</code> flow is.</p>

<p>This is the first place to start learning about OAuth.</p>

<p>The questions you may ask here is:</p>

<ol>
  <li>What is OAuth?</li>
  <li>What is the three legged OAuth flow.</li>
  <li>How to use the access token. → Using the access token by adding a “Authorization“ Header with value “bearer {authorizationToken}“</li>
</ol>

<p>To implement it, I started reading up on Google, but I found it very challenging. Here’s how I learn’t OAuth and all the security concepts I needed to learn.</p>

<ol>
  <li>I started watching a YouTube playlist this gave me a broad idea about the implementation.</li>
  <li>I asked ChatGPT how to implement an OAuth server.
    <ol>
      <li>ChatGPT gave me useful responses that I was able to ask followup questions to.</li>
      <li>My questions included:
        <ol>
          <li>How to implement an OAuth server.</li>
          <li>What is JWT token?</li>
          <li>How to I validate a JWT Token?</li>
          <li>What is RSA algorithm?
            <ol>
              <li>I further jumped into learning about RSA via YouTube.</li>
              <li>Here’s my post on RSA: <a href="https://www.ankushchoubey.com/v1/rsa">RSA Algorithm</a></li>
            </ol>
          </li>
          <li>What’s JWK?</li>
          <li>What’s the difference between JWE and JWS?</li>
          <li>How to define different scopes?</li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

<p>These gave me a basic idea of what to do.</p>

<p>I realized that I just need to create a 3-endpoints and one permissions page.</p>

<p>The Authentication (Login) is already handled. The permissions page comes one later after the Login one.</p>

<h2 id="implementation-phase">Implementation Phase</h2>

<p>With OAuth multiple third party application can register and access our service.</p>

<p>This means I needed to store information about multiple applications.</p>

<p>I created a DB record called OAuthClient where I stored</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">clientId</code> - A unique id given to the external application</li>
  <li><code class="language-plaintext highlighter-rouge">hashedClientSecret</code> (a hashed version of client secret. Similar to how password is hashed and saved.)</li>
  <li><code class="language-plaintext highlighter-rouge">scopes</code> (permissions that are to be provided to application)</li>
  <li><code class="language-plaintext highlighter-rouge">redirectUri</code> (uri where I would have to redirect).</li>
</ul>

<p>I would generate a clientId, clientSecret and add in scopes and provide these data to third party app.</p>

<hr />

<p>I created another DB record where I store information about the token given. I called it <code class="language-plaintext highlighter-rouge">OAuthToken</code>. This would include the following.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">clientId</code></li>
  <li><code class="language-plaintext highlighter-rouge">code</code> → this is a temporary code that would be resent from the external app to my oauth server during stage 3 of 3-legged Oauth Flow.</li>
  <li><code class="language-plaintext highlighter-rouge">accessTokenGiven</code> → A boolean value representing if the OAuth token was already granted for the particular code.</li>
</ul>

<p>Using these, I was able to issue OAuth tokens.</p>

<hr />

<p>I also needed JWT token generation.</p>

<p>I used a library to create JWTs and included all the information related to the user application and scope.</p>

<p>For generating JWTs I had to learn what <code class="language-plaintext highlighter-rouge">PEM</code> file is.</p>

<hr />

<p>I also had to create a public <code class="language-plaintext highlighter-rouge">JWK endpoint</code> which my api gateway would access to validate the token. <code class="language-plaintext highlighter-rouge">JWK</code> is a standard way of sharing public keys for JWT token.</p>

<p>I also added a record for scopes. Which was something like</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">scope</code> → unique name of the scope</li>
  <li><code class="language-plaintext highlighter-rouge">description</code> → unique description of the scope used to show user what to do in the permissions page.</li>
</ul>

<p>Here’s my post on how I choose to define scopes: <a href="https://www.ankushchoubey.com/v1/oauth-scopes">Defining Scopes for your OAuth Service</a></p>

<h1 id="nuances">Nuances</h1>

<h2 id="oauth-works-protocol-is-snake-cased">OAuth works protocol is snake cased</h2>

<p>I initially implemented all endpoints as camel case. But it did not work. Then I had to modify it to snake case.</p>

<h2 id="oauth-formats">OAuth formats</h2>

<p>Formats within OAuth protocol are very fixed. Certain endpoints accept and return data in a particular format only and they don’t have randomness.</p>

<p>For example, the <code class="language-plaintext highlighter-rouge">token</code> endpoint would always be in the following format.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"authorize_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{jwtToken}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"refrest_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{token}"</span><span class="p">,</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>We can’t extend the format by adding our own stuff. But mandatory things would be preserved as it is. For that I had to read up the main OAuth specs a few times.</p>

<h1 id="my-thoughts">My thoughts</h1>

<p>After implementing OAuth server myself, I feel confident about other protocols. Protocols may seem too technical but at their core they are really easy.</p>

<p>Implementing OAuth helped me understand and get better at computer security. And also, helped me step into a much better principle developer role.</p>

<h1 id="resources">Resources</h1>

<p>Jump around these</p>

<p><a href="https://www.youtube.com/watch?v=t18YB3xDfXI">An Illustrated Guide to OAuth and OpenID Connect</a></p>

<p><a href="https://www.youtube.com/watch?v=996OiexHze0">OAuth 2.0 and OpenID Connect (in plain English)</a></p>

<p><a href="https://www.youtube.com/playlist?list=PL1Nml43UBm6dOj4UuH-7a9e3wO6eL2SCi">OAuth 2.0 tutorial Playlist </a></p>

<p>ChatGPT</p>

<p><a href="https://www.rfc-editor.org/rfc/rfc6749">Main Spec: The OAuth 2.0 Authorization Framework</a></p>

<h3 id="my-blogposts">My Blogposts</h3>

<p><a href="https://www.ankushchoubey.com/v1/oauth-scopes">Defining Scopes for your OAuth Service</a></p>

<p><a href="https://www.ankushchoubey.com/v1/rsa">RSA Algorithm</a></p>]]></content><author><name></name></author><category term="security" /><category term="oauth" /><summary type="html"><![CDATA[Implementing OAuth server is easier than it looks and it saves money in the long run.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/implementing-oauth.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/implementing-oauth.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Have better variable and method names for technical layer by copying others</title><link href="https://www.ankushchoubey.com/v1/better-var-name-by-copying/" rel="alternate" type="text/html" title="Have better variable and method names for technical layer by copying others" /><published>2023-03-18T00:00:00-05:00</published><updated>2023-03-18T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/better-variable-names-by-copying</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/better-var-name-by-copying/"><![CDATA[<p>Writing good variable names clarifies your thinking. But it can be really really hard coming up with your own variable names.</p>

<p>If you are in a domain, you could pick up domain specific names.</p>

<p>For example, a common school software may have Students, Teacher, etc.</p>

<p>This maybe classic domain driven designs.</p>

<p>But in technical layers it can be harder to come up with variable names.</p>

<p>I started working with NodeJs Mongoose framework. I created my Model and was thinking of what method names should I use for common operations like <code class="language-plaintext highlighter-rouge">save</code> and <code class="language-plaintext highlighter-rouge">find</code> . There were multiple <code class="language-plaintext highlighter-rouge">find</code> operations and they were getting messy because it was hard to understand what is what.</p>

<p>In javascript, we don’t get an error if we are passing less number of parameters. For each <code class="language-plaintext highlighter-rouge">find</code> I made it was hard to understand what to pass.</p>

<p>Then I remembered how <code class="language-plaintext highlighter-rouge">Spring Data</code></p>

<p>handles the same problem.</p>

<p>They use <code class="language-plaintext highlighter-rouge">findBy{Attribute}And{AnotherAttribute}</code>.</p>

<p>Now my code became much much better. And I followed <code class="language-plaintext highlighter-rouge">Spring Data</code> ‘s entire method naming style.</p>

<hr />

<p>If you are writing a custom library or working in a language that doesn’t have good variable/method names. You can adopt naming conventions of other projects.</p>

<p><a href="https://pytorch.org/">Pytorch</a></p>

<p><a href="https://www.tensorflow.org/">Tensorflow</a></p>

<p>Spring Boot</p>

<p>UI: DevExpress Extreme</p>]]></content><author><name></name></author><category term="clean-code" /><summary type="html"><![CDATA[Writing good variable names clarifies your thinking. But it can be really really hard coming up with your own variable names.]]></summary></entry><entry><title type="html">Stating the Truth When It Could Hurt</title><link href="https://www.ankushchoubey.com/v1/truth/state-truth-when-it-hurts" rel="alternate" type="text/html" title="Stating the Truth When It Could Hurt" /><published>2023-03-16T00:00:00-05:00</published><updated>2023-03-16T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/truth/v1-state-the-truth-even-when-its-hard</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/truth/state-truth-when-it-hurts"><![CDATA[<p>I often talk about truth and telling the truth all time time.</p>

<p>Many people agree with me that it’s a good thing to tell the truth.</p>

<p>But then comes parts where they start compromising telling the truth.</p>

<p>For example, they say I don’t want to hurt them so I won’t tell the truth there.</p>

<p>Or that “hinting” is same as telling the truth.</p>

<p>But truth isn’t something that you hide. Truth is actually not even something that you “say”.</p>

<p>It’s better to use a different vocabulary. State the truth.</p>

<p>We know that we don’t tell the facts. We state the facts.</p>

<p>Similarly, we state the truth. Meaning the truth passes through as it is.</p>

<p>For example, someone asks how we are doing?</p>

<p>Instead of saying I am doing really good. We say, I am better. If they drill down, I share what is really going on.</p>

<p>If someone asks why wasn’t this software delivery on time, I say, I haven’t been doing so well lately. Or that I haven’t been focused lately.</p>

<p>This is combined with honest action, to finish the work on time.</p>

<h2 id="a-recent-situation">A recent situation</h2>

<p>There is another situation I encountered. And it’s likely where many people are likely to lie.</p>

<p>I was in an Uber a few days ago. And the driver asked if he could take us offline. Offline means without the app. The driver would cancel the booking. And take us to the same destination without Uber. And I would have to pay him the same money. This way, the driver would not have his pay cut to Uber.</p>

<p>At the time, I did think Uber is a big company. But is it right to cheat against the big company. I thought let’s lie to Uber. I agreed to go offline. He canceled the booking and I snuck a deal to get 50 Rs. off the ride.</p>

<p>Pretty sweet. Now, the person who had booked the ride started getting calls from Uber. In the Uber app it showed that their is a cancelling fee of 38.10 Rs.</p>

<p>I thought Hmm. So, even after snugging a deal with the driver.</p>

<p>I got 11.90 Rs off if I add up the cancelling fee. That’s pretty bad.</p>

<p>The person who booked kept getting multiple calls from Uber to pay up.</p>

<p>Hmm. Uber help allowed selecting “My driver asked me to book without Uber”. I thought for a minute, what I should do. The person who had booked the Uber said that the Driver might lose his Job. I thought for a minute. And then decided I should side with the truth. I explained to the person that we should go with the truth and click the “My driver asked me to book without Uber” option. We did get out money back. 38Rs isn’t a big number. It’s about half a dollar.</p>

<p>Here why I choose “My driver asked me to book without Uber”.</p>

<p>The driver who did asked us for going offline, might also be convincing the same to other riders. And they maybe getting cancelling fees too.</p>

<p>Uber is a business built by hard working people. If they are providing a platform to earn, they should get the reward. The driver wouldn’t even have a job if Uber didn’t provide for it.</p>

<p>So, it didn’t make long term sense for the driver to try to betray his parent company.</p>

<p>If I side with the truth, the possibility that the driver no longer repeats the mistakes is created. It maybe possible that the driver chooses to still repeat the same mistakes. But at a minimum, he has an opportunity to choose a truthful path. And everything he does is truthful.</p>

<p>I also thought about how do court judges and people in administration do justice. Even though they know what is truth, they still may have humanly feeling to the person that may not have things in their favor. What should a judge do.</p>

<p>“We side with the truth”</p>

<p>Always. In every situation. No matter how big or small.</p>

<p>If I had told the truth with the intent of doing good. I would have explained the driver that the consequence of his actions. I should have denied his proposal. And that way, I would have given him a perspective that would have led him to a truthful path.</p>

<p>Since, customer is the king. Uber didn’t charge me anything. But it’s still weird to think that I was involved too.</p>

<p>For Uber the company, it costed 750 Rs. The money adds up to what they pay their employees. And everyone’s home runs.</p>

<ul>
  <li>To me it costed 700Rs. That’s fine.</li>
  <li>To the person who booked the uber. It costed multiple phone calls.</li>
  <li>To the driver may costed his and his family’s earning.</li>
</ul>

<h2 id="truth-with-truthful-action-passes-through-without-hurting-us">Truth with truthful action passes through without hurting us.</h2>

<p>If the driver had been truthful, he wouldn’t have had to face this situation. And neither would we.</p>

<p>If I had been truthful, both we and the driver wouldn’t have faced the situation.</p>

<p>Because truth passes through without hurting us.</p>

<p>Truth passes through can be imagined and us just standing and truth passing across us. If we are lying, we engage against truth, and it hurts us. If we don’t engage against the truth and let is pass, it doesn’t hurt us.</p>]]></content><author><name></name></author><category term="non-technical" /><category term="truth" /><category term="mature" /><summary type="html"><![CDATA[Why we should use the vocabulary 'stating'. And how can we state the truth.]]></summary></entry><entry><title type="html">You are really doing BDD when</title><link href="https://www.ankushchoubey.com/v1/you-are-following-good-bdd-when" rel="alternate" type="text/html" title="You are really doing BDD when" /><published>2023-03-11T00:00:00-06:00</published><updated>2023-03-11T14:52:08-06:00</updated><id>https://www.ankushchoubey.com/v1/v1-you-are-following-good-bdd-when</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/you-are-following-good-bdd-when"><![CDATA[<p>You are really doing BDD if you answer yes to these questions:</p>

<ul>
  <li>BDD specifications drive the design of VDIs, prioritization and development.
    <ul>
      <li>Specs first VDIs later.</li>
      <li>Specs first Development later.</li>
    </ul>
  </li>
  <li>Any new decision made about the product functionality leads to an updated spec file.
    <ul>
      <li>Therefore the spec file is an integral part of every meeting.</li>
    </ul>
  </li>
  <li>
    <p>Any dispute or confusion about what was decided is resolved by reviewing the spec file.</p>
  </li>
  <li>
    <p>You remember the specification files because you have read, modified and used them so much.</p>
  </li>
  <li>
    <p>Everyone involved in the product life cycle (including non-technical people) knows what BDD is and has access to spec file.</p>
  </li>
  <li>When any new person who wants to understand the product is given the BDD file to understand it.</li>
</ul>]]></content><author><name></name></author><category term="bdd" /><summary type="html"><![CDATA[You are really doing BDD if you answer yes to these questions:]]></summary></entry></feed>