<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2020-12-12T23:07:59-06:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Random Thoughts</subtitle><entry><title type="html">Why Engineers should get into other field.</title><link href="www.ankushchoubey.com/engineer/" rel="alternate" type="text/html" title="Why Engineers should get into other field." /><published>2020-12-13T00:00:00-06:00</published><updated>2020-12-13T00:00:00-06:00</updated><id>www.ankushchoubey.com/engineers-other-field</id><content type="html" xml:base="www.ankushchoubey.com/engineer/">&lt;h2 id=&quot;computer-engineers-solve-problems-by-building-software-solutions-&quot;&gt;Computer Engineers solve problems by building software solutions.-&lt;/h2&gt;

&lt;p&gt;We then take those solutions and make it more efficient.&lt;/p&gt;

&lt;p&gt;We also create alternative solutions that replaces the original solutions.&lt;/p&gt;

&lt;p&gt;All of these is done fast, every fast.&lt;/p&gt;

&lt;p&gt;We hypothesis, test on small scale. test on big scale, fast and then test in real workd.&lt;/p&gt;

&lt;p&gt;If a demand is unreasonable, we still get it done.&lt;/p&gt;

&lt;p&gt;If the deadline is really near, we get it done.&lt;/p&gt;

&lt;h2 id=&quot;how-other-field-can-benefit&quot;&gt;How other field can benefit&lt;/h2&gt;

&lt;p&gt;This is because of the nature of software and the core of engineering is to solve problem as easily as possible and in the best way as possible.&lt;/p&gt;

&lt;p&gt;Any software enginner talking to business users/consumer the people, the who actually use our product, realizes quickly a that they are not using the product to it’s fullest or they don’t know that the problems they are facing can be easily solved with help of computer technology.&lt;/p&gt;

&lt;h2 id=&quot;some-field-are-getting-stagnated&quot;&gt;Some field are getting stagnated.&lt;/h2&gt;

&lt;p&gt;There is a long delay in medical research getting to production. (Approx 20 year) &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;There hasn’t been much innovation in field like health care, ivil engineer or biotechnology&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;4 Hour Body &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Computer Engineers solve problems by building software solutions.-</summary></entry><entry><title type="html">Non=profit</title><link href="www.ankushchoubey.com/non_profit/" rel="alternate" type="text/html" title="Non=profit" /><published>2020-12-11T00:00:00-06:00</published><updated>2020-12-11T00:00:00-06:00</updated><id>www.ankushchoubey.com/non-profit</id><content type="html" xml:base="www.ankushchoubey.com/non_profit/">&lt;p&gt;It’s difficult for non=profits to do good at scale.&lt;/p&gt;

&lt;p&gt;Software non-profits are exception to this because their distribution and infrastructure is cheap.&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s difficult for non=profits to do good at scale.</summary></entry><entry><title type="html">Eventually perfect feature</title><link href="www.ankushchoubey.com/eventually_perfect/" rel="alternate" type="text/html" title="Eventually perfect feature" /><published>2020-12-08T00:00:00-06:00</published><updated>2020-12-08T00:00:00-06:00</updated><id>www.ankushchoubey.com/eventually-perfect</id><content type="html" xml:base="www.ankushchoubey.com/eventually_perfect/">&lt;p&gt;While developing software there are 2 ways to develop.&lt;/p&gt;

&lt;p&gt;One is pack the release with all features.&lt;/p&gt;

&lt;p&gt;For example: If a feature which processes different to supports&lt;/p&gt;

&lt;p&gt;Pack it to support all file types on Day One.&lt;/p&gt;

&lt;p&gt;This works well well when.&lt;/p&gt;

&lt;p&gt;Better way to do this is to release with the minimum required feature and then add small releases overtime.&lt;/p&gt;

&lt;p&gt;Most software features never get used. Unless you are a FANG company or even if you are, you should save your resources to focus on the area that matters most.&lt;/p&gt;

&lt;p&gt;That you only understand after the feature is in the wild for a while.&lt;/p&gt;

&lt;p&gt;Though this approach cannot be used if the feature needs to be a secret. In which case allowing beta tests will be helpful.&lt;/p&gt;</content><author><name></name></author><summary type="html">While developing software there are 2 ways to develop.</summary></entry><entry><title type="html">Write Tests after Cleaning Code.</title><link href="www.ankushchoubey.com/writing_test/" rel="alternate" type="text/html" title="Write Tests after Cleaning Code." /><published>2020-11-20T00:00:00-06:00</published><updated>2020-11-20T00:00:00-06:00</updated><id>www.ankushchoubey.com/test-coverage-after-cleaning-code</id><content type="html" xml:base="www.ankushchoubey.com/writing_test/">&lt;p&gt;Quality of code determines the quality of the test.&lt;/p&gt;

&lt;p&gt;An unclean code will lead to an unclean test.&lt;/p&gt;

&lt;p&gt;Hence, the tests will be as hard to understand and modify as the code.&lt;/p&gt;

&lt;p&gt;If one decides to improve code quality, then all of the tests to be refactored too.&lt;/p&gt;

&lt;p&gt;Overall the workload will be about thrice more work than it needs to be.&lt;/p&gt;

&lt;p&gt;A better alternative is to write code, clean it, and write tests.&lt;/p&gt;</content><author><name></name></author><summary type="html">Quality of code determines the quality of the test.</summary></entry><entry><title type="html">Importance of different devops activities</title><link href="www.ankushchoubey.com/devops/" rel="alternate" type="text/html" title="Importance of different devops activities" /><published>2020-11-08T00:00:00-06:00</published><updated>2020-11-08T00:00:00-06:00</updated><id>www.ankushchoubey.com/importance-devops</id><content type="html" xml:base="www.ankushchoubey.com/devops/">&lt;p&gt;https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52&lt;/p&gt;

&lt;p&gt;CICD&lt;/p&gt;

&lt;p&gt;Testing&lt;/p&gt;

&lt;p&gt;DB Deployment&lt;/p&gt;

&lt;p&gt;Monitoring&lt;/p&gt;

&lt;p&gt;Clean Code&lt;/p&gt;</content><author><name></name></author><summary type="html">https://medium.com/swlh/how-to-become-an-devops-engineer-in-2020-80b8740d5a52</summary></entry><entry><title type="html">Plan quickly. Move fast. Break things.</title><link href="www.ankushchoubey.com/move/" rel="alternate" type="text/html" title="Plan quickly. Move fast. Break things." /><published>2020-11-03T00:00:00-06:00</published><updated>2020-11-03T00:00:00-06:00</updated><id>www.ankushchoubey.com/move</id><content type="html" xml:base="www.ankushchoubey.com/move/">&lt;p&gt;&lt;img src=&quot;/images/move.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;Photo by &lt;a href=&quot;https://unsplash.com/@chaseelliottclark?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Chase Clark&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/move?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I have made this mistake a lot.&lt;/p&gt;

&lt;p&gt;I spent too much time planning and too much time deciding the perfect strategy which often took months to come up and then either never implemented it.&lt;/p&gt;

&lt;p&gt;Later I found out that the hard way was much shorter and would often take me just a few hours or at max a week.&lt;/p&gt;

&lt;p&gt;There is an analogy in programming which says that a programmer will spend six hours automating something that takes six minutes.&lt;/p&gt;

&lt;p&gt;If something is repeated so every frequently then the six minutes saving in time is justified.&lt;/p&gt;

&lt;p&gt;But for most things, it is better to move on fast and break things.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/move.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/move.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Comparison in evaluation</title><link href="www.ankushchoubey.com/comparison/" rel="alternate" type="text/html" title="Comparison in evaluation" /><published>2020-11-03T00:00:00-06:00</published><updated>2020-11-03T00:00:00-06:00</updated><id>www.ankushchoubey.com/comparison</id><content type="html" xml:base="www.ankushchoubey.com/comparison/">&lt;p&gt;While evaluation performance don’t compare one person to another&lt;/p&gt;

&lt;p&gt;I see managers make this mistake a lot they compare one persons performance to another persons performance.&lt;/p&gt;

&lt;p&gt;Though this may seem good for some things like giving an award to the best performer a better approach would be compare the person with his whole past performance&lt;/p&gt;

&lt;p&gt;This not just gives everyone a fair chance but also is more accurate Level of judging improvement.&lt;/p&gt;

&lt;p&gt;So in math system it would be like change in percentage rather than change in value. I’ll percentage growth instead of growth in value.&lt;/p&gt;

&lt;p&gt;That’s almost cannot be used as a way for new hires sense the person in charge know so little about them.&lt;/p&gt;</content><author><name></name></author><summary type="html">While evaluation performance don’t compare one person to another</summary></entry><entry><title type="html">Age is not a perfect measure of experience</title><link href="www.ankushchoubey.com/age/" rel="alternate" type="text/html" title="Age is not a perfect measure of experience" /><published>2020-11-03T00:00:00-06:00</published><updated>2020-11-03T00:00:00-06:00</updated><id>www.ankushchoubey.com/age</id><content type="html" xml:base="www.ankushchoubey.com/age/">&lt;p&gt;There are many kids who at a very young age learn a relatively hard skill like piano. They often get the title of being a child prodigy.&lt;/p&gt;

&lt;p&gt;This categorization means that the child&lt;/p&gt;

&lt;p&gt;er so couldn’t hear what to do but this often ignores the this this is on the premise that the child was born with some special abilities skill to learn or a mindset that that can only be genetically available in some cases it mind before you there are unfair advantages&lt;/p&gt;

&lt;p&gt;Life isn’t fair for everyone there are always on fair advantages but this often undermines the amount of effort that the child has put in to something hard to learn if you take a look at&lt;/p&gt;

&lt;p&gt;most child prodigies they started really on the event four years of five years old old started learning the craft&lt;/p&gt;

&lt;p&gt;one more man I am and where is the age of 10 and 12 they were already 5-6 years experience so no doubt they were better at this scale&lt;/p&gt;

&lt;p&gt;because they spend daily five years crafting it&lt;/p&gt;

&lt;p&gt;this thing is kind of hard and a corporate environment where The years of experience is what is given favour more than the ability of the person to get the job done&lt;/p&gt;</content><author><name></name></author><summary type="html">There are many kids who at a very young age learn a relatively hard skill like piano. They often get the title of being a child prodigy.</summary></entry><entry><title type="html">First Hackathon</title><link href="www.ankushchoubey.com/first_hackathon/" rel="alternate" type="text/html" title="First Hackathon" /><published>2020-10-30T00:00:00-05:00</published><updated>2020-10-30T00:00:00-05:00</updated><id>www.ankushchoubey.com/first-hackethon</id><content type="html" xml:base="www.ankushchoubey.com/first_hackathon/">&lt;p&gt;&lt;img src=&quot;/images/first_hackathon.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;Photo by &lt;a href=&quot;https://unsplash.com/@synkevych?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Roman Synkevych&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/code?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I always wanted to participate in one but I was afraid that my skills are not enough.&lt;/p&gt;

&lt;p&gt;But after working as a programmer for the last two years,  I realized that almost everyone starts with no skill and figure out a solution eventually.&lt;/p&gt;

&lt;p&gt;So my goal for joining was to learn as much as I can. I knew I could do at least something even if not at a level I would expect.&lt;/p&gt;

&lt;p&gt;These are some lessons I learned&lt;/p&gt;

&lt;h2 id=&quot;goal-is-not-working-software&quot;&gt;Goal is not working software&lt;/h2&gt;
&lt;p&gt;The goal for the organizers was not complete working software. The goal was to see how the problem can be tackled from different points of view.&lt;/p&gt;

&lt;h2 id=&quot;team&quot;&gt;Team&lt;/h2&gt;
&lt;p&gt;Our team could have been better organized. We almost wasted 2 weeks out of 5. In the second week, I tried taking up leadership, arranging meetings, and talking to people. But the by 3rd week my “leadership”  declined.&lt;/p&gt;

&lt;p&gt;The reason for the decline was that I was managing another full-time project.&lt;/p&gt;

&lt;h2 id=&quot;support&quot;&gt;Support&lt;/h2&gt;
&lt;p&gt;The organizers were supportive. Plus we had access to AWS Experts. So we could ask them questions on specific issues we were facing with AWS.&lt;/p&gt;

&lt;h2 id=&quot;experimentation&quot;&gt;Experimentation&lt;/h2&gt;
&lt;p&gt;Many teams played it safe. They stuck to what they already knew.&lt;/p&gt;

&lt;p&gt;We experimented. We tried things we did not know before. Though we did not win the challenge, this experimentation increased our learning and the likeliness that we’ll be better prepared for the next one.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/first_hackathon.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/first_hackathon.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Software project never ends</title><link href="www.ankushchoubey.com/software_end/" rel="alternate" type="text/html" title="Software project never ends" /><published>2020-10-23T00:00:00-05:00</published><updated>2020-10-23T00:00:00-05:00</updated><id>www.ankushchoubey.com/software-end</id><content type="html" xml:base="www.ankushchoubey.com/software_end/">&lt;p&gt;Building software is having no fixed deadline. Below are some reasons why.&lt;/p&gt;

&lt;h2 id=&quot;software-vs-physical-products&quot;&gt;Software vs Physical Products&lt;/h2&gt;

&lt;p&gt;Software products are hard to wrap the head around when compared to physical products.&lt;/p&gt;

&lt;p&gt;A physical product occupies physical space which of course software does not.&lt;/p&gt;

&lt;p&gt;Once a physical product is made, unless it is designed for modification, it cannot be modified.&lt;/p&gt;

&lt;p&gt;The software can be modified and improved at any time.&lt;/p&gt;

&lt;h2 id=&quot;there-is-always-something-to-do&quot;&gt;There is always something to do&lt;/h2&gt;

&lt;p&gt;When you look for problems to solve, you’re sure to find something.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Optimize code.&lt;/li&gt;
  &lt;li&gt;Clean code up and make ready for the future.&lt;/li&gt;
  &lt;li&gt;Fix bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it can be hard at times to stop.&lt;/p&gt;

&lt;h2 id=&quot;over-engineering&quot;&gt;Over Engineering&lt;/h2&gt;

&lt;p&gt;Something can be built easily but we spend a lot of time deciding what the future thing might be and then we over-engineer.&lt;/p&gt;

&lt;p&gt;I have been guilty too.&lt;/p&gt;

&lt;h2 id=&quot;the-reason-to-stop&quot;&gt;The reason to stop.&lt;/h2&gt;

&lt;p&gt;It is said that in any software product around 70% of features are not used.&lt;/p&gt;

&lt;p&gt;Many software themselves are not used.&lt;/p&gt;

&lt;p&gt;Time spent fixing this trivial non-existent problem can be spent fixing some other big problems.&lt;/p&gt;

&lt;h2 id=&quot;human-intuitions-and-definition-of-done&quot;&gt;Human Intuitions and Definition of Done&lt;/h2&gt;

&lt;p&gt;Humans can find ways to improve everything. Our judgment is not objective. We need something objective.&lt;/p&gt;

&lt;p&gt;Having a strong definition of done can help be objective.&lt;/p&gt;</content><author><name></name></author><summary type="html">Building software is having no fixed deadline. Below are some reasons why.</summary></entry></feed>