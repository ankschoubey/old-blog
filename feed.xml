<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2023-09-29T22:51:18-05:00</updated><id>https://www.ankushchoubey.com/feed.xml</id><title type="html">Ankush Choubey</title><subtitle>Full Stack Developer - Cloud/Microservices</subtitle><entry><title type="html">Values are ‚Äúnow‚Äù. Act!</title><link href="https://www.ankushchoubey.com/v1/values-are-now/" rel="alternate" type="text/html" title="Values are ‚Äúnow‚Äù. Act!" /><published>2023-09-30T00:00:00-05:00</published><updated>2023-09-30T15:42:15-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-values-are-now</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/values-are-now/"><![CDATA[<p>Photo by <a href="https://unsplash.com/@fridalannerstrom?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Frida Lannerstr√∂m</a> on <a href="https://unsplash.com/photos/76dgUcMupv4?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>

<h2 id="thinking-about-the-outcomes--thinking-in-valueskarma">Thinking about the outcomes != Thinking in values/karma</h2>

<p>Values-based thinking allows you to exercise your value in any situation. The situation may have any outcome, whether in your favour or not. But you can still exercise your values.</p>

<p>Values provide meaning to the present moment instantly. They provide a path to follow in the present moment.</p>

<p>For example, if your value is honesty, you‚Äôll be truthful even when things are not in your favour.</p>

<p>That is, you are <strong>more loyal to your values than to anything or anyone else</strong>.</p>

<p>The outcome, for the most part, is about a past result or a future worry. Therefore, you have control over it only some of the time. Making decisions for outcomes means you‚Äôd decide each time what to do.</p>

<h2 id="values-dont-change-for-every-situation">Values don‚Äôt change for every situation</h2>

<p>Values stay mostly the same each time you have to make a decision. You have already decided what to do, i.e. you have chosen your value. You need to act on it.</p>

<p>So, think about the outcome only when you follow your values.</p>

<h2 id="karma-yog-sacrifice-what-you-want-for-needs-and-need-to-do-something-greater">Karma Yog: Sacrifice what you want for needs and need to do. (Something greater)</h2>

<p>Some things in life require sacrificing what we want for the greater good. For example, if you are 100 and want to lose weight, you can‚Äôt eat Donuts üç© all day; you must give up the doughnut for the greater good.</p>

<p>This concept applies to non-personal situations too. Suppose you sense that your friend is doing something that you don‚Äôt like. You want to set up a boundary. But you don‚Äôt think this may hurt your friend at the moment. But you‚Äôll get hurt daily if you don‚Äôt set the limit. It would be best if you sacrificed what you want now for what you need to do‚Äîsomething for the greater.</p>

<p>Similarly, if a kid and we are hungry, we don‚Äôt steal the kid‚Äôs food even though they can‚Äôt defend themselves. We generously offer as much as we can to the kid.</p>]]></content><author><name></name></author><category term="responsibility" /><category term="non-technical" /><summary type="html"><![CDATA[Give up on thinking about the outcome. Do what needs to be done. Following your values is complete in itself. The outcome is a bonus.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/values-are-now.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/values-are-now.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Why psychological work and/or therapy are important and shouldn‚Äôt be ignored?</title><link href="https://www.ankushchoubey.com/optimism/why-therapy" rel="alternate" type="text/html" title="Why psychological work and/or therapy are important and shouldn‚Äôt be ignored?" /><published>2023-09-10T00:00:00-05:00</published><updated>2023-09-10T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/optimism/v1-why-theraphy</id><content type="html" xml:base="https://www.ankushchoubey.com/optimism/why-therapy"><![CDATA[<p>Photo by <a href="https://unsplash.com/@ashlynciara?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Ashlyn Ciara</a> on <a href="https://unsplash.com/photos/WA_O4UAUfxc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>

<p><strong>I am not a therapist or a medical professional</strong>. I didn‚Äôt go to therapy for a long time and didn‚Äôt understand when to go for it. The reasoning was likely that I didn‚Äôt understand what psychology is and what psychological work means.</p>

<p>In the following blog post, I‚Äôll lay out some reasons I found why therapy is helpful. I have a very logical mind, so the below will be from a logical point of view. Towards the end, I‚Äôll share what I am going through and what I would have done differently.</p>

<h2 id="what-is-psychology-and-therapy">What is Psychology and Therapy?</h2>

<p>Psychology is the study of human behaviour. And therapy is just an appointment with an expert who has studied psychology.</p>

<p>We humans adapt to our environments. And we are a creature of habit. When we create habits, it physically changes our brains. We are also a creature of thoughts and emotions, and these affect how we feel and can control our actions. There is always a possibility that we learn habits that are not good for us. And similarly, we might learn thought and emotional habits that aren‚Äôt good for us.</p>

<p>And these unhealthy habits (physical, emotional, thought or behaviour) can cause psychological trouble.</p>

<h2 id="medical-vs-psychological-problem">Medical vs Psychological problem</h2>

<p>We can only fix a problem by fixing the root cause of it.</p>

<p>Here‚Äôs an example I‚Äôll refer to often that illustrates the importance of fixing a problem at the root: <strong>The broken car example</strong>.</p>

<p><strong>The problem</strong>: We have a car with a broken window. When it rains, the driver and the passengers get wet. The driver and passengers open umbrellas within the vehicle to avoid getting wet. They get wet less, but they have a new problem. They can‚Äôt see outside the broken window. This covering keeps them vulnerable to more significant problems like accidents.</p>

<p><strong>The solution</strong>: A broken window is the root cause of the problem. Avoiding fixing the problem using an umbrella within the card only leads to more problems. To restore the problem, one needs to fix the root cause. So, mending or repairing the window will fix the problem. Once the window is replaced or repaired, all issues are solved.</p>

<p>Something similar happens to psychological issues.</p>

<p>A psychological issue is when you are troubled by a thought pattern or behaviour. The thought pattern or behaviour could be something you got from the external world or yourself.</p>

<p>If you have a physical/medical illness, go to a doctor and get diagnosed; they‚Äôll give you medicines. If the treatment works, it means you have a physical condition.</p>

<p>Similarly, one medicine cannot fix the problem with another treatment. You can‚Äôt heal a physical injury with cold-related medication. It would be best to have painkillers and other drugs for treating physical injury.</p>

<p>Now, let‚Äôs look at the parallel with psych issues.</p>

<p>Sometimes, psychological issues such as high stress can manifest as physical issues, for example, Irritable Bowel Syndrome (IBS), where you can have stomach issues due to stress. If you go to a doctor, he might give you pills that can help relieve the symptoms. But, like me, you‚Äôll be referred to meet a psychiatrist. This is because the cause of IBS most often is high stress, which is a psych issue. And unless it‚Äôs not addressed in psychological terms, it‚Äôll continue to affect us. Medicines can relieve the symptoms, but they can‚Äôt fix it.</p>

<p>Solutions to fixing medical problems do not fix psychological issues. Solutions that improve psychological problems do not fix physical problems.</p>

<p>Medical treatment might work mildly, like medicines that suppress thoughts. But they can‚Äôt fix them permanently.</p>

<p><strong>You need to work on the psychological problem similar to how you work on medical problems.</strong></p>

<p>Psychological issues are a bit different as they often don‚Äôt require medication. And they are counter-intuitive and can take time to understand, which is why most people skip it.</p>

<h2 id="anxietydepression-doesnt-mean-pagal">Anxiety/Depression doesn‚Äôt mean pagal</h2>

<p>A common thing which people think is that anxiety and depression mean pagal! This may be the most common reason why therapy and psychology are often stigmatized. But that‚Äôs not the case. Even brilliant and intense people can get into thought or behavioural patterns that can keep them stuck or in fear. <a href="https://www.ankushchoubey.com/v1/can-not-logic-your-way-out-of-depression">On the contrary, the more intelligent you are, the more likely you are to get depressed</a>.</p>

<p>And usually, pagal means something that generally happens to someone else. And that people want to avoid becoming pagal. They also think of particular people as pagal.</p>

<p>Pagal is a very loaded term and something that people fear because they don‚Äôt understand it.</p>
<ul>
  <li>Does being angry make you pagal?</li>
  <li>Does being scared and worried make you pagal?</li>
</ul>

<p>If you study psychological issues, you realize most are simple. You could say schizophrenia is pagal where people see abnormality in reality. But that‚Äôs an extreme case.</p>

<p>Most people who avoid therapy or psychological work avoid it for more superficial reasons like trauma trying to justify saying their condition is not that bad that it can‚Äôt be handled themselves.</p>

<p>That may be true. But if you go to a therapist and do psychological work, you could have half the time to go through a solution yourself. And you know you‚Äôll be given proper treatment given their scientific problem.</p>

<p>The below point explains things better.</p>

<h2 id="people-think-that-the-person-who-is-anxious-or-depressed-is-lazy-and-they-need-to-do-it">People think that the person who is anxious or depressed is lazy. And they need to do it.</h2>

<p>But that‚Äôs not the case; the person‚Äôs mind is in full force, running in survival mode.</p>

<p>Suppose you are frightened by something; your heart rate will go up, and blood will flow to your body, legs and hands so that you can run. The blood flows away from your brain and your stomach. And towards hands and arms.</p>

<p>If you run, you‚Äôll get away from danger. And your heart rate will come down. And other functions will get normal. So the body is in high stress for a short time. Suppose you are in the same state when you are merely sitting still or walking. You can‚Äôt run. Nor does the situation demand running.</p>

<p>But the body is accustomed to the exact survival mechanisms as in the past. So your body is in high stress but for a long time.</p>

<p>Since blood is not flowing to your brain, your brain can‚Äôt function properly. And since it‚Äôs not rushing to your stomach, you get things like IBS.</p>

<h2 id="gym-is-not-enough">Gym is not enough</h2>

<p>We all know that drinking when stressed is bad for you.</p>

<p>Similarly, exercising when stressed is good for you. Some people may say travelling is what helps me burst stress. Or some ‚Äústatus signalling‚Äù people may say I meditate (when all day do it a fake meditation)</p>

<p>Suppose, What should you do when you are in a situation where you can‚Äôt exercise? Is there any other way out?</p>

<p>Also, how much can you exercise? Yes, exercise does make you stronger in the short term. But does it solve the problem? Like the broken window example from above, does it solve the root cause?</p>

<p>You can sort out and solve the root cause of your psychological troubles with some psychological effort. Simple things that you may have ignored, like your needs, your desires to connect with other people, the way you grew up, the healthy or unhealthy coping mechanisms you learn, and what you do when you are threatened, i.e. defence mechanisms, can go a long way to understanding the root cause and fixing it so that you won‚Äôt have 20 other symptoms caused by the exact root cause.</p>

<h3 id="but-i-cant-spend-money-or-they-cant-solve-my-problem">‚ÄúBut I can‚Äôt spend money‚Äù or ‚ÄúThey can‚Äôt solve my problem.‚Äù</h3>

<p>Psychological treatments aren‚Äôt quick fixes, and they require work. Most psych treatment doesn‚Äôt involve medication, so people don‚Äôt believe it.</p>

<p>You get good grades if you have studied hard for an exam. For this, you may have paid extra tuition, and you trust that the tuition teacher can teach you something or help you in a way that would lead to faster progress. The tutor does not give you brain pills to make you smarter. Neither tutor goes and gives the exam on your behalf.</p>

<p>The tutor‚Äôs role is to help you form your thoughts through understanding so that you can pass the exam yourself. Once the exam ends, the tutor is no longer needed, and you can do something else.</p>

<p>Similarly, if you go to therapy to learn how to do psychological work so that you don‚Äôt need to go to the therapist again and again, once the problem is fixed, it‚Äôs fixed.</p>

<p>The therapist won‚Äôt solve the problems for you. But they‚Äôll help you form your thoughts and make them more scientific.</p>

<h2 id="ending-get-it-over-with-and-go-do-something-else">Ending: Get it over with and go do something else.</h2>

<p>I started the blog post by explaining why I didn‚Äôt go to therapy. It was because I didn‚Äôt know it. I over-relied on philosophy and self-improvement and overestimated my abilities, which are less scientific than the field of psychology.</p>

<p>Therapists spend six years learning Psychology. They study human behaviours and how one can turn their day-to-day anxiety towards something a happier life. You can trust the collective knowledge of the scientists who created the field of psychology.</p>

<p>And the trust need not be naive. Work along with them. Study the concepts of psychology. Become a partner to your therapist in understanding your thoughts and behaviours and set yourself free from common psychological issues that manifest as multiple problems.</p>

<p>Then go do something else. There are more exciting things to do than remain stuck on one problem. So fix it at the source and set yourself free.</p>

<p><img src="/images/why-therapy.jpg" alt="" /></p>]]></content><author><name></name></author><category term="peace" /><category term="non-technical" /><category term="psychology" /><summary type="html"><![CDATA[Psychology and therapy are evidence-based approaches that can expedite problem-solving. Common misconceptions include the belief that therapy is unnecessary and that therapists solely resolve issues. Addressing these misconceptions aids in determining the need for therapy, either for yourself or someone you know.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/why-therapy.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/why-therapy.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Synchronous Request-Response over Kafka with Redis</title><link href="https://www.ankushchoubey.com/v1/kafka-request-response-redis/" rel="alternate" type="text/html" title="Synchronous Request-Response over Kafka with Redis" /><published>2023-09-07T00:00:00-05:00</published><updated>2023-09-07T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-kafka-request-response-redis</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/kafka-request-response-redis/"><![CDATA[<h2 id="kafka-is-async">Kafka is async</h2>

<p>Kafka is made for asynchronous communication. It‚Äôs fire and forget. Once a message is published by a producer, the producer doesn‚Äôt expect a response and will move to doing some other task.</p>

<p>The consumer consumes the message at its will and doesn‚Äôt respond back to the producer.</p>

<p>Ideally, this should be the case. Synchronous communication requires synchronous mediums and Kafka is not one.</p>

<p><img src="https://cdn.sanity.io/images/sczeoy4w/production/c0db44fb8695a8b3d3d0c32abcdeda887d121a57-1600x602.png?w=1000&amp;q=80&amp;fit=min&amp;auto=format&amp;dpr=1.5" alt="" /></p>

<p><a href="https://aiven.io/blog/kafka-simply-explained">Image Source</a></p>

<p>However, due to some reasons that I can‚Äôt explain, I had to develop a request-response scenario with Kafka. Here‚Äôs how I did it.</p>

<h2 id="correlating-request-and-response">Correlating request and response</h2>

<p>Each message sent by a producer would include a unique correlation-id. Once the message is received and processed by the consumer, it will publish a response message back to Kafka with the same correlation-id.</p>

<p>This way the producer can correlate request and response.</p>

<h2 id="implementation-details">Implementation details</h2>

<p>Suppose we have two microservices, <code class="language-plaintext highlighter-rouge">Service A</code> and <code class="language-plaintext highlighter-rouge">Service A</code>. <code class="language-plaintext highlighter-rouge">Service A</code> is accessible via REST API. Whenever a request is made on <code class="language-plaintext highlighter-rouge">Service A</code> via REST, the service publishes a message on Kafka. The <code class="language-plaintext highlighter-rouge">Service A</code> is another microservice that processes the request and its own time. <code class="language-plaintext highlighter-rouge">Service A</code> is not aware of whether <code class="language-plaintext highlighter-rouge">Service A</code> has processed the request or not.</p>

<p>Note: <code class="language-plaintext highlighter-rouge">Service A</code> is the producer and <code class="language-plaintext highlighter-rouge">Service A</code> is the consumer.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0ICBURFxuUkVTVF9BUEkgIC0tPiAgQVxuc3ViZ3JhcGggIHlvdXIgIG5ldHdvcmtcbkFbU2VydmljZSBBOiBwcm9kdWNlcl0gIC0tS2Fma2EgTWVzc2FnZS0tPiAgS2Fma2FcbkJbU2VydmljZSBCOiBDb25zdW1lcl0gIC0tIFBvbGwgS2Fma2EgZm9yIG1lc3NhZ2UtLT4gIEthZmthXG5lbmQiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p>Now, we receive a requirement that <code class="language-plaintext highlighter-rouge">Service A</code> should also respond with status of what happened on <code class="language-plaintext highlighter-rouge">Service A</code></p>

<p>To make it request a response, <code class="language-plaintext highlighter-rouge">Service A</code> will also publish a message back to a Kafka, and <code class="language-plaintext highlighter-rouge">Service A</code> will consume it. In the meantime, <code class="language-plaintext highlighter-rouge">Service A</code> should wait for <code class="language-plaintext highlighter-rouge">Service A</code> to publish the message. Once <code class="language-plaintext highlighter-rouge">Service A</code> receives the message from B, it can respond back to the rest request.</p>

<p>The problem here is there can be many replicas of <code class="language-plaintext highlighter-rouge">Service A</code> and with Kafka, we can‚Äôt predict which consumer.</p>

<p><em><strong>Here are the details</strong></em>: Suppose <code class="language-plaintext highlighter-rouge">Service A</code>: Node 1 publishes a message in Kafka. Now <code class="language-plaintext highlighter-rouge">Service A: Node 1</code>. <code class="language-plaintext highlighter-rouge">Service A</code> puts the response back into Kafka. But instead of <code class="language-plaintext highlighter-rouge">Service A: Node 1</code> receiving the Kafka message, Service A: Node 2 receives the Kafka message. So, <code class="language-plaintext highlighter-rouge">Service A: Node 1</code> will never receive the Kafka message.</p>

<p>There are two ways to fix this:</p>

<ol>
  <li>Consumer Groups</li>
  <li>Cache</li>
</ol>

<h2 id="consumer-group-approach">Consumer Group approach</h2>

<p>Set a Kafka message key such that it‚Äôll always be processed by one microservice. This approach is much harder.</p>

<h2 id="cache-approach">Cache approach</h2>

<p>When any node of <code class="language-plaintext highlighter-rouge">Service A</code> puts a Kafka message, it adds a correlation-id. The correlation-id is unique to the Kafka message that was put and the node that put it. i.e. no other node can generate the same correlation-id.</p>

<p>Now the <code class="language-plaintext highlighter-rouge">Service A</code> node will keep polling the shared cache to see it‚Äôs there is any data against the correlationKey. If it finds any data, it‚Äôll respond back to the rest API.</p>

<p>When the <code class="language-plaintext highlighter-rouge">Service A</code> processes the Kafka message and puts its response back into Kafka, it‚Äôll add the same correlation-id to the response.</p>

<p>When any <code class="language-plaintext highlighter-rouge">Service A</code> node receives the Kafka message it‚Äôll put the message into a shared cache against the distribution key.</p>

<p>Here‚Äôs how the cache would be:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
 </span><span class="nl">"uniqueCorrelationKey"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">data</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">kafka</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Since the <code class="language-plaintext highlighter-rouge">Service A</code> node is polling the shared cache it‚Äôll find the data against its correlationKey and send that data to the client.</p>

<p>While implementing this, there may be a failure of <code class="language-plaintext highlighter-rouge">Service A</code>. In this case, <code class="language-plaintext highlighter-rouge">Service A</code> will also publish an error status as a kafka message against correlationKey.</p>

<p>Yet, it may happen that <code class="language-plaintext highlighter-rouge">Service A</code> is unable to publish the error status. In such a case, we should introduce a timeout. This could be a few seconds like 3 or 6 after which the waiting <code class="language-plaintext highlighter-rouge">Service A</code> will timeout and return a <code class="language-plaintext highlighter-rouge">503 Gateway Timeout</code>.</p>

<p>And since we are adding things to the cache and that record will not be used after the timeout, we should evict the cache after the timeout time.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5SRVNUX0FQSSAtLVNUQVJUIEhFUkU6IFxcbjAuIENsaWVudCBtYWtlcyBhIFJFU1QgQVBJLS0-IEExXG5zdWJncmFwaCB5b3VyIG5ldHdvcmtcbmNhY2hlXG5BMVtTZXJ2aWNlIEE6IE5vZGUgMV0gLS0xLiBwdWJsaXNoZXMgYSBtZXNzYWdlIHdpdGggY29ycmVsYXRpb25LZXktLT4gS2Fma2FcbkEyW1NlcnZpY2UgQTogTm9kZSAyOiBDb25zdW1lcl0gLS01LiByZXNwb25zZSBhZ2FpbnN0IGNvcnJlbGF0aW9uS2V5IC0tPiBjYWNoZVtTaGFyZWQgQ2FjaGUgbGlrZSBSZWRpc11cbkExIC0tMi4gS2VlcHMgcG9vbGluZ1xcS2Fma2FcXG5hZ2FpbnN0XFxuY29ycmVsYXRpb25LZXktLT4gY2FjaGVcbkthZmthLS00LiBNZXNzYWdlIHJlY2VpdmVkIGJ5IHNvbWUgXFxuIG5vZGUgb2YgU2VydmljZSBBIC0tPiBBMlxuS2Fma2EgLS0yLiB0aGUgbWVzc2FnZSBpcyByZWNlaXZlZCBieSBTZXJ2aWNlIEItLT4gQltTZXJ2aWNlIEJdXG5CLS0zLiBwcm9kdWNlciBSZXNwb25zZSBtZXNzYWdlIC0tPiBLYWZrYVxuY2FjaGUgLS02LiBTZXJ2aWNlIEEgcmVjZWl2ZWQgdGhlIFxcbnJlc3BvbnNlIGluIGNhY2hlLS0-IEExXG5lbmQiLCJtZXJtYWlkIjpudWxsfQ" /></p>]]></content><author><name></name></author><category term="web-development" /><category term="software-architecture" /><summary type="html"><![CDATA[Each message sent by a producer would include a unique correlation-id. Once the message is received and processed by the consumer, it will publish a response message back to Kafka with the same correlation-id.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/kafka-request-response-redis.svg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/kafka-request-response-redis.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Write Cleaner UI Tests with Page Object Model Pattern</title><link href="https://www.ankushchoubey.com/tdd/page-object-model" rel="alternate" type="text/html" title="Write Cleaner UI Tests with Page Object Model Pattern" /><published>2023-08-28T00:00:00-05:00</published><updated>2023-08-28T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/tdd/v1-page-object-model</id><content type="html" xml:base="https://www.ankushchoubey.com/tdd/page-object-model"><![CDATA[<p>I have covered many testing patterns. Some of them are <a href="https://www.ankushchoubey.com/test-data-factories/">Test Data Factories</a>, <a href="https://www.ankushchoubey.com/method-when-should/">the when/should way</a> and more. The Page Object Model complements all those patterns.</p>

<p>The Page Object Model is a great way to write clean tests for UI-related code. The POM Pattern is usable with any UI testing, selenium, react tests with enzyme or react testing library, TestCafe, Cypress or other test framework.</p>

<h2 id="a-test-without-page-object-model">A test without Page Object Model</h2>

<p>To write UI tests without a Page Object Model, follow these steps. The below example assumes React with Enzyme but can apply to any framework.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// given:</span>
 <span class="kd">const</span> <span class="p">{</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">}</span> <span class="o">=</span> <span class="nx">getSomeProps</span><span class="p">();</span>
 <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MovieListComponent</span> <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">)
</span><span class="c1">// when:</span>
 <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">div .random-css-selector:first tr th span[data-value='some data value']</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
<span class="c1">// then:</span>
 <span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">div .random-css-selector:first tr th span[data-value='some data value']</span><span class="dl">"</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">(</span><span class="dl">"</span><span class="s2">someValue</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p>The above test is miswritten on purpose to illustrate some important points.</p>

<p>The CSS selectors like <code class="language-plaintext highlighter-rouge">div .random-css-selector:first td tr span[data-value='some data value']</code> make it hard to understand what the test is for.</p>

<p>Suppose you have five things to check, meaning you‚Äôll write five different such CSS selectors.</p>

<p>Tests repeat, resulting in encountering multiple repetitions of these similar blocks. If there are widespread changes in the UI DOM, you will need to modify them.</p>

<p>In addition, the above test could be more fluent. Fluent tests are English-like, and they make it very easy to read the test.</p>

<h2 id="a-test-with-page-object-model">A test with Page Object Model</h2>

<p>Here‚Äôs how the Page Object Model can avoid all these things.</p>

<p>The Page Object Model encapsulated everything related to a component or a page in a specific class.</p>

<p>To illustrate the POM, we can create a separate <code class="language-plaintext highlighter-rouge">MovieListPageObject</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">MovieListPageObject</span><span class="p">{</span>
 <span class="kd">constructor</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">wrapper</span><span class="p">;</span>
 <span class="p">}</span>
 <span class="nx">getColumnHeader</span><span class="p">(</span><span class="nx">index</span><span class="p">:</span> <span class="kr">number</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">selector</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">div .random-css-selector</span><span class="dl">"</span><span class="p">)</span>
       <span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">selector</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">tr th span[data-value='some data value']</span><span class="dl">"</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="nx">clickColumnHeader</span><span class="p">(</span><span class="nx">index</span><span class="p">:</span> <span class="kr">number</span><span class="p">){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getColumnHeader</span><span class="p">(</span><span class="nx">index</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
 <span class="p">}</span>
 <span class="nx">expectColumnHeaderName</span><span class="p">(</span><span class="nx">index</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">expectedValue</span><span class="p">:</span> <span class="kr">string</span><span class="p">){</span>
  <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getColumnHeader</span><span class="p">().</span><span class="nx">text</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the test, we can write:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// given:</span>
 <span class="kd">const</span> <span class="p">{</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">data</span><span class="p">}</span> <span class="o">=</span> <span class="nx">getSomeProps</span><span class="p">();</span>
 <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MovieListComponent</span> <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">)
</span> <span class="kd">const</span> <span class="nx">movieListPO</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MovieListPageObject</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">);</span>
<span class="c1">// when:</span>
 <span class="kd">const</span> <span class="nx">firstColumn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
 <span class="nx">movieListPO</span><span class="p">.</span><span class="nx">clickColumnHeader</span><span class="p">(</span><span class="nx">firstColumn</span><span class="p">);</span>
<span class="c1">// then:</span>
 <span class="nx">movieListPO</span><span class="p">.</span><span class="nx">expectColumnHeaderName</span><span class="p">(</span><span class="nx">firstColumn</span><span class="p">,</span> <span class="dl">"</span><span class="s2">someValue</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>Here are the benefits seen with the above PageObjectModel.</p>

<ol>
  <li>The above test is much more English-like</li>
  <li>The POM encapsulates all the hard-to-read CSS selectors. Therefore, in case of modification, we can modify it in one place.</li>
  <li>POM can be reused in multiple tests.</li>
  <li>The POM makes tests shorter.</li>
</ol>

<h2 id="a-small-optimization">A small optimization</h2>

<p>In the above test, I‚Äôd also create a <code class="language-plaintext highlighter-rouge">mount{Component}</code> method to return the Page Object.</p>

<p><strong>Before</strong>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MovieListComponent</span> <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">)
</span> <span class="kd">const</span> <span class="nx">movieListPO</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MovieListPageObject</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Before</strong>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">const</span> <span class="nx">movieListPO</span> <span class="o">=</span> <span class="nx">mountMovieList</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MovieListComponent</span> <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">)
</span></code></pre></div></div>

<p>Declare the <code class="language-plaintext highlighter-rouge">mountMovieList</code> somewhere.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mountMovieList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">reactElement</span><span class="p">:</span><span class="nx">ReactElement</span><span class="p">)</span><span class="o">=&gt;</span> <span class="p">{</span>
 <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span><span class="nx">reactElement</span><span class="p">)</span>
 <span class="k">return</span> <span class="k">new</span> <span class="nx">MovieListPageObject</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="testing" /><category term="tdd" /><summary type="html"><![CDATA[Page Object Model can be used with any testing framework to write cleaner and simpler tests that are fast to write.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/tdd/page-object-model.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/tdd/page-object-model.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Journey Through Phase 1 Challenge of the Live Hard Program</title><link href="https://www.ankushchoubey.com/v1/phase-1" rel="alternate" type="text/html" title="Journey Through Phase 1 Challenge of the Live Hard Program" /><published>2023-08-27T00:00:00-05:00</published><updated>2023-08-27T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-phase-1</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/phase-1"><![CDATA[<h3 id="why-did-i-do-the-phase-1-challenge">Why did I do the phase 1 challenge?</h3>

<p>After 75 Hard, I was in really good shape. It might have been the best shape of my life.</p>

<p>The reason to start 75 Hard was depression. During the end of the phase, I was almost out of it.</p>

<p>I was supposed to take a 10-day break before starting phase 1. But the 10-day break turned into a 30-day break and this was because I was trying to time it with lunch with friends. That timing got postponed multiple times, so I started the challenge anyway because I had my IBS symptoms return. So I had to start the challenge again with urgency. I declared to family and friends that I‚Äôll start the challenge. And I did.</p>

<h3 id="differences">Differences</h3>

<p>I planned how I would get everything done. I had become good solid with 75 Hard rules. Adding Phase 1 rules would be a bit challenging.</p>

<p>I listened to the podcast again and noted down the rules of the Phase 1 challenge.</p>

<p>I decided to take a picture early in the morning so that I wouldn‚Äôt fail it like last time. And I did.</p>

<p>The <a href="https://www.ankushchoubey.com/v1/75-hard">75 hard tasks</a> were the same as I did before so in this post I‚Äôll describe the new activities.</p>

<h4 id="3-power-list">3 Power List</h4>

<p>The power list was the most ambiguous part. In some places, it was written to be 3 tasks.
And some places it was 3 additional tasks over the 5 tasks.</p>

<p>In the podcast, Andy said when ambiguous pick the hardest so I picked the 8 tasks.</p>

<p>And it was hard. I was doing my tasks till 2 AM on multiple days.</p>

<p>Later, I realized that I wasn‚Äôt prioritizing tasks early in the day. Rather I was waiting for the night before doing my tasks.</p>

<p>So, <strong>I started prioritizing my tasks early.</strong></p>

<h4 id="deleting-whatsapp-and-youtube">Deleting WhatsApp and YouTube</h4>

<p>I was over-prepared for the power list.
I deleted WhatsApp from my phone and decided not to use it for 30 days from phone. I could use it from Laptop if needed. But not the phone. 13 days before the end of the challenge, WhatsApp on my laptop got logged out and I could not log in.
I had also deleted YouTube like I did in 75 Hard.</p>

<p>Both these helped boost my focus beyond what I thought was possible.</p>

<p>A kind of monk mode.</p>

<h4 id="pomodoro">Pomodoro</h4>

<p>I started using the Pomodoro technique to help me focus. And it helped. I am using a Pomodoro to write this article too.</p>

<p><img src="/images/phase1/5.jpg" alt="" /></p>

<h4 id="kind-of-tasks-included">Kind of tasks included</h4>

<p>Listening to the podcast, I knew I could include some tasks that I was trying to make into a habit. But I could only add them for 21 days as after 21 days they get formed.</p>

<p>So I added,</p>

<ul>
  <li>Meditation for 10 minutes</li>
  <li>Sleep system (keep phone outside, make the room pitch black, AC on, put the sleep mask on, and sleep)</li>
  <li>Learning and doing power nap</li>
</ul>

<p>I hadn‚Äôt done a power nap well so I practiced the jocko way.</p>

<p>After multiple days of not sleeping properly, I realized that sleep was critical. So I had to add the sleep system and power nap to the list and both of them helped.</p>

<p>I also added tasks related to my goals: finding a new high-paying job and writing a series of blog posts on Test Driven Development. I added these too.</p>

<p>During the challenge, I had my depression up. I wasn‚Äôt able to do a lot of my other tasks if I didn‚Äôt take care of myself enough. I have been going through therapy and decided that these tasks and homework are critical too. So I added the homework and tasks as part of the power list too.</p>

<p><img src="/images/phase1/6.jpg" alt="" /></p>

<h4 id="planning-tasks">Planning tasks</h4>

<p>Initially, I had a lot of planning tasks because I didn‚Äôt know what to do as part of the power list. I needed to plan what to add.</p>

<p>These plans included:</p>

<ol>
  <li>Plan for how to find a high-paying job</li>
  <li>Plan what to add to the power list</li>
  <li>Plan Test First Test Everything Blogpost.</li>
</ol>

<p>These may seem trivial but they were critical because I lacked direction at the time. And spending time on them did help me form a proper vision for the upcoming days.</p>

<h4 id="splitting-large-tasks-to-1-pomodoro">Splitting Large Tasks to 1 Pomodoro</h4>

<p>In the case of learning tasks and coding tasks, I cannot do many tasks in a day. And if I do a learning task within a day, I will have no comprehension. So I decided to do a minimum of 25 minutes of each task. size of 1 Pomodoro.</p>

<p>This was I had 2 or 3 days of learning I could do for 25 minutes per day.</p>

<p>But I didn‚Äôt do 3 Pomodoro in a day and count it as 3 tasks. If I did 3 pomo in a day for a task it would be 1 task only. but if I do 1 pomo each day for 3 days, I would count it as 3 tasks.</p>

<p>My mind didn‚Äôt get bored because I was doing so many tasks. It wasn‚Äôt the same task. And I had my energy up.</p>

<h3 id="scrum">Scrum</h3>

<p>I started practicing scrum at the end of 75 Hard. I modified my practice and created many boards.</p>

<p>I‚Äôll be writing a blog post on how I implemented Scrum.</p>

<p>Scrum and the Power List were perfect companions in getting my productivity up by around 5 times.</p>

<h4 id="visualization">Visualization</h4>

<p>I changed my visualization a bunch of times.</p>

<h5 id="scientific-visualization">Scientific Visualization</h5>

<p>For visualization, I listened to Andrew Huberman‚Äôs podcast on visualization. And that helped me clarify how to visualize better.</p>

<ol>
  <li>Think in first person</li>
  <li>Visualize for 7-15 seconds.</li>
  <li>Repeat the visualization multiple times</li>
  <li>Involve eye movement</li>
  <li>Keep the number of senses low.</li>
  <li>Label the visualization. Then practice saying the label before starting the activity in the real world.</li>
  <li>Visualization is not a replacement for real-world activity. But it can enhance it. And it can help preserve the activity when you are not able to do the real-world activity.</li>
  <li>Have clear start and stop signs that you visualize and imagine yourself stopping.</li>
</ol>

<h5 id="core-values">Core Values</h5>

<p>I wrote a vision of how I would implement my core values and imagine myself going through them.</p>

<p>I practiced many aspects, especially the morning routine. Over the weeks through visualization, I was able to get less groggy and being able to do morning rituals at a nice pace.</p>

<iframe width="768" height="432" src="https://miro.com/app/live-embed/uXjVM1AleJk=/?moveToViewport=-1471,-1120,3030,1917&amp;embedId=289337874145" frameborder="0" scrolling="no" allow="fullscreen; clipboard-read; clipboard-write" allowfullscreen=""></iframe>

<h5 id="modifications">Modifications</h5>

<p>I also sometimes visualize what I plan to do, or what problems I am facing and how could I solve them. These were very reflective and forward-planning sessions that were very helpful.</p>

<h5 id="app">App</h5>

<p>I used the Oak meditation app for a 10-minute visualization. I would ring after every 2 min, so I could keep my focus.</p>

<h5 id="time">Time</h5>

<p>I found EOD to be the worst time as I was too sleepy and having visualization as the last item on the list was annoying.</p>

<p>I did visualization mostly before bed. However, I experimented with morning visualization. Especially during the morning bathroom, which was the most productive. I had to force myself to visualize as I wanted to get the task off my plate so that I could sleep better.</p>

<h3 id="cold-shower">Cold shower</h3>

<p>Cold showers were the simplest. I would come home from a walk, and put on hot water first. Then put a 5-minute timer and turn cold.</p>

<p>Someday I will use music and someday I will not use music.</p>

<p>Overall it was simple.</p>

<h2 id="result">Result</h2>

<p>My weight went from 73Kgs to 69.8 Kgs.</p>

<p><img src="/images/phase1/1.jpg" alt="" /></p>

<p><img src="/images/phase1/3.jpg" alt="" /></p>

<p><img src="/images/phase1/4.jpg" alt="" /></p>

<p>My confidence went up infinitely. And it‚Äôs hard to understand why. People have been coming and talking to me. Asking me if I am a college student. They are amazed when I say, I‚Äôm 26.</p>

<ol>
  <li>I learned that 75 hard was much much easier than Phase 1. But I was able to do it fully.</li>
  <li>I lacked the focus to do tasks in the early part of the day. Which would lead to me doing tasks at the end of the day.</li>
</ol>

<p>WhatsApp is not necessary.</p>

<h3 id="its-more-fun-to-switch-between-work-and-fun-than-to-just-do-either">It‚Äôs more fun to switch between work and fun than to just do either</h3>

<p>The switch between work when doing the challenge and having fun in life when not doing the challenge really makes a big difference.</p>

<p>I couldn‚Äôt continue to work non-stop while not on the challenge. It was because I was on a challenge that I was able to complete the tasks.</p>

<p>When the challenge was over, the fun tasks that I used to enjoy became even more enjoyable. :)</p>

<h3 id="focus-in-the-early-part-of-the-day">Focus in the early part of the day</h3>

<p>I treated EOD like a deadline where all the work gets done just before the deadline.</p>

<p>This leads to a lot of stress.</p>

<p>Later I started doing work earlier in the day so that I could have more time later. :) And that helped.</p>

<h2 id="what-i-am-experimenting-to-do-after-phase-1">What I am experimenting to do after phase 1?</h2>

<p>For me, Phase 1 was not sustainable. But there were many valuable things I learned. Here are some things I have planned.</p>

<h3 id="start-consuming-protein-in-drink-form">Start consuming protein in drink form</h3>

<p>Either protein shake or sattu milkshake. This should reduce the effect of not having a diet for at least 30 days.</p>

<h3 id="continue-exercising">Continue exercising</h3>

<p>I like the gym. It‚Äôs fun and I get to meet my friends.</p>

<h3 id="do-the-5-critical-item-power-list">Do the 5 critical item power list</h3>

<p>The amount of productivity was infinite and I want to continue it.</p>

<h3 id="30-days-of-munching-and-traveling">30 days of Munching and Traveling</h3>

<p>I want to enjoy life for 30 days so I have a list of activities.</p>]]></content><author><name></name></author><category term="non-technical" /><category term="responsibility" /><summary type="html"><![CDATA[Phase 1 in the second part of the live hard program after 75 Hard. I was able to do all the tasks of 75 Hard and 3 other tasks that were needed including the 8 critical taks. In this post, I share my journey and tips.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/phase1/2.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/phase1/2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Notes on Here‚Äôs Why Trauma Is So Common (A Deep Dive Into Understanding Trauma)</title><link href="https://www.ankushchoubey.com/v1/can-not-logic-your-way-out-of-depression" rel="alternate" type="text/html" title="Notes on Here‚Äôs Why Trauma Is So Common (A Deep Dive Into Understanding Trauma)" /><published>2023-08-27T00:00:00-05:00</published><updated>2023-05-06T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-trauma-deep-dive</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/can-not-logic-your-way-out-of-depression"><![CDATA[<h2 id="before-the-notes">Before the notes</h2>

<p>I am not a psychologist or a therapist. The following are notes from a video from HealthyGamerGG. Please refer to his video for details as he explains much better than what‚Äôs written below. Use the below notes only as a revision.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/8TkbP4XfggM?si=Tm8ou-nLaWL_KOmu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p>This video can be paired up with the previous note I took on <a href="https://www.ankushchoubey.com/v1/can-not-logic-your-way-out-of-depression">You can‚Äôt logic your way out of depression.</a></p>

<h2 id="from-0009-trauma-manifests-as-so-many-problems">From 00:09 Trauma manifests as so many problems</h2>

<p>Trauma affects the whole person and whole brain and therefore it can‚Äôt be chopped into pieces.</p>

<p>Dr. K will describe the whole thing like a painting and hopefully, it clicks.</p>

<h2 id="from-0100-what-is-trauma">From 01:00 What is trauma?</h2>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/2/24/FurciferPardalisMale.JPG" alt="" /></p>

<p>By <a href="//commons.wikimedia.org/wiki/User:B.navez" title="User:B.navez">B.navez</a>; - <span class="int-own-work" lang="en">Own work</span>, <a href="http://creativecommons.org/licenses/by-sa/3.0/" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=269650">Link</a></p>

<p>Trauma is the great chameleon because it manifests as different things. It looks like different things.</p>

<h2 id="from-0150-looking-at-the-manifestations-of-trauma">From 01:50 Looking at the manifestations of trauma</h2>

<ol>
  <li><strong>Chronic Depression:</strong> Depressed their whole life. A study suggested, depression is not caused by serotonin. It is basically trauma.</li>
  <li><strong>Impulsivity</strong> or Lack of unifying direction.</li>
  <li><strong>Vulnerability to repeated mistakes</strong>. Making the same damn mistake over and over again.</li>
  <li><strong>In-ability to take risks</strong>.</li>
  <li><strong>Being a people pleaser</strong>. I don‚Äôt know how to stop.</li>
  <li><strong>Paralysis of initiation</strong>. We can‚Äôt bring ourselves to start stuff. We live life reactively or via external stimuli. (Like a NPC)</li>
  <li><strong>Can‚Äôt moderate relationships</strong>. Can‚Äôt engage in moderate relationships. Either we are BFFs, enemies, or doormats. No balance in relationships.</li>
  <li><strong>Sematic Problems</strong>: Problems with your body that aren‚Äôt medically diagnostical. IBS, Chronic Fatique Syndrome, Fibromiolge, Posture O Hypertemsive syndrome</li>
</ol>

<p>You may think that this is common stuff that everyone deals with and it turns out that it‚Äôs related to trauma.</p>

<h2 id="from-0704-analysis-of-statistics">From 07:04 Analysis of statistics</h2>

<p>ACEs: Adverse childhood experiences in 60% of people.</p>

<p>PTST: Requires 5 out of 9. (Hypervigilance, Reexprienceing, nightmares)</p>

<p>It can manifest in 1 of 9. Even if you aren‚Äôt affected.</p>

<h2 id="from-0817-why-trauma-is-so-common">From 08:17 Why trauma is so common</h2>

<p>Trauma is unique because it‚Äôs not a pathology of the brain or the mind. It‚Äôs a normal adaptation to a normal circumstance or experience.</p>

<p>Auto-immune is a pathology because the immune system is malfunctioning.</p>

<p>Bipolar is a pathology/malfunction.</p>

<p><strong>Trauma is adaptation</strong>. It‚Äôs not pathology. <strong>It‚Äôs a survival mechanism.</strong> And therefore, it‚Äôs just an attempt to adapt badly. So it can be changed.</p>

<h2 id="from-1038-how-does-our-mind-adapt-to-things">From 10:38 How does our mind adapt to things?</h2>

<p>Emotions are ment to give you a instant response. For example, if you suddently start feeling Angry, you know how to respond in the situation. It‚Äôs a body‚Äôs mechanism.</p>

<p>Eastern psychology has a better answer.</p>

<p>With sensory experience comes emotions. Emotion is a very rapid way to respond. If you are angry, you know</p>

<p><strong>Experience brings emotions</strong>. if <strong>emotions aren‚Äôt processed nicely</strong>, they <strong>sink in</strong> and they come back <strong>when the experience is similar</strong>. #trigger.</p>

<h2 id="from-1225-the-5-major-domains-that-trauma-affects">From 12:25 The 5 major domains that trauma affects</h2>

<ol>
  <li><strong>Affect</strong>: Emotions. Changes the way we relate to emotions. Especially anger and self-destructive behavior. Disregulated the way we process emotions.</li>
  <li><strong>Consciousness and atten</strong>tion. Ability to sleep and to check it. We‚Äôll check it out.</li>
  <li><strong>Self preception</strong> or identity. The way we view ourselves</li>
  <li><strong>Relationships</strong>. Trauma is almost always put via relationships. So we changed our views on relationships.</li>
  <li><strong>Sematic</strong>. People with a lot of stress have body changes.</li>
</ol>

<h2 id="from-1439-coercive-control">From 14:39 Coercive control</h2>

<p>What does it take for something to be traumatic? An environment of coercive control.</p>

<p>Is X traumatic? It can be that not everyone in a situation experiences PTST.</p>

<p>The key aspect is coercive control.</p>

<p>From guards at a prison camp to parents or anyone, it doesn‚Äôt have to be taught how to control another human being. It‚Äôs discovered.</p>

<h2 id="from-1608-what-happens-in-the-mind-of-an-abuser">From 16:08 What happens in the mind of an abuser</h2>

<p>They want to destroy your autonomy by imposing certain kinds of limits. Here they make petty or arbitrary rules. (Do it like this because I told you so)</p>

<p>If you treat you unfairly all the time, you‚Äôll check out. But the moment person starts to treat you nicely, you feel you are in control by not pissing the other person off. ‚Äúif I behave nicely, this person will treat me nicely‚Äù.</p>

<p>i.e. Person is capable of kindness.</p>

<blockquote>
  <p>Dependence of abuser for all things good and all things bad. But if you get treats from one and bad from others we‚Äôll go.</p>

  <p>This is love bombing</p>
</blockquote>

<p>In the mind of the abused, this person is god. This person is bestower off not having bruises on my body before bed. Abusers have unpredictability. You keep playing the game as it‚Äôs random.</p>

<p>Abusers ‚Üí Casino 1.0.</p>

<h2 id="from-1917-being-dependent-on-the-abuser">From 19:17 Being dependent on the abuser</h2>

<p>As we become dependent on abusers,</p>

<ol>
  <li>Independent action becomes insubordination. (sense of autonomy gets destroyed).</li>
  <li>no room for trial and error. Can‚Äôt test the boundary. It‚Äôs about survival. (It has to be a perfect success, if it can‚Äôt be a perfect success, I can‚Äôt start.</li>
</ol>

<p>If you look for perfection before starting, it could be a trauma response.</p>

<p>People with trauma use emotional-coping mechanisms, because that‚Äôs what they feel is under control. (internal state).</p>

<p>Changing out there is futile.</p>

<h2 id="from-2123-the-correlation-between-substance-use-and-trauma">From 21:23 The correlation between substance use and trauma</h2>

<p>You carry that learning with you.</p>

<p>We fix the problem by emotional coping.</p>

<blockquote>
  <p>When things hurt, I can‚Äôt fix them on the outside.</p>

  <p>Problems are fixed by fixing emotions.</p>

  <p>So we do stuff like get addicted to substances.</p>

  <p>Cuz that‚Äôs all I know is the strategy that worked.</p>

  <p>Become a cycle.</p>
</blockquote>

<p>And it manifests as so many different things.</p>

<blockquote>
  <p>I want what other people want. I don‚Äôt know who I am.</p>

  <p>Since I have negative emotions and anger, it starts manifesting in different ways.</p>
</blockquote>

<h2 id="from-2458-solutions-for-trauma">From 24:58 Solutions for trauma</h2>

<p>Our brain is fragmented but it isn‚Äôt broken.</p>

<p>91% of BPD will be in remission in 10 years.</p>

<p><strong>Our human body and mind have automatic circuits to heal.</strong></p>

<h2 id="from-2628-safety-and-stabilization-most-important">From 26:28 Safety and Stabilization <strong>(Most important)</strong></h2>

<p>High anxiety and emotion lead to dissociation.</p>

<h3 id="stop-repeated-trauma-because-that-is-what-happens-most-time">Stop repeated trauma. because that is what happens most time.</h3>

<p>Starts by fixing the environment. Strive from independence or limitation around toxic people.</p>

<p>Can be 1 one-hour visit to a therapist at the base.</p>

<h2 id="from-2804-anxiety-emotional-coping">From 28:04 Anxiety Emotional Coping</h2>

<p>Address the disintegration</p>

<p>Evidence-based treatments</p>

<ul>
  <li>DBT: Dialectical behavior therapy (DBT): <strong>type of talk therapy for people who experience emotions very intensely</strong>.</li>
  <li>EMDR: Eye movement desensitization and reprocessing: involves moving your eyes a specific way while you process traumatic memories.</li>
</ul>

<p>Meditation and exercise can also work.</p>

<p>If you are experiencing some kind of emotion, don‚Äôt go towards an emotional coping mechanism.</p>

<p>The right hemisphere is turned off in emotional coping. We need the right hemisphere. we need emotion to solve the problem.</p>

<p><strong>Psychotherapy</strong>: We take the emotion and put it into language.</p>

<blockquote>
  <p>Language can substitute for action.</p>

  <p>Misunderstanding in society is if we have a problem, we have to fix the problem. not true.</p>
</blockquote>

<p>When you articulate, there is integration. When there is integration ‚Üí flow state. Flow state ‚Üí Improvement.</p>

<p>Frontal lobes plan and execute tasks, but if the corpus callosum is severed frontal lobes are not connected.</p>

<p>When people do psychotherapy, the brain integrates and you do everything.</p>

<blockquote>
  <p><strong>Language can substitute for action. Crazy but true.</strong></p>
</blockquote>

<p><em>Cognitive dissonance. If you say something, it‚Äôs hard for you not to do it.</em></p>

<p>You can‚Äôt articulate you can‚Äôt understand it. When you understand it. This is easy.</p>

<p>Integration comes from understanding. Understanding comes from articulation.</p>

<h2 id="from-3335-the-ek-tattva-abhyas-meditation">From 33:35 The Ek Tattva Abhyas meditation</h2>

<p>Take 10 min. 15 min. Just do one thing.</p>

<p>When taking a poop, poop completely.</p>

<p>When we do ek tattva abhyas, do it completely one thing. For a moment, think about nothing. 1 thing at a time. That‚Äôs it.</p>

<h2 id="from-3504-trauma-is-the-goldmine-to-transform-your-life">From 35:04 Trauma is the goldmine to transform your life</h2>

<p>Don‚Äôt give up hope cuz the majority of research says things will get better.</p>

<h2 id="trauma-is-the-goldmine-to-transform-your-life">Trauma is the goldmine to transform your life</h2>

<p>Trauma is the fundamental way we work, the way we form relationships, the way we direct, etc. Therefore, it is the great chameleon.</p>

<p>Therefore if we concur on this one thing, we‚Äôll be so good in all areas.</p>

<h2 id="from-3615-the-reason-we-suffer">From 36:15 The reason we suffer</h2>

<p>The reason we suffer, Avindya.</p>

<p>If we don‚Äôt understand the rules of the game, it‚Äôll be painful. Once we understand the rules, we play better.</p>

<p>If there is one thing we need to learn about how to play the game of life well, understand trauma.</p>

<h2 id="ending">Ending</h2>

<p>Hope the above notes helped.</p>]]></content><author><name></name></author><category term="peace" /><category term="non-technical" /><category term="psychology" /><summary type="html"><![CDATA[Notes from HealthyGamerGG podcast. If there is one thing we need to learn about how to play the game of life well, understand trauma.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://upload.wikimedia.org/wikipedia/commons/2/24/FurciferPardalisMale.JPG" /><media:content medium="image" url="https://upload.wikimedia.org/wikipedia/commons/2/24/FurciferPardalisMale.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TDD example for REST API - CRUD</title><link href="https://www.ankushchoubey.com/tdd/rest-api-example" rel="alternate" type="text/html" title="TDD example for REST API - CRUD" /><published>2023-08-17T00:00:00-05:00</published><updated>2023-08-17T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/tdd/tdd-rest-api-example</id><content type="html" xml:base="https://www.ankushchoubey.com/tdd/rest-api-example"><![CDATA[<p>Before reading the current blog post, make sure you have read the previous blog post on <a href="https://www.ankushchoubey.com/tdd-backend-example" title="‚Äå">TDD example on a backend with Upsert Method</a> as it provides explains the thinking and the TDD stages in depth. The same thinking and stages would be used in this blog post but this post won‚Äôt explain those steps in depth. Rather the post will focus on providing new information specific to REST APIs.</p>

<p>Like the last post, this post will only focus on the TDD aspect and therefore will be lost on other aspects. In particular, for this post, it‚Äôs API Security and how HTTP Status and Responses are used. Though I‚Äôll mention what could have been done better when I come to the post.</p>

<h2 id="continuing-with-the-movie-example">Continuing with the Movie example</h2>

<p>In the previous post on <a href="https://www.ankushchoubey.com/tdd-backend-example" title="‚Äå">TDD on Upsert Method</a> we created a simple method in <strong>MovieService.java</strong> that can <strong>upsert</strong> data in the DB.</p>

<p>The signature of the methods is as follows:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">Movie</span> <span class="nf">upsert</span><span class="o">(</span><span class="nc">Movie</span> <span class="n">movieToUpsert</span><span class="o">);</span>
</code></pre></div></div>

<p>Now that we have a service method, we want to view our <code class="language-plaintext highlighter-rouge">Movie</code> in a browser. While we will cover the frontend portion of the Movies application, let‚Äôs first focus on the backend API.</p>

<p>We decide to create a simple CRUD operation on Movie. Let‚Äôs start with CREATE.</p>

<h2 id="step-1-planning">Step 1: Planning</h2>

<p>Planning is the first stage for us. The better we plan the less we‚Äôll have to pivot later. In the upsert example, we planned and created a skeleton. Here we‚Äôll plan and create a structure for our  APIs. This would be a mini-version of the API First Approach.</p>

<p>While, I am writing the CRUD API signatures below, in real life I can plan directly within the test file using <a href="https://www.ankushchoubey.com/method-when-should/" title="‚Äå">api/when/should blocks</a>. You‚Äôll see the usage of the format in the APIs below.</p>

<p>We need to CRUD for movies via REST. Our resource is <code class="language-plaintext highlighter-rouge">Movie</code> therefore our endpoint would be <code class="language-plaintext highlighter-rouge">/movies</code>.</p>

<p>CRUD has 4 parts that are captured nicely by HTTP Methods.</p>

<p>We‚Äôll use the following:</p>

<h3 id="create">Create</h3>

<h4 id="request-format">Request Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">POST /movies
body {
 "movieId": String,
 "movieName": String
}
</span></code></pre></div></div>

<h4 id="response-format">Response Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK if successful in saving the movie
</span></code></pre></div></div>

<h3 id="read">Read</h3>

<p>For Read, we‚Äôll have two endpoints;</p>

<h4 id="first-get-all-movies">First, get all movies</h4>

<h5 id="request-format-1">Request Format</h5>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET /movies
</span></code></pre></div></div>

<h5 id="response-format-1">Response Format</h5>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK
body [{
 {
   "movieId": "movie1",
   "movieName": "name of movie2"
 },
 {
  "movieId": "movie2",
  "movieName": "name of movie 2"
 },
 ...
}]
</span></code></pre></div></div>

<h4 id="second-to-get-a-specific-movie">Second, to get a specific movie</h4>

<h5 id="request-format-2">Request Format</h5>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET /movies/{movieId}
</span></code></pre></div></div>

<h5 id="response-format-2">Response Format</h5>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK
body {
  "movieId": String,
  "movieName": String
}
</span></code></pre></div></div>

<h3 id="update">Update</h3>

<h4 id="request-format-3">Request Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">PUT /movies/{movieId}
body {
 "movieName": String
}
</span></code></pre></div></div>

<h4 id="response-format-3">Response Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK if successful in updating the movie
</span></code></pre></div></div>

<h3 id="delete">Delete</h3>

<h4 id="request-format-4">Request Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">DELETE /movies/{movieId}
</span></code></pre></div></div>

<h4 id="response-format-4">Response Format</h4>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">200 OK if successful in deleting the movie
</span></code></pre></div></div>

<p>Now that we have a plan for API signatures, we can start with writing CREATE.</p>

<h2 id="step-2-tdd-on-first-scenario-create">Step 2: TDD on First Scenario: Create</h2>

<p>In TDD, we always start with failing tests, however, in upsert as well as this blog post, we did planning first. An explicit plan helps get into TDD initially and it can serve as a good training wheel. Once you have crossed the training wheel, you can however use your test as a plan. And if you think about it, your tests are just a plan for your code will be written.</p>

<p>Some tests are easier to write without a skeleton, testing REST APIs is one of these tests.</p>

<p>We‚Äôll start by writing a test for an endpoint that doesn‚Äôt exist. Then we‚Äôll write the code. And then move to the next scenario.</p>

<p>As discussed before, this post will be faster-paced than the previous TDD example.</p>

<h4 id="failing-test">Failing test</h4>

<p>In Spring Boot, Controllers defined the REST APIs. We‚Äôll start with a <strong>MovieControllerTest</strong> file.</p>

<p><strong>MovieControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="kd">class</span> <span class="nc">MovieControllerTest</span><span class="o">{</span>
 <span class="nd">@Autowired</span>
 <span class="nc">WebTestClient</span> <span class="n">webTestClient</span><span class="o">;</span>
 
 <span class="nd">@Autowired</span>
 <span class="nc">MovieRepository</span> <span class="n">movieRepository</span><span class="o">;</span>

 <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"POST /movies"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">UpsertMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD insert movie in the database"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldInsertMovieInTheDatabase</span><span class="o">(){</span>
            <span class="c1">// given: a movie</span>
            <span class="nc">Movie</span> <span class="n">unsavedMovie</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M1"</span><span class="o">,</span> <span class="s">"Avengers"</span><span class="o">);</span>
         <span class="c1">// when: POST /movies is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">post</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies"</span><span class="o">)</span>
           <span class="o">.</span><span class="na">bodyValue</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">)</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">();</span>
            <span class="c1">// then: movies should get saved in the database.</span>
                <span class="nc">Movie</span> <span class="n">movieFromDatabase</span> <span class="o">=</span> <span class="n">movieRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
                <span class="n">assertThat</span><span class="o">(</span><span class="n">movieFromDatabase</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">isNotNull</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> 
<span class="o">}</span>
</code></pre></div></div>

<p>In this test, we called a REST API, and then,</p>

<ol>
  <li>we validated if the response is 200 OK</li>
  <li>we validated if the body is not present. Because this request just adds everything to the database, it need not return anything.</li>
  <li>we check the database to see if the movie is saved.</li>
</ol>

<p>Now that we have written the test, when we run it, we‚Äôll get a 404 NOT FOUND error because we haven‚Äôt implemented our API.</p>

<p>Let‚Äôs write the code,</p>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@RestController</span>
 <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/movies"</span><span class="o">)</span>
 <span class="kd">class</span> <span class="nc">MovieController</span><span class="o">{</span>
  <span class="nd">@Autowired</span>
  <span class="nc">MovieService</span> <span class="n">movieService</span><span class="o">;</span>

  <span class="nd">@PostMapping</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;</span> <span class="nf">postMovie</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Movie</span> <span class="n">unsavedMovie</span><span class="o">){</span>
   <span class="nc">Movie</span> <span class="n">savedMovie</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">);</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">savedMovie</span><span class="o">);</span>
  <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<p>We run the code and see that our test fails, this is because we passed the body and we were expecting no body.</p>

<p>We go ahead and modify our code.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@PostMapping</span>
  <span class="nc">ResponseEntity</span> <span class="nf">postMovie</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Movie</span> <span class="n">unsavedMovie</span><span class="o">){</span>
   <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">);</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>We run the code again, and our code passes! We switch back to code up our new scenario.</p>

<p>But before that, we remember, that for creation the response status should not be 200. <a href="https://www.ankushchoubey.com/good-rest-api-design/" title="‚Äå">It should be 201 CREATED with a location header.</a>. So, we aren‚Äôt done yet, let‚Äôs make the change, starting first in the code.</p>

<p>PAUSE. TDD is test-first. Modifying in code isn‚Äôt test-first. So, let‚Äôs modify the #testFirst.</p>

<p>In the test, we change expecting 200 OK to 201 created and validate the location header.</p>

<p>When doing 201 CREATED, we send the location header which points to the URL to access the newly created resource. Since we will have a READ endpoint at <code class="language-plaintext highlighter-rouge">/movies/{movieId}</code>. I have pointed to this location.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// then: response should be 200 OK</span>
  <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isCreated</span><span class="o">();</span>
  <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">expectHeader</span><span class="o">(</span><span class="s">"location"</span><span class="o">,</span> <span class="s">"/movies/"</span><span class="o">+</span><span class="n">movie</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
  <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">();</span>
</code></pre></div></div>

<p>The others are short.</p>

<h3 id="read-1">Read</h3>

<p>We have two scenarios, first to get all movies and second to get a particular movie.</p>

<p>We‚Äôll do TDD for one scenario at a time. Starting with getting all movies</p>

<p><strong>MoviesControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Autowired</span>
 <span class="nc">MovieService</span> <span class="n">movieService</span><span class="o">;</span>
 
 <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"GET /movies"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">GetMoviesMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD return all movies"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldReturnAllMoviesThatAreInDB</span><span class="o">(){</span>
            <span class="c1">// given: a few movies in the database</span>
         <span class="nc">Movie</span> <span class="n">avengers</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M1"</span><span class="o">,</span> <span class="s">"Avengers"</span><span class="o">));</span>
         <span class="nc">Movie</span> <span class="n">oppenheimer</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M2"</span><span class="o">,</span> <span class="s">"Oppenheimer"</span><span class="o">));</span>
         <span class="c1">// when: GET /movies is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">get</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies"</span><span class="o">)</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">ofType</span><span class="o">(</span><span class="k">new</span> <span class="nc">TypedReference</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;);</span>
            <span class="c1">// then: movies should get saved in the database.</span>
              <span class="n">assertThat</span><span class="o">(</span><span class="n">responseBody</span><span class="o">)</span>
               <span class="o">.</span><span class="na">hasSize</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
               <span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">avengers</span><span class="o">,</span> <span class="n">oppenheimer</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> 
</code></pre></div></div>

<p>You may have noticed I set the variables as <code class="language-plaintext highlighter-rouge">avengers</code> and <code class="language-plaintext highlighter-rouge">oppenheimer</code>. I find writing the variable names related to domain or movies <a href="https://www.ankushchoubey.com/creative-variable-names/" title="‚Äå">keeps tests interesting and fun, and at the same time</a>, it‚Äôs closer to the actual movie domain.</p>

<p>Let‚Äôs write the code,</p>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@RestController</span>
 <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/movies"</span><span class="o">)</span>
 <span class="kd">class</span> <span class="nc">MovieController</span><span class="o">{</span>
  <span class="nd">@Autowired</span>
  <span class="nc">MovieService</span> <span class="n">movieService</span><span class="o">;</span>
  
  <span class="c1">// POST /movies code is here</span>
 
  <span class="nd">@GetMapping</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;</span> <span class="nf">getMovies</span><span class="o">(){</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">movieService</span><span class="o">.</span><span class="na">getAll</span><span class="o">());</span>
  <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<p>Actually, we forgot to add <code class="language-plaintext highlighter-rouge">getAll</code> method in the movie service. At this point, we‚Äôll go ahead and write a <code class="language-plaintext highlighter-rouge">MovieService::getAll</code> test and then the method while following TDD.  After that‚Äôs done we‚Äôll come to the controller test again and run it and fix it until it passes.</p>

<h2 id="lets-pause">Let‚Äôs pause</h2>

<p>I guess you get the point.</p>

<p>Every time we write the test first even if it‚Äôs a small change. And even when we need to add new methods to an existing class.</p>

<p>There is a one-on-one mapping between the code and its test. So</p>

<ul>
  <li><strong>MovieController</strong> -&gt; <strong>MovieControllerTest</strong>.</li>
  <li><strong>MovieService</strong> -&gt; <strong>MovieServiceTest</strong> (<a href="https://www.ankushchoubey.com/tdd-backend-example" title="‚Äå">MovieService was covered in the previous post on Upsert</a>)
//TODO</li>
</ul>

<p>In the rest of the blogpost I‚Äôll just write test and code, just glance through it to understand it. It‚Äôs pretty simple. If you have doubts, you always write a comment and I‚Äôll respond and update the post if needed.</p>

<p>GET a single movie</p>

<p><strong>MovieControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"GET /movies/{movieId}"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">GetMoviesMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD return a single movie"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldReturnAllMoviesThatAreInDB</span><span class="o">(){</span>
            <span class="c1">// given: a few movies in the database</span>
         <span class="nc">Movie</span> <span class="n">oppenheimer</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M2"</span><span class="o">,</span> <span class="s">"Oppenheimer"</span><span class="o">));</span>
         <span class="c1">// when: GET /movies is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">get</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies/"</span><span class="o">+</span><span class="n">oppenheimer</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">())</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="nc">Movie</span> <span class="n">responseMovie</span> <span class="o">=</span> <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">ofType</span><span class="o">(</span><span class="nc">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="c1">// then: movies should get saved in the database.</span>
              <span class="n">assertThat</span><span class="o">(</span><span class="n">responseMovie</span><span class="o">)</span>
               <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">oppenheimer</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> 
</code></pre></div></div>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{movieId}"</span><span class="o">)</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;</span> <span class="nf">getMovies</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">movieId</span><span class="o">){</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">movieService</span><span class="o">.</span><span class="na">getOne</span><span class="o">(</span><span class="n">movieId</span><span class="o">));</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>We‚Äôll do TDD for creating the <code class="language-plaintext highlighter-rouge">MovieService::getOne</code> method with the repository.</p>

<h3 id="update-1">Update</h3>

<p><strong>MovieControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"PUT /movies/{movieId}"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">GetMoviesMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD update movie name"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldReturnAllMoviesThatAreInDB</span><span class="o">(){</span>
            <span class="c1">// given: save a movie in db</span>
         <span class="nc">Movie</span> <span class="n">inception</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M3"</span><span class="o">,</span> <span class="s">"Inception"</span><span class="o">));</span>
      <span class="c1">// and: a new movie to save</span>
         <span class="nc">Movie</span> <span class="n">inceptionUpdated</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M3"</span><span class="o">,</span> <span class="s">"Inception by Christopher Nolan"</span><span class="o">));</span>
         <span class="c1">// when: GET /movies is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">put</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies/"</span><span class="o">+</span><span class="n">inception</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">())</span>
           <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">inceptionUpdated</span><span class="o">)</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="nc">Movie</span> <span class="n">responseMovie</span> <span class="o">=</span> <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">ofType</span><span class="o">(</span><span class="nc">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
       <span class="n">assertThat</span><span class="o">(</span><span class="n">responseMovie</span><span class="o">)</span>
               <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">inceptionUpdated</span><span class="o">);</span>
            <span class="c1">// then: movies should get saved in the database.</span>
            <span class="nc">Movie</span> <span class="n">inceptionFromDB</span> <span class="o">=</span> <span class="n">movieRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">inception</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
                <span class="n">assertThat</span><span class="o">(</span><span class="n">inceptionFromDB</span><span class="o">.</span><span class="na">getMovieName</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">inceptionUpdated</span><span class="o">.</span><span class="na">getMovieName</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span> 
</code></pre></div></div>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{movieId}"</span><span class="o">)</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;</span> <span class="nf">putMovies</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">movieId</span><span class="o">,</span> <span class="nd">@ResponseBody</span> <span class="nc">Movie</span> <span class="n">movie</span><span class="o">){</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="n">movieId</span><span class="o">,</span> <span class="n">movie</span><span class="o">)));</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>You may have noticed I did some duplicate bad code. I usually <a href="https://www.ankushchoubey.com/2023/01/07/Separating_Request,_Entity_and_Response.html" title="‚Äå">separate request, response, and entity objects</a>, but this isn‚Äôt a scope for that so skipping for now.</p>

<h3 id="delete-1">Delete</h3>

<p><strong>MovieControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Nested</span>
    <span class="nd">@Displayname</span><span class="o">(</span><span class="s">"DELETE /movies/{movieId}"</span><span class="o">)</span>
    <span class="kd">class</span> <span class="nc">DeleteMoviesMethod</span><span class="o">{</span>
        <span class="nd">@test</span>
        <span class="nd">@displayname</span><span class="o">(</span><span class="s">"SHOULD remove the movie from DB"</span><span class="o">)</span>
        <span class="kt">void</span> <span class="nf">shouldReturnAllMoviesThatAreInDB</span><span class="o">(){</span>
            <span class="c1">// given: save a movie in db</span>
         <span class="nc">Movie</span> <span class="n">inception</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M3"</span><span class="o">,</span> <span class="s">"Inception"</span><span class="o">));</span>
         <span class="c1">// when: DELETE /movies/{movieId} is called</span>
          <span class="nc">WebTestClient</span><span class="o">.</span><span class="na">Response</span> <span class="n">responseSpec</span> <span class="o">=</span> <span class="n">webTestClient</span><span class="o">.</span><span class="na">delete</span><span class="o">()</span>
           <span class="o">.</span><span class="na">url</span><span class="o">(</span><span class="s">"/movies/"</span><span class="o">+</span><span class="n">inception</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">())</span>
           <span class="o">.</span><span class="na">exchange</span><span class="o">();</span>
      <span class="c1">// then: response should be 200 OK</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectResponse</span><span class="o">().</span><span class="na">isOk</span><span class="o">()</span>
       <span class="n">responseSpec</span><span class="o">.</span><span class="na">expectBody</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">();</span>
            <span class="c1">// then: movies should get saved in the database.</span>
            <span class="nc">Movie</span> <span class="n">inceptionFromDB</span> <span class="o">=</span> <span class="n">movieRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">inception</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
                <span class="n">assertThat</span><span class="o">(</span><span class="n">inceptionFromDB</span><span class="o">)</span>
           <span class="o">.</span><span class="na">isNull</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span> 
</code></pre></div></div>

<p><strong>MovieController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{movieId}"</span><span class="o">)</span>
  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">&gt;&gt;</span> <span class="nf">deleteMovies</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">movieId</span><span class="o">){</span>
   <span class="n">movieService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">movieId</span><span class="o">);</span>
   <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>Again we do TDD, do build the code.</p>

<p>I‚Äôll be adding a GitHub link with the code as soon as I‚Äôm in the final stage of the series. It‚Äôs a #todo for me.</p>

<h2 id="closing">Closing</h2>

<p>What you may have noticed is, we never ran Postman or Swagger to test our REST APIs. We just ran the tests. And we didn‚Äôt even start the code. #todo: add a link here to the blog post on TDD RedFlags. When doing TDD we usually don‚Äôt need to start the application.</p>

<p>All that debugging time that would have taken with Postman is now a documented-automated test. That we can run many times.</p>

<p>There are a lot of things that can be done for REST API TDD. Request Validation, checking for user permissions, correct status response, etc and these things are quite standing. I‚Äôll be writing a cheat sheet version for REST API TDD soon. #todo: link to Rest Api TDD Cheatsheet.</p>]]></content><author><name></name></author><category term="testing" /><category term="tdd" /><summary type="html"><![CDATA[Extending our Movie example creating a REST API with TDD. Scenarios covered are Create, Read, Update and Delete.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/tdd-rest-api-example.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/tdd-rest-api-example.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TDD example on a backend - Upsert Method</title><link href="https://www.ankushchoubey.com/tdd-backend-example" rel="alternate" type="text/html" title="TDD example on a backend - Upsert Method" /><published>2023-08-13T00:00:00-05:00</published><updated>2023-08-13T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/tdd-backend-example</id><content type="html" xml:base="https://www.ankushchoubey.com/tdd-backend-example"><![CDATA[<p>The upsert method is one of my favorite examples to teach when explaining TDD. It‚Äôs simple easy and gets the point across.</p>

<p>This article is about backend TDD testing. The same applied to the front end but we‚Äôll see it in a different post. The example presented is using Spring Boot, but you can do this in any language.</p>

<p>I‚Äôll present the problem statement. Then explain the implementation while doing TDD. Later, we‚Äôll introduce a special scenario that would help us iterate on what we wrote initially.</p>

<p>The post can seem a bit exaggerated. In many places ‚Äúgood Java‚Äù practices will not be followed. A senior developer may feel a lot of explanation is unnecessary. The intent is learning and therefore, the focus of this post is to give an example that you could find relatable when you face a real problem. The blog post is therefore too detailed.</p>

<h2 id="problem-statement-for-upsert">Problem statement for <strong>upsert</strong></h2>

<p>Here‚Äôs the problem statement.</p>

<p>You have a ‚Äúmovies‚Äù table in the database. The table stores all values related to a movie.  You want only one entry for each movie. If the data for a movie is present, you just update the data. If the data is not present, you insert the data. In both cases, it‚Äôll return the data from the database.</p>

<p>In MongoDB, terms this is called an ‚Äúupsert‚Äù operation. So we‚Äôll try to write an upsert method ourselves with TDD.</p>

<h2 id="getting-started">Getting Started</h2>

<p><img src="/images/tdd.png" alt="TDD Flow" /></p>

<p>//TODO explain the process we will follow</p>

<h3 id="step-1-skeletal">Step 1: Skeletal</h3>

<p>To start with TDD, we first start creating the test file. But I often find it easier to decide the structure of the code first and then start writing the tests. This way I‚Äôd avoid compilation errors. At this stage, I won‚Äôt write any business logic.</p>

<p>You think of 3 classes,</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Movie</code> class. Represents a movie in the database.</li>
  <li><code class="language-plaintext highlighter-rouge">MovieRepository</code> is a class used to query the database.</li>
  <li><code class="language-plaintext highlighter-rouge">MovieService</code> which includes our business logic for the <code class="language-plaintext highlighter-rouge">upsert</code> method.</li>
</ul>

<p>You go ahead and create the classes.</p>

<p><strong>Movie.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Movie</span> <span class="o">{</span>
 <span class="nd">@Id</span> <span class="kd">private</span> <span class="nc">String</span> <span class="n">movieId</span><span class="o">;</span>
 <span class="kd">private</span> <span class="nc">String</span> <span class="n">movieName</span><span class="o">;</span>
 <span class="nd">@Version</span> <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">version</span><span class="o">;</span> <span class="c1">// We'll see the use of this @Version in the last section where we need to update our code.</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>MovieRepository.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MovieRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;{</span>
 <span class="c1">//This class is currently empty </span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>MovieService</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">class</span> <span class="nc">MovieService</span> <span class="o">{</span>
 <span class="kd">public</span> <span class="nc">Movie</span> <span class="nf">upsert</span><span class="o">(</span><span class="nc">Movie</span> <span class="n">movie</span><span class="o">){</span>
  <span class="c1">// Note how we are skipping logic and only developing skeleton code.</span>
  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
 <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="step-2-write-the-failing-test">Step 2: Write the failing test</h3>

<p>We switch to tests. In IntelliJ, we have a handy shortcut, <code class="language-plaintext highlighter-rouge">Ctrl + Shift + T</code> to switch to the test or create a test file.</p>

<p>We created 3 classes. But we‚Äôll write the test for only one, here‚Äôs why:</p>

<ol>
  <li><strong>Movie</strong> class is just a data class. It does not include any logic.</li>
  <li><strong>MovieRepository</strong> is an interface that <code class="language-plaintext highlighter-rouge">Spring Data JPA</code> would implement. Spring Data JPA is an ORM. For those who don‚Äôt know ORM or how <code class="language-plaintext highlighter-rouge">Sprint Data JPA</code> works, consider the <code class="language-plaintext highlighter-rouge">extends JpaRepository</code> to handle all the database-related operations like getting data from the database and saving. As this is implemented by the Spring Data JPA library, we‚Äôll not write the test for it.&lt;Note: It‚Äôs often good to confirm an external library‚Äôs behavior via tests)</li>
  <li><strong>MovieService</strong>: This is the only class that has our business logic.</li>
</ol>

<p>To write a skeleton test class for MovieService.</p>

<p><strong>MovieServiceTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@DataMongoTest</span>
<span class="nd">@Import</span><span class="o">(</span><span class="nc">MovieService</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">MovieServiceTest</span><span class="o">{</span>
 <span class="c1">// empty </span>
<span class="o">}</span>
</code></pre></div></div>

<p>In TDD, we iterate on scenarios. For each scenario,</p>

<ol>
  <li>we start by writing a test.</li>
  <li>This test fails because our code doesn‚Äôt exist yet.</li>
  <li>Then write the code that will pass our test.</li>
  <li>This covers our one scenario.</li>
</ol>

<p>We repeat steps 1 to 4 for each scenario. For upsert, we kind of have two scenarios.</p>
<ol>
  <li>If the data is not present, you insert the data.</li>
  <li>If the data for a movie is present, you just update the data.</li>
</ol>

<p>When you are doing TDD yourself, it‚Äôs helpful to identify scenarios that would help you get started. I have explained the scenarios in detail here <insert link="">.</insert></p>

<p>Let‚Äôs start with the first scenario. <code class="language-plaintext highlighter-rouge">If the data is not present, you insert the data.</code></p>

<p>In the test file, I write</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Autowired</span> <span class="nc">MovieService</span> <span class="n">movieService</span><span class="o">;</span>
 <span class="nd">@Autowired</span> <span class="nc">MovieRepository</span> <span class="n">movieRepository</span><span class="o">;</span>
 
 <span class="nd">@Nested</span>
 <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"upsert method"</span><span class="o">)</span>
 <span class="kd">class</span> <span class="nc">UpsertMethod</span><span class="o">{</span>
  <span class="nd">@Nested</span>
  <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"WHEN movie is not present"</span><span class="o">)</span>
  <span class="kd">class</span> <span class="nc">WhenMovieIsNotPresent</span><span class="o">{</span>
   <span class="nd">@Test</span>
   <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"SHOULD insert movie in the database"</span><span class="o">)</span>
   <span class="kt">void</span> <span class="nf">shouldInsertMovieInTheDatabase</span><span class="o">(){</span>
    <span class="c1">// given: a movie</span>
     <span class="nc">Movie</span> <span class="n">unsavedMovie</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M1"</span><span class="o">,</span> <span class="s">"Avengers"</span><span class="o">);</span>
    <span class="c1">//When: upsert the movie</span>
     <span class="nc">Movie</span> <span class="n">responseMovie</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">);</span>
    <span class="c1">// then: movies should get saved in the database.</span>
     <span class="nc">Movie</span> <span class="n">movieFromDatabase</span> <span class="o">=</span> <span class="n">movieRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
     <span class="n">assertThat</span><span class="o">(</span><span class="n">movieFromDatabase</span><span class="o">)</span>
      <span class="o">.</span><span class="na">isNotNull</span><span class="o">()</span>
      <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">unsavedMovie</span><span class="o">);</span>
   <span class="o">}</span>
  <span class="o">}</span>
 <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The above test is purposefully written using the GIVEN/WHEN/THEN format.</p>

<p>Here:</p>

<ol>
  <li>We create a movie object.</li>
  <li>We call our upsert method.</li>
  <li>Then we check the database to see if the movie was inserted.</li>
</ol>

<p>This is our first test. Note that we haven‚Äôt written the code yet.</p>

<h2 id="step-3-run-the-test">Step 3: Run the test</h2>

<p>We should run the test because we expect it to fail. Sometimes, when we run the test before writing the code, our tests pass.</p>

<p>If our test passes before writing the code, it means either we have written a bad test or that scenario was already handled.</p>

<p>If our test fails, it means we are doing TDD right. The tests are expected to fail. So they should fail.</p>

<h2 id="step-3-write-the-code">Step 3: Write the code</h2>

<p>Now let‚Äôs write the code only against the test we have written. And note more.</p>

<p>{It‚Äôs a TDD Red Flag to write more code than what will pass the test. So only write that much code that passes the test. This way, you‚Äôll have precise code and precise tests.}</p>

<p><strong>MovieService.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">class</span> <span class="nc">MovieService</span> <span class="o">{</span>
 <span class="nd">@Autowired</span>
 <span class="nc">MovieRepository</span> <span class="n">repo</span><span class="o">;</span>

 <span class="kd">public</span> <span class="nc">Movie</span> <span class="nf">upsert</span><span class="o">(</span><span class="nc">Movie</span> <span class="n">movie</span><span class="o">){</span>
  <span class="k">return</span> <span class="n">repo</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">movie</span><span class="o">);</span>
 <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now that our code is written. As you can see, it didn‚Äôt take a lot to pass our failing test. We just needed one line. But writing the test ensures that it always passes.</p>

<p>Sometimes, it may seem trivial to write a test for a one-liner. But stick with TDD. The goal here isn‚Äôt the present. It‚Äôs future maintainability as multiple developers work on the same codebase and modify behavior. Our tests ensure that our expected behavior is preserved. Later in this blog post, I‚Äôll introduce a scenario where we have to modify the test, and you‚Äôll see how the test helps.</p>

<div id="mc_embed_shell" style="border: 10px solid; margin: 100px 0px; padding: 20px;">
    <link href="//cdn-images.mailchimp.com/embedcode/classic-061523.css" rel="stylesheet" type="text/css" />
<style type="text/css">
      #mc_embed_signup{background:#fff; false;clear:left; font:14px Helvetica,Arial,sans-serif; width: 600px;}
      /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block.
         We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
</style>
<div id="mc_embed_signup">
    <img src="/images/signup.jpg" style="width: 50%;object-fit: contain;" /> 
    <a style="display: none;" href="https://www.freepik.com/free-vector/email-campaign-concept-illustration_7367537.htm#query=sign%20up%20email&amp;position=1&amp;from_view=search&amp;track=ais">Image by storyset on Freepik</a>
  <form action="https://ankushchoubey.us21.list-manage.com/subscribe/post?u=787ccdfb3a0c625c1830ac78a&amp;id=51f57ce68a&amp;f_id=002959e1f0" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank">
      <div id="mc_embed_signup_scroll">
        <h2>If you liked this blogpost on "TDD example on a backend - Upsert Method" you'll also like my other blogposts.</h2>
        <h3>Keep the exploration alive ‚Äì subscribe to my mailing list and receive more articles like this one</h3>
          <div class="indicates-required"><span class="asterisk">*</span> indicates required</div>
          <div class="mc-field-group">
            <label for="mce-EMAIL">Email Address <span class="asterisk">*</span></label>
            <input type="email" name="EMAIL" class="required email" id="mce-EMAIL" required="" value="" /><span id="mce-EMAIL-HELPERTEXT" class="helper_text">Your email ids will not be shared with anyone.</span></div><div class="mc-field-group input-group"><strong>Type of content you are interested in? <span class="asterisk">*</span></strong>
                <ul><li><input type="radio" name="MMERGE6" id="mce-MMERGE60" value="Programming" /><label for="mce-MMERGE60">Programming</label></li><li><input type="radio" name="MMERGE6" id="mce-MMERGE61" value="Philosophy" /><label for="mce-MMERGE61">Philosophy</label></li><li><input type="radio" name="MMERGE6" id="mce-MMERGE62" value="Both" /><label for="mce-MMERGE62">Both</label></li></ul><span id="mce-MMERGE6-HELPERTEXT" class="helper_text">I'll send only those blogposts that are interesting to you.</span></div>
      <div id="mce-responses" class="clear foot">
          <div class="response" id="mce-error-response" style="display: none;"></div>
          <div class="response" id="mce-success-response" style="display: none;"></div>
      </div>
  <div aria-hidden="true" style="position: absolute; left: -5000px;">
      /* real people should not fill this in and expect good things - do not remove this or risk form bot signups */
      <input type="text" name="b_787ccdfb3a0c625c1830ac78a_51f57ce68a" tabindex="-1" value="" />
  </div>
      <div class="optionalParent">
          <div class="clear foot">
              <input type="submit" name="subscribe" id="mc-embedded-subscribe" class="button" value="Subscribe" />
              <p style="margin: 0px auto; display: none;"><a href="http://eepurl.com/iwHRjY" title="Mailchimp - email marketing made easy and fun"><span style="display: inline-block; background-color: transparent; border-radius: 4px;"><img class="refferal_badge" src="https://digitalasset.intuit.com/render/content/dam/intuit/mc-fe/en_us/images/intuit-mc-rewards-text-dark.svg" alt="Intuit Mailchimp" style="width: 220px; height: 40px; display: flex; padding: 2px 0px; justify-content: center; align-items: center;" /></span></a></p>
          </div>
      </div>
  </div>
</form>
</div>
<p style="display: flex;margin: 0px !important;gap: 10px;">
    Hire me for consulting, speaking and developer roles by contacting me on <a href="https://www.linkedin.com/in/ankushchoubey/"><img src="/images/LI-Logo.png" style="height: 2ch;    background: #f0f8ff00;" alt="LinkedIn logo" /></a>.
</p>
<script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js"></script><script type="text/javascript">(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[6]='MMERGE6';ftypes[6]='radio';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='ADDRESS';ftypes[3]='address';fnames[4]='PHONE';ftypes[4]='phone';fnames[5]='BIRTHDAY';ftypes[5]='birthday';}(jQuery));var $mcj = jQuery.noConflict(true);</script></div>

<h2 id="step-4-run-the-test">Step 4: Run the test</h2>

<p>Now that the code is written, run the test and you‚Äôll hopefully see the scenario pass.</p>

<p>If your test doesn‚Äôt pass, debug and you‚Äôll find an issue. If it‚Äôs something that you don‚Äôt understand, mention it in the comments below and I‚Äôll answer.</p>

<h2 id="step-5-repeat-the-write-test---run-test--write-code-cycle-for-the-second-scenario">Step 5: Repeat the write test -&gt; run test-&gt; write code cycle for the second scenario</h2>

<p>Our second scenario for <code class="language-plaintext highlighter-rouge">upsert</code> was: If the data for a movie is present, you just update the data.</p>

<p>Here is how I‚Äôd write the failing test:</p>

<p><strong>MovieServiceTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Nested</span>
 <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"upsert method"</span><span class="o">)</span>
 <span class="kd">class</span> <span class="nc">UpsertMethod</span><span class="o">{</span>
  <span class="o">...</span> <span class="n">previous</span> <span class="n">test</span> <span class="n">is</span> <span class="n">here</span>
  <span class="nd">@Nested</span>
  <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"WHEN movie is present"</span><span class="o">)</span>
  <span class="kd">class</span> <span class="nc">WhenMovieIsNotPresent</span><span class="o">{</span>
   <span class="nd">@Test</span>
   <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"SHOULD update the movie in the database"</span><span class="o">)</span>
   <span class="kt">void</span> <span class="nf">shouldInsertMovieInTheDatabase</span><span class="o">(){</span>
    <span class="c1">// given: a movie</span>
     <span class="nc">Movie</span> <span class="n">savedMovie</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M1"</span><span class="o">,</span> <span class="s">"Avengers"</span><span class="o">));</span>
     <span class="nc">String</span> <span class="n">newMovieName</span> <span class="o">=</span> <span class="s">"Avengers: Infinity War"</span><span class="o">;</span>
     <span class="nc">Movie</span> <span class="n">unsavedUpdatedMovie</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="n">savedMovie</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">newMovieName</span><span class="o">);</span>
    <span class="c1">// when: upsert the movie</span>
     <span class="nc">Movie</span> <span class="n">responseMovie</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="n">unsavedUpdatedMovie</span><span class="o">);</span>
    <span class="c1">// then: movies should get saved in the database.</span>
     <span class="nc">Movie</span> <span class="n">movieFromDatabase</span> <span class="o">=</span> <span class="n">movieRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">responseMovie</span><span class="o">.</span><span class="na">getMovieId</span><span class="o">());</span>
     <span class="n">assertThat</span><span class="o">(</span><span class="n">movieFromDatabase</span><span class="o">)</span>
      <span class="o">.</span><span class="na">isNotNull</span><span class="o">()</span>
      <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">unsavedUpdatedMovie</span><span class="o">);</span>
   <span class="o">}</span>
  <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<p>I run the test and see if it‚Äôs failing.</p>

<p>Then I write the code for updating and passing the scenario.</p>

<p><strong>MovieService.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">class</span> <span class="nc">MovieService</span> <span class="o">{</span>
 <span class="nd">@Autowired</span>
 <span class="nc">MovieRepository</span> <span class="n">repo</span><span class="o">;</span>

 <span class="kd">public</span> <span class="nc">Movie</span> <span class="nf">upsert</span><span class="o">(</span><span class="nc">Movie</span> <span class="n">movie</span><span class="o">){</span>
  <span class="nc">Movie</span> <span class="n">movieToSave</span> <span class="o">=</span> <span class="n">repo</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">movie</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
  <span class="k">if</span><span class="o">(</span><span class="n">movieToSave</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
   <span class="n">movieToSave</span><span class="o">.</span><span class="na">setMovieName</span><span class="o">(</span><span class="n">movie</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
   <span class="n">movieToSave</span> <span class="o">=</span> <span class="n">movie</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">repo</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">movieToSave</span><span class="o">);</span>
 <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>In the above code, we first check in the database to see if the <code class="language-plaintext highlighter-rouge">movie</code> exists.</p>

<ul>
  <li>If it exists, we update the <code class="language-plaintext highlighter-rouge">movieName</code>.</li>
  <li>If it does not exist, we just save the <code class="language-plaintext highlighter-rouge">movie</code>.</li>
</ul>

<p>This time we run all the tests in the test file to see if all of them pass. When you are developing a complex scenario, it may happen that while you are building one scenario, you break the functionality of another. Therefore running all the test scenarios would verify if the code is still working as expected.</p>

<p>Congratulations! You have done your first TDD cycle.</p>

<p>We wrote the failing test. We ran it. We wrote the code against the failing test and it passed. We repeated the cycle for the number of scenarios we had.</p>

<h2 id="a-new-problem">A new problem</h2>

<p>The following is a real problem I faced when the <code class="language-plaintext highlighter-rouge">upsert</code> method was run in parallel.</p>

<p>{This might be a bit advanced for beginner developers. If you are a beginner, read up on what locking means in parallel programming.}</p>

<p>Our <code class="language-plaintext highlighter-rouge">movie</code> microservice is being used by a lot of people at once. And therefore, our <code class="language-plaintext highlighter-rouge">upsert</code> method is being called many times parallelly. We have started getting MongoDB‚Äôs <strong>OptimisticLockingException</strong>. All our tests work but they don‚Äôt get the <code class="language-plaintext highlighter-rouge">OptimisticLockingException</code>.</p>

<p>The  <code class="language-plaintext highlighter-rouge">OptimisticLockingException</code> occurs when two different threads try to update the same row in a MongoDB database.</p>

<p>Pay attention to the version field below.</p>

<p>Suppose data in the database is <code class="language-plaintext highlighter-rouge">{movieId: "M1", movieName: "Avengers", version: 1}</code></p>

<ul>
  <li>This data is read by two threads:
    <ul>
      <li>The <strong>first thread</strong> tries to save the record as <code class="language-plaintext highlighter-rouge">{movieId: "M1", movieName: "Avengers: Infinity War", version: 1}</code></li>
      <li>The <strong>second thread</strong> tries to save the record as <code class="language-plaintext highlighter-rouge">{movieId: "M1", movieName: "Avengers: End Game", version: 1}</code></li>
    </ul>
  </li>
</ul>

<p>The version is incremented by MongoDB only when the data is saved. Both threads are trying to update on the same version.
If one of them is saved, then the version field is incremented and the other one cannot save since it‚Äôs trying to update a version that does not exist.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5UaHJlYWQxIC0tPiB8VXBkYXRlIHZlcnNpb24gMXwgY2hlY2tcblRocmVhZDIgLS0-IHxVcGRhdGUgdmVyc2lvbiAxfCBjaGVja1xuc3ViZ3JhcGggTW9uZ29EQlxuY2hlY2t7aXMgdGhlIHZlcnNpb24gaW4gREIgc2FtZX1cbmNoZWNrIC0tPiB8dmVyc2lvbiBpcyBzYW1lfCB1cGRhdGVfZGF0YWJhc2VbVXBkYXRlIERhdGFiYXNlXS0tPiBpbmNyZW1lbnRfdmVyc2lvbltJbmNyZW1lbnQgVmVyc2lvbl1cbmNoZWNrIC0tPiB8dmVyc2lvbiBpcyBkaWZmZXJlbnQgfCBUaHJvd1tUaHJvdyBhbiBPcHRpbWlzdGljTG9ja2luZ0V4Y2VwdGlvbl1cbmVuZCIsIm1lcm1haWQiOm51bGx9" /></p>

<p>There are two ways to debug, one is to run the code manually and try to replicate multiple save scenarios by firing the method manually. But this is a non-TDD way.</p>

<p>The #WayOfTDD is, to write a test that generates the same scenario. Since I have faced this scenario before, I‚Äôll share what I had done. Below is an excerpt from my article <a href="https://www.ankushchoubey.com/optimistic-locking-exception-mongodb/">Solving an OptimisticLockingException During Upsert in MongoDB-Spring Webflux</a></p>

<p>I created a test as follows:</p>

<ol>
  <li>Manipulate documents parallel. This was done with <code class="language-plaintext highlighter-rouge">@RepeatableTest</code> and <code class="language-plaintext highlighter-rouge">@Execution(CONCURENT)</code></li>
  <li>Assertion wasn‚Äôt straightforward with <code class="language-plaintext highlighter-rouge">@RepeatableTest</code> so I instead collected all versions in a static list.</li>
  <li>After all <code class="language-plaintext highlighter-rouge">@RepeatableTests</code> were over I asserted if the version was as expected.</li>
  <li>I ran the code and saw <code class="language-plaintext highlighter-rouge">OptimisticLockingException</code> occurring and the assertion fails.</li>
  <li>I replaced <code class="language-plaintext highlighter-rouge">repository</code> <code class="language-plaintext highlighter-rouge">find</code> and <code class="language-plaintext highlighter-rouge">save</code> with <code class="language-plaintext highlighter-rouge">MongoOperation</code> <code class="language-plaintext highlighter-rouge">update</code> as described above.</li>
  <li>The test passed.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Nested</span>
<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"WHEN upsert is called parallely"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">WhenUpsertIsCalledParallelyTest</span><span class="o">{</span>
    
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Long</span> <span class="n">repeatTimes</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">allVersions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@RepeatableTest</span><span class="o">(</span><span class="n">repeatTimes</span><span class="o">)</span>                           <span class="c1">// Part of Step 1</span>
    <span class="nd">@Execution</span><span class="o">(</span><span class="no">CONCURRENT</span><span class="o">)</span>                                 <span class="c1">// Part of Step 1</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"SHOULD manipulate a single record"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">shouldManipulateASingleRecord</span><span class="o">(){</span>
        <span class="c1">// when:</span>
         
            <span class="nc">Movie</span> <span class="n">movie</span> <span class="o">=</span> <span class="n">movieService</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Movie</span><span class="o">(</span><span class="s">"M1"</span><span class="o">,</span> <span class="s">"Avengers"</span><span class="o">)).</span><span class="na">block</span><span class="o">();</span> <span class="c1">// Part of Step 1</span>
        <span class="c1">// data collection:</span>
            <span class="n">allVersions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">movie</span><span class="o">.</span><span class="na">getVersion</span><span class="o">());</span>         <span class="c1">// Part of Step 2</span>
    <span class="o">}</span>

    <span class="nd">@AfterAll</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">assertVersionIsRepeatTimes</span><span class="o">(){</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="nc">Collections</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">version</span><span class="o">))</span>                <span class="c1">// Part of Step 3</span>
            <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">repeatTimes</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>After writing this code, I was able to reproduce the <code class="language-plaintext highlighter-rouge">OptimisticLockingException</code></p>

<p>Then I modified the code like this to make it pass.</p>

<p><strong>MovieService.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">class</span> <span class="nc">MovieService</span> <span class="o">{</span>
 <span class="nd">@Autowired</span>
 <span class="nc">MongoOperations</span> <span class="n">mongoOperations</span><span class="o">;</span>

 <span class="kd">public</span> <span class="nc">Movie</span> <span class="nf">upsert</span><span class="o">(</span><span class="nc">Movie</span> <span class="n">movie</span><span class="o">){</span>
  <span class="nc">Update</span> <span class="n">updateQuery</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">()</span>
   <span class="o">.</span><span class="na">setOnInsert</span><span class="o">(</span><span class="s">"movieId"</span><span class="o">,</span> <span class="n">movie</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>
   <span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"movieName, movie.getName()); // code to update document
  return mongoOperation.findAndModify(
   query(where("</span><span class="n">movieId</span><span class="err">"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="n">movie</span><span class="o">.</span><span class="na">getId</span><span class="o">())),</span> <span class="n">updateQuery</span><span class="o">,</span> <span class="n">options</span><span class="o">().</span><span class="na">returnNew</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="na">upsert</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span> <span class="nc">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
 <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>I ran the test and the tests passed.</p>

<h2 id="ending">Ending</h2>

<p>What you have learned today is TDD in its purest. Hope you have practiced it step by step. If you have, do share your code‚Äôs GitHub/Gitlab in the comments section.</p>

<p>We went from understanding the problem to developing the solution in a TDD way.</p>

<ol>
  <li>We created a rough skeleton.</li>
  <li>We wrote a failing test for a scenario.</li>
  <li>We wrote our code against the failing test enough to pass it.</li>
  <li>Our test passed and we repeated the cycle for all the scenarios.</li>
</ol>

<p>Later, we realized a new problem in our code, and replicated it,</p>
<ol>
  <li>We came up with a hypothesis.</li>
  <li>Wrote a test to validate the hypothesis</li>
  <li>Wrote the code against the test to pass it.</li>
</ol>

<p>You have learned something that‚Äôs truly the foundation of writing good code. In upcoming blog posts, we‚Äôll see how to test REST APIs, frontends, etc.</p>

<p>If you have any questions, suggestions, or observations or just want to connect, feel free to use the comments box below! Your knowledge-sharing will be helpful to everyone.</p>]]></content><author><name></name></author><category term="testing" /><category term="tdd" /><summary type="html"><![CDATA[Learn the foundation of TDD with a simple example explained in depth.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/tdd-backend-example.svg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/tdd-backend-example.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to promote the habit of TDD within a Team</title><link href="https://www.ankushchoubey.com/promote-tdd-in-a-team/" rel="alternate" type="text/html" title="How to promote the habit of TDD within a Team" /><published>2023-08-09T00:00:00-05:00</published><updated>2023-08-09T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/promoting-tdd-within-a-team</id><content type="html" xml:base="https://www.ankushchoubey.com/promote-tdd-in-a-team/"><![CDATA[<p>When you do TDD yourself, you‚Äôd have improved your code quality, reduced the number of bugs you produce, and become faster at development.</p>

<p>At the same time, it‚Äôs likely that developers that don‚Äôt code with TDD, are doing less than they could.</p>

<p>(And finally, what‚Äôs good for all is good for us) So #weShouldShare our knowledge!</p>

<p>Doing things alone is nice. But having the whole team do TDD is something else. You can pick anyone‚Äôs code and any piece of code and know that it was done to the best.</p>

<p>Promoting TDD within the team takes time. And your patience and consistent effort is needed.</p>

<p><img src="/images/promote-tdd-in-a-team.jpg" alt="" /></p>

<h2 id="tdd-is-a-skill-that-you-develop-and-a-choice-that-you-make-">TDD is a skill that you develop and a choice that you make <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></h2>

<p>We‚Äôll explore TDD through the lens of habit change. The Atomic Habits is the best book on habit change. Below are the 4 Laws of Behavior Change as outlined in the book The Atomic Habits.</p>

<ol>
  <li>Make it obvious.</li>
  <li>Make it attractive.</li>
  <li>Make it easy.</li>
  <li>Make it satisfying.</li>
</ol>

<p>We‚Äôll explore the 4 Laws in a different order, starting with <strong>Make it Attractive</strong>.</p>

<h2 id="making-it-attractive">Making it Attractive</h2>

<h3 id="lead-by-example">Lead by Example</h3>

<p>I have found that no matter how much I try to motivate others, they only get motivated when they see an example. When I tried to tell people to do X, they didn‚Äôt believe me that it works. And then I did X and did so publically, and they brought questions for people. What was your thought process? How did you do? Didn‚Äôt you think? Etc etc.</p>

<p>So start by being someone who does TDD, and does it well. This series of posts may have taught you valuable insights into TDD.</p>

<p>Practice them to their best.</p>

<ul>
  <li>Produce good and clean tests</li>
  <li>Product good and clean code</li>
  <li>Be able to demonstrate that you can code easily.</li>
</ul>

<p>When they see you do TDD and see the quality of your code and tests and your change in productivity, They‚Äôll find it inspiring to adopt.</p>

<h3 id="start-using-tests-and-explaining-what-the-code-does">Start using tests and explaining what the Code Does</h3>

<p>When you show your code, start with the tests. Collapse all the code blocks so that developers can only see the test names.</p>

<p>For example, collapsing the upsert method tests would look something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upsert method
 - WHEN data is present
  - SHOULD update values
 - WHEN data is not present
  - SHOULD insert new values
</code></pre></div></div>

<p>Now you can speak the tests easily.</p>

<h2 id="make-it-satisfying">Make it satisfying</h2>

<h3 id="find-the-early-adopters-and-help-them-through-the-journey">Find the early adopters and help them through the journey</h3>

<p>Some people are more open to trying new ideas than others. This group also includes those developers who are new and those developers who want to improve their coding skills.</p>

<p>Start with them. Teach them TDD. You could always refer to this series.</p>

<p>When one person becomes an evangelist of the process, more people will start adopting.</p>

<p><img src="https://omniplexlearning.com/wp-content/uploads/Highres-scaled.jpg.webp" alt="Highres" /></p>

<p>Source: <a href="https://omniplexlearning.com/blog/technology-adoption-curve-stages/">https://omniplexlearning.com/blog/technology-adoption-curve-stages/</a></p>

<h3 id="take-sessions-on-tdd-and-continuously-coach">Take sessions on TDD and continuously coach</h3>

<p>The first reaction of people who hear TDD is that they think they know what TDD is or that they say they have practiced it but it didn‚Äôt work.</p>

<p>This is why, try to start by teaching developers and the organization what TDD is and how it can benefit everyone.</p>

<p>Explain the 3 benefits highlighted in this TDD series:</p>

<ol>
  <li>TDD leads to fewer bugs.</li>
  <li>TDD increases code quality.</li>
  <li>TDD is faster overall.</li>
</ol>

<p>TDD has subtle nuances which is why most developers don‚Äôt learn it well. Use the git repo and the cheatsheet mentioned in the series to help them.</p>

<p>After the session and as time goes on keep coaching the team on improving their TDD practice. Find impediments and solve them. Identify the signals that you need better tests and continue refining.</p>

<h3 id="provide-time-and-support-to-developers-while-they-learn">Provide time and support to developers while they learn</h3>

<p>TDD requires a mind shift and isn‚Äôt as easy to grasp. Give your developers time. Initially, they may take time to ship the feature.</p>

<p>It‚Äôs important to help the developers focus on delivering with quality - with tests rather than forcing them to deliver something that‚Äôs not finished.</p>

<p>Expect some slowness when the team adopts TDD. But remember to continuously inspect and adapt so that you can solve their impediments. At the same time, don‚Äôt let developers drag on their ‚Äúlearning‚Äù phase, TDD takes some iterations to learn but overall it will reduce time. If developer productivity doesn‚Äôt improve after 20-30 days of iterating, there are problems with the way TDD is practiced.</p>

<h2 id="make-it-easy">Make it easy</h2>

<h3 id="provide-templates">Provide templates</h3>

<p>Many developers won‚Äôt know where to start. Therefore, they can start with a template. This would make it easy for them to think in terms of TDD.</p>

<p>The method/when/then style of writing is fantastic by default. You can modify and generate your templates.</p>

<p>You can refer to and use the following template for Java and Javascript and Typescript.</p>

<p>For react, you can use the following template which was first mentioned in <todo-react-post-link></todo-react-post-link></p>

<p><img src="/images/method-when-should.png" alt="" /></p>

<h2 id="make-it-obvious">Make it obvious</h2>

<h3 id="anytime-a-developer-comes-to-you-ask-them-to-show-the-test">Anytime a developer comes to you, ask them to show the test</h3>

<p>This is the simplest thing you can do. When someone comes to you with a doubt, ask them to show it in a test.</p>

<p>If they haven‚Äôt written a test, you can walk them through the TDD process.</p>

<h3 id="automate-checking">Automate Checking</h3>

<p>Before and while adding the automation, explain to the team the benefits of adding these checks.</p>

<p>There are two automations that you can do:</p>

<ol>
  <li>Code Coverage</li>
  <li>Test Format</li>
</ol>

<p>For Code Coverage, keep your minimum code coverage for your build pipeline to 85%. When you do TDD, your code coverage would be as close to 90-95%. If it‚Äôs less, maybe you or your team haven‚Äôt done good TDD.</p>

<p>Test Format verification would help generate cleaner and more consistent tests. Add the equivalent of the ArchUnit test in your Java code. When someone doesn‚Äôt follow the test format, this test should fail.</p>

<p>You can find the ArchTest for verifying the given/when/then pattern in the blog post on <a href="https://www.ankushchoubey.com/method-when-should/">method/when/then style</a>.</p>

<p>Photo by <a href="https://unsplash.com/@austindistel?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Austin Distel</a> on <a href="https://unsplash.com/photos/wD1LRb9OeEo?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Rewording Naval Ravikant ‚ÄúHappiness is the skill that you develop and the choice that you make‚Äù¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="testing" /><category term="tdd" /><summary type="html"><![CDATA[Promoting TDD within a team requires patience, consistent effort, and a focus on creating a positive and supportive environment for learning and improvement.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/promote-tdd-in-a-team.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/promote-tdd-in-a-team.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">7 Tips to Optimize a Microservice for Data Migration Job</title><link href="https://www.ankushchoubey.com/data-migration-microservice/" rel="alternate" type="text/html" title="7 Tips to Optimize a Microservice for Data Migration Job" /><published>2023-08-05T00:00:00-05:00</published><updated>2023-08-05T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1-migration-microservice</id><content type="html" xml:base="https://www.ankushchoubey.com/data-migration-microservice/"><![CDATA[<p>I published a post in <a href="[https://www.ankushchoubey.com/db-migration-script/](https://www.ankushchoubey.com/db-migration-script/" title="smartCard-inline">March 2023 about how typically DB migrations</a> ¬†) take place. The post is considered a direct migration from one DB to the other.</p>

<p>But sometimes, you need to do a lot of things that can only be done by the microservice that would use this data.</p>

<p>For example, you need to structure data in a very particular format which would be a very heavy code to remake as DB Scripts.</p>

<p>Or you also need to communicate with special third parties like saving data to a storage bucket which might be something microservice does already.</p>

<p>In such cases, you need to use your existing microservice for the migration.</p>

<p>This post highlights some techniques I thought of when performing such a migration. The data had lakhs of records.</p>

<h2 id="tip-1-create-a-separate-endpoint-for-bulk">Tip 1: Create a separate endpoint for bulk</h2>

<p>Instead of saving one record at a time, save a bunch of records at once.</p>

<p>This increases performance for two reasons a large part of communication is establishing a connection, sending similar metadata, and waiting for a response on a thread. When you do bulk save, you establish 1 connection instead of multiple, you send similar metadata only once instead of individually and you have only one thread waiting for a response instead of everything waiting for a response.</p>

<p><strong>Diagram of Single Request at a time</strong></p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5PcmlnaW5hbCBTeXN0ZW0tPj4rU2VydmVyOiBSZXF1ZXN0IDFcblNlcnZlci0-PitEYXRhYmFzZTogUmVxdWVzdCAxXG5EYXRhYmFzZS0tPj4tU2VydmVyOiBSZXBseSBvZiBSZXF1ZXN0IDFcblNlcnZlci0tPj4tT3JpZ2luYWwgU3lzdGVtOiBSZXBseSBvZiBSZXF1ZXN0IDFcbk9yaWdpbmFsIFN5c3RlbS0-PitTZXJ2ZXI6IFJlcXVlc3QgMlxuU2VydmVyLT4-K0RhdGFiYXNlOiBSZXF1ZXN0IDJcbkRhdGFiYXNlLS0-Pi1TZXJ2ZXI6IFJlcGx5IG9mIFJlcXVlc3QgMlxuU2VydmVyLS0-Pi1PcmlnaW5hbCBTeXN0ZW06IFJlcGx5IG9mIFJlcXVlc3QgMlxuT3JpZ2luYWwgU3lzdGVtLT4-K1NlcnZlcjogUmVxdWVzdCBuXG5TZXJ2ZXItPj4rRGF0YWJhc2U6IFJlcXVlc3QgblxuRGF0YWJhc2UtLT4-LVNlcnZlcjogUmVwbHkgb2YgUmVxdWVzdCBuXG5TZXJ2ZXItLT4-LU9yaWdpbmFsIFN5c3RlbTogUmVwbHkgb2YgUmVxdWVzdCBuIiwibWVybWFpZCI6bnVsbH0" /></p>

<p>Even multiple single requests are passed in parallel, they won‚Äôt be as fast as bulk because of the number of connections that are needed to manage.</p>

<p><strong>Diagram of Bulk Request with batch of 1000</strong></p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5PcmlnaW5hbCBTeXN0ZW0tPj4rU2VydmVyOiBCdWxrIFJlcXVlc3Q8YnI-KEVnOiAxMDAwIFJlY29yZHMpXG5TZXJ2ZXItPj4rRGF0YWJhc2U6IEJ1bGsgUmVxdWVzdDxicj4oRWc6ICAxMDAwIFJlY29yZHMpXG5EYXRhYmFzZS0tPj4tU2VydmVyOiBSZXBseSBvZiBCdWxrIFJlcXVlc3QgPGJyPihFZzogIDEwMDAgUmVjb3JkcylcblNlcnZlci0tPj4tT3JpZ2luYWwgU3lzdGVtOiBSZXBseSBvZiBCdWxrIFJlcXVlc3Q8YnI-KEVnOiAxMDAwIFJlY29yZHMpIiwibWVybWFpZCI6bnVsbH0" /></p>

<p>Apart from this, databases are optimized for bulk operations, and therefore bulk operations are faster.</p>

<h2 id="tip-2-in-terms-of-io-make-sure-everything-is-in-bulk-all-processes">Tip 2: In terms of IO, make sure everything is in bulk all processes</h2>

<p>When doing bulk operations, you need to ensure everything in the pipeline is in bulk.</p>

<p>If you have twenty steps in your pipeline and 19 of them are bulk and one is sequential, then the sequential step would be a bottleneck to the whole system.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5CdWxrIC0-PisgQnVsayBSZWNlaXZlcjogQnVsayBvZiAxMDAgUmVjb3Jkc1xuQnVsayBSZWNlaXZlciAtPj4rIFNlcXVlbmNpYWwgU3lzdGVtOiBGaXJzdCBSZWNvcmRcblNlcXVlbmNpYWwgU3lzdGVtLS0-Pi1CdWxrIFJlY2VpdmVyOiBGaXJzdCBSZWNvcmQgUmVwbHlcbkJ1bGsgUmVjZWl2ZXIgLT4-KyBTZXF1ZW5jaWFsIFN5c3RlbTogU2Vjb25kIFJlY29yZFxuU2VxdWVuY2lhbCBTeXN0ZW0tLT4-LUJ1bGsgUmVjZWl2ZXI6IFNlY29uZCBSZWNvcmQgUmVwbHlcbkJ1bGsgUmVjZWl2ZXIgLT4-KyBTZXF1ZW5jaWFsIFN5c3RlbTogbnRoIFJlY29yZFxuU2VxdWVuY2lhbCBTeXN0ZW0tLT4-LUJ1bGsgUmVjZWl2ZXI6IG50aCBSZWNvcmQgUmVwbHlcbkJ1bGsgUmVjZWl2ZXItLT4-LUJ1bGs6IFJlc3BvbnNlIHRvIEJ1bGsgb2YgMTAwIFJlY29yZHMiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p>So, try to make sure every step is bulk, if you need to fetch data from the database, fetch them all at once.</p>

<p>If you need to save them to the database save them all at once.</p>

<p>Make sure all IO operations are in bulk.</p>

<h2 id="tip-3-make-use-of-message-queuesbuffers-like-kafka-and-leverage-autoscaling-of-instances">Tip 3: Make use of message queues/buffers like Kafka and leverage autoscaling of instances</h2>

<p>If you have a large number of things to transfer, rather than migrating synchronously, you can bring a message queue in between.</p>

<p>The message queue will sit between the source system and the destination system. The data from the source system would be migrated to the buffer. The destination system can independently pick up resources from the buffer when it‚Äôs ready and can process them.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5Tb3VyY2VTeXN0ZW1bZmE6ZmEtc2VydmVyIFNvdXJjZSBTeXN0ZW1dIC0tPnxmYTpmYS1wbGF5IFB1c2h8IE1lc3NhZ2VRdWV1ZVtmYTpmYS1kYXRhYmFzZSBNZXNzYWdlIFF1ZXVlIFxcbiBcXG4gQWN0cyBhcyBhIGJ1ZmZlciB0aGF0IFxcbnN0b3JlcyBtdWx0aXBsZSBtZXNzYWdlc10gLS0-IHxmYTpmYS1wbGF5IGZhOmZhLXBhdXNlIFBvbGwgd2hlbiByZWFkeXwgUmVjZWl2aW5nW2ZhOmZhLWNvZGUgUmVjZWl2aW5nIFN5c3RlbSBJbnN0YW5jZSAxXVxuTWVzc2FnZVF1ZXVlIC0tPiB8ZmE6ZmEtcGxheSBmYTpmYS1wYXVzZSBQb2xsIHdoZW4gcmVhZHl8IFJlY2VpdmluZzJbZmE6ZmEtY29kZSBSZWNlaXZpbmcgU3lzdGVtIEluc3RhbmNlIDJdXG5NZXNzYWdlUXVldWUgLS0-fGZhOmZhLXBsYXkgZmE6ZmEtcGF1c2UgUG9sbCB3aGVuIHJlYWR5fCBSZWNlaXZpbmczW2ZhOmZhLWNvZGUgUmVjZWl2aW5nIFN5c3RlbSBJbnN0YW5jZSAzXVxuTWVzc2FnZVF1ZXVlIC0tPiB8ZmE6ZmEtcGxheSBmYTpmYS1wYXVzZSBQb2xsIHdoZW4gcmVhZHl8IFJlY2VpdmluZzRbZmE6ZmEtY29kZSBSZWNlaXZpbmcgU3lzdGVtIEluc3RhbmNlIG5dIiwibWVybWFpZCI6bnVsbH0" /></p>

<p>This has the following advantage: The receiving system can autoscale.</p>

<p>If there are too many items in the buffer remaining to be processed, you can increase the number of instances to accommodate. Similarly, when the number of items in the buffer is less, you can scale down to a fewer number of instances.</p>

<p>This way multiple instances can work in parallel and only process messages when they are ready.</p>

<h2 id="tip-4-use-feature-flagging-to-disable-features-that-are-not-needed">Tip 4: Use feature flagging to disable features that are not needed</h2>

<p>Hotstar is an Indian OTT platform that streams IPL, the country‚Äôs most-watched sporting event. They get peak traffic of around 2.2Cr. What do they do when they are suddenly hit with all this traffic?</p>

<p>They do two things:</p>

<p>One, they increase the number of instances.</p>

<p>Two, they temporarily disable the number of features on the website to a minimum necessary. They call it ‚ÄúPanic mode‚Äù.</p>

<p>While migrating, we can use the same principle, only enable features that are needed for the migration and disable everything else.</p>

<ol>
  <li>List down all the features your microservice provides</li>
  <li>Go through the list and check the essential features needed.</li>
  <li>Add a feature flag to disable the features.</li>
</ol>

<p>In Spring Boot, you could use \@‚ÄåConditionalOnProperty to declare beans when the system is not in migration.mode=true.</p>

<p>You may need to pair this tip up with the last tip in this post.</p>

<h2 id="tip-5-increase-resources-temporarily">Tip 5: Increase resources temporarily</h2>

<p>Increasing the number of instances is called horizontal scaling. Increasing number the of CPU, RAM, and other resources is called vertical scaling.</p>

<p>In most cases, horizontal scaling would be good. But in case you need, go for vertical scaling. This would require a certain level of experimentation monitoring to decide. Monitor your microservice while performing the actions in a lower environment (dev/qa/uat).</p>

<h2 id="tip-6-create-a-temporary-separate-deployment-of-your-microservice">Tip 6: Create a temporary separate deployment of your microservice</h2>

<p>Since you are doing feature flagging, increasing resources, having extra replicas, etc. it‚Äôs easier to manage this all by creating a separate deployment.</p>

<p>So, if you had a movies microservice deployment, you‚Äôll create something like a movies-migration deployment.</p>

<p>The new movies-migration all the migration-specific configurations in it.</p>

<h2 id="final-tip-7-and-conclusion-monitor-your-application-to-find-bottlenecks-and-do-experiments-to-mitigate-them">Final Tip 7 and conclusion: Monitor your application to find bottlenecks. And do experiments to mitigate them</h2>

<p>All the strategies above shouldn‚Äôt be used blindly, they should be used with experimentation.</p>

<p>Monitor your microservice while performing the migration and see, what‚Äôs the bottleneck. And try to resolve it.</p>

<p>If the bottleneck is the database, optimize query performance or use bulk like Tip 1.</p>

<p>If it‚Äôs because the service is doing extra things, feature flag it.</p>

<p>If it‚Äôs because there is heavy processing, increase resources.</p>

<p>Having an observability platform can be very useful for this sort of experimentation as you can find the bottlenecks really fast through graphs and visualizations.</p>]]></content><author><name></name></author><category term="backend" /><summary type="html"><![CDATA[I published a post in March 2023 about how typically DB migrations ¬†) take place. The post is considered a direct migration from one DB to the other.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/data-migration-microservice.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/data-migration-microservice.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>