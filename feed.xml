<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2021-08-16T14:16:44-05:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Random Thoughts</subtitle><entry><title type="html">All Questions are False</title><link href="www.ankushchoubey.com/questions-false/" rel="alternate" type="text/html" title="All Questions are False" /><published>2021-08-16T00:00:00-05:00</published><updated>2021-08-16T15:52:08-05:00</updated><id>www.ankushchoubey.com/questions-are-false</id><content type="html" xml:base="www.ankushchoubey.com/questions-false/">&lt;p&gt;&lt;img src=&quot;/images/questions-false.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@shotbycerqueira?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Shot by Cerqueira&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/meditation?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Habits, routines and our way of thinking protects us from a certain group of problems. The more broad they are, the more number of problems they can take care. Therefore, it become important to explore un-explored ideas.&lt;/p&gt;

&lt;p&gt;This has been a reason why I have been trying to get gist of Indian philosophers to the degree that does not include metaphysical claims.&lt;/p&gt;

&lt;p&gt;One of the patterns that has been repeated over and over is that every problem is mind made.&lt;/p&gt;

&lt;h2 id=&quot;all-questions-are-false&quot;&gt;All Questions are False&lt;/h2&gt;

&lt;iframe width=&quot;300&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/nj8E9Sgs8F4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
  &lt;p&gt;All questions are false, unreal, nonessential, because &lt;strong&gt;life is not a problem to be solved; it is a mystery to be lived&lt;/strong&gt;. 
Only the fools go on questioning and go on thinking that some answers will help them. 
No answer is going to help you; every answer will create more questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;~ Osho&lt;/p&gt;

&lt;h2 id=&quot;2-features-of-being-a-human-that-lead-to-questions&quot;&gt;2 Features of Being a Human that Lead to Questions&lt;/h2&gt;

&lt;p&gt;Sadhguru would say something like:
= All problems and suffering come from 2 features of being a human being: Extremely vivid memory and fantastic imagination.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You are suffering your capabilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/CSj1FHdFDuz/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; data-instgrm-version=&quot;13&quot; style=&quot; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&quot;&gt;&lt;div style=&quot;padding:16px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/CSj1FHdFDuz/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&quot; target=&quot;_blank&quot;&gt; &lt;div style=&quot; display: flex; flex-direction: row; align-items: center;&quot;&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 19% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display:block; height:50px; margin:0 auto 12px; width:50px;&quot;&gt;&lt;svg width=&quot;50px&quot; height=&quot;50px&quot; viewBox=&quot;0 0 60 60&quot; version=&quot;1.1&quot; xmlns=&quot;https://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;https://www.w3.org/1999/xlink&quot;&gt;&lt;g stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g transform=&quot;translate(-511.000000, -20.000000)&quot; fill=&quot;#000000&quot;&gt;&lt;g&gt;&lt;path d=&quot;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&quot;padding-top: 8px;&quot;&gt; &lt;div style=&quot; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&quot;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 12.5% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&quot;&gt;&lt;div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: 8px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: auto;&quot;&gt; &lt;div style=&quot; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;p style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&quot;&gt;&lt;a href=&quot;https://www.instagram.com/p/CSj1FHdFDuz/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;&quot; target=&quot;_blank&quot;&gt;A post shared by 𝚂𝚊𝚗𝚍𝚒𝚙 𝚁𝚊𝚔𝚜𝚑𝚒𝚝 (@global_human_beings)&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//www.instagram.com/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;question-of-meaning-of-life&quot;&gt;Question of Meaning of Life&lt;/h2&gt;

&lt;p&gt;When asked about meaning of life, Sam Harris would say something like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One is only concerned with questions like the meaning of life if what they are doing in the present moment is not good enough to demand their full attention.&lt;/li&gt;
  &lt;li&gt;By becoming aware of the present moment we enjoy what life really is in the present.&lt;/li&gt;
  &lt;li&gt;And we have this power at any time of the day.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;not-exhaustive&quot;&gt;Not exhaustive&lt;/h2&gt;

&lt;p&gt;Apart from Osho, Sadhguru and Sam would have a similar belief:&lt;/p&gt;

&lt;p&gt;One of level, these concepts that the mind is the one that creates problems make sense. But I believe they shouldn’t be treated as exhaustive.&lt;/p&gt;

&lt;p&gt;I have always wondered why buddhism advocates for both control of your mind and control of your actions.&lt;/p&gt;

&lt;p&gt;This is probably because, just being control of your mind and letting the world fall apart is not only hard to achieve but it is stupid in some sense. We benefit a lot from facing and solving problems not only for ourselves but for the people around us.&lt;/p&gt;

&lt;h2 id=&quot;punctuate-your-day-with-moments&quot;&gt;Punctuate your day with moments&lt;/h2&gt;

&lt;p&gt;When talking about mindfulness, Sam Harris recommends following approach apart from a formal sitting practice: “Punctuate your day with moments of awareness.”.&lt;/p&gt;

&lt;p&gt;That one can experience Nirvana for moments at a time by just being aware of the present moment fully and realizing that on one level there aren’t many things that important for humans that our present experience.&lt;/p&gt;</content><author><name></name></author><category term="philosophical" /><category term="decision-making" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/questions-false.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/questions-false.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Inversion</title><link href="www.ankushchoubey.com/inversion/" rel="alternate" type="text/html" title="Inversion" /><published>2021-08-14T00:00:00-05:00</published><updated>2021-08-14T15:52:08-05:00</updated><id>www.ankushchoubey.com/inversion</id><content type="html" xml:base="www.ankushchoubey.com/inversion/">&lt;p&gt;Mental models are heuristics that help in conceptualizing common occurring themes and help in better decision making.&lt;/p&gt;

&lt;p&gt;Clarity is power. If you know something well enough, the decisions you make around that information will have a higher chance of being accurate.&lt;/p&gt;

&lt;p&gt;One way to gain more clarity, which I have written about extensively, is being truthful.&lt;/p&gt;

&lt;p&gt;Being truthful assumes that what you know to be true may not be 100% truth but you’ll speak, act and convey in a way in which you know it is as true ads possible.&lt;/p&gt;

&lt;p&gt;To gain more clarity, the other size of telling the truth is exploring the unknown, what you do not yet know or understand.&lt;/p&gt;

&lt;p&gt;Thinking is effective ways to explore what you don’t yet know.&lt;/p&gt;

&lt;p&gt;Inversion is a technique that helps understand the other side in a much more structured manner.&lt;/p&gt;

&lt;p&gt;In inversion, you invert the argument or statement.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;If you want to plan to do X.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Straight Way of Thinking: How will I achieve X&lt;/li&gt;
  &lt;li&gt;Inversion: How will I fail at achieving C&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you know how you would fail, you can take steps to avoid failing. Inversion can be applied recursively. Aka you can try to find arguments against your arguments.&lt;/p&gt;

&lt;p&gt;One can also treat inversion can a healthy debate&lt;/p&gt;

&lt;p&gt;Inversion forces you to think from the other side. And it helps increase the probability of actually achieving the task you set out to achieve.&lt;/p&gt;</content><author><name></name></author><category term="decision-making" /><summary type="html">Mental models are heuristics that help in conceptualizing common occurring themes and help in better decision making.</summary></entry><entry><title type="html">Tips for working with `package.json`</title><link href="www.ankushchoubey.com/package-json/" rel="alternate" type="text/html" title="Tips for working with `package.json`" /><published>2021-08-11T00:00:00-05:00</published><updated>2021-08-11T15:52:08-05:00</updated><id>www.ankushchoubey.com/tips-for-working-with-npm</id><content type="html" xml:base="www.ankushchoubey.com/package-json/">&lt;h2 id=&quot;create-and-use-scripts&quot;&gt;Create and use scripts&lt;/h2&gt;

&lt;p&gt;There are some common names of scripts you can create like postinstall start, etc.&lt;/p&gt;

&lt;p&gt;For example: for Ivy enabled Angular versions, one can avoid repetitive recompilation by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngcc&lt;/code&gt;. We can add a script in package.json to run ngcc after every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &quot;scripts&quot; : {
        &quot;postinstall&quot; : &quot;ngcc&quot;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s better to manage npm related activities using package.json than manage it using something like Jenkins.&lt;/p&gt;

&lt;h2 id=&quot;npm-outdated&quot;&gt;npm outdated&lt;/h2&gt;

&lt;p&gt;This shows you all the packages which are not the latest.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm outdated&lt;/code&gt; can be also used in your deployment pipeline. This can service as an important monitoring metric for maintainance of the application and ensuring longer life.&lt;/p&gt;

&lt;h2 id=&quot;clear-cache-before-npm-install-on-every-environment&quot;&gt;Clear cache before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; on every environment&lt;/h2&gt;

&lt;p&gt;Cache can be cleared by using&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm cache clear&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Clearing cache before installation on your dev/QA/prod env will ensure it will run the same on any environment.&lt;/p&gt;

&lt;h2 id=&quot;use---registry-on-local&quot;&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--registry&lt;/code&gt; on local&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install --registry &amp;lt;link-to-repository&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you are going to use a registry like Nexus to manage packages, it makes sense to use the same registry for installation local. The closer you can replicate your prod on local, the fewer bugs you are going to face.&lt;/p&gt;

&lt;h2 id=&quot;use-yarn-instead-of-npm&quot;&gt;use yarn instead of NPM&lt;/h2&gt;

&lt;p&gt;yarn is a package manager just like npm but it provides a few features that make it better.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;multi-threaded download. This makes yarn much faster than npm which only supports single-threaded downloads.&lt;/li&gt;
  &lt;li&gt;offline mode. Once a package is downloaded, it can be downloaded again. even if the node_modules folder is deleted. This is because yarn stores a backup of everything.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;if-you-are-not-using-yarn-zip-node_modules-before-making-dependency-upgrades&quot;&gt;If you are not using yarn, zip &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; before making dependency upgrades.&lt;/h2&gt;

&lt;p&gt;Often things don’t go smoothly when upgrading changes dependencies. Since, node_modules are ignore in git, the only way to revert or switch between branches with dependencies is a clean npm install.&lt;/p&gt;

&lt;p&gt;Yarn supports offline line mode which means nothing is downloaded if dependencies had been updated once. If you are not using yarn, zip &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; before making dependency upgrades. You can unzip it easily if you need to revert.&lt;/p&gt;</content><author><name></name></author><category term="web-development" /><summary type="html">Create and use scripts</summary></entry><entry><title type="html">Solving N+1 Problem in Hibernate</title><link href="www.ankushchoubey.com/n-plus-one-hibernate/" rel="alternate" type="text/html" title="Solving N+1 Problem in Hibernate" /><published>2021-07-15T00:00:00-05:00</published><updated>2021-08-01T15:52:08-05:00</updated><id>www.ankushchoubey.com/n-plus-1-hibernate</id><content type="html" xml:base="www.ankushchoubey.com/n-plus-one-hibernate/">&lt;h2 id=&quot;n1-problem&quot;&gt;N+1 Problem&lt;/h2&gt;

&lt;p&gt;If you are working with JPA entities and you have joins. Then you might have faced this problem.&lt;/p&gt;

&lt;p&gt;If you have something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@OneToMany&lt;/code&gt; mapping between a parent and a child and fetch parent. All the child entities will be fetch one by one is a kind of a loop.&lt;/p&gt;

&lt;p&gt;You can check this behavior by using the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; and then checking logs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So if you have 2 records for parent and 4 corresponding child records.&lt;/p&gt;

&lt;p&gt;A total of 2*8 separate queries wil be run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/n-plus-one.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Query Number&lt;/th&gt;
      &lt;th&gt;Purpose&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Fetch Parent Entity: id_1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_b&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Fetch Parent Entity: id_2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_d&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_e&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;Fetch Child Associated with parent id_1: id_f&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If similarly you have a 1000 records and 10 corresponding child records.&lt;/p&gt;

&lt;p&gt;Then 1000*10 = 10,000 queries will be run.&lt;/p&gt;

&lt;p&gt;This is inefficient.&lt;/p&gt;

&lt;p&gt;We need some way to reduce the number of query calls. Even if the amount of data is the same, the cost of running more queries is much higher that getting the same amout of work done with less number of queries.&lt;/p&gt;

&lt;h2 id=&quot;fetchmodes&quot;&gt;FetchModes&lt;/h2&gt;

&lt;p&gt;FetchModes allow you to say to Hibernate to fetch all childrens at once instead of fetching them one at the time.&lt;/p&gt;

&lt;p&gt;FetchMode is different from FetchType.EAGER or LAZY. The former is used to decides where to fetch children along with parent or later when needed.&lt;/p&gt;

&lt;h3 id=&quot;fetchmodejoin&quot;&gt;FetchMode.JOIN&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FetchMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;JOIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EntityType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One a single query will be run.&lt;/p&gt;

&lt;p&gt;If you are using this, all data will be fetch at once using join but the payload size will be huge.&lt;/p&gt;

&lt;h3 id=&quot;fetchmodesubselect&quot;&gt;FetchMode.SUBSELECT&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FetchMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUBSELECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EntityType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If used a minimum of 2 queries will be run.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One for parent @Entity&lt;/li&gt;
  &lt;li&gt;One for for each child @Entity type will be run. After the query is run all chilren of particular type will be fetched.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FetchMode.SUBSELECT is also seems to better when used to FetchType.LAZY. Here, all parent entities will be fetched first. When child entities are needed, all child entities will be fetched at once instead of multiple queries.&lt;/p&gt;</content><author><name></name></author><category term="spring-boot" /><category term="database" /><summary type="html">N+1 Problem</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My First Program</title><link href="www.ankushchoubey.com/first-program/" rel="alternate" type="text/html" title="My First Program" /><published>2021-06-16T00:00:00-05:00</published><updated>2021-08-01T15:42:15-05:00</updated><id>www.ankushchoubey.com/first-program</id><content type="html" xml:base="www.ankushchoubey.com/first-program/">&lt;p&gt;My first piece of code was a calculator in Visual Basic. It was 2005 and I was in 4th grade. My father sat beside be and taught me how to make it.&lt;/p&gt;

&lt;p&gt;Then after a year or so, in Mumbai Mirrors Newspaper’s Sci-Tech section there was a piece on a kids programming languge called Scratch.edu.&lt;/p&gt;

&lt;p&gt;I went out playing that morning and told my friend that I’ll be building my own GTA Vice City.&lt;/p&gt;

&lt;p&gt;These are the few things I published on Scratch.&lt;/p&gt;

&lt;h1 id=&quot;mad-shark&quot;&gt;&lt;a href=&quot;https://scratch.mit.edu/projects/226045&quot;&gt;MAD Shark&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;jul-27-2008&quot;&gt;Jul 27, 2008&lt;/h2&gt;

&lt;iframe src=&quot;https://scratch.mit.edu/projects/226045/embed&quot; allowtransparency=&quot;true&quot; width=&quot;485&quot; height=&quot;402&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;exploring-the-heavens&quot;&gt;&lt;a href=&quot;https://scratch.mit.edu/projects/281470/&quot;&gt;Exploring the Heavens&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;oct-03-2008&quot;&gt;Oct 03, 2008&lt;/h2&gt;

&lt;p&gt;Frames taken from Britannica Encyclopedia.&lt;/p&gt;

&lt;iframe src=&quot;https://scratch.mit.edu/projects/281470/embed&quot; allowtransparency=&quot;true&quot; width=&quot;485&quot; height=&quot;402&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;great-american-speeches&quot;&gt;&lt;a href=&quot;https://scratch.mit.edu/projects/281482/&quot;&gt;Great AMERICAN SPEECHES&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;oct-03-2008-1&quot;&gt;Oct 03, 2008&lt;/h2&gt;

&lt;p&gt;Frames taken from Britannica Encyclopedia.&lt;/p&gt;

&lt;iframe src=&quot;https://scratch.mit.edu/projects/281482/embed&quot; allowtransparency=&quot;true&quot; width=&quot;485&quot; height=&quot;402&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;3d-project&quot;&gt;3D Project&lt;/h1&gt;

&lt;p&gt;I did not post this but I remember it well.&lt;/p&gt;

&lt;p&gt;I created a room layout. A rectangular box in middle and 3 lines from corner of image to corner of rectangle.&lt;/p&gt;

&lt;p&gt;When I pressed up key, the image zoomed in. I hoped to make more changes such that it would looked like that old Wolf Dom Game.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My first real taste of programming was first year of Diploma (11th Grade) in C language.&lt;/p&gt;</content><author><name></name></author><category term="personal" /><summary type="html">My first piece of code was a calculator in Visual Basic. It was 2005 and I was in 4th grade. My father sat beside be and taught me how to make it.</summary></entry><entry><title type="html">Art of Reducing Lines of Code in Java/Spring Boot</title><link href="www.ankushchoubey.com/clean-code-spring-boot/" rel="alternate" type="text/html" title="Art of Reducing Lines of Code in Java/Spring Boot" /><published>2021-06-12T00:00:00-05:00</published><updated>2021-08-01T15:42:15-05:00</updated><id>www.ankushchoubey.com/spring-boot-tips</id><content type="html" xml:base="www.ankushchoubey.com/clean-code-spring-boot/">&lt;p&gt;While there are many techniques which are language agnostic, these are some of my favorites with Spring Boot.&lt;/p&gt;

&lt;h1 id=&quot;project-lombok&quot;&gt;&lt;a href=&quot;https://projectlombok.org/features/all&quot;&gt;Project Lombok&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Use this if you don’t use Spring Boot with Kotlin. This will module will reduce side of code by around 15-25%.&lt;/p&gt;

&lt;p&gt;Lombok allows you to generate java boilerplate at runtime by using Annotations such as: @ToString, @EqualsAndHashCode, @Getter/@Setter, etc.&lt;/p&gt;

&lt;p&gt;My favorite onces are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;@Data&lt;/strong&gt;: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, and @Setter on all non-final fields, and @RequiredArgsConstructor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@Cleanup&lt;/strong&gt;: Automatically calls close() method in case of Streams and Connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;requestparam-without-arguments&quot;&gt;@RequestParam without Arguments&lt;/h1&gt;

&lt;p&gt;If the name of variable is same as value in @RequestParam, remove @Request Param.&lt;/p&gt;

&lt;h1 id=&quot;remove-column-on-entity&quot;&gt;Remove @Column on @Entity&lt;/h1&gt;

&lt;p&gt;In a @Entity, if the name of variable is same name of column writing @Column is unnecessary.&lt;/p&gt;

&lt;p&gt;By doing this, not only remove a line from every variable, the quality of code is better as there is naming is consistent between DB and backend.&lt;/p&gt;

&lt;h1 id=&quot;use-jpa-repository-methods-instead-of-hibernate-entitymanagerjdbctemplate&quot;&gt;Use JPA @Repository Methods instead of Hibernate EntityManager/JdbcTemplate&lt;/h1&gt;

&lt;p&gt;Ideally your queries should be so simple such that the only type of read operation you do is simple CRUD.&lt;/p&gt;

&lt;p&gt;Such simple queries are easier to understand and are a good sign of a well designed database.&lt;/p&gt;

&lt;p&gt;Such operations are available out of the box with @Repository.&lt;/p&gt;</content><author><name></name></author><category term="clean-code" /><category term="spring-boot" /><category term="database" /><summary type="html">While there are many techniques which are language agnostic, these are some of my favorites with Spring Boot.</summary></entry><entry><title type="html">Faster SQL Batch Save in Spring Data JPA</title><link href="www.ankushchoubey.com/batch-save-spring-jpa/" rel="alternate" type="text/html" title="Faster SQL Batch Save in Spring Data JPA" /><published>2021-06-12T00:00:00-05:00</published><updated>2021-08-01T15:42:15-05:00</updated><id>www.ankushchoubey.com/faster-write-spring-data-jpa</id><content type="html" xml:base="www.ankushchoubey.com/batch-save-spring-jpa/">&lt;p&gt;By default in Spring Data JPA, when you save a list of entities a for…loop runs storing each record one at a time.&lt;/p&gt;

&lt;p&gt;This would take a lot of time to execute. This is because the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; often needs to be fetched from database and set to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Entity&lt;/code&gt; before save. Therefore multiple transactions need to me made.&lt;/p&gt;

&lt;p&gt;You can check this behavior by using the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; and then checking logs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;speeding-up-writes&quot;&gt;Speeding Up Writes&lt;/h2&gt;

&lt;p&gt;Spring Data JPA allows for storing multiple records at once but multiple things have to be set first.&lt;/p&gt;

&lt;h3 id=&quot;1-switch-to-sequence-generator-for-primary-key&quot;&gt;1. Switch to Sequence Generator for primary key&lt;/h3&gt;
&lt;p&gt;Batch writes does not work with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenerationType.IDENTITY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make using sequence_generator&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@SequenceGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;seqName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequenceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;seqName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocationSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocationSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The {allocationSize} is how many writes you wish to do at once in case of a large list of entities.&lt;/p&gt;

&lt;h4 id=&quot;2-create-the-sequence-in-your-database&quot;&gt;2. Create the sequence in your database&lt;/h4&gt;

&lt;p&gt;Make sure that increment size is equal to {allocatedSize} used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@GenerateValue&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-add-jpa-property&quot;&gt;3. Add JPA Property&lt;/h4&gt;

&lt;p&gt;Add the following property&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.jpa.properties.hibernate.jdbc.batch_size={allocatedSize}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;within-code&quot;&gt;Within Code&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listOfEntities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-things-work-under-the-hood&quot;&gt;How things work under the hood?&lt;/h2&gt;

&lt;p&gt;Once a list of entities need to be saved, JPA will make request to database for getting the next value of sequence generator.&lt;/p&gt;

&lt;p&gt;This value will be set to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; of the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Entity&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since we already have already provided {allocationSize}, JPA knows can automatically fill in values exist between the current value of sequence generator and the next.&lt;/p&gt;

&lt;p&gt;Therefore JPA does not need to ask DB each time for the value to be set as primary key.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example:&lt;/h2&gt;

&lt;p&gt;There is a sequence which increments by 1000.&lt;/p&gt;

&lt;p&gt;We want to save a list of 500 entities to the database.&lt;/p&gt;

&lt;p&gt;JPA asks database for value of sequence.&lt;/p&gt;

&lt;p&gt;Database return value of 1.&lt;/p&gt;

&lt;p&gt;JPA knows that the next increment is at 1000 so, it can fill in values between 1 and 1000.&lt;/p&gt;

&lt;p&gt;JPA sets 1 to 500 to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; field to entities. All the entities are together sent to the DB as a single transaction.&lt;/p&gt;

&lt;p&gt;Suppose we get around want to save another 100 new entities.&lt;/p&gt;

&lt;p&gt;JPA knows the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; it set was 500 and it was 499 more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; values it can use.&lt;/p&gt;

&lt;p&gt;So it for the new 100 entities, it set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; values between 500-600 without asking Database for sequence value.&lt;/p&gt;</content><author><name></name></author><category term="spring-boot" /><category term="database" /><category term="information-system" /><summary type="html">By default in Spring Data JPA, when you save a list of entities a for…loop runs storing each record one at a time.</summary></entry><entry><title type="html">Keeping SQL DB Simple</title><link href="www.ankushchoubey.com/simple-sql-db/" rel="alternate" type="text/html" title="Keeping SQL DB Simple" /><published>2021-06-05T00:00:00-05:00</published><updated>2021-08-01T15:42:15-05:00</updated><id>www.ankushchoubey.com/simple-sql-db</id><content type="html" xml:base="www.ankushchoubey.com/simple-sql-db/">&lt;p&gt;Around 2 years ago, I wrote a blogpost detailing how to keep backend DB Quering code simple but it missed a very critical piece which is having a simpler DB.&lt;/p&gt;

&lt;p&gt;This post highlights some of my DB preferences. A Database design is highly dependent on the application so there may not apply to every DB.&lt;/p&gt;

&lt;p&gt;You’re DB for the most part should be such that the only operation you to CRUD and simple lookups.&lt;/p&gt;

&lt;p&gt;Therefore a lot of effort should be taken to designing extremely resuable and simple tables.&lt;/p&gt;

&lt;p&gt;In one of my projects, I had created an extremely efficient data pipeline.&lt;/p&gt;

&lt;p&gt;Their were multiple views in a heirarchical tree calling one another. If you looked up on root view and applied some filters, you would get the data you want. This data needed to be inserted into a separate table so I created stored procedure to do it.&lt;/p&gt;

&lt;p&gt;In coming months, new things were added the stored procedure and it became so complex that it is now to risky to tinker with.&lt;/p&gt;

&lt;p&gt;Therefore now, I prefer DB which has no DB side functions or procedures, or if possible without views. If there is a complex query I every much prefer storing and triggering the queries from on the backend server.&lt;/p&gt;

&lt;p&gt;There shouldn’t be multiple tables doing the same job.&lt;/p&gt;

&lt;h2 id=&quot;simple-and-resuable-tables&quot;&gt;Simple and Resuable Tables&lt;/h2&gt;

&lt;h2 id=&quot;column-names&quot;&gt;Column Names&lt;/h2&gt;

&lt;p&gt;For primary key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; is enough.&lt;/p&gt;

&lt;p&gt;Many prefer using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table_name&amp;gt;_id&lt;/code&gt; as primary key but adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;table_name&lt;/code&gt; is unneccesary. We already know what table it is.&lt;/p&gt;

&lt;p&gt;In case of joins between, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table_name&amp;gt;_id&lt;/code&gt; will be same length as selecting column with dot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table_name&amp;gt;.id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, if you have just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; you can quickly identify a forignkey which has column in this format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table_name&amp;gt;_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For forign key&lt;/p&gt;

&lt;h2 id=&quot;indexing&quot;&gt;Indexing&lt;/h2&gt;

&lt;p&gt;I identify the columns which require joins or search.&lt;/p&gt;

&lt;p&gt;And then index in the order in ehich they are called most.&lt;/p&gt;

&lt;h2 id=&quot;sequences&quot;&gt;Sequences&lt;/h2&gt;

&lt;h2 id=&quot;table-with-no-stored-procedures-functions-or-views&quot;&gt;Table with No Stored Procedures, Functions or Views&lt;/h2&gt;

&lt;h2 id=&quot;liquibase-xml-format&quot;&gt;Liquibase XML Format&lt;/h2&gt;

&lt;h2 id=&quot;concepts-that-i-have-heard-of-not-used-yet&quot;&gt;Concepts that I have heard of not used yet&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;For complex things that use DB processing. use cron jobs to store data in separate table.&lt;/li&gt;
  &lt;li&gt;Make use of redis/memcache to cache things &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Database Sharding&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;TechLead &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="draft" /><category term="database" /><category term="information-system" /><summary type="html">Around 2 years ago, I wrote a blogpost detailing how to keep backend DB Quering code simple but it missed a very critical piece which is having a simpler DB.</summary></entry><entry><title type="html">Gist of DevOps</title><link href="www.ankushchoubey.com/devops/" rel="alternate" type="text/html" title="Gist of DevOps" /><published>2021-05-25T00:00:00-05:00</published><updated>2021-08-01T15:42:15-05:00</updated><id>www.ankushchoubey.com/devops</id><content type="html" xml:base="www.ankushchoubey.com/devops/">&lt;div style=&quot;display: none&quot;&gt;

My dear younger self, 

You believed DevOps is bs and a buzzword. It kind of is. But it is highly valuable and important too.

Though you won’t always build something awesome from scratch and instead configure an existing tool to do the job, without DevOps you won’t be free to code.

You’ll spend all your time maintaining and deploying your code manually.

In this post, I’ll try to convince you why upper management likes DevOps so much.

&lt;/div&gt;

&lt;h2 id=&quot;where-did-devops-come-from&quot;&gt;Where did DevOps come from?&lt;/h2&gt;

&lt;p&gt;There are 2 separate engineers.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One who made the product -&amp;gt; Developer&lt;/li&gt;
  &lt;li&gt;The other who made sure the product is running properly -&amp;gt; Operations Engineer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Operations Engineer’s role included:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Deploying application to server&lt;/li&gt;
  &lt;li&gt;Making sure it is operating properly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Increasingly, some of the roles of Operation Engineers became so repeatable that it could be automated. Also, certain problems that operation engineer might face was much more easily handles if softwares were developed a certain way.&lt;/p&gt;

&lt;p&gt;These gave rise to DevOps.&lt;/p&gt;

&lt;h2 id=&quot;what-is-devops&quot;&gt;What is DevOps?&lt;/h2&gt;

&lt;p&gt;DevOps is a mixture if tools and practices that make it efficient to build and maintain code.&lt;/p&gt;

&lt;p&gt;Agile is what to do. DevOps is how to do.&lt;/p&gt;

&lt;p&gt;DevOps practices occupies different stages of product development and beyond.&lt;/p&gt;

&lt;p&gt;DevOps is such a broad term with loose definition that many other concepts are plugged into DevOps as a “best practice”. For example: Pair Programming.&lt;/p&gt;

&lt;p&gt;DevOps also get’s merged with security and called DevSecOps. Security is usually an afterthought. But DevSecOps aims to fix security problems in the phase that created it making it much less costly to fix it.&lt;/p&gt;

&lt;p&gt;You cannot copy another organizations DevOps structure as it is. Your organization and products are unique. Make your own style. Don’t copy everything that google or facebook do, though you can learn a lot from them.&lt;/p&gt;

&lt;p&gt;Since DevOps relies so much on automation tools, some things can be achieved faster.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Increase compliance&lt;/li&gt;
  &lt;li&gt;Streamlining of processes&lt;/li&gt;
  &lt;li&gt;Automating repeatable tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the tools and practices results to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Increasing speed of deployments
    &lt;ul&gt;
      &lt;li&gt;Very important to stay ahead of competition even if core of business is not software.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Increasing quality of software
    &lt;ul&gt;
      &lt;li&gt;Allowing making changes easily and reducing bugs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reducing cost of discovery and fixing issues
    &lt;ul&gt;
      &lt;li&gt;Bugs discovered faster can be fixed early&lt;/li&gt;
      &lt;li&gt;All this reduces downtime.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some DevOps practices and accompanying tool that are very helpful are.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Build Automation: Jenkins&lt;/li&gt;
  &lt;li&gt;DB Automation: Liquibase, Flyway&lt;/li&gt;
  &lt;li&gt;Code Linting: Sonar, CAST&lt;/li&gt;
  &lt;li&gt;Continuous Integration (CI)&lt;/li&gt;
  &lt;li&gt;Continuous Delivery (CD)&lt;/li&gt;
  &lt;li&gt;Continuous Deployment (CD)&lt;/li&gt;
  &lt;li&gt;Continuous Monitoring: ELK, Databriks&lt;/li&gt;
  &lt;li&gt;API Management: Mulesoft&lt;/li&gt;
  &lt;li&gt;Test Driven Development (TDD)&lt;/li&gt;
  &lt;li&gt;Behavious Driven Development (BDD)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll be writing posts on these when I have enough experience working with each.&lt;/p&gt;</content><author><name></name></author><category term="devops" /><category term="information-system" /><summary type="html"></summary></entry><entry><title type="html">Applications of Recommender Systems</title><link href="www.ankushchoubey.com/recommender-systems/" rel="alternate" type="text/html" title="Applications of Recommender Systems" /><published>2021-05-16T00:00:00-05:00</published><updated>2021-08-01T15:42:15-05:00</updated><id>www.ankushchoubey.com/recommender-systems</id><content type="html" xml:base="www.ankushchoubey.com/recommender-systems/">&lt;p&gt;&lt;img src=&quot;/images/recommender-systems.jpg&quot; alt=&quot;&quot; /&gt;
Photo by &lt;a href=&quot;https://unsplash.com/@charlesdeluvio?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Charles Deluvio&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/suggestion?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recommender systems are easiest and probably most lucritive ML Application.&lt;/p&gt;

&lt;p&gt;The whole of social media, content sites and E-Commerce Companies are built around it.&lt;/p&gt;

&lt;p&gt;The goal is said to be to provide right information at the right time and avoiding information overload. The statement seems ideal and a recommender system can be made to work such a way.&lt;/p&gt;

&lt;p&gt;Most often for consumer facing products, the real reason is the opposite. Keep people hooked to using the product for longer.&lt;/p&gt;

&lt;p&gt;In social media, it would be used to recommended content/people similar to once you are viewing or something you might like.&lt;/p&gt;

&lt;p&gt;For E-Commerce companies, the focus is on recommended you the product you’ll likely purchase.&lt;/p&gt;

&lt;p&gt;Recommender systems are also used at a smaller scale like Keyboard Suggestions on your phone.&lt;/p&gt;

&lt;p&gt;For Enterprise, recommender systems can help improve productivity by a lot.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;By having documents/data grouped, the right information can found faster.&lt;/li&gt;
  &lt;li&gt;By having similar documents groups/recommended, comparing between documents can be made simpler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommender Systems often require much less data to operate than other Machine/Deep Learning problems.&lt;/p&gt;</content><author><name></name></author><category term="applications-of-ml" /><category term="information-system" /><summary type="html">Photo by Charles Deluvio on Unsplash</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/recommender-systems.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/recommender-systems.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>