<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2022-09-25T02:12:58-05:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Full Stack Developer - Cloud/Microservices</subtitle><entry><title type="html">PREFER UPDATING A BLOG OVER WRITING NEW ONES</title><link href="www.ankushchoubey.com/post-format/" rel="alternate" type="text/html" title="PREFER UPDATING A BLOG OVER WRITING NEW ONES" /><published>2050-09-26T00:00:00-05:00</published><updated>2022-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/post-format</id><content type="html" xml:base="www.ankushchoubey.com/post-format/">&lt;p&gt;&lt;img src=&quot;/images/switch-jobs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prefer-updating-a-blog-over-writing-new-ones&quot;&gt;PREFER UPDATING A BLOG OVER WRITING NEW ONES&lt;/h1&gt;

&lt;h2 id=&quot;writing-steps&quot;&gt;Writing Steps&lt;/h2&gt;

&lt;p&gt;If I write from POV that how I got the this idea and how I thought about it, readers will know thinking behing an idea and not just the preachiness. Plus, I’ll always have the right words to write.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Done&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Structure Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Written&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Edited&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Grammar Check Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Perfect Grammarly Score:&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Added  https://www.canva.com/&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Links to Other Posts if Any&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tags Added&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Released Publically&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to test interfaces, abstract classes and design patterns?</title><link href="www.ankushchoubey.com/testing-design-patterns/" rel="alternate" type="text/html" title="How to test interfaces, abstract classes and design patterns?" /><published>2022-09-25T00:00:00-05:00</published><updated>2022-09-25T15:52:08-05:00</updated><id>www.ankushchoubey.com/testing-design-patterns</id><content type="html" xml:base="www.ankushchoubey.com/testing-design-patterns/">&lt;p&gt;&lt;img src=&quot;/images/testing-design-patterns.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;flash&quot;&gt;
    &lt;svg class=&quot;octicon octicon-info octicon octicon-info octicon octicon-info octicon octicon-info octicon octicon-info octicon octicon-info&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Note: &lt;/strong&gt;For beginners: Design patterns are template solutions to common problems developers face. There are many design patterns; the best known are the 2 Gang of Four (GoF)  object-oriented design patterns.
&lt;/div&gt;

&lt;p&gt;Testing interfaces, abstract classes, and design patterns efficiently can be tricky since parents and children depend on each other. We can write tests to eliminate these dependencies during the test time, making our tests very short and decoupled.&lt;/p&gt;

&lt;p&gt;But first, why should you even use abstract classes and design patterns?&lt;/p&gt;

&lt;h1 id=&quot;why-should-we-use-interfaces-abstract-classes-and-design-patterns&quot;&gt;Why should we use interfaces, abstract classes and design patterns?&lt;/h1&gt;

&lt;p&gt;Good code should enforce the intent of how it is to be used.&lt;/p&gt;

&lt;p&gt;Ideally, we strive for a SOLID design: A code with a single responsibility that cannot be changed but is extensible. Interfaces and abstract classes help us achieve this goal.&lt;/p&gt;

&lt;p&gt;Suppose your systems represent different vehicles. Instead of having separate logic for each, you can represent the common logic in a ‘Vehicle’ class and have its behaviour implemented and modified by the subclasses.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;travelTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// common logic to move a vehicle that uses this.getHorn()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Horn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHorn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this will be implemented by children&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tesla&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Horn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHorn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Horn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John Cena: You can't see me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above code corresponds to the factory method design pattern.&lt;/p&gt;

&lt;p&gt;All 24 object-oriented GoF design patterns also embody SOLID principles. Developers should prefer these patterns as they help our code be very clean.&lt;/p&gt;

&lt;h1 id=&quot;how-should-we-unit-test-them&quot;&gt;How should we unit test them?&lt;/h1&gt;

&lt;p&gt;Unit testing a pattern can be tricky since things are so abstract.&lt;/p&gt;

&lt;p&gt;Testing all the concrete and parent classes together will make our tests very dependent on the parent and will be hard to maintain.&lt;/p&gt;

&lt;p&gt;The trick here is to test both separately.&lt;/p&gt;

&lt;h2 id=&quot;testing-abstract-class&quot;&gt;Testing abstract class&lt;/h2&gt;

&lt;p&gt;make a dummy concrete implementation within the test class.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// this is a test file for the abstract class&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 1. Make a Dummy implementation of the abstract class/interface within the test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DummyVehicleImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Horn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHorn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Horn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;THIS IS DUMMY BUT IT CAN SING FROZEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. Create the instance of a dummy&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DummyVehicleImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3. Use the dummy implementation to assert the parent.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The steps to test composition is also similar.&lt;/p&gt;

&lt;h2 id=&quot;testing-children&quot;&gt;Testing children&lt;/h2&gt;

&lt;p&gt;In the above section, we tested parents. Now we can test the child.&lt;/p&gt;

&lt;p&gt;Each child will have a separate test class that tests its method, excluding the parent’s methods.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TeslaTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Tesla&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tesla&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tesla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// code which tests methods of tesla class and not the parent.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;What do you think about this approach? Is there a better approach to testing abstract classes and design patterns? Do let me know what you think.&lt;/p&gt;

&lt;p&gt;Thank you for reading so far.&lt;/p&gt;</content><author><name></name></author><category term="design-patterns" /><category term="testing" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/testing-design-patterns.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/testing-design-patterns.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Pointers while integrating an external service</title><link href="www.ankushchoubey.com/integrate-external-services/" rel="alternate" type="text/html" title="Pointers while integrating an external service" /><published>2022-09-24T00:00:00-05:00</published><updated>2022-09-24T15:52:08-05:00</updated><id>www.ankushchoubey.com/integrate-external-services</id><content type="html" xml:base="www.ankushchoubey.com/integrate-external-services/">&lt;p&gt;&lt;img src=&quot;/images/integrate-external-services.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@alexbemore?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Alexander Shatov&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/apps?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;have-you-worked-with-that-external-service-before&quot;&gt;Have you worked with that external service before?&lt;/h1&gt;

&lt;p&gt;If not, then expect yourself to make many mistakes. To reduce mistakes, make sure you do good research and at the same time will adapt to a plan.&lt;/p&gt;

&lt;p&gt;Discuss with other people who have already done it before. They may know something you don’t.&lt;/p&gt;

&lt;h1 id=&quot;are-you-integrating-one-service-or-are-you-integrating-multiple-similar-services&quot;&gt;Are you integrating one service or are you integrating multiple similar services?&lt;/h1&gt;

&lt;p&gt;If you are integrating multiple services, your code would have to be modular enough.&lt;/p&gt;

&lt;p&gt;In any case, try to make your code modular enough so that if suddenly a similar app has to be integrated, there are minimal changes to your code.&lt;/p&gt;

&lt;p&gt;Take a look at factory and strategy design patterns.&lt;/p&gt;

&lt;h1 id=&quot;does-it-provide-an-sdk-in-your-language&quot;&gt;Does it provide an SDK in your language?&lt;/h1&gt;

&lt;p&gt;If yes, half your life’s problems are now solved.&lt;/p&gt;

&lt;h1 id=&quot;how-do-you-connect-to-the-external-service&quot;&gt;How do you connect to the external service?&lt;/h1&gt;

&lt;p&gt;There likely is some kind of clientId, clientSecret, and OAuth flow at play.
You’ll have to save the token somewhere if it’s an OAuth flow.&lt;/p&gt;

&lt;p&gt;OAuth flow sounds fancy but it’s really easy. You might also find the SDK or an open source libary makes it easy to implement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/integrate-external-services/oauth.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Image Source: &lt;a href=&quot;https://api.slack.com/legacy/oauth&quot;&gt;Slack OAuth Flow&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;in-case-there-isnt-a-library-how-do-you-verify-if-something-is-really-from-that-system&quot;&gt;In case there isn’t a library? How do you verify if something is really from that system?&lt;/h1&gt;

&lt;p&gt;You need some kind of token validation.&lt;/p&gt;

&lt;p&gt;If that request is sent again, how would you verify that you received it only once?&lt;/p&gt;

&lt;h1 id=&quot;are-there-rate-limits-in-place-on-the-external-system&quot;&gt;Are there rate limits in place on the external system?&lt;/h1&gt;

&lt;p&gt;If yes, how would you handle it?&lt;/p&gt;

&lt;h1 id=&quot;are-there-special-conditions-in-place&quot;&gt;Are there special conditions in place?&lt;/h1&gt;

&lt;p&gt;For example, if it’s a request/response scenario for a messaging app, it may request a response within a quick 3-5 seconds.&lt;/p&gt;

&lt;h1 id=&quot;would-you-have-to-release-the-app-on-that-particular-platform&quot;&gt;Would you have to release the app on that particular platform?&lt;/h1&gt;

&lt;p&gt;If yes, you’ll have to work with the Product and Doc team to make sure everything is polished.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/integrate-external-services.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/integrate-external-services.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Be a more empathic developer</title><link href="www.ankushchoubey.com/empathic-developer/" rel="alternate" type="text/html" title="Be a more empathic developer" /><published>2022-09-24T00:00:00-05:00</published><updated>2022-09-24T15:52:08-05:00</updated><id>www.ankushchoubey.com/empathic-developer</id><content type="html" xml:base="www.ankushchoubey.com/empathic-developer/">&lt;p&gt;&lt;img src=&quot;/images/empathic-developer.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@anniespratt?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Annie Spratt&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/developer-team?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s easy to blame. It’s harder to empathize.&lt;/p&gt;

&lt;h1 id=&quot;its-easier-to-refactor-than-to-create-code-from-scratch&quot;&gt;It’s easier to refactor than to create code from scratch.&lt;/h1&gt;

&lt;p&gt;If you are creating code from scratch. You wouldn’t know many things because the requirements aren’t clear.&lt;/p&gt;

&lt;p&gt;But if you are refactoring or fixing bugs, requirements at that point are likely pretty clear.&lt;/p&gt;

&lt;h1 id=&quot;everyone-has-had-a-different-past-experience&quot;&gt;Everyone has had a different past experience.&lt;/h1&gt;

&lt;p&gt;Some people aren’t even developers but jumped into the field for good money. They might have been poor in the past and for them, money is the main thing in Maslow’s Hierarchy Of Needs.&lt;/p&gt;

&lt;p&gt;Some are good developers but have too many things going on. Maybe family. Maybe something else.&lt;/p&gt;

&lt;p&gt;Some are good developers but dragged into roles that aren’t totally for them. For example Managers.&lt;/p&gt;

&lt;p&gt;Some people didn’t even have a Computer Science degree. They are from some other field.&lt;/p&gt;

&lt;p&gt;Even if they are a good developer, most problems in Software Development &amp;amp; in #life are questions of knowing the right thing. If you don’t, you are kind of lost. Therefore it’s useful to rely upon and discuss with everyone before trying to implement something.&lt;/p&gt;

&lt;h1 id=&quot;rather-than-blaming-look-at-the-problem-emphasize-with-one-who-is-facing-it-and-be-useful-to-suggest-a-path-forward&quot;&gt;Rather than blaming, look at the problem. Emphasize with one who is facing it. And be useful to suggest a path forward.&lt;/h1&gt;

&lt;p&gt;It isn’t useful to run away. Stand there with them, and help them out on their task.&lt;/p&gt;</content><author><name></name></author><category term="collaboration" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/empathic-developer.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/empathic-developer.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to take advice that suggests being fake?</title><link href="www.ankushchoubey.com/advice-that-suggest-being-fake/" rel="alternate" type="text/html" title="How to take advice that suggests being fake?" /><published>2022-09-24T00:00:00-05:00</published><updated>2022-09-24T15:52:08-05:00</updated><id>www.ankushchoubey.com/advice-that-suggest-being-fake</id><content type="html" xml:base="www.ankushchoubey.com/advice-that-suggest-being-fake/">&lt;p&gt;You have to always be truthful.&lt;/p&gt;

&lt;p&gt;Advice like: “Don’t message as soon as you receive the text because it makes you look like you have no job.”&lt;/p&gt;

&lt;p&gt;Well, there are two ways to handle this.&lt;/p&gt;

&lt;p&gt;Either you can be fake and wait for x number of minutes to reply.&lt;/p&gt;

&lt;p&gt;Or you can have a wonderful life and be content with yourself, and when you get that message, you are busy having a job.&lt;/p&gt;

&lt;p&gt;:)&lt;/p&gt;

&lt;p&gt;Often the “act fake” advice has a reason; you have to find that reason and become that person.&lt;/p&gt;</content><author><name></name></author><category term="non-professional" /><category term="truth-seeking" /><summary type="html">You have to always be truthful.</summary></entry><entry><title type="html">Increase collaboration by knowing whom to contact</title><link href="www.ankushchoubey.com/team-knowing-whom-to-contact/" rel="alternate" type="text/html" title="Increase collaboration by knowing whom to contact" /><published>2022-09-21T00:00:00-05:00</published><updated>2022-09-21T15:52:08-05:00</updated><id>www.ankushchoubey.com/team-knowing-whom-to-contact</id><content type="html" xml:base="www.ankushchoubey.com/team-knowing-whom-to-contact/">&lt;p&gt;&lt;img src=&quot;/images/team-knowing-whom-to-contact.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jasongoodman_youxventures?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Jason Goodman&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/team?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;silos&quot;&gt;Silos&lt;/h1&gt;

&lt;p&gt;We developers love working in silos. We love our technical challenges.&lt;/p&gt;

&lt;p&gt;Our effort is proportional to how complex the challenge is.&lt;/p&gt;

&lt;p&gt;But for business and true Agility, it’s more important to always focus on end users. And to focus on what’s truly important from a business POV.&lt;/p&gt;

&lt;p&gt;Similarly, there are moments when one needs to collaborate with other teams, and having different teams in the loop is truly useful.&lt;/p&gt;

&lt;p&gt;The higher the quality of collaboration, the less rework a developer has to do.&lt;/p&gt;

&lt;h1 id=&quot;knowing-who-to-contact&quot;&gt;Knowing who to contact&lt;/h1&gt;

&lt;p&gt;On this path, the important thing is to remember whom to connect to and when. Knowing organizational structure is helpful. If there is no organizational structure available. Create one.&lt;/p&gt;

&lt;p&gt;Go through and list out all the stakeholders and different teams. Who is the decision maker there?&lt;/p&gt;

&lt;p&gt;Ideally, everyone should be pouring in a semi-bureaucratic way.&lt;/p&gt;

&lt;p&gt;The development team must connect to other groups to get work done.&lt;/p&gt;

&lt;p&gt;These teams might be specific to your organization. So wherever you work, figure out what all the departments and teams are. Who are the key stakeholders to contact, and when?&lt;/p&gt;

&lt;p&gt;And make sure you loop them in when taking a decision.&lt;/p&gt;

&lt;p&gt;And, of course, you can use Gherkin BDD files to ensure everyone is in sync.&lt;/p&gt;

&lt;p&gt;So here are a few teams and stakeholders that are common and imp:&lt;/p&gt;

&lt;h1 id=&quot;teams&quot;&gt;Teams&lt;/h1&gt;

&lt;p&gt;Development Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Responsible for developing the application.&lt;/li&gt;
  &lt;li&gt;Ensuring the highest product quality.&lt;/li&gt;
  &lt;li&gt;Responsible for building the thing right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;QA Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ensures application lives up to standard.&lt;/li&gt;
  &lt;li&gt;Signs of if the feature is ready to be released.&lt;/li&gt;
  &lt;li&gt;Responsible for ensuring the thing is built right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Product Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decides what to put in the product.&lt;/li&gt;
  &lt;li&gt;Ensures the right thing is being built.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Doc Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ensures all public-facing documentation is professional.&lt;/li&gt;
  &lt;li&gt;Their responsibilities include everything from images to messages shown to the user to public-facing API responses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Marketing Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Markets the newly released features.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DevOps Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Is a platform team that ensures Devs can work fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Security Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ensures security provisions are in place.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*Old Way: Database Team&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ensures DB is up and running fine.&lt;/li&gt;
  &lt;li&gt;This role is replaced by DevOps automation in most organizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Data science team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Builts applications that help show insight with the help of data.&lt;/li&gt;
  &lt;li&gt;Their work isn’t always real-time insights.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;key-stakeholders&quot;&gt;Key Stakeholders:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Developers&lt;/li&gt;
  &lt;li&gt;Testers&lt;/li&gt;
  &lt;li&gt;Scrum Master&lt;/li&gt;
  &lt;li&gt;Product Designer&lt;/li&gt;
  &lt;li&gt;Product Owner&lt;/li&gt;
  &lt;li&gt;Engineering Manager&lt;/li&gt;
  &lt;li&gt;Product Manager&lt;/li&gt;
  &lt;li&gt;Head of Engineering&lt;/li&gt;
  &lt;li&gt;Head of Product&lt;/li&gt;
  &lt;li&gt;Head of Finance&lt;/li&gt;
  &lt;li&gt;CTO&lt;/li&gt;
  &lt;li&gt;CIO&lt;/li&gt;
  &lt;li&gt;COO&lt;/li&gt;
  &lt;li&gt;CEO&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="agile" /><category term="collaboration" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/team-knowing-whom-to-contact.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/team-knowing-whom-to-contact.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Making Object Immutable for Concurrency</title><link href="www.ankushchoubey.com/immutable-objects/" rel="alternate" type="text/html" title="Making Object Immutable for Concurrency" /><published>2022-09-18T00:00:00-05:00</published><updated>2022-09-18T15:52:08-05:00</updated><id>www.ankushchoubey.com/immutable-objects</id><content type="html" xml:base="www.ankushchoubey.com/immutable-objects/">&lt;p&gt;&lt;img src=&quot;/images/immutable-objects.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;Photo by &lt;a href=&quot;https://unsplash.com/@davehoefler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Dave Hoefler&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/stone?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;flash&quot;&gt;
    &lt;svg class=&quot;octicon octicon-info octicon octicon-info octicon octicon-info octicon octicon-info&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Note: &lt;/strong&gt;For beginners: Immutable object means objects whose value can't change. Immutability is the intent of the creator of the object/class, i.e. when coding something up, we need to decide if a particular class should be immutable. Also, immutability is as important in the front end as in the back end. While the below posts explain it in Java, other programming languages have their way of implementing immutability.
&lt;/div&gt;

&lt;h1 id=&quot;where-immutability-is-needed&quot;&gt;&lt;strong&gt;Where Immutability is needed?&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;When sharing data between threads, there is a high chance that one memory gets replaced by another. This would lead to inconsistency, and often these bugs aren’t discovered.&lt;/p&gt;

&lt;p&gt;There are two ways to avoid this: thread-safe data structures or immutable objects.&lt;/p&gt;

&lt;p&gt;This particular post will explain where immutable objects are necessary.&lt;/p&gt;

&lt;p&gt;Suppose you have 2 Rest Endpoints. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/someEndpoint&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/anotherEndpoint&lt;/code&gt; both set a particular value to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sharedMemory&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/someEndpoint&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sharedMemory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//some code that uses sharedMemory&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/anotherEndpoint&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postSomethingElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sharedMemory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//some code that uses sharedMemory&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It can happen that this shared memory is not inconsistent.&lt;/p&gt;

&lt;p&gt;Ideally, the solution would be, in this case, to declare the variable within the method it is used.&lt;/p&gt;

&lt;h1 id=&quot;creating-an-immutable-object&quot;&gt;&lt;strong&gt;Creating an immutable object&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;The creation of immutable objects is relatively simple.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Make sure all instance variables are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private final&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;make sure all interactions with the method happens only via the constructor or the public method.
No method should modify the contents of the private final method.&lt;/li&gt;
  &lt;li&gt;Make sure all instance variables are immutable.&lt;/li&gt;
  &lt;li&gt;Make sure the class is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; so that there is no inheriting and subclasses can’t override something.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are some more rules, but these are the minimum requirements. The following section will explain how you automate the checking of immutable classes would also check for more conditions.&lt;/p&gt;

&lt;h1 id=&quot;java-libraries&quot;&gt;&lt;strong&gt;Java Libraries&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Some libraries help create immutable objects, such as &lt;a href=&quot;https://immutables.github.io/&quot;&gt;Immutables for Java&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/google/guava/wiki/ImmutableCollectionsExplained&quot;&gt;Google Guava Library&lt;/a&gt; provides many immutable data structure alternatives. The benefit of using these is that they have the same interface as regular java collections.&lt;/p&gt;

&lt;div class=&quot;flash&quot;&gt;
    &lt;svg class=&quot;octicon octicon-info octicon octicon-info octicon octicon-info octicon octicon-info octicon octicon-info&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Note: &lt;/strong&gt;It's best to start with immutable objects and then modify them if needed.
&lt;/div&gt;

&lt;h1 id=&quot;automating-verification-via-unit-tests&quot;&gt;&lt;strong&gt;Automating Verification&lt;/strong&gt; via Unit Tests&lt;/h1&gt;

&lt;p&gt;But when developing within a team and given the cognitive overload we developers face, we need some way to automate the creation of immutable objects. This can be done as a combo of 2 methods:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1 Mutability Detector&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mutability Detector is a package that provides the following assertion that can be used within unit tests.&lt;/p&gt;

&lt;p&gt;Mutability Detector has many more conditions to detect mutability.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    assertImmutable(MyClass.class); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MutabilityDetector/MutabilityDetector&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2 Automate further with ArchUnit tests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ArchUnit tests allow for writing architecture-level tests. We can write a test such as asserting that a class is immutable if a class is annotated with @component.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In practice, I couldn’t fully make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertImmutable&lt;/code&gt; work with abstract classes.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VO4IGFayJWo&quot;&gt;Immutable Data Structures are Thread Safe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uFxWg3cVMRs&quot;&gt;How to Make an Object Immutable in Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://immutables.github.io/&quot;&gt;Immutability Library Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/guava/wiki/ImmutableCollectionsExplained&quot;&gt;Google Guava Immutable Data Structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html&quot;&gt;A Strategy for Defining Immutable Objects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ST3wU79nwS8&quot;&gt;Mutability Detector In Action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="concurrent-programming" /><category term="reactive-programming" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/immutable-objects.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/immutable-objects.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Perfection isn’t an attainable goal. We are always a step closer to it.</title><link href="www.ankushchoubey.com/perfection/" rel="alternate" type="text/html" title="Perfection isn’t an attainable goal. We are always a step closer to it." /><published>2022-09-11T00:00:00-05:00</published><updated>2022-09-08T15:52:08-05:00</updated><id>www.ankushchoubey.com/perfection</id><content type="html" xml:base="www.ankushchoubey.com/perfection/">&lt;p&gt;&lt;img src=&quot;/images/perfection.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Often we fail to do something because we fear we’ll be bad at it.&lt;/p&gt;

&lt;p&gt;This fear is counter-productive. It is not a useful thought.&lt;/p&gt;

&lt;p&gt;Only by doing do we learn. Only by failing do we recognize and avoid situations that would cause problems. In this sense, we are constantly failing forward.&lt;/p&gt;

&lt;p&gt;Things, if they are progressing well, will always be an upwards spiral. As long as they is an upwards spiral, it doesn’t matter that we currently failed. Eventually, we’ll succeed, and that’s enough.&lt;/p&gt;

&lt;p&gt;Failure is a sign we are doing&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Something out of our comfort zone. -&amp;gt; This is good because it means we are doing something.&lt;/li&gt;
  &lt;li&gt;Something we are doing wrong -&amp;gt; means we can fix it, and then we won’t have a problem.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having a good perspective on failure is highly underestimated.&lt;/p&gt;

&lt;p&gt;If we are failing all the time, however, it could mean a few things. All of these things provide an opportunity for us to improve.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Maybe we don’t know something -&amp;gt; in which case we need to find an answer.&lt;/li&gt;
  &lt;li&gt;Maybe we are trying to solve the wrong problem or from a bad angle-&amp;gt; we need good root cause analysis both post-mortem and pre-mortem.&lt;/li&gt;
  &lt;li&gt;Maybe we are asking the wrong question -&amp;gt; find the right question to ask then.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Often the best approach to move towards perfection is:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Do something.&lt;/li&gt;
  &lt;li&gt;Fail&lt;/li&gt;
  &lt;li&gt;Learn&lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sometimes after this loop, you’ll be good enough and still now perfect. But that’s okay; maybe this is an optimal stopping point, especially if the problem is solved.&lt;/p&gt;

&lt;p&gt;Or maybe it’s time to stop focusing on this problem for a while and solve another problem. After some time, we’ll have a fresh perspective, and if this problem still exists, we’ll have more tools in our belts to fix it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/03/Diminishing_Returns_Graph.png&quot; alt=&quot;Diminishing Returns Graph: Source Wikipedia&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="non-professional" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/perfection.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/perfection.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Chaos Engineering</title><link href="www.ankushchoubey.com/chaos-engineering/" rel="alternate" type="text/html" title="Chaos Engineering" /><published>2022-09-11T00:00:00-05:00</published><updated>2022-09-11T15:52:08-05:00</updated><id>www.ankushchoubey.com/chaos-engineering</id><content type="html" xml:base="www.ankushchoubey.com/chaos-engineering/">&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/39/LogoChaosMonkeysNetflix.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-chaos-engineering&quot;&gt;What is Chaos Engineering?&lt;/h1&gt;

&lt;p&gt;When we do TDD, we reduce logical bugs. With Chaos Engineering, we’ll improve resilience.&lt;/p&gt;

&lt;p&gt;Example: If something fails for an end user, how should it be handled with minimal impact on user experience?&lt;/p&gt;

&lt;p&gt;You might have experienced this when an error occurs on Netflix. Rather than failing, it gives a proper response to the user.&lt;/p&gt;

&lt;p&gt;It’s hard to anticipate failure scenarios in the real world. But there are some common ones. In chaos engineering terms: assaults.&lt;/p&gt;

&lt;p&gt;Full-size services like Gremlin with 30+ assault types are interesting to look through.
There are some Kube-specific services too.&lt;/p&gt;

&lt;p&gt;Chaos Engineering for Spring Boot includes three assaults (latency, exception, kill app) that directly attack @service @controller @repository.&lt;/p&gt;

&lt;h1 id=&quot;how-would-this-help&quot;&gt;How would this help?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It will make sure we are handling more failures #gracefully.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In no case should user experience be impacted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many times, when an error happens, the user doesn’t get an indication that something went wrong.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;handling-chaos&quot;&gt;Handling chaos&lt;/h1&gt;

&lt;p&gt;There are usually common patterns to handle many assaults like CircuitBreaker, which many java libraries provide. Thus, it would require some thought to handle failures on UI too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/chaos-engineering.jpeg&quot; alt=&quot;ByteByteGo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://bytebytego.com/newsletter&quot;&gt;ByteByteGo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chaos Engineering helps us understand and improve observability.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If there is any chaos in our system, we should be able to identify it via observability quickly. If we cannot determine, we’ll have to improve observability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;People also play Chaos Engineering Game Day, where they try to cause chaos and validate resiliency and observability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chaos engineering would replicate testing in production.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having a library that automates some aspects of Chaos Engineering can proactively improve resiliency (and reduce the cognitive overload of having everyone learn and follow chaos engineering)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codecentric.github.io/chaos-monkey-spring-boot/&quot;&gt;Chaos Engineering for Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gremlin.com/&quot;&gt;Gremlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chaos-engineering" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://upload.wikimedia.org/wikipedia/commons/3/39/LogoChaosMonkeysNetflix.png" /><media:content medium="image" url="https://upload.wikimedia.org/wikipedia/commons/3/39/LogoChaosMonkeysNetflix.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How AutoConfiguration works in Spring Boot</title><link href="www.ankushchoubey.com/autoconfiguration/" rel="alternate" type="text/html" title="How AutoConfiguration works in Spring Boot" /><published>2022-09-11T00:00:00-05:00</published><updated>2022-09-11T15:52:08-05:00</updated><id>www.ankushchoubey.com/autoconfiguration</id><content type="html" xml:base="www.ankushchoubey.com/autoconfiguration/">&lt;p&gt;&lt;img src=&quot;/images/autoconfiguration.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Everything in Spring Boot is configurable. This was very hard to understand, but here are some pointers that could help.&lt;/p&gt;

&lt;p&gt;It was hard for me to extend and/or customize the core functionalities of Spring Boot. These are a few pointers that could help.&lt;/p&gt;

&lt;h1 id=&quot;bean-s&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; s&lt;/h1&gt;

&lt;p&gt;Beans can be thought of as singleton classes. i.e. classes where only one instance can exist.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Beans&lt;/code&gt; are created and managed by BeanFactory. And there is a Bean injector which injects beans where they are needed.&lt;/p&gt;

&lt;p&gt;So, for example, you have a class A and a class B.&lt;/p&gt;

&lt;p&gt;class B is composed of class A, and you have added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;When the class B bean is generated, the class A bean will be injected into it.&lt;/p&gt;

&lt;p&gt;All @Component, @Service and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Repository&lt;/code&gt; are of type bean.&lt;/p&gt;

&lt;h1 id=&quot;conditional-s&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt; s&lt;/h1&gt;

&lt;p&gt;Beans can be generated on conditions.&lt;/p&gt;

&lt;p&gt;For example, suppose a particular library exists only then can a bean be generated.&lt;/p&gt;

&lt;p&gt;For example, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-cloud&lt;/code&gt; stream, Kafka beans would be generated if there is Kafka set.&lt;/p&gt;

&lt;h1 id=&quot;everything-would-finally-plugin-to-some-lifecycle&quot;&gt;Everything would finally plugin to some lifecycle&lt;/h1&gt;

&lt;p&gt;All of spring, is a plugin architecture. The core of spring boot exists and everything else is a plugin that plugs into a spring boot lifecycle extending its core functionality.&lt;/p&gt;

&lt;p&gt;Everything plugs into some spring boot lifecycle.&lt;/p&gt;

&lt;h1 id=&quot;extending-spring-boot&quot;&gt;Extending spring boot&lt;/h1&gt;

&lt;p&gt;Suppose you want to extend spring boots to your liking here is how you’d do it.&lt;/p&gt;

&lt;h2 id=&quot;find-all-beans-bean-autoconfiguration-configurationproperties-andor-value&quot;&gt;Find all beans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoConfiguration&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt; and/or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Value&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In IntelliJ, you can search usage for all Beans easily. These are the beans you can override.&lt;/p&gt;

&lt;p&gt;Overriding these beans allows you to customize them.&lt;/p&gt;

&lt;p&gt;Usually, Autoconfiguration classes end with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoConfiguration&lt;/code&gt;, which makes them super easy to find.&lt;/p&gt;

&lt;p&gt;Find ConfigurationProperties. Many beans depend on these or depend on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Configuration Properties and @Value are what is set by the properties file.&lt;/p&gt;

&lt;h2 id=&quot;read-the-documentation&quot;&gt;Read the documentation.&lt;/h2&gt;

&lt;p&gt;In the documentation, you will likely find info on some beans you could modify or extend.&lt;/p&gt;</content><author><name></name></author><category term="spring-boot" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/autoconfiguration.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/autoconfiguration.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>