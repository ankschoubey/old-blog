<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2022-03-17T16:03:31-05:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Random Thoughts</subtitle><entry><title type="html">Post Format</title><link href="www.ankushchoubey.com/post-format/" rel="alternate" type="text/html" title="Post Format" /><published>2050-09-26T00:00:00-05:00</published><updated>2050-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/post-format</id><content type="html" xml:base="www.ankushchoubey.com/post-format/">&lt;p&gt;&lt;img src=&quot;/images/switch-jobs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;writing-steps&quot;&gt;Writing Steps&lt;/h2&gt;

&lt;p&gt;If I write from POV that how I got the this idea and how I thought about it, readers will know thinking behing an idea and not just the preachiness. Plus, I’ll always have the right words to write.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Done&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Structure Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Written&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Edited&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Grammar Check Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Perfect Grammarly Score:&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Added  https://www.canva.com/&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Links to Other Posts if Any&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tags Added&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Released Publically&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stratergies on Saving Time</title><link href="www.ankushchoubey.com/saving-time/" rel="alternate" type="text/html" title="Stratergies on Saving Time" /><published>2022-03-18T00:00:00-05:00</published><updated>2050-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/saving-time</id><content type="html" xml:base="www.ankushchoubey.com/saving-time/">&lt;p&gt;Categorize the type of activities you want to do.&lt;/p&gt;

&lt;p&gt;Plan and track your day diligently. Every hour. But maybe not every minute.&lt;/p&gt;

&lt;p&gt;Meditate. You need attention.&lt;/p&gt;

&lt;p&gt;Perform activities that give back time. -&amp;gt; Time Assets.&lt;/p&gt;

&lt;p&gt;Mono Task. Do one thing at a time. You’ll save 50% more time.&lt;/p&gt;

&lt;p&gt;You only have 4 productive focus hours. Don’t let anyone distract you.&lt;/p&gt;</content><author><name></name></author><summary type="html">Categorize the type of activities you want to do.</summary></entry><entry><title type="html">Human Intuition while working in Technology</title><link href="www.ankushchoubey.com/human-intuition/" rel="alternate" type="text/html" title="Human Intuition while working in Technology" /><published>2022-03-18T00:00:00-05:00</published><updated>2022-03-18T15:52:08-05:00</updated><id>www.ankushchoubey.com/human-element</id><content type="html" xml:base="www.ankushchoubey.com/human-intuition/">&lt;p&gt;Often when talking about process improvement, we focus on only technology element.&lt;/p&gt;

&lt;p&gt;Human element is ignored. This is understandable. technology can enforce rules that improve the process easily. Technology can also remove a lot of human evidence.&lt;/p&gt;

&lt;p&gt;Developing the human intuition is about understanding why something is being done more than how something is being done.&lt;/p&gt;

&lt;p&gt;Because once someone understands why something is done, they can suggest ways to prove it for themselves locally.&lt;/p&gt;

&lt;p&gt;This is usually the thing I find lacking in most devops, Agile, TDD and similar concepts.&lt;/p&gt;</content><author><name></name></author><summary type="html">Often when talking about process improvement, we focus on only technology element.</summary></entry><entry><title type="html">The 3 Man Squad +/-1</title><link href="www.ankushchoubey.com/3-man-squad/" rel="alternate" type="text/html" title="The 3 Man Squad +/-1" /><published>2022-03-17T00:00:00-05:00</published><updated>2022-03-17T15:52:08-05:00</updated><id>www.ankushchoubey.com/3-man-squad</id><content type="html" xml:base="www.ankushchoubey.com/3-man-squad/">&lt;p&gt;I have come to the belief that max 3 people working on a particular micro-service/microfrontents/unit is the most optimal.&lt;/p&gt;

&lt;p&gt;They have to be dedicated to a single MS/MF because the cost of bringing someone later makes the project delay more.&lt;/p&gt;

&lt;p&gt;1 man isn’t enough because they’ll have too much freedom/dependency. Code would be written in such a way that only 1 person knows.&lt;/p&gt;

&lt;p&gt;2 is good. It helps in synchronization.&lt;/p&gt;

&lt;p&gt;3 is perfect. It’s synchronized and shared workload. If a person is on leave, 2 can manage easily.&lt;/p&gt;

&lt;p&gt;4 is upper limit. This is a warning zone. Though it may be perfect is project requires lot of support. But if project requires lot of support, it may mean that it isn’t designed well.&lt;/p&gt;

&lt;p&gt;More than 4: You have spaghetti. Shortcuts. People doing there own things. High communication bottlenecks.&lt;/p&gt;

&lt;p&gt;The idea was developed while talking to my friend Austin Lewis&lt;/p&gt;</content><author><name></name></author><category term="business" /><summary type="html">I have come to the belief that max 3 people working on a particular micro-service/microfrontents/unit is the most optimal.</summary></entry><entry><title type="html">Java Architecture Testing with ArchUnit</title><link href="www.ankushchoubey.com/arch-unit/" rel="alternate" type="text/html" title="Java Architecture Testing with ArchUnit" /><published>2022-03-16T00:00:00-05:00</published><updated>2022-03-16T15:52:08-05:00</updated><id>www.ankushchoubey.com/arch-test</id><content type="html" xml:base="www.ankushchoubey.com/arch-unit/">&lt;h1 id=&quot;reason-for-architecture-testing&quot;&gt;Reason for Architecture Testing&lt;/h1&gt;

&lt;p&gt;Once size of codebase increases, it becomes harder and harder to manage a lot of little things. This is specially true when multiple people are working on it.&lt;/p&gt;

&lt;p&gt;For example, if you are having a @Entity and want to ensure all of it have certain javax validation whenever someone creates a new @Entity.&lt;/p&gt;

&lt;p&gt;It may happen that someone who is working on the code base in future does not know about a certain principle to follow.&lt;/p&gt;

&lt;p&gt;For such cases, Architecture Testing is idea.&lt;/p&gt;

&lt;h1 id=&quot;archunit&quot;&gt;ArchUnit&lt;/h1&gt;

&lt;p&gt;ArchUnit provides Architecture Testing for Java and ensure design principles and standards are followed.&lt;/p&gt;

&lt;p&gt;ArchUnit work well with JUnit.&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;

&lt;p&gt;If you want to ensure all String fields for Request Objects have @Size annotation, you could write it with ArchUnit.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;haveRawType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beAnnotatedWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since I have started using Arch Unit, the quality of code has improved by a huge margin.&lt;/p&gt;</content><author><name></name></author><category term="clean-code" /><category term="testing" /><summary type="html">Reason for Architecture Testing</summary></entry><entry><title type="html">Clean code - Naming convension for design patterns</title><link href="www.ankushchoubey.com/naming-design-patterns/" rel="alternate" type="text/html" title="Clean code - Naming convension for design patterns" /><published>2022-03-12T00:00:00-06:00</published><updated>2022-03-12T14:52:08-06:00</updated><id>www.ankushchoubey.com/design-patterns-naming</id><content type="html" xml:base="www.ankushchoubey.com/naming-design-patterns/">&lt;p&gt;&lt;img src=&quot;/images/naming-design-patterns.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I have been learning design patterns recently. And as a result, implementing them in places that seem fit.&lt;/p&gt;

&lt;p&gt;Usually, these patterns are nice. They make code concise and understandable.&lt;/p&gt;

&lt;p&gt;This is given that the person reading it knows what the design pattern is.&lt;/p&gt;

&lt;p&gt;So to mitigate this problem my current approach is.&lt;/p&gt;

&lt;p&gt;To prefix name of class with the design pattern.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Strategy: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ClassName&amp;gt;Stratergy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Observer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ClassName&amp;gt;Observer&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ClassName&amp;gt;Listener&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ClassName&amp;gt;Callback&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Factory: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ClassName&amp;gt;Factory&lt;/code&gt;. (In case of simple factory: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{methodName}SimpleFactory&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Decorator: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ClassName&amp;gt;Decorator&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Chain of Responsibility: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ClassName&amp;gt;Chain&lt;/code&gt;. Method name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{methodName}Handle&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You get the point.&lt;/p&gt;

&lt;p&gt;Hopefully, this would make it easy for person reading the code to understand how to use it in future.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If there are more tthat can be done, please mention in the comments below. I’ll be happy to know more approaches.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@glencarrie?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Glen Carrie&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/lego?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="clean-code" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/naming-design-patterns.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/naming-design-patterns.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Speeding Up Existing Spring Boot/JUnit tests</title><link href="www.ankushchoubey.com/spring-boot-junit-faster/" rel="alternate" type="text/html" title="Speeding Up Existing Spring Boot/JUnit tests" /><published>2022-03-07T00:00:00-06:00</published><updated>2022-03-07T14:52:08-06:00</updated><id>www.ankushchoubey.com/speeding-up-junit</id><content type="html" xml:base="www.ankushchoubey.com/spring-boot-junit-faster/">&lt;p&gt;There are several ways I recently discovered that increase speed on Spring Boot + JUnit tests substantially. From 8 minutes to 3 minutes.&lt;/p&gt;

&lt;p&gt;Some of these are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use Right Runner (Saved 25% running time)&lt;/li&gt;
  &lt;li&gt;Run tests in parallel (Saved 37% running time)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;use-right-runner&quot;&gt;Use Right Runner&lt;/h1&gt;

&lt;p&gt;There are several runners that come with Spring boot.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt; being the most general of them. Mostly this is used in combination with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@DirtiesContent&lt;/code&gt; which will restart spring boot after every test class by default. This isn’t ideal.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt; is Integration Tests. We don’t want every test to use this.&lt;/p&gt;

&lt;p&gt;We want to load the minimum spring-boot infrastructure as possible and still ensure accurate tests.&lt;/p&gt;

&lt;p&gt;There are a few that can be used.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If tests are related to a DB. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@DataMongoTest&lt;/code&gt; or equivalent JPA runner with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Import&lt;/code&gt; annotation.&lt;/li&gt;
  &lt;li&gt;If tests are related to Web/Controller. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@WebFluxTest&lt;/code&gt; or equivalent Spring MVC runner.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Important&lt;/strong&gt;: If tests require initializing a single bean. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExtendWith(SpringRunner.class)&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Import&lt;/code&gt; to specify bean to initialize.&lt;/li&gt;
  &lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt; is required, try to use it in combination with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Import&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ContextConfiguration&lt;/code&gt; to limit beans creation.&lt;/li&gt;
  &lt;li&gt;The best case: Aim for Tests which are purely java based and do not involve spring boot. This ofcourse isn’t possible for every scenario.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;run-tests-in-parallel&quot;&gt;Run Tests in Parallel&lt;/h2&gt;

&lt;p&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;junit-platform.properties&lt;/code&gt; file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test/resource/junit-platform.properties&lt;/code&gt; and add following minimum. &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;junit.jupiter.execution.parallel.enabled = true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can either use one of these,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;add following to every class you want to run parallel. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Execution(CONCURRENT)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;add more to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;junit-platform.properties&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;junit.jupiter.execution.parallel.mode.default = same_thread|concurrent
junit.jupiter.execution.parallel.mode.classes.default =  same_thread|concurrent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/junit-execution-mode.svg&quot; alt=&quot;&quot; /&gt;
&lt;sup id=&quot;fnref:1:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I prefer first method of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Execution(CONCURRENT)&lt;/code&gt; because some of my tests weren’t designed to run in parallel.&lt;/p&gt;

&lt;p&gt;I found data tests with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@DataMongoTest&lt;/code&gt; by asserting over different data.&lt;/p&gt;

&lt;p&gt;Another positive sideeffect of having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Execution(CONCURRENT)&lt;/code&gt; is that these tests run first. And since these tests are faster, they lead to faster feedback.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution&quot;&gt;Parallel Execution - JUnit Documentation&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="spring-boot" /><summary type="html">There are several ways I recently discovered that increase speed on Spring Boot + JUnit tests substantially. From 8 minutes to 3 minutes.</summary></entry><entry><title type="html">My current approach to TDD</title><link href="www.ankushchoubey.com/current-tdd-approach/" rel="alternate" type="text/html" title="My current approach to TDD" /><published>2022-03-04T00:00:00-06:00</published><updated>2022-03-04T14:52:08-06:00</updated><id>www.ankushchoubey.com/tdd-approach</id><content type="html" xml:base="www.ankushchoubey.com/current-tdd-approach/">&lt;p&gt;This is my current approach to TDD.&lt;/p&gt;

&lt;h2 id=&quot;for-new-development&quot;&gt;For new development:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;I have a rough idea of what I am going to implement. This is optional: If I don’t or I am implementing something too big, I make a simple diagram with diagram.net.&lt;/li&gt;
  &lt;li&gt;I make a class file&lt;/li&gt;
  &lt;li&gt;I hit Ctrl+Shift+T in IntelliJ to quickly create a corresponding test file. I will using the same keyboard pattern to to quickly switch between test and code while doing TDD.&lt;/li&gt;
  &lt;li&gt;I go Ctrl+Shift+T into the class and write the name of method and arguments it may return. The actual return value is set to null.&lt;/li&gt;
  &lt;li&gt;I Ctrl+Shift+T into the test and write the name of method as follows and mention the “WHEN” and “SHOULD” blocks. I don’t know all “WHEN”/”SHOULD” blocks so I’ll write them as time goes.
    &lt;ul&gt;
      &lt;li&gt;“WHEN” blocks define conditions&lt;/li&gt;
      &lt;li&gt;“SHOULD” blocks are atomic and assertable.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainTestClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upsert method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UpsertMethodTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WHEN value IS-NOT in DB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValueNotInDBTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SHOULD insert value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldInsertValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//empty for now&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WHEN value IS in DB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValueInDBTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SHOULD replace value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldReplaceValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//empty for now&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;After any change after this to code or test, I’ll run the wrote test file.&lt;/li&gt;
  &lt;li&gt;I start writing the tests to specify conditions in one “SHOULD” block. Each test is as accurate as possible and any needed behaviour is either asserted or verified.&lt;/li&gt;
  &lt;li&gt;I Ctrl+Shift+T into class and implement code to pass that particular should.&lt;/li&gt;
  &lt;li&gt;The process of writing “WHEN”“SHOULD” blocks, writing the test, CTRL+SHIFT+T and coding in class, running the test again is repeated.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;for-extending-existing-functionality&quot;&gt;For extending existing functionality:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;I go the the implementation class and understand it.&lt;/li&gt;
  &lt;li&gt;I Ctrl+Shift+T/switch to the test.&lt;/li&gt;
  &lt;li&gt;I add or a new “WHEN” or “SHOULD” or “x method” class&lt;/li&gt;
  &lt;li&gt;And then repeat the cycle again.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Relevant Further Reading&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/tdd&quot;&gt;TDD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clean-fast-unit-tests&quot;&gt;Writing Clean and Fast Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tdd" /><category term="software-engineering" /><summary type="html">This is my current approach to TDD.</summary></entry><entry><title type="html">Strategies on Truth</title><link href="www.ankushchoubey.com/truth-stratergies/" rel="alternate" type="text/html" title="Strategies on Truth" /><published>2022-02-24T00:00:00-06:00</published><updated>2022-02-24T14:52:08-06:00</updated><id>www.ankushchoubey.com/truth</id><content type="html" xml:base="www.ankushchoubey.com/truth-stratergies/">&lt;p&gt;&lt;img src=&quot;/images/truth-stratergies.jpg&quot; alt=&quot;&quot; /&gt;
&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;There are family of algorithms/strategy to seek truth. Each one applies to specific cases&lt;/p&gt;

&lt;p&gt;These are some&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Telling truth to yourself completely is most important and easiest&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you aren’t specific. Aka you are wage. Then you aren’t telling the truth&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are with other people and you are not letting them talk, probability is high that you’ll miss the truth&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are saying something memorized, or talking too fast, probability is high you’ll miss the truth&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While understanding something, only if you can explain it deeply. Then you know it. -&amp;gt; Truth&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Best way to do it is to actually teach&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Tests/Questions asked by other or ask by yourself. Unhide thefog. Let’s you get specific. Truth is always specific.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Though counter is specific isn’t always truth but it is still the best guess&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you seek truth, no matter what you are doing or how bad it seems, you’ll be good in the long term.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Problem with truth is acceptance. So point 1 makes it easier.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Like all core values, you have to realize truth completely to accept and integrate it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On one level, all of truth is just effective communication/speech&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Expression of Intend is more important than expession of facts. Expression of intend isn’t always words.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Truths are true events or facts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So you sre going to do something is not the truth. It’s a possibility. We mistake this and believe we done it.&lt;/p&gt;

&lt;p&gt;If you have done something, it’s a truth.&lt;/p&gt;

&lt;p&gt;This is along the lines of why sharing what we are going to do isn’t complete truth yet.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@brunovdkraan?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Bruno van der Kraan&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/truth?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="core-values" /><category term="truth" /><summary type="html">1 Photo by Bruno van der Kraan on Unsplash &amp;#8617;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/truth-stratergies.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/truth-stratergies.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Strategies on Team Work</title><link href="www.ankushchoubey.com/team-work/" rel="alternate" type="text/html" title="Strategies on Team Work" /><published>2022-02-24T00:00:00-06:00</published><updated>2022-02-24T14:52:08-06:00</updated><id>www.ankushchoubey.com/team-work</id><content type="html" xml:base="www.ankushchoubey.com/team-work/">&lt;p&gt;&lt;img src=&quot;/images/team-work.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Treat others the way you want to be treated. Treat yourself the way you want to be treated.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Everyone’s problems/expectations are similar on one level:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;everyones want to share and want to be really listened to their point of view.&lt;/li&gt;
  &lt;li&gt;Everyone want to feel safe and safe enough to trust.&lt;/li&gt;
  &lt;li&gt;Everyone wants to he respected: respected of boundaries (hopefully healthy ones).&lt;/li&gt;
  &lt;li&gt;Everyone want people to support them even if it’s little.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Everyone has ego.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;If you criticize the person, you poke the ego.&lt;/li&gt;
  &lt;li&gt;If you critize an approach, then probability that their ego will be poked in a healthy way and it will be on your side or atleast open to discussion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is to say you don’t want somone to win or lose. You want Win-Win. Win-Win is a win for all parties to a certain degree.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To build trust, you have to trust and try opening up. But open up on solid ground. You don’t want to be naïve because opening up increases probability of being hurt but also it won’t reciprocate. You want to build trust “together”, not being trust one sided.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Everything in “Team Work” is about doing things “together”.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;This one is recent for me&lt;/em&gt;: Let everyone (others and yourself) choose and solve their own local problems.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;They have right to choose what they want to focus on. You may suggest or lead by example. But forcing you opinions rebounds.&lt;/p&gt;

&lt;p&gt;Plus forcing opinions assumes that one really knows “life” which probably no one does fully.&lt;/p&gt;</content><author><name></name></author><category term="core-values" /><category term="team-work" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/team-work.webp" /><media:content medium="image" url="www.ankushchoubey.com/images/team-work.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>