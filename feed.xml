<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2022-02-19T04:52:29-06:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Random Thoughts</subtitle><entry><title type="html">Post Format</title><link href="www.ankushchoubey.com/post-format/" rel="alternate" type="text/html" title="Post Format" /><published>2050-09-26T00:00:00-05:00</published><updated>2021-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/post-format</id><content type="html" xml:base="www.ankushchoubey.com/post-format/">&lt;p&gt;&lt;img src=&quot;/images/switch-jobs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;writing-steps&quot;&gt;Writing Steps&lt;/h2&gt;

&lt;p&gt;If I write from POV that how I got the this idea and how I thought about it, readers will know thinking behing an idea and not just the preachiness. Plus, I’ll always have the right words to write.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Done&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Structure Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Written&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Edited&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Grammar Check Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Perfect Grammarly Score:&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Added  https://www.canva.com/&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Links to Other Posts if Any&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tags Added&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Released Publically&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="draft" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Elements of Good API Design</title><link href="www.ankushchoubey.com/good-api-design/" rel="alternate" type="text/html" title="Elements of Good API Design" /><published>2022-02-19T00:00:00-06:00</published><updated>2022-02-19T14:52:08-06:00</updated><id>www.ankushchoubey.com/elements-of-good-api-design</id><content type="html" xml:base="www.ankushchoubey.com/good-api-design/">&lt;p&gt;Here are somethings about API design that I recently learn’t.&lt;/p&gt;

&lt;p&gt;An HTTP Rest endpoint is divided into following.&lt;/p&gt;

&lt;p&gt;API name and Method&lt;/p&gt;

&lt;p&gt;Request&lt;/p&gt;

&lt;p&gt;Resposne&lt;/p&gt;

&lt;h1 id=&quot;naming&quot;&gt;Naming&lt;/h1&gt;

&lt;p&gt;A good API design has good naming.&lt;/p&gt;

&lt;p&gt;You want to always have API that refer t some “items”/”entity” nouns&lt;/p&gt;

&lt;p&gt;so this is better&lt;/p&gt;

&lt;p&gt;/ducks → get all ducks&lt;/p&gt;

&lt;p&gt;/ducks/{id} → get duck by duck id&lt;/p&gt;

&lt;p&gt;rather than&lt;/p&gt;

&lt;p&gt;/getAllDucks&lt;/p&gt;

&lt;p&gt;/getDuckById&lt;/p&gt;

&lt;p&gt;Any good API has upper format rather than lower.&lt;/p&gt;

&lt;p&gt;Always have plural names&lt;/p&gt;

&lt;h1 id=&quot;request&quot;&gt;Request&lt;/h1&gt;
&lt;h2 id=&quot;request-methods&quot;&gt;Request Methods&lt;/h2&gt;

&lt;p&gt;Now that name is sorted, how to we call these, let’s say we want to delete duck, in the bad way we could have had an API like /deleteDuckById&lt;/p&gt;

&lt;p&gt;But even better is to use HTTP Methods. HTTP Methods provide intend to your API and reduce the number of API endpoints to remember at least from point of view of consumer.&lt;/p&gt;

&lt;p&gt;to read it you read it something like this,&lt;/p&gt;

&lt;p&gt;Intend → API Name&lt;/p&gt;

&lt;p&gt;GET → /ducks&lt;/p&gt;

&lt;p&gt;GET → /ducks/{id}&lt;/p&gt;

&lt;p&gt;DELETE → /ducks/{id}&lt;/p&gt;

&lt;p&gt;POST → /ducks&lt;/p&gt;

&lt;p&gt;Ideally, POST isn’t supposed to be bulk insert.&lt;/p&gt;

&lt;h2 id=&quot;request-headers&quot;&gt;Request Headers&lt;/h2&gt;

&lt;p&gt;Some common onces are&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content-length&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;response&quot;&gt;Response&lt;/h1&gt;

&lt;h2 id=&quot;response-status-code&quot;&gt;Response Status Code&lt;/h2&gt;

&lt;p&gt;There are many standard response codes available.&lt;/p&gt;

&lt;p&gt;200 → OK&lt;/p&gt;

&lt;p&gt;201 → Created (Supposed to not have response body)&lt;/p&gt;

&lt;h2 id=&quot;response-body&quot;&gt;Response Body:&lt;/h2&gt;

&lt;p&gt;HAL Format&lt;/p&gt;

&lt;h2 id=&quot;response-headers&quot;&gt;Response Headers&lt;/h2&gt;

&lt;p&gt;There are standard respose headers available.&lt;/p&gt;

&lt;p&gt;Location: Location of newly created resources.&lt;/p&gt;

&lt;h1 id=&quot;customizing-the-protocol&quot;&gt;Customizing the protocol&lt;/h1&gt;

&lt;p&gt;HTTP does not reenforce a lot of rules. Even though it it recommended ways are set,&lt;/p&gt;

&lt;p&gt;I though Google would follow protocol to the bone but they too don’t. Looking at google drive through Chrome’s network tab, I found they have their own way of doing things.&lt;/p&gt;</content><author><name></name></author><category term="middleware" /><category term="draft" /><summary type="html">Here are somethings about API design that I recently learn’t.</summary></entry><entry><title type="html">Thoughts on Reading Documentation</title><link href="www.ankushchoubey.com/reading-documentation/" rel="alternate" type="text/html" title="Thoughts on Reading Documentation" /><published>2022-02-16T00:00:00-06:00</published><updated>2022-02-16T14:52:08-06:00</updated><id>www.ankushchoubey.com/reading-documentation</id><content type="html" xml:base="www.ankushchoubey.com/reading-documentation/">&lt;p&gt;Reading documentation is the best way to learn a particular technology.&lt;/p&gt;

&lt;p&gt;A well written documentation is similar to a book and reading it has a similar effect.&lt;/p&gt;

&lt;p&gt;Documentation presents the original developer’s philosophy behind the technology.&lt;/p&gt;

&lt;p&gt;Depth of knowledge you gain with documentation can potentially remove hundred of hours of un-neccesary Stackoverflow searches.&lt;/p&gt;

&lt;p&gt;It’s a difference between knowing something syntactially and knowing the philosophy behind a technology.&lt;/p&gt;

&lt;p&gt;Most documentations are about 2-5 hours of reading Max.&lt;/p&gt;

&lt;p&gt;I find having a highlighter extension in Chrome to be extremely useful.&lt;/p&gt;

&lt;p&gt;Apart from the usual, the appendix sections contains many gems like FAQs and common references which make things easier.&lt;/p&gt;</content><author><name></name></author><category term="software-engineering" /><summary type="html">Reading documentation is the best way to learn a particular technology.</summary></entry><entry><title type="html">Articulate Fully</title><link href="www.ankushchoubey.com/articulate/" rel="alternate" type="text/html" title="Articulate Fully" /><published>2022-01-29T00:00:00-06:00</published><updated>2022-01-29T14:52:08-06:00</updated><id>www.ankushchoubey.com/articulate-fully</id><content type="html" xml:base="www.ankushchoubey.com/articulate/">&lt;p&gt;Being able to articulate something fully is the whole game of a knowing if you have a clear mind or not.&lt;/p&gt;

&lt;p&gt;Often you may find that by talking to someone, you are able to find solution to your own problems by yourself. This is because you Before you weren’t able to articulate completely what you’re thinking. By forcing yourself to articulate you make yourself more clear.&lt;/p&gt;

&lt;p&gt;So, if you are stuck at something, be it anything of a kind: A problem you are trying to solve.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Emotional&lt;/li&gt;
  &lt;li&gt;Physical&lt;/li&gt;
  &lt;li&gt;Abstract&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I believe anything than bother’s you should be fully articulated.&lt;/p&gt;

&lt;p&gt;All you need to do is articulate it fully and hopefully as easy as possible. Even forced articulation is better than no articulation.&lt;/p&gt;

&lt;p&gt;There are multiple ways one can force articulation some of them are mentioned below.&lt;/p&gt;

&lt;h2 id=&quot;explain-at-five-levels&quot;&gt;Explain at five levels&lt;/h2&gt;

&lt;p&gt;One of the practices one can person is explain it to pretend or really explain 5 people.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A child&lt;/li&gt;
  &lt;li&gt;A teenager&lt;/li&gt;
  &lt;li&gt;A collage kid&lt;/li&gt;
  &lt;li&gt;A adult&lt;/li&gt;
  &lt;li&gt;A expert&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;contemplate&quot;&gt;Contemplate&lt;/h2&gt;

&lt;p&gt;while contemplating you want to fix certain variables about your problem, and then explain the rest and try to fix those too.&lt;/p&gt;

&lt;p&gt;I find the best way to contemplate is to perform at formal sitting meditation with eyes closed.&lt;/p&gt;

&lt;h2 id=&quot;talkexplain-to-someone-else&quot;&gt;Talk/Explain to someone else&lt;/h2&gt;</content><author><name></name></author><category term="core-values" /><category term="truth" /><summary type="html">Being able to articulate something fully is the whole game of a knowing if you have a clear mind or not.</summary></entry><entry><title type="html">Personal Budgeting</title><link href="www.ankushchoubey.com/personal-budgeting/" rel="alternate" type="text/html" title="Personal Budgeting" /><published>2022-01-28T00:00:00-06:00</published><updated>2022-01-28T14:52:08-06:00</updated><id>www.ankushchoubey.com/budgeting</id><content type="html" xml:base="www.ankushchoubey.com/personal-budgeting/">&lt;p&gt;Many times discussing governments spending, it is discussed how while a budget was allocated, the government didn’t spend as much or they spent more.&lt;/p&gt;

&lt;p&gt;For example, the Education budget was set at 20 billion but only 5 billion was spent. Or they overspent which ate up other areas.&lt;/p&gt;

&lt;p&gt;Usually, these discussions assume that spending the complete budget allocated is best.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Underspending&lt;/strong&gt;: Not doing enough&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Overspending&lt;/strong&gt;: Doing too much and eating into other areas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same can be applied to resources of one’s #life.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I believe these are the most important resources a person spends on.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Time Budget&lt;/li&gt;
  &lt;li&gt;Attention Budget&lt;/li&gt;
  &lt;li&gt;Money Budget&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, given the premise above, the goal is to have a specific time, attention, and money budget for each important area of life and major activity. It isn’t ideal to set budgets for everything (else you won’t have an attention budget).&lt;/p&gt;

&lt;p&gt;Time (in hours) and money (in currency) are easily quantifiable. Attention isn’t.&lt;/p&gt;

&lt;p&gt;For attention, the game becomes imaginary.&lt;/p&gt;

&lt;p&gt;There are a few ways to imagine this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Count the number of decisions in a day:
    &lt;ul&gt;
      &lt;li&gt;Imagine you have 100 decision points in a day.
 The more number decisions you take, the probability of you making a bad decision increases.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Number of context switching
    &lt;ul&gt;
      &lt;li&gt;Multitasking is the worst&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="core-values" /><category term="time-matters" /><summary type="html">Many times discussing governments spending, it is discussed how while a budget was allocated, the government didn’t spend as much or they spent more.</summary></entry><entry><title type="html">Time Assets and Liabilities</title><link href="www.ankushchoubey.com/time-assets-and-liabilities/" rel="alternate" type="text/html" title="Time Assets and Liabilities" /><published>2022-01-26T00:00:00-06:00</published><updated>2022-01-26T14:52:08-06:00</updated><id>www.ankushchoubey.com/time-assets-liabilities</id><content type="html" xml:base="www.ankushchoubey.com/time-assets-and-liabilities/">&lt;p&gt;Time is the most precious finite resource we have. We should make good use of it. If we do, we make time our ally.&lt;/p&gt;

&lt;p&gt;Like any resource, one can think of time in numeric terms. This allows us to categorize activities as assets that add back time or liabilities, which take time away. Our goal then is to create more time-assets with high time-ROI.&lt;/p&gt;

&lt;p&gt;80% of our activities during a given day are not new. They are merely routines.&lt;/p&gt;

&lt;p&gt;So essentially, carefully observing, choosing, and forming our habits would lead to more &lt;strong&gt;time-assets&lt;/strong&gt; and less &lt;strong&gt;time-liabilities&lt;/strong&gt;. Usually, time-assets and time-liabilities are opposites of each other.&lt;/p&gt;

&lt;p&gt;Most time-liabilities snap our attention and lead us to care about wrong things. Therefore, time-assets help us course correct. Therefore, time management is closely linked to attention management.&lt;/p&gt;

&lt;p&gt;Most time assets are generatlly slower and more stuctured which is why they are usually avoided. Time liabilities on the other hand feel easy to get started with so they are done more. So, one needs to make it easy to get started on time-assets and harder to get started on time-liabilities.&lt;/p&gt;

&lt;p&gt;Some of the most impactful time-assets and liabilities are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Time-Assets&lt;/th&gt;
      &lt;th&gt;Time Liabilities&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Planning&lt;/strong&gt;: Even a little bit of planning, something like 10 minutes alone creating a written plan could save hours, days, or even years. &lt;br /&gt;&lt;br /&gt;Planning allows course correction. Ideally, don’t start working without a plan.&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Rushing&lt;/strong&gt;: Though it may seem you are making progress. The probability is higher that you are moving in the wrong direction. It’s better to fix a plan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Meditation&lt;/strong&gt;:&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Instagram&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;5 Min Rule&lt;/strong&gt;: Don’t allow yourself to be down or procrastinate for more than 5 minutes. &lt;br /&gt;&lt;br /&gt;During such time ask yourself: Is this worth the return on my time?&lt;br /&gt;&lt;br /&gt;Remember you can’t live forever.&lt;/td&gt;
      &lt;td&gt;Forever Rule: &lt;strong&gt;The opposite of 5 min rule&lt;/strong&gt;: Letting fear/laziness/indecision stop you.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;WIP Limit&lt;/strong&gt;: Focus on a few things and complete them. If your WIP limit is exceeded, don’t add work on newer tasks unless older ones are complete.&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Trying to change people&lt;/strong&gt;: You cannot change people. You can suggest but cannot force. Leading by example. It’s the best option you have.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Pomodoro&lt;/strong&gt;: Working in Pomodoros keeps you focused. If you can’t work with Pomodoro, you haven’t planned carefully enough.&lt;br /&gt;&lt;br /&gt;To have Pomodoro sessions.&lt;br /&gt;1. Create a distraction-free zone.&lt;br /&gt;2. Plan your tasks. Ideally, pick a deliverable.&lt;br /&gt;3. Put on headphones and play instrumental/&lt;a href=&quot;https://www.youtube.com/playlist?list=PLx65qkgCWNJIs3FPaj8JZhduXSpQ_ZfvL&quot;&gt;focus music&lt;/a&gt;.&lt;br /&gt;4. Work on the task using &lt;a href=&quot;https://pomofocus.io/&quot;&gt;a Pomodoro app&lt;/a&gt;.&lt;br /&gt;5. Stick to break schedule religiously. Get away from the room during the break but no internet. &lt;br /&gt;&lt;br /&gt;One Pomodoro is better than zero Pomodoro.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;During normal decision-making, one can calculate the ROI of their actions: think about how much time you’ll invest and how much return you’ll get back. This calculation needs to be a specific number in terms of both hours and percentage even if it’s an estimate.&lt;/p&gt;</content><author><name></name></author><category term="core-values" /><category term="time-matters" /><category term="philosophical" /><summary type="html">Time is the most precious finite resource we have. We should make good use of it. If we do, we make time our ally.</summary></entry><entry><title type="html">Maintaining Documentation</title><link href="www.ankushchoubey.com/documentation/" rel="alternate" type="text/html" title="Maintaining Documentation" /><published>2022-01-25T00:00:00-06:00</published><updated>2022-01-25T14:52:08-06:00</updated><id>www.ankushchoubey.com/documentation</id><content type="html" xml:base="www.ankushchoubey.com/documentation/">&lt;p&gt;We ideally want to write code so well that someone reading the code can understand it in one go.&lt;/p&gt;

&lt;p&gt;But the ideal isn’t always practical in the real world because people come from different backgrounds and experiences.&lt;/p&gt;

&lt;p&gt;So, you want to make sure your documentation is as perfect as possible given the project scope.&lt;/p&gt;

&lt;p&gt;If the API/Library is going to be used by the public, it needs to be perfect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2022-01-25-documentation/shared-between-single-team-multiple.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The biggest problem is maintaining up-to-date documentation. These are a few things I have learned recently about this:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: left; width: 300px;&quot; src=&quot;https://docs.google.com/drawings/d/e/2PACX-1vS1EYND3yzq_zmJEZ1rEJogTD9tbXucE2k33rcUYIVTcA2ZQZlYfPf_MSVk8kvHZhjcKo7fByRiXFpy/pub?w=453&amp;amp;h=723&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-the-best-way-to-document-is-to-automate&quot;&gt;1. The best way to document is to automate&lt;/h2&gt;

&lt;p&gt;Tools like Swagger for APIs and storybook from UI components make it very easy to auto-document code in most cases.&lt;/p&gt;

&lt;h2 id=&quot;2-encourage-use-of-your-own-documentation&quot;&gt;2. Encourage use of your own documentation&lt;/h2&gt;

&lt;p&gt;Using your own documentation would help you find and fix bugs in it.&lt;/p&gt;

&lt;p&gt;For example, You could encourage your team to use Swagger UI instead of Post Man for testing APIs.&lt;/p&gt;

&lt;h2 id=&quot;3-for-within-the-team-have-a-shared-wiki&quot;&gt;3. For within the team: Have a shared wiki&lt;/h2&gt;

&lt;p&gt;Wiki helps keep everyone in sync and like the previous point, encourages updations wherever necessary.&lt;/p&gt;

&lt;h2 id=&quot;4-tests-are-also-documentation-of-sorts-but-for-the-internal-team-only&quot;&gt;4. Tests are also documentation of sorts but for the internal team only.&lt;/h2&gt;

&lt;p&gt;Tests capture what the code would do. So for a new dev on a team, going and reading through tests can give him an idea of what the code does.&lt;/p&gt;</content><author><name></name></author><category term="clean-code" /><summary type="html">We ideally want to write code so well that someone reading the code can understand it in one go.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://docs.google.com/drawings/d/e/2PACX-1vS1EYND3yzq_zmJEZ1rEJogTD9tbXucE2k33rcUYIVTcA2ZQZlYfPf_MSVk8kvHZhjcKo7fByRiXFpy/pub?w=453&amp;amp;h=723" /><media:content medium="image" url="https://docs.google.com/drawings/d/e/2PACX-1vS1EYND3yzq_zmJEZ1rEJogTD9tbXucE2k33rcUYIVTcA2ZQZlYfPf_MSVk8kvHZhjcKo7fByRiXFpy/pub?w=453&amp;amp;h=723" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Writing Clean and Fast Unit Tests</title><link href="www.ankushchoubey.com/clean-fast-unit-tests/" rel="alternate" type="text/html" title="Writing Clean and Fast Unit Tests" /><published>2022-01-02T00:00:00-06:00</published><updated>2022-01-02T14:52:08-06:00</updated><id>www.ankushchoubey.com/formatting-tests</id><content type="html" xml:base="www.ankushchoubey.com/clean-fast-unit-tests/">&lt;p&gt;Clean tests are as important as clean code. Same kind of principles apply here.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Test only what is neccessary&lt;/li&gt;
  &lt;li&gt;Keep code clean&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;while TDD, is shown to keep test cases to a minimum, this post explains some other ways tests can be organize&lt;/p&gt;

&lt;p&gt;The goal with testing is to make it as english sentence like as possible.&lt;/p&gt;

&lt;p&gt;You want someone who has not seen codebase to read your tests and understand what your code does. In that way, testing is a documentation for your code.&lt;/p&gt;

&lt;p&gt;Here are some strategies to achieve it.&lt;/p&gt;

&lt;h1 id=&quot;prefix-name-of-test-classes-with-unitinte&quot;&gt;Prefix name of test classes with Unit/Inte&lt;/h1&gt;

&lt;p&gt;This will help limit scope of the test class to be certain types of tests&lt;/p&gt;

&lt;h1 id=&quot;have-fluent-assertions&quot;&gt;Have Fluent Assertions&lt;/h1&gt;

&lt;p&gt;Libraries like AssertJ make it easy to write tests which sound like english&lt;/p&gt;

&lt;h1 id=&quot;create-test-data-generator-method-or-builder&quot;&gt;Create Test Data Generator Method or Builder&lt;/h1&gt;

&lt;p&gt;-&amp;gt; https://www.youtube.com/watch?v=zH2cz1o9Vsg&lt;/p&gt;

&lt;h1 id=&quot;create-test-helper-methods&quot;&gt;Create test helper methods&lt;/h1&gt;

&lt;h1 id=&quot;group-tests-together&quot;&gt;Group Tests Together&lt;/h1&gt;

&lt;p&gt;You should group your tests together. This would make it easier to find your tests&lt;/p&gt;

&lt;p&gt;Junit and Jest both allow for grouping of tests.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In JUnit 5 you can use @NestClasses&lt;/li&gt;
  &lt;li&gt;In Jest you can use describe&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example:&lt;/h2&gt;

&lt;h3 id=&quot;junit&quot;&gt;JUnit:&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainTestClass&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Group of tests&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MethodNameTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jest&quot;&gt;Jest:&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Group of tests&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;


    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;have-global-mocksstub-object&quot;&gt;Have global mocks/stub object&lt;/h1&gt;

&lt;p&gt;Your tests should be as small as possible. Rather than create objects in every test method, Create a dummy stub and use it in all subsiqueny tests&lt;/p&gt;

&lt;p&gt;In Junit you can have @BeforeEach and @BeforeAll annotations to have methods run before each test case or test class.&lt;/p&gt;

&lt;h1 id=&quot;mock-object&quot;&gt;Mock object&lt;/h1&gt;

&lt;h2 id=&quot;naming&quot;&gt;Naming&lt;/h2&gt;

&lt;p&gt;In case I am testing a positive response, I usually name variable as such.&lt;/p&gt;

&lt;p&gt;If it is a variable which is bad, prefix it with bad&lt;/p&gt;

&lt;p&gt;example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;idealHttpHeader&lt;/li&gt;
  &lt;li&gt;goodFuture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it’s a bad response,&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;badHttpHeader&lt;/li&gt;
  &lt;li&gt;badHttpHeaderWithoutContentType&lt;/li&gt;
  &lt;li&gt;badFuture&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;never-generate-random-inputs-always-use-fixed-values-&quot;&gt;Never generate random inputs. Always use fixed values. &lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h1 id=&quot;start-with-method_should__whenwith_-or-itshould__when_&quot;&gt;Start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method_should_&amp;lt;&amp;gt;_when/with_&amp;lt;&amp;gt;()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;itShould_&amp;lt;&amp;gt;_When_&amp;lt;&amp;gt;&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;This makes you focus on exactly what you are testing.&lt;/p&gt;

&lt;p&gt;Though you can remove the should part too.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;GroupName: Add function&lt;/li&gt;
  &lt;li&gt;TestName: Should work with negative values: add_shouldWork_withNegativeValues&lt;/li&gt;
  &lt;li&gt;TestName: Should work with positive values: add_shouldWork_withPositiveValues&lt;/li&gt;
  &lt;li&gt;TestName: Should work with floating point values: add_shouldWork_withFloatingPoint&lt;/li&gt;
  &lt;li&gt;TestName: Should raise exception when input is null: add_shouldRaiseException_whenInputisNull&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;given-when-then&quot;&gt;Given When Then&lt;/h1&gt;

&lt;p&gt;Given When then is how most tests are written.&lt;/p&gt;

&lt;p&gt;Start the tests which fixing the input values and mocking -&amp;gt; Given
Call the function in test -&amp;gt; when
Assert Responses -&amp;gt; then&lt;/p&gt;

&lt;h1 id=&quot;size-of-tests-should-be-less-than-size-of-your-display&quot;&gt;Size of tests should be less than size of your display&lt;/h1&gt;

&lt;p&gt;This is a useful guideline which applies to a normal clean code too.&lt;/p&gt;

&lt;h2 id=&quot;assertions&quot;&gt;Assertions&lt;/h2&gt;

&lt;p&gt;Best Practice: One logical assertion per test method. &lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Have clear error messages &lt;sup id=&quot;fnref:5:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Aim for asserting behavior and not implementation detail. More coupled your tests are with implementation, harder the refactoring would be.&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-fluent-assertions&quot;&gt;Use fluent assertions&lt;/h2&gt;

&lt;p&gt;Librarie&lt;/p&gt;

&lt;h1 id=&quot;writing-tests-that-run-fast&quot;&gt;Writing tests that run fast&lt;/h1&gt;

&lt;h2 id=&quot;time-complexity-of-tests-shoud-be-o1-&quot;&gt;Time complexity of tests shoud be O(1) &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Cyclomatic time complexity of your tests should be O(1).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No loops&lt;/li&gt;
  &lt;li&gt;No if statements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;for-spring-boot&quot;&gt;For Spring Boot&lt;/h2&gt;

&lt;h3 id=&quot;initialize-only-beans-you-need-using-contextconfiguration-&quot;&gt;Initialize only beans you need using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ContextConfiguration&lt;/code&gt; &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ContextConfiguration&lt;/code&gt; won’t start the whole spring infrastructure. This making your tests faster.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=fr1E9aVnBxw&quot;&gt;YouTube: DevOxx: Effective Unit Testing by Eliotte Rusty Harold&lt;/a&gt; (This includes tips on debugging and refactoring) &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:5:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.testim.io/blog/unit-testing-best-practices/&quot;&gt;Unit Testing Best Practices: 9 to Ensure You Do It Right&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://cucumber.io/blog/bdd/getting-started-with-bdd-part-1/&quot;&gt;Cucumber: Blog: Getting Started with BDD (Part 1)&lt;/a&gt; &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=W40mpZP9xQQ&quot;&gt;YouTube: Continous Delivery: The 3 Types of Unit Test in TDD&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Ekr4jxOIf4c&quot;&gt;YouTube: Defog Tech: Spring Boot - Testing basics&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="clean-code" /><category term="testing" /><category term="draft" /><summary type="html">Clean tests are as important as clean code. Same kind of principles apply here.</summary></entry><entry><title type="html">Thoughts on Test Driven Development</title><link href="www.ankushchoubey.com/tdd/" rel="alternate" type="text/html" title="Thoughts on Test Driven Development" /><published>2021-12-24T00:00:00-06:00</published><updated>2021-12-24T14:52:08-06:00</updated><id>www.ankushchoubey.com/tdd</id><content type="html" xml:base="www.ankushchoubey.com/tdd/">&lt;p&gt;Software engineering isn’t only about code. It’s engineering&lt;/p&gt;

&lt;p&gt;TDD need not be a big deal. It can seem cubersome but there are mindsets and tools that can make transition smoother.&lt;/p&gt;

&lt;p&gt;TDD is shown to reduce defectsby a large margin. Tests will save you time in the long run.&lt;/p&gt;

&lt;p&gt;There are my initial thoughts on test driven development.&lt;/p&gt;

&lt;h2 id=&quot;why-tdd&quot;&gt;Why TDD?&lt;/h2&gt;

&lt;p&gt;If you are doing TDD, you do not need to setup and interact external systems before implementation.&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; You can use their mocks.&lt;/p&gt;

&lt;p&gt;Both tests and code is cleaner and precise.&lt;/p&gt;

&lt;h2 id=&quot;the-three-laws-of-tdd&quot;&gt;The Three Laws of TDD&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;You are not allowed to write any production code unless it is to make a failing unit test pass.&lt;/li&gt;
  &lt;li&gt;You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.&lt;/li&gt;
  &lt;li&gt;You are not allowed to write any more production code than is sufficient to pass the one failing unit test.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-tdd&quot;&gt;How to TDD?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Assume the test will work properly, what is the minimum test? Write that test.&lt;/li&gt;
  &lt;li&gt;Fix compilation errors if any. &lt;sup id=&quot;fnref:1:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Write minimum code required to pass the test.&lt;/li&gt;
  &lt;li&gt;Run all the tests&lt;/li&gt;
  &lt;li&gt;Iterate&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;making-tdd-easier&quot;&gt;Making TDD easier&lt;/h1&gt;

&lt;h2 id=&quot;usually-tdd-can-be-cumbersome-because&quot;&gt;Usually TDD can be cumbersome because:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Testing is extra code&lt;/li&gt;
  &lt;li&gt;You have to switch between current code and tests&lt;/li&gt;
  &lt;li&gt;you have to rerun tests&lt;/li&gt;
  &lt;li&gt;No one does it&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mitigrations&quot;&gt;Mitigrations&lt;/h2&gt;

&lt;h3 id=&quot;1-tdd-is-a-todo-list-of-feature-to-do&quot;&gt;1. TDD is a todo list of feature to do&lt;/h3&gt;

&lt;p&gt;By writing test first, you get clear on what you want to implement. This leads to better design.&lt;/p&gt;

&lt;h3 id=&quot;2-switch-between-testing-and-code-easily&quot;&gt;2. Switch between testing and code easily&lt;/h3&gt;

&lt;p&gt;In intellij press Ctrl + Shift + T
for vs code : https://marketplace.visualstudio.com/items?itemName=Acino.jump-source&lt;/p&gt;

&lt;h3 id=&quot;3-rerun-tests-automatically&quot;&gt;3. Rerun tests automatically&lt;/h3&gt;

&lt;p&gt;On local: have tests run automatically after each save&lt;/p&gt;

&lt;p&gt;Given when tehn
Search for libraries that make easier to test&lt;/p&gt;

&lt;h3 id=&quot;4-no-one-does-it&quot;&gt;4. No one does it&lt;/h3&gt;

&lt;p&gt;Yeah. It takes times to learn. TDD/any development practice is easier when whole company is aiming at it or enforcing it.&lt;/p&gt;

&lt;p&gt;https://spring.io/guides
https://daveceddia.com/what-to-test-in-react-app/
https://daveceddia.com/getting-started-with-tdd-in-react/&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;draft&lt;/p&gt;

&lt;p&gt;write experimental/learning code in a separate project. but always write production code with TDD.&lt;/p&gt;

&lt;p&gt;fast feedback&lt;/p&gt;

&lt;p&gt;find fastest and tighest feedback&lt;/p&gt;

&lt;p&gt;TDD leads to fast feedback&lt;/p&gt;

&lt;p&gt;to refactor you need really good tests&lt;/p&gt;

&lt;p&gt;seeing a test fail is a test that feature is not implemented. sometimes it may happen that the new test passes which means the feature is already implemented and you had forgotten to assert it. or your system is not working properly.&lt;/p&gt;

&lt;p&gt;“I don’t know what I am going to build” 
business? -&amp;gt; ask them for clarificaiton
logic -&amp;gt; get away from screen and plan properly 
side effect -&amp;gt; read documentation. write a lot of little program. repl command line interface to test/learn libraries. jshell?&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/watch?v=9-cyC6O81Bk&lt;/p&gt;

&lt;p&gt;// it’s hard to decide what to test when you are writing tests later
if you write tests later, you do it for what is working.&lt;/p&gt;

&lt;p&gt;TDD only that much functionality and nothing more
only test what’s within the class. not outside it [ANkush]&lt;/p&gt;

&lt;p&gt;mentally it can be worth thinking as red green refactor as checklist&lt;/p&gt;

&lt;p&gt;refactoring while doing tdd&lt;/p&gt;

&lt;p&gt;read the tests first&lt;/p&gt;

&lt;p&gt;// it’s hard to decide what to test when you are writing tests later
if you write tests later, you do it for what is working.&lt;/p&gt;

&lt;p&gt;ATDD: THe team decides acceptance criteria first before implementing 
acceptance criteria should be defined well for each story. Tips:&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAAAGmNOsBErk1_7cbjUHllOPVUE5M-NvcOKc/?lipi=urn%3Ali%3Apage%3Ad_flagship3_feed%3Bd5ZjyftfQoKiUju1OpMyEA%3D%3D&quot;&gt;Anadi Misra&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="testing" /><category term="clean-code" /><category term="draft" /><summary type="html">Software engineering isn’t only about code. It’s engineering</summary></entry><entry><title type="html">Angular and React Comparison</title><link href="www.ankushchoubey.com/angular-react-comparison/" rel="alternate" type="text/html" title="Angular and React Comparison" /><published>2021-12-04T00:00:00-06:00</published><updated>2021-12-04T14:52:08-06:00</updated><id>www.ankushchoubey.com/angular-react-comparison</id><content type="html" xml:base="www.ankushchoubey.com/angular-react-comparison/">&lt;p&gt;&lt;img src=&quot;/images/angular-react-comparison.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Angular and React though they are competitors aren’t in a completely fair league. This is because one is a full-fledged framework and one is not. It may be better to compare Angular with a React framework like Next.js.&lt;/p&gt;

&lt;p&gt;There are things I like about both.&lt;/p&gt;

&lt;h2 id=&quot;language&quot;&gt;Language&lt;/h2&gt;

&lt;p&gt;Angular comes with typescript by default. Typescript is much more superior to JS. React can be used with typescript too but it’s a developer’s choice.&lt;/p&gt;

&lt;h2 id=&quot;react-is-easy-to-get-started&quot;&gt;React is easy to get started&lt;/h2&gt;

&lt;p&gt;Especially with functional components, getting started with react is too easy.&lt;/p&gt;

&lt;h2 id=&quot;react-has-too-many-little-things-to-take-care-of&quot;&gt;React has too many little things to take care of.&lt;/h2&gt;

&lt;p&gt;Strength can be a weakness or one could say React isn’t a full framework.&lt;/p&gt;

&lt;p&gt;React has too much to learn. And every project is essentially different.&lt;/p&gt;

&lt;p&gt;Angular comes with preferred ways of doing things which I like more than base React. Angular has everything important built-in. So you’ll find every Angular project uses the same set of libraries for common tasks like rest call (HttpClient). There is less to learn and remember.&lt;/p&gt;

&lt;p&gt;You essentially want to reduce knowing a lot of things so that you can focus on getting stuff done.&lt;/p&gt;

&lt;h2 id=&quot;code-cleanliness&quot;&gt;Code Cleanliness&lt;/h2&gt;

&lt;p&gt;Assuming React is used with Typescript, functional react with hooks is a much better way of creating components than class-based React and Angular.&lt;/p&gt;

&lt;p&gt;Plus I like JSX (React) than HTML templating(Angular), it’s concise and there is less to remember. HTML templating in angular requires remembering an additional set of code (ngFor, ngIf, etc). In JSX, it’s the same language used while creating components.&lt;/p&gt;

&lt;p&gt;The code structure is much better in angular projects.&lt;/p&gt;

&lt;p&gt;Every angular project is structured similarly.&lt;/p&gt;

&lt;p&gt;By default, CSS management is also better in angular. Every component has its own CSS. Parent components can have the same CSS namings and it would not affect child components unless specified (:host ::ng-deep).&lt;/p&gt;

&lt;p&gt;React can also do this by using css modules.&lt;/p&gt;</content><author><name></name></author><category term="web-development" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/angular-react-comparison.png" /><media:content medium="image" url="www.ankushchoubey.com/images/angular-react-comparison.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>