<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2023-04-28T11:48:10-05:00</updated><id>https://www.ankushchoubey.com/feed.xml</id><title type="html">Ankush Choubey</title><subtitle>Full Stack Developer - Cloud/Microservices</subtitle><entry><title type="html">Why should you be internally disciplined?</title><link href="https://www.ankushchoubey.com/v1/internal-discipline/" rel="alternate" type="text/html" title="Why should you be internally disciplined?" /><published>2023-05-22T00:00:00-05:00</published><updated>2023-05-22T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-why-internal-discipline</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/internal-discipline/"><![CDATA[<p><img src="/images/v1-internal-discipline.jpg" alt="" /></p>

<p>Photo by <a href="https://unsplash.com/@jontyson?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Jon Tyson</a> on <a href="https://unsplash.com/s/photos/hard-work?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>

<p>I realized the root cause of why even when I created a had so many systems. I was failing. Because their systems were all external. I needed something internal that drives me. I needed Discipline.</p>

<h2 id="internal-discipline-is-the-source-of-truth-and-it-gets-the-job-done">Internal Discipline is the source of truth and it gets the job done</h2>

<p>You cannot rely on motivation. Motivation is fickle and fragile.</p>

<p>Discipline on the other hand is antifragile. It gets the job done and done fully.</p>

<p>You can rely on discipline. It’s the only source of predicting the future. You can count on it.</p>

<h2 id="internal-discipline-gets-all-jobs-done">Internal Discipline gets all jobs done</h2>

<p>If the task is small, it gets done. If the task is big, it gets done. It doesn’t matter what the task is. Is it hard? Does it make you fearful? Does not matter.</p>

<p>If you have discipline. You get it done.</p>

<h2 id="internal-discipline-eliminates-the-need-for-how-searching-answers">Internal Discipline eliminates the need for “how” searching answers</h2>

<ul>
  <li>How do you work out? → You work out.</li>
  <li>How do you learn to program? → You learn to program.</li>
  <li>How do you wake up in the morning → You wake up in the morning.</li>
</ul>

<p>Discipline makes most “how” questions irrelevant. Therefore, it’s a time saver.</p>

<h2 id="internal-discipline-makes-you-stronger">Internal Discipline makes you stronger</h2>

<p>Internal discipline demands being strong and doing things despite the adversities we face. These adversities can be in the form of feelings, tiredness, weakness, or outside factors. Overcoming these daily makes us stronger.</p>

<h2 id="by-focusing-on-internal-discipline-the-goals-and-systems-will-take-care-of-themselves">By focusing on internal-discipline, the goals, and systems will take care of themselves</h2>

<p>You should be the driver of yourself. Not externalities.</p>

<p>Externalities even systems are fragile. Internal Self Discipline is Anti-Fragile!</p>

<p>The problem is your systems will also fail if you are lethargic and lazy. Internal Discipline will not allow that!</p>

<p>You will be better at managing that and updating your systems if you are disciplined! Therefore, by being disciplined your systems would also not fail.</p>

<p>When you have internal discipline, you may not need external discipline or external systems. You are internally driven.</p>]]></content><author><name></name></author><category term="philosophical" /><category term="non-technical" /><category term="discipline" /><summary type="html"><![CDATA[Internal discipline is an antifragile source of motivation that gets the job done, eliminates the need for "how" questions, makes you stronger, and allows you to focus on achieving your goals without relying on external systems or motivators.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/v1-internal-discipline.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/v1-internal-discipline.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Decoding the difference between healthy love and unhealthy attachment, and choosing healthy love.</title><link href="https://www.ankushchoubey.com/v1/love-attachment/" rel="alternate" type="text/html" title="Decoding the difference between healthy love and unhealthy attachment, and choosing healthy love." /><published>2023-04-28T00:00:00-05:00</published><updated>2023-04-28T15:42:15-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-love-attachment</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/love-attachment/"><![CDATA[<p>Photo by <a href="https://unsplash.com/@cbeloch?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" title="‌">Christopher Beloch</a> on <a href="https://unsplash.com/images/feelings/love?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" title="‌">Unsplash</a></p>

<h2 id="why-is-it-important-to-differentiate-between-love-and-attachment">Why is it important to differentiate between love and attachment?</h2>

<p>We pedestalize love. We feel it’s a cure-all for all problems. Maybe it is. But are we actually in love? or is it just an attachment?</p>

<p>Understanding the difference between love and attachment will help us make better decisions.</p>

<ol>
  <li>It’ll make us not do things out of attachment. Attachment leads to stupidity.</li>
  <li>It’ll help us understand and grow love. :)</li>
</ol>

<p>So once we understand our thought is based on attachment, we can break out of it.</p>

<p>Attachment is called Moh in Hindi. And it’s one of the great sins.</p>

<h2 id="what-is-the-difference-between-love-and-attachment">What is the difference between love and attachment?</h2>

<p>We often confuse love and attachment. Here is what the difference is.</p>

<p>If we are doing something or thinking something for the benefit of others, we are in love. If we are doing something or thinking of something for the benefit of ourselves and wrapping someone else in it to act a certain way it’s attachment.</p>

<p>The central focus of love is the well-being of the other. You may argue that healthy love is the well-being of both others and ourselves. Attachment on the other hand is just our well-being of ourselves.</p>

<h2 id="how-should-we-catch-ourselves-and-act-in-love-and-attachment">How should we catch ourselves and act in love and attachment?</h2>

<p>Below are three paths that can help you understand if you are in love or attachment.</p>

<h3 id="understanding-it-logically-can-be-used-day-to-day">Understanding it logically [Can be used day to day]</h3>

<p>Understanding your logical reasonings can give you a feel for if you are in love or just acting out of attachment.</p>

<p>The principle remains the same: if the focus is us, it’s attachment. If the focus is the well-being of another person, it’s love.</p>

<h4 id="example-1">Example 1</h4>

<ul>
  <li>I want someone to stay in my life, is attachment.</li>
  <li>I wish someone the best life he or she can have with or without me, is love.</li>
</ul>

<h4 id="example-2">Example 2</h4>

<ul>
  <li>I want my kid to do what I want him to do, is attachment.</li>
  <li>I want my kid to do his best, is love.</li>
</ul>

<p><strong>Exercise</strong>:</p>

<ol>
  <li>You can also exercise this by listening to different songs and identify parts that are out of love and ones that are out of attachment.</li>
  <li>Think about how you acted the last time, were you doing something for yourself or the benefit of other.</li>
</ol>

<p>There is also a sacrificial element in love. We sacrifice our own desires for others.</p>

<h4 id="example-1-1">Example 1</h4>

<ul>
  <li>We don’t like walking. But the other person likes walking. They find it meaningful and a bonding time. We sometimes, maybe not often, go for a walk because the other person likes it.</li>
</ul>

<p>This can well be expanded into giving up our own comfort for the other person. Like, moving to a new city <strong>for them</strong>, because it makes them happy.</p>

<h4 id="example-2-1">Example 2</h4>

<ul>
  <li>The other person is facing a problem. And we give up doing what we most enjoy to solve their problem.</li>
</ul>

<h3 id="understanding-via-attachment-styles">Understanding via Attachment Styles</h3>

<p>Attachment styles are how we relate to other people. For example, you may be <strong>avoidant</strong> of your sibling but <strong>anxious</strong> to your parents but <strong>assertively secure</strong> with your colleagues.</p>

<p>There are 4 attachment styles:</p>

<ol>
  <li><strong>Secure</strong> → This should be our aim</li>
  <li><strong>Anxious</strong> → This makes you worried and overdo.</li>
  <li><strong>Avoidant</strong> → This is where you avoid your own partner</li>
  <li><strong>Anxious</strong> Avoidant → This is a mix of anxious and avoidant.</li>
</ol>

<p>You can have different attachment styles to different people. But in love, we usually have the same attachment style as we had with our parents in early childhood.</p>

<p>Anxious, avoidant and anxious avoidant are all unhealthy attachments.</p>

<p>By learning about your attachment style, you can identify behaviors that are common in that style. For example, I am becoming secure but anxious. Here are some common things I did.</p>

<ul>
  <li>Write a message and then delete it.</li>
  <li>Ping them constantly</li>
  <li>Fear something is going wrong and constantly seek validation.</li>
  <li>Think about them all day instead of working.</li>
  <li>Give up my own dreams to accommodate there’s.</li>
  <li>Watch the same shows as they watched and stopped watching what I liked.</li>
  <li>Not sharing how I really feel because it may lead to rejection.</li>
</ul>

<p>The list goes on and on.</p>

<p>For someone avoidant, they prefer independence. And have behaviors such as:</p>

<ul>
  <li>Not opening up.</li>
</ul>

<p>There are more but these are some I know but learning can help you understand yourself and the other person better.</p>

<p>If you are anxious or avoidant, you should aim toward becoming <strong>secure</strong>. I’ll write a post about it some other day.</p>

<h3 id="are-you-pedestalizing-love">Are you pedestalizing love?</h3>

<p>Attachment makes us control the outcome. It makes us irrational.</p>

<p>Do you feel only think about love? Or see it as a cure-all? If yes, you are attached.</p>

<h2 id="how-love-relates-to-giving-up-control">How love relates to giving up control?</h2>

<p>Attachment makes us control the outcome. It makes us irrational. We can’t control the outcome.</p>

<p>Love makes us give up on the outcome. Healthy love gives both yourself and the other person some control.</p>

<h2 id="we-cant-be-100-in-love-but-we-can-always-do-better-than-we-are"><strong>We can’t be 100% in love. But we can always do better than we are.</strong></h2>

<p>We can’t always be in love. We are selfish by nature and that isn’t a bad thing in moderation. We need to manage our self-interest and the self-interest of others.</p>

<p>We don’t want to be a giver (anxious) or just a taker (avoidant), we want a balance of both.</p>

<p>The best way to go about it is to identify your attachment style, understand when you acting out of love or attachment, act more in love and give up control. :)</p>

<p><img src="/images/v1-love-attachment.jpg" alt="" /></p>]]></content><author><name></name></author><category term="love" /><category term="team-work" /><category term="non-technical" /><summary type="html"><![CDATA[Love is a selfless emotion that focuses on the well-being of the other person, while attachment is a selfish emotion that centers on our own well-being. It's essential to catch ourselves when we act out of attachment and try to shift our focus to acting out of love]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/v1-love-attachment.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/v1-love-attachment.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Karma and Karmafal - An Introduction</title><link href="https://www.ankushchoubey.com/v1/karma-karmafal/" rel="alternate" type="text/html" title="Karma and Karmafal - An Introduction" /><published>2023-04-20T00:00:00-05:00</published><updated>2023-04-20T15:42:15-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-karma-karmafal</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/karma-karmafal/"><![CDATA[<p><img src="/images/v1-karma-karmafal.jpg" alt="Karma and Karmafal" /></p>

<p>Photo by <a href="https://unsplash.com/@jessedo81?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">jesse orrico</a> on <a href="https://unsplash.com/photos/IdjxBF_StBk?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>

<h2 id="what-is-karma">What is Karma?</h2>

<p>Karma is the Hindi world for action. According to Hinduism, we should do the right action. And we should take the right action voluntarily despite the challenges we face because it is the best possible path.</p>

<p>Karma, the action, is always something in our control. The result of our actions, karmafal, is not in our control.</p>

<h2 id="karmafal-the-results-of-our-karma">Karmafal: The results of our karma</h2>

<p>There are things outside of us that we can influence, but it doesn’t mean that we control them. We don’t even control our bodies, we influence them with Karma, and the right Karma or even approximately right karma would push us in the right direction.</p>

<p>For example, let’s say you want to get fit, you start exercising and you influence the outcome of getting fit, but it doesn’t mean you get fit. It may be that you are following the wrong diet, which is fine, you just have to update your diet. Or it could be something outside of your control, like a disease like Thyroid which may be leading you to be overweight or underweight.</p>

<h2 id="detach-ourselves-from-controlling-the-outcome-control-the-input">Detach ourselves from controlling the outcome. Control the input</h2>

<p>Doing Karma is in our control. Having the Karmafal, the result of our karma is not in our control.</p>

<p>We are influenced by many things that weren’t our choice, neither those are results of our actions but are our responsibility. There is a randomness to life. Like in the previous example with a disease, it’s likely not our choice to have a disease, but let’s say we have it, now our best bet is to take good action going forward.</p>

<p>This may sound depressing, but it’s actually empowering. In any situation, we can’t control the results, but we do have the ability to influence the results.</p>

<p>We should abandon the idea of controlling the outcome. We can control the input, we can do our karma to our best and let the outcome be influenced, and the resultant tiny influence we see in the outcome may be enough.</p>

<p>This also keeps you free. When you are not attached to the outcome means that you are not terrified by it. For example, if you like someone, and they are doing something stupid if you are attached to how they may feel, you may never tell them how you feel. And they may continue to do something stupid. When you are not attached to the outcome, you can tell them how you feel (maybe you can learn to be kind), and your input may help them. To take action according to your input is their lookout and their action. It’s not something in your control, but you have influenced it and given them the tools and your thoughts to help them make a better choice.</p>

<p>We control how we play. We don’t control if it rains or not, we control if we go for a run. We don’t control if we get 1000 views, we control how well we present our ideas.</p>

<hr />

<h2 id="further-reading">Further Reading</h2>

<p><a href="https://dailystoic.com/all-you-control-is-how-you-play/">Daily Stoic: You Control How You Play</a></p>]]></content><author><name></name></author><category term="responsibility" /><category term="non-technical" /><summary type="html"><![CDATA[Karma is the action we take, while Karmafal is the result of our actions, and by detaching ourselves from the outcome, we can focus on doing our best and live a more empowered life.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/v1-karma-karmafal.jpg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/v1-karma-karmafal.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">5 Simple Things to Improve Backend and Frontend Performance</title><link href="https://www.ankushchoubey.com/v1/backend-performance/" rel="alternate" type="text/html" title="5 Simple Things to Improve Backend and Frontend Performance" /><published>2023-04-11T00:00:00-05:00</published><updated>2022-09-18T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-backend-performance</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/backend-performance/"><![CDATA[<h2 id="return-early-dont-create-objects-that-are-not-in-use">Return early. Don’t create objects that are not in use</h2>

<p><strong>Bad</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//bad</span>

<span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">dbCallToCallUsers</span><span class="o">();</span> <span class="c1">//DB Call Count 1</span>
<span class="nc">UserHomepageSettings</span> <span class="n">userhomePageSettings</span> <span class="o">=</span> <span class="n">dbcalltoCalluserSettings</span><span class="o">();</span> <span class="c1">//DB Call Count 2</span>

<span class="k">if</span><span class="o">(</span><span class="n">validate</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">validate</span><span class="o">(</span><span class="n">userSettings</span><span class="o">)){</span>
  <span class="c1">// business logic</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Good</strong>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">dbCallToCallUsers</span><span class="o">();</span> <span class="c1">//DB Call Count 1</span>
<span class="k">if</span><span class="o">(!</span><span class="n">validate</span><span class="o">(</span><span class="n">users</span><span class="o">)){</span>
  <span class="k">return</span> <span class="n">or</span> <span class="k">throw</span> <span class="nf">Exception</span><span class="o">();</span>
<span class="o">}</span>
<span class="nc">UserHomepageSettings</span> <span class="n">userhomePageSettings</span> <span class="o">=</span> <span class="n">dbcalltoCalluserSettings</span><span class="o">();</span> <span class="c1">//DB Call Count 2</span>
<span class="k">if</span><span class="o">(!</span><span class="n">validate</span><span class="o">(</span><span class="n">userhomePageSettings</span><span class="o">)){</span>
  <span class="k">return</span> <span class="n">or</span> <span class="k">throw</span> <span class="nf">Exception</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="count-the-number-of-network-calls-in-a-flow-and-keep-it-at-minimum">Count the number of network calls in a flow and keep it at minimum</h2>

<p>This is similar to previous point. I try to make sure I have max 3 DB calls per operation. 1 is ideal.</p>

<h2 id="use-maps-and-sets">Use Maps and Sets</h2>

<p>Instead of using List prefer Sets and Maps. Searching a list of map is almost instant.</p>

<h2 id="reduce-copying-of-objects-from-one-form-to-another">Reduce copying of objects from one form to another</h2>

<p>Instead of converting from one object to another, to another, to another. Try to make sure you don’t have to convert the same object from one form to another multiple times.</p>

<h2 id="for-response-classes-reduce-copying-by-using-a-delegate-class">For response classes reduce copying by using a delegate class</h2>

<p>We often use “mapper” classes and methods to convert from one object to another. For example, from entity to DTO.</p>

<p>These usually copy the data from one object to another.</p>

<p>This has problems because suppose your original object is 10Mb in memory, when you copy it, you have to copy 10Mb object. Your RAM get’s filled and copying is generally slow.</p>

<p>Here’s a better way to do it with Delegate.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">UserResponse</span><span class="o">{</span>

  <span class="nd">@JsonIgnore</span> <span class="c1">//We want to ignore the source class</span>
  <span class="kd">private</span> <span class="nc">UserEntity</span> <span class="n">user</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">(){</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="o">...</span> <span class="n">other</span> <span class="n">getters</span> <span class="n">that</span> <span class="n">are</span> <span class="n">similar</span>

  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">(){</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">getLastName</span><span class="o">();</span>
    <span class="c1">// Here we are converting from one form to another without copying.</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Using delegate we reduce the amount of copying needed in the application.</p>

<p>If you are using <code class="language-plaintext highlighter-rouge">java</code> you can use <code class="language-plaintext highlighter-rouge">Lombok</code> library which provide a <code class="language-plaintext highlighter-rouge">@Delegate</code> to do the same task as above without even writing your own getters. This will make your code very precise and fast.</p>]]></content><author><name></name></author><category term="backend" /><summary type="html"><![CDATA[Return early. Don’t create objects that are not in use]]></summary></entry><entry><title type="html">The many ways of using Ethos Pathos Logos</title><link href="https://www.ankushchoubey.com/v1/truth/ethos-pathos-logos" rel="alternate" type="text/html" title="The many ways of using Ethos Pathos Logos" /><published>2023-04-08T00:00:00-05:00</published><updated>2023-04-07T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/truth/v1-ethos-pathos-logis</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/truth/ethos-pathos-logos"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>2000 years ago Socrates came up with his 3 Rehetorics. Ethos, Pathos, and Logos.</p>

<p>These Rhetorics and used extensively in persuasion techniques.</p>

<ul>
  <li>
    <p><strong>Ethos</strong> means the identity of the person to you. For example, if you are given a piece of advice from your father, you are more likely to accept it, rather than a stranger. Even if the advice is exactly the same. Ethos means using authority to persuade.</p>
  </li>
  <li>
    <p><strong>Pathos</strong> means emotions. For example, if you were seeing a YouTube video asking you to donate to a charity, the video would be more persuasive if it told the story of the people involved, how has their life been, and how your money would help them. Pathos means using emotions to persuade.</p>
  </li>
  <li>
    <p><strong>Logos</strong> means logic. For example, you see a sign while boarding the train that there is a gap between the train and the platform and you may slip in so walk carefully. (Maybe the example was too dark but you get the point.). Logos means using logic to persuade.</p>
  </li>
</ul>

<p>Any advertisement you see would include all three, ethos pathos, and logos. And you can find many YouTube videos if you search for “Example of Ethos Pathos Logos”.</p>

<p>When I first learned about it did make sense. But as time went on I found use cases for Ethos, Pathos, and Logos beyond persuasion. Whoever I talked to lit up when I explained the concept. Each and every person found it insightful.</p>

<p>(By the way, the sentence above is Pathos.)</p>

<p>This post is an exploration of the 3 Rhetoric applied in different ways, all of which are aimed at making well-informed decisions. Before the exploration, we should take a look at which of the Rhetoric is most useful and when.</p>

<h2 id="whats-most-important-ethos-pathos-or-logos">What’s most important Ethos, Pathos, or Logos?</h2>

<p>Throughout life, we face different challenges. The way we overcome those challenges is by finding a solution. The way to find a solution is to be logical.</p>

<p>Therefore, if you want to solve life’s problems, you need to be logical.</p>

<p>If you are logical, any situation you face could be solved.</p>

<p>This may be the reason why MBA graduates who were also engineers are preferred more than other MBA graduates. (By the way, the previous sentence was an appeal to Ethos)</p>

<p>If you want to make better decisions overall, you need Logos.</p>

<h2 id="ways-of-using-ethos-pathos-logos-framework">Ways of Using Ethos Pathos Logos Framework</h2>

<h3 id="not-getting-persuaded-easily-by-identifying-ethos-pathos-and-logos-in-an-argument-and-only-focusing-on-logos">Not getting persuaded easily by identifying ethos, pathos, and logos in an argument and only focusing on logos</h3>

<p>In an argument clearly distinguishes ethos, pathos and logos.</p>

<p>And then focus on the logos.</p>

<p>For example, suppose someone tells you not do to things a certain way. You ask a logos question like why? The answer you get is I said so which is an ethos answer.</p>

<p>Logos is truth. Truth cannot hurt you. Truth only leads to clarity. Therefore, Logos can’t hurt you and it will lead you to clarity.</p>

<h3 id="persuading-and-helping-people-better-by-understanding-the-situation-through-the-lens-of-rhetoric">Persuading and helping people better by understanding the situation through the lens of rhetoric.</h3>

<p>Suppose someone is trying to help you, but the help they offer is stupid. Many times we just dismiss the help. But we can and I believe it’s much better to help them form their arguments.</p>

<p>You can let them know that you understand they want the best for you (ethos), and you understand their sentiment (pathos) and you respect it (again pathos), and then you explain/ask them how their idea may not be ideal or maybe improved (logos).</p>

<h3 id="developing-a-better-personality-by-incorporating-all-three">Developing a better personality by incorporating all three</h3>

<p>We should develop a personality that encompasses all three.</p>

<p>If you are good with logic (logos), but are terrible at ethos and pathos. Then you should focus on the other two. Because even if your arguments are “logically” correct, you are unable to present them properly.</p>

<p>Similarly, if people listen to your and follow your advice i.e you have ethos, but your advice is terrible, you should focus on developing your logos.</p>

<p>Develop and incorporate all three.</p>

<h3 id="skipping-politics-misunderstandings-ego-games-and-status-games-by-always-focusing-on-logos">Skipping politics, misunderstandings, ego games, and status games by always focusing on logos</h3>

<p>Status games are all ethos and pathos. Avoid status games. I have skipped a lot of office politics by focusing my arguments only on work and not the person.</p>

<blockquote>
  <p>Focus on the problem. Not the person.</p>
</blockquote>

<p>Sometimes you will make people hurt, but as long as you are focusing on logos, it may not matter all the much how they feel in this moment. And similarly, it may not matter how you feel at this moment.</p>]]></content><author><name></name></author><category term="non-technical" /><category term="truth" /><summary type="html"><![CDATA[Ethos, Pathos and Logos are techniques of persuasion. But are applications of it in making clear decisions and better interpersonal dynamics, especially in high-emotion situations.]]></summary></entry><entry><title type="html">Immutable Configuration and Infrastructure - What they are and Where Can You Build Your Own</title><link href="https://www.ankushchoubey.com/v1/building-your-own-immutable-infrastructure/" rel="alternate" type="text/html" title="Immutable Configuration and Infrastructure - What they are and Where Can You Build Your Own" /><published>2023-04-07T00:00:00-05:00</published><updated>2023-04-07T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-building-your-own-immutable-infrastructure</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/building-your-own-immutable-infrastructure/"><![CDATA[<p>In a previous post, I talked about why <a href="https://www.ankushchoubey.com/immutable-objects/" title="‌">immutability is so important</a>. After writing that post, I came to see immutability in different forms at many places. One such place is Configuration and Immutable Infrastructure.</p>

<p>Immutable Configuration means, your configuration will not change once deployed. It’ll remain the same. It’s a combination of two things:</p>

<ol>
  <li>Your application does not maintain a state and neither maintains a database.</li>
  <li>If you need to make changes, you don’t make changes to the existing deployment. You’ll instead create a new deployment with the changes.</li>
  <li>The configuration is usually via JSON.</li>
</ol>

<hr />

<h2 id="advantages">Advantages</h2>

<p>This has a few advantages:</p>

<ol>
  <li>Your deployments are clear: You know the if you have deployed something, they are exact. For example, if you are deploying with new changes and it fails. You still have the previous perfectly running deployment state.</li>
  <li>Immutable means this is fast. Immutable infrastructures don’t have to provision for changes.</li>
</ol>

<p>One of the most common places to use immutable infrastucture is Gateways. You set up the gateway once by providing config in form of <code class="language-plaintext highlighter-rouge">json</code> or <code class="language-plaintext highlighter-rouge">yaml</code>. Once that config is provided, there is no way to make changes to it.</p>

<h2 id="considerations-when-building-your-own-immutable-infra">Considerations when building your own immutable infra</h2>

<h3 id="finding-good-use-case">Finding Good Use case</h3>

<p>If you have a functionality where:</p>

<ol>
  <li>You have a set of configurations that are less likely to change.</li>
  <li>The functionality does not need to maintain state.</li>
</ol>

<p>You can choose to use immutable configuration.</p>

<p>For example, you have a list of items to be displayed that do not change regularly. You can save these as JSON configuration instead of DB. This way when you want to read that data, you don’t have to make a network call to the DB. This makes your config fast.</p>

<p>There is always a tradeoff associated.</p>

<h3 id="tool">Tool</h3>

<p>If you are using Spring Boot, you can use <code class="language-plaintext highlighter-rouge">properties</code> or <code class="language-plaintext highlighter-rouge">yaml</code> files to load up configuration at run time. For <code class="language-plaintext highlighter-rouge">javascript</code>, you can use <code class="language-plaintext highlighter-rouge">.ENV</code> files.</p>

<p>You can also create separate <code class="language-plaintext highlighter-rouge">json</code> files for your configuration.</p>

<p>Try to make these configurations modular.</p>

<h1 id="validate-your-configuration">Validate your configuration</h1>

<p>Run a script when the application starts to make sure all your configurations are loaded properly. The application should fail to start if the configuration provided isn’t provided well.</p>

<p>If you are using Spring Boot <code class="language-plaintext highlighter-rouge">@ConfigurationProperties</code> with <code class="language-plaintext highlighter-rouge">@Validated</code> would work.</p>

<p>In <code class="language-plaintext highlighter-rouge">javascript</code> you may have to write your own validator.</p>

<p>For <code class="language-plaintext highlighter-rouge">json</code>, you can create JSON Schema annotations.</p>]]></content><author><name></name></author><category term="web-development" /><category term="software-architecture" /><summary type="html"><![CDATA[In a previous post, I talked about why immutability is so important. After writing that post, I came to see immutability in different forms at many places. One such place is Configuration and Immutable Infrastructure.]]></summary></entry><entry><title type="html">GraphQL - Understanding its Advantages, Query Types, and Technical Functioning</title><link href="https://www.ankushchoubey.com/v1/what-is-graphql/" rel="alternate" type="text/html" title="GraphQL - Understanding its Advantages, Query Types, and Technical Functioning" /><published>2023-04-06T00:00:00-05:00</published><updated>2023-04-06T15:42:15-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-graphql</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/what-is-graphql/"><![CDATA[<p><img src="/images/v1-graphql.png" alt="GraphQL Logo" /></p>

<p>I recently consume GraphQL queries. Here’s what I learned:</p>

<h2 id="what-is-graphql">What is GraphQL?</h2>

<p>GraphQL is a way of getting data over HTTP in the form of JSON where the client has control over what data it receives.</p>

<p>While there are other JSON + HTTP standards, like Rest (for resources), OData (especially for higher complexity), etc.</p>

<p>GraphQL is what I believe is easier to implement for both client and server.</p>

<h2 id="advantages-of-graphql-for-consumerclient">Advantages of GraphQL for Consumer/Client</h2>

<h3 id="the-client-gets-only-the-fields-it-wants">The client gets only the fields it wants</h3>

<p>Suppose you have a <code class="language-plaintext highlighter-rouge">User</code> record with the following schema,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
  <span class="nc">String</span> <span class="n">userId</span><span class="o">;</span>
  <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="nc">String</span> <span class="n">address</span><span class="o">;</span>
  <span class="nc">String</span> <span class="n">education</span><span class="o">;</span>
  <span class="o">...</span><span class="na">thousand</span> <span class="n">other</span> <span class="n">fields</span>
<span class="o">}</span>
</code></pre></div></div>

<p>You can define a GraphQL schema like this. This is the format the server can give data in:</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="w"> </span><span class="n">query</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">user</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="n">User</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="k">type</span><span class="w"> </span><span class="n">User</span><span class="p">{</span><span class="w">
  </span><span class="n">userId</span><span class="p">,</span><span class="w">
  </span><span class="n">name</span><span class="p">,</span><span class="w">
  </span><span class="n">address</span><span class="p">,</span><span class="w">
  </span><span class="n">education</span><span class="p">,</span><span class="w">
  </span><span class="err">...</span><span class="n">thousand</span><span class="w"> </span><span class="n">other</span><span class="w"> </span><span class="n">fields</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Now the client can decide what data it actually needs.</p>

<p>The client will write the query as follows</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">query</span><span class="p">{</span><span class="w">
  </span><span class="n">user</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="p">,</span><span class="w">
    </span><span class="n">name</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Here the client will receive only the list of <code class="language-plaintext highlighter-rouge">{id, name}</code> and not other fields like <code class="language-plaintext highlighter-rouge">{address, education}</code>. Therefore, ideally,</p>

<ul>
  <li>The payload size is less. So network transmission is ideally fast.</li>
  <li>Processing of data is fast, as certain fields that are not to be fetched can be ignored. For example, suppose some field like <code class="language-plaintext highlighter-rouge">image</code> takes a lot of processing to generate. If the client isn’t asking for <code class="language-plaintext highlighter-rouge">image</code>, we don’t need to process that field.</li>
</ul>

<p>This also includes nested items</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query{
  user{
    name: {
      firstName
    }
  }
}
</code></pre></div></div>

<h3 id="the-client-can-ask-for-different-types-of-data-within-the-same-request">The client can ask for different types of data within the same request</h3>

<p>GraphQL allows for fetching multiple requests at once. For example, you can have a query like below where both User data and Jobs data are being fetched</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">query</span><span class="p">{</span><span class="w">
  </span><span class="n">users</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="p">,</span><span class="w">
    </span><span class="n">name</span><span class="p">,</span><span class="w">
    </span><span class="n">education</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">jobs</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">name</span><span class="p">,</span><span class="w">
    </span><span class="n">publishedDate</span><span class="p">,</span><span class="w">
    </span><span class="n">educationQualificationRequired</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>‌</p>

<p>This would mean multiple records would be fetched in a single request.</p>

<h2 id="types-of-graphql-queries">Types of GraphQL queries</h2>

<p>There are two main types of GraphQL Queries:</p>

<ol>
  <li><strong>Query</strong>: retrieves data from the server.</li>
  <li><strong>Mutation</strong>: modifies data on the server.</li>
</ol>

<p>I have explained the query above. So here I’ll explain Mutation.</p>

<p>Suppose you want to add a new user</p>

<p>You can create a GraphQL schema like this</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="w"> </span><span class="n">mutation</span><span class="p">{</span><span class="w">
  </span><span class="n">createUser</span><span class="p">(</span><span class="nv">$username</span><span class="p">):</span><span class="w"> </span><span class="n">User</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The above schema means that <code class="language-plaintext highlighter-rouge">createUser</code> when called with a username will return the <code class="language-plaintext highlighter-rouge">User</code> object.</p>

<p>The client mutation query would involve two parts.</p>

<ol>
  <li>The query</li>
  <li>Variables</li>
</ol>

<h3 id="the-mutation-query">The mutation query</h3>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">mutate</span><span class="p">{</span><span class="w">
  </span><span class="n">createUser</span><span class="p">(</span><span class="err">$</span><span class="n">username</span><span class="p">){</span><span class="w">
    </span><span class="n">id</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="variables">Variables</h3>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">username</span><span class="p">:</span><span class="w"> </span><span class="err">"</span><span class="n">Tony</span><span class="w"> </span><span class="n">Stark</span><span class="err">"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">createUser</code> would be called with the <code class="language-plaintext highlighter-rouge">username</code> as “Tony Stark” and only the <code class="language-plaintext highlighter-rouge">id</code> would be returned. The client can choose to return other values like <code class="language-plaintext highlighter-rouge">name</code> as <code class="language-plaintext highlighter-rouge">createUser</code> supports them too.</p>

<h2 id="how-does-a-graph-ql-work-technically">How does a Graph QL work technically?</h2>

<p>GraphQL operates on a single endpoint, typically <code class="language-plaintext highlighter-rouge">/graphql</code>, that receives <code class="language-plaintext highlighter-rouge">POST</code> requests with a <code class="language-plaintext highlighter-rouge">JSON</code> body containing a <code class="language-plaintext highlighter-rouge">query</code> field, which specifies the data to be retrieved or modified, and an optional <code class="language-plaintext highlighter-rouge">variables</code> field for passing in arguments.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"query"</span><span class="p">:</span><span class="w"> </span><span class="s2">"schema which the client wants"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"variables"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"in case your GraphQL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"has multiple queries"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The server then returns a JSON response with a data field containing the requested data.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"whatever"</span><span class="p">:</span><span class="w"> </span><span class="s2">"was defined in your schema"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Ideally, you would have very limited headers like <code class="language-plaintext highlighter-rouge">authorization</code>.</p>

<p>Overall, GraphQL provides a more efficient and flexible way to query and modify data, making it a popular choice for modern API development.</p>]]></content><author><name></name></author><category term="web-development" /><category term="graphql" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/v1-graphql.png" /><media:content medium="image" url="https://www.ankushchoubey.com/images/v1-graphql.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Release and Development Snapshot Version Semantic Versioning with Maven</title><link href="https://www.ankushchoubey.com/v1/release-semantic-versioning" rel="alternate" type="text/html" title="Release and Development Snapshot Version Semantic Versioning with Maven" /><published>2023-03-30T00:00:00-05:00</published><updated>2023-03-30T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-release-semantic-versioning</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/release-semantic-versioning"><![CDATA[<p>Semantic Versioning allows us to understand the nature of a release by comparing the newly released version with the previous version.</p>

<p>Each version number would comprise of 3 numbers. <code class="language-plaintext highlighter-rouge">major.minor.patch</code></p>

<p>For example, <code class="language-plaintext highlighter-rouge">3.1.2</code> means</p>

<ol>
  <li>Major version is <code class="language-plaintext highlighter-rouge">3</code></li>
  <li>Minor Version is <code class="language-plaintext highlighter-rouge">1</code></li>
  <li>Patch Version is <code class="language-plaintext highlighter-rouge">2</code></li>
</ol>

<p>Major indicated a Breaking Change, meaning this version is not backward compatible. For example, Major version 3 is not backward compatible with major version 2.</p>

<p>The minor version is for backward-compatible features. For example, version <code class="language-plaintext highlighter-rouge">3.1.2</code> means there has been <code class="language-plaintext highlighter-rouge">1</code> feature added over Major version <code class="language-plaintext highlighter-rouge">3</code>.</p>

<p>The patch version is for bug fixes, non-breaking refactoring, performance improvements, etc. <code class="language-plaintext highlighter-rouge">3.1.2</code> means there have been <code class="language-plaintext highlighter-rouge">2</code> patch releases over minor release <code class="language-plaintext highlighter-rouge">1</code>.</p>

<h2 id="upgrading-using-semantic-versioning">Upgrading using Semantic Versioning</h2>

<p>This way, when we say if we have version <code class="language-plaintext highlighter-rouge">2.1.0</code> and the newest version is <code class="language-plaintext highlighter-rouge">3.0.0</code> we’ll be more careful upgrading because this is a major release. And therefore contains breaking changes.</p>

<p>If the new version is <code class="language-plaintext highlighter-rouge">2.2.0</code> we’ll be okay updating as the version number change indicates it’s a minor release.</p>

<p>If it’s a patch release like <code class="language-plaintext highlighter-rouge">2.1.1</code> we’ll update it right away.</p>

<p>Note: This version number depends on the programmer. While upgrading from one version to another, make sure to run all your automated tests to verify that nothing breaks.</p>

<hr />

<h2 id="using-semantic-versioning-in-maven">Using Semantic Versioning in Maven</h2>

<p>In maven projects, we have two versions</p>

<ol>
  <li>Release version: Released to the public.</li>
  <li>Development version: Indicating this is the next development. The development version has <code class="language-plaintext highlighter-rouge">-SNAPSHOT</code> assigned to it.</li>
</ol>

<p>So, if the release is <code class="language-plaintext highlighter-rouge">2.0.0</code>, the development snapshot will be <code class="language-plaintext highlighter-rouge">2.0.1-SNAPSHOT</code>.</p>

<p>The problem here is what you do on the next release.</p>

<p>You can’t have <code class="language-plaintext highlighter-rouge">3.0.1</code> as the major release. Nor you can have <code class="language-plaintext highlighter-rouge">3.0.2</code> as the next patch release.</p>

<p>The major should be <code class="language-plaintext highlighter-rouge">3.0.0</code> and patch should be <code class="language-plaintext highlighter-rouge">3.0.1</code> with <code class="language-plaintext highlighter-rouge">3.0.2-SNAPSHOT</code> as dev version.</p>

<p>So here’s what I did,</p>

<ol>
  <li>Remove <code class="language-plaintext highlighter-rouge">-SNAPSHOT</code> from the development snapshot.</li>
  <li>if the release is <code class="language-plaintext highlighter-rouge">major</code>, increment <code class="language-plaintext highlighter-rouge">major</code> and set <code class="language-plaintext highlighter-rouge">minor</code> and <code class="language-plaintext highlighter-rouge">patch</code> to <code class="language-plaintext highlighter-rouge">0</code>.
if the release is minor<code class="language-plaintext highlighter-rouge">, set</code> patch<code class="language-plaintext highlighter-rouge">to</code>0`</li>
  <li>If the release is <code class="language-plaintext highlighter-rouge">patch</code>, do nothing.</li>
</ol>

<p>Now, the patch version would just be the same as the snapshot with <code class="language-plaintext highlighter-rouge">-</code>SNAPSHOT` removed.</p>

<p>The next development version will always be <code class="language-plaintext highlighter-rouge">{major}.{minor}.{patch+1}-SNAPSHOT</code>.</p>]]></content><author><name></name></author><category term="configuration-management" /><category term="release-cycle" /><summary type="html"><![CDATA[Semantic Versioning allows us to understand the nature of a release by comparing the newly released version with the previous version.]]></summary></entry><entry><title type="html">Manage Configuration Better By Avoiding Deleting or Making it Last Step</title><link href="https://www.ankushchoubey.com/v1/avoid-or-mitigate-deleting" rel="alternate" type="text/html" title="Manage Configuration Better By Avoiding Deleting or Making it Last Step" /><published>2023-03-26T00:00:00-05:00</published><updated>2023-03-26T15:52:08-05:00</updated><id>https://www.ankushchoubey.com/v1/v1-avoid-or-mitigate-delete</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/avoid-or-mitigate-deleting"><![CDATA[<p>I have tried this in the past.</p>

<p>I wanted to restart something on Kubernetes.</p>

<p>I wrote a nice script. Which goes and deletes a prod.</p>

<p>Here was the problem. I forgot to add grep to filter out which pod to delete.</p>

<p>Thankfully, this was the dev environment and not production. And thankfully I don’t have access to run non-read commands on PROD.</p>

<p>And ended up deleting every pod.</p>

<p>My <strong>wrong script</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> config.yaml
kubectl get pods| <span class="nb">awk</span> <span class="s1">'{print $1}'</span> | kubectl delete pod <span class="nt">-n</span> <span class="o">{</span>namespace<span class="o">}</span>
</code></pre></div></div>

<p>The <strong>right script</strong> would have been to grep first:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> config.yaml
kubectl get pods| <span class="nb">awk</span> <span class="s1">'{print $1}'</span> | <span class="nb">grep</span> <span class="o">{</span>searchTerm<span class="o">}</span> | kubectl delete pod <span class="nt">-n</span> <span class="o">{</span>namespace<span class="o">}</span>
</code></pre></div></div>

<p>There was a <strong>better solution</strong>:</p>

<p>rolling restart. I could have used rolling restart here to just restart one deployment.</p>

<p><strong>This way only when the new is ready we delete the old.</strong></p>

<hr />

<p>I found a parallel of this principle in git.</p>

<p>I “proud” myself for not learning git well. Instead of resolving a complex merge between the dev and the upper branch. I would delete the upper branch.</p>

<p>The better approach would be to create a branch and rename branches. Test and delete the old main branch.</p>

<p>This is what I would try to follow.</p>

<p>Avoid deleting. Or if deleting can’t be avoided. Create a backup and move deleting to an end state after testing everything.</p>]]></content><author><name></name></author><category term="configuration-management" /><summary type="html"><![CDATA[I have tried this in the past.]]></summary></entry><entry><title type="html">7 Tools To Make Good Love Choices</title><link href="https://www.ankushchoubey.com/v1/7-tools-for-making-good-love-choices/" rel="alternate" type="text/html" title="7 Tools To Make Good Love Choices" /><published>2023-03-25T00:00:00-05:00</published><updated>2023-03-25T15:42:15-05:00</updated><id>https://www.ankushchoubey.com/v1/7-tools-for-making-good-love-choices</id><content type="html" xml:base="https://www.ankushchoubey.com/v1/7-tools-for-making-good-love-choices/"><![CDATA[<p>I wrote these 7 tools as a way to advise a friend. These came from the struggle and learning I had over the months.</p>

<p>These tools are arranged in order or 3-3-1.</p>

<ol>
  <li>The first three would help you calm down and understand what to do.</li>
  <li>The next three would help you think long-term.</li>
  <li>The last one is a human mistake we all make.</li>
</ol>

<p><img src="/images/tommy-love.jpeg" alt="Thomas Shelby Love" /></p>

<p><sub>Even Thomas Shelby has his moments</sub></p>

<hr />

<h2 id="set-1-to-help-you-calm-down-and-to-understand-what-to-do">Set 1: To help you calm down and to understand what to do</h2>

<h3 id="tool-1-process-your-feelings">Tool 1: Process your feelings</h3>

<p>No one understands you as well as you understand yourself. It’s no one else’s responsibility to process your emotions.</p>

<p>Suppose you expect someone else to solve emotional problems for you. It’s too much for them.</p>

<p>Ever had someone cry in front of you? Because of you?? How did you react? We all have different levels of emotional capabilities. And it’s not always right or fair to put something that we understand and we can deal with on someone else.</p>

<p>We can take guidance from others. But we shouldn’t give up our own sense of rationality to others.</p>

<p>All of our major problems in life are emotional problems. We solve logical problems super quickly but have a hard time solving emotional problems.</p>

<p>The way to solve emotional problems is to learn to sit. Sit down for a long period and ask yourself questions when emotions pop up.</p>

<p>Don’t dwell on the emotions. Just try to logically break them down.</p>

<p>If you are facing something bad, remember it’ll be better in a few days and better in a few months. <strong>Give yourself space</strong>.</p>

<h3 id="tool-2-know-what-you-want">Tool 2: Know what you want</h3>

<p>We often don’t know what we want. We have a vague sense of it. But we don’t really know.</p>

<p>When we don’t know what they want clearly, we have a hard time having conversations or negotiating with others.</p>

<p>What do you want? Why do you want them? Articulate it fully for yourself and then to others.</p>

<h3 id="tool-3-have-clear-communication">Tool 3: Have clear communication</h3>

<p>You can’t have what you want if you can’t communicate properly. Remember, displaying anger and annoyance won’t help you persuade. The way to persuade is to be assertive and yet be kind. To know what their problem is and to know yours. And to balance out both your interests and theirs.</p>

<hr />

<h2 id="set-2-to-help-you-think-long-term">Set 2: To help you think long term</h2>

<h3 id="tools-4-needs-over-wants">Tools 4: Needs over Wants</h3>

<p>What we want is not always good for us. We may want to do drugs, but that doesn’t mean it is good for us.</p>

<p>We should do what we “need”. With this, we can ask “Do I really need drugs?“. Obviously “No“. We don’t need it.</p>

<p>Needs are always good for us. So, focus on needs over wants.</p>

<p>At the same time, we cannot sustain without “needs“. Therefore <strong>needs are non-negotiable.</strong></p>

<h3 id="tool-5-things-needed-for-a-healthy-relationship-are-non-negotiable">Tool 5: Things “needed“ for a healthy relationship are non-negotiable</h3>

<p>Like the previous tool. Some things are “needed“ and without those needs, we won’t have a base.</p>

<p>Similarly, some things that are “needed“ for a good relationship.</p>

<ul>
  <li>Mutual Respect</li>
  <li>Good Communication</li>
  <li>Willingness to solve problems</li>
  <li>etc</li>
</ul>

<p>Without these “needs” how can’t we even have a good relationship. Therefore, things “needed” to make a relationship work are also non-negotiable.</p>

<p>While expressing yourself, and while deciding what you want, make sure to focus highly on things “needed“ for a good relationship.</p>

<p>We all should hope to not get what we want but to get what we need.</p>

<h3 id="tool-6-know-your-core-values-and-never-compromise-try-to-make-decisions-using-them">Tool 6: Know your core values. And never compromise. Try to make decisions using them.</h3>

<p>When in doubt consult your core values. Your core values are who you are.</p>

<p>For example, my ideal core values are:</p>

<ol>
  <li>Clarity</li>
  <li>Responsibility</li>
  <li>Inputs</li>
  <li>Systems</li>
  <li>Time</li>
  <li>Optimism</li>
  <li>Team Work</li>
  <li>Adventure</li>
</ol>

<p>If I have a problem, which is an emotional problem, I’ll rely on these core values to solve them.</p>

<hr />

<h2 id="set-3-a-mistake-we-all-make">Set 3: A mistake we all make</h2>

<h3 id="tool-7-never-try-to-manipulate">Tool 7: Never try to manipulate</h3>

<p>We try to manipulate the person or the situation to get what we want.</p>

<p>We try to think in terms of if I do X, they’ll think Y. “Mai aasa karungi to vo aasa soch lenge“. This all is manipulation.</p>

<p>Remember, having a partner or even marriage is just one stage of a relationship, there are stages after it too.</p>

<p>Some things are outside our control, and it’s best if they are outside our control. They are not meant to be in our control. Nature is efficient. And by trying to control it, we make things worse.</p>

<p>So let certain things be and never try to manipulate.</p>

<blockquote>
  <p>Do good and let go of the outcome.</p>
</blockquote>

<blockquote>
  <p>कर्म करो और फल की चिंता मत करो</p>
</blockquote>]]></content><author><name></name></author><category term="love" /><category term="team-work" /><category term="non-technical" /><summary type="html"><![CDATA[कर्म करो और फल की चिंता मत करो]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.ankushchoubey.com/images/tommy-love.jpeg" /><media:content medium="image" url="https://www.ankushchoubey.com/images/tommy-love.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>