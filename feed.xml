<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2022-05-29T01:18:15-05:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Random Thoughts</subtitle><entry><title type="html">Post Format</title><link href="www.ankushchoubey.com/post-format/" rel="alternate" type="text/html" title="Post Format" /><published>2050-09-26T00:00:00-05:00</published><updated>2050-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/post-format</id><content type="html" xml:base="www.ankushchoubey.com/post-format/">&lt;p&gt;&lt;img src=&quot;/images/switch-jobs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;writing-steps&quot;&gt;Writing Steps&lt;/h2&gt;

&lt;p&gt;If I write from POV that how I got the this idea and how I thought about it, readers will know thinking behing an idea and not just the preachiness. Plus, I’ll always have the right words to write.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Done&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Structure Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Written&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Edited&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Grammar Check Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Perfect Grammarly Score:&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Added  https://www.canva.com/&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Links to Other Posts if Any&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tags Added&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Released Publically&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Gist of Behavior Driven Development “BDD”</title><link href="www.ankushchoubey.com/bdd/" rel="alternate" type="text/html" title="The Gist of Behavior Driven Development “BDD”" /><published>2022-05-23T00:00:00-05:00</published><updated>2022-05-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/bdd</id><content type="html" xml:base="www.ankushchoubey.com/bdd/">&lt;p&gt;Like any product development, the primary task is to solve a user’s problem. So you should start with the user’s problem and discuss how it could be solved.&lt;/p&gt;

&lt;p&gt;This might lead to interesting approaches that could help.&lt;/p&gt;

&lt;p&gt;Typically it’s not the best to bring people in a group to “brainstorm” because it mostly leads to one or two people dominating the conversation. It’s best to ask everyone to think about 3 points. And then go in round robin fashion discussing each.&lt;/p&gt;

&lt;p&gt;Once the problem is defined well and some solutions are agreed upon, one may start with defining features. Though typically, it’s better to validate the potential business and the solution before setting foot further.&lt;/p&gt;

&lt;p&gt;Once the solution is finalised, you can start defining specifications.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The specifications is a document which describes what features are to be built exactly.&lt;/p&gt;

&lt;p&gt;This would be a single source of direction. If something is in the spec file, it has to be built that way. If it’s not in the spec file, it should not be built.&lt;/p&gt;

&lt;p&gt;The spec file keeps the entire organisation in sync.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The product team uses it to finalise features.&lt;/li&gt;
  &lt;li&gt;The development team used to know what to work on.&lt;/li&gt;
  &lt;li&gt;The QA team used to build tests around those features.&lt;/li&gt;
  &lt;li&gt;The marketing team uses it to decide how to best market.&lt;/li&gt;
  &lt;li&gt;The documentation team uses it to make documentations.&lt;/li&gt;
  &lt;li&gt;The design team uses it to design the product.&lt;/li&gt;
  &lt;li&gt;A new member of any team uses it to learn about the product.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without a specification file, everyone is confused. No one person can know everything. And even if he does it creates a bottleneck and a single point of failure if the person decides to leave the organisation.&lt;/p&gt;

&lt;p&gt;Since the spec file keeps so many people in sync, details for those specific teams should also be mentioned.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Creation of specification is a collaborative process, involving different teams. Specially Product, Development and QA. also known as the three amigos.&lt;/p&gt;

&lt;p&gt;However, in reality it’s best not to start with collaboration, it’s best for a single person of the product team to write down specification files.&lt;/p&gt;

&lt;p&gt;This is because he/she knows the business better than others and typically has good communication. It’s likely not the best way to test the English skills of a developer or a tester ;).&lt;/p&gt;

&lt;p&gt;A product person would likely write in simple business terms that are understandable to all stakeholders. And since he/she understands best, the initial draft spec file would be out faster.&lt;/p&gt;

&lt;p&gt;After that, the 3 Amigos can be followed to get better clarification and add more details.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A problem someone writing the spec file can face is too many branches. The team collaborates and discovers 10 different potential paths. It’s best to not travel all the paths.&lt;/p&gt;

&lt;p&gt;Though the business and solution would have been validated, the real validation happens when the user starts using the product. Therefore we should limit the number of features, and for that it’s best not to even write details of features we think are possible or good to have. #focus&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The modern way of maintaining spec files is by using feature files like Gherkin.&lt;/p&gt;

&lt;p&gt;Gherkin provides a way to bridge the gap between what’s in the spec file and what has actually been developed. This is done by writing automated tests. If the test passes, we know the feature has been developed and is working.&lt;/p&gt;

&lt;script src=&quot;path/to/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph LR
    T[Three Amigos] --&amp;gt; P &amp;amp; QA &amp;amp; D
    P[Product] --&amp;gt; |finalise features| S
    QA --&amp;gt; |build tests around those features| S
    D[Development] --&amp;gt; |develop the feature| S
    Des[Design Team] --&amp;gt; |design the product| S
    M[Marketing] --&amp;gt; |how to best market| S
    Doc[Documentation] --&amp;gt; |make documentations| S
    Management --&amp;gt; | | S
    N[new member of any team] --&amp;gt; |learn about the product| S
    S[Specifications] --&amp;gt; |executable specification| Code
    Code --&amp;gt; |keeps code and specs in sync| S
&lt;/div&gt;

&lt;p&gt;This also leads us to the point of how to write better specifications. The standard practice is this, described by examples. An example is how a user would interact with the system we have built. Examples solve ambiguity. The keyword scenario is example.&lt;/p&gt;

&lt;p&gt;Rather than writing, a file upto 25 MB can be uploaded.&lt;/p&gt;

&lt;p&gt;We can write as example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;: Disallow upload of file greater than 25 MB&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Given&lt;/strong&gt; I am at file management page&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;When&lt;/strong&gt; I upload a 26 MB file&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Then&lt;/strong&gt; the upload should fail&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;And&lt;/strong&gt; should not be visible in files list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;: Allow upload of file less than equal to 25 MB&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Given&lt;/strong&gt; I am at file management place&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;When&lt;/strong&gt; I upload a 25 MB file&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Then&lt;/strong&gt; the file should be uploaded&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;And&lt;/strong&gt; visible within files list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore in the above case, two examples/scenarios were generated, the success and failure.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There are many other tips that can make scenarios cleaner and specific. The cleaner and more specific the scenarios are, the easier it will be for everyone to collaborate and build better products.&lt;/p&gt;

&lt;p&gt;This whole journey encompasses BDD. BDD isn’t as specific as Test Driven Development. The scope of BDD is much much larger and emposes the whole product lifecycle from defining problems, validating to development and everything in between.&lt;/p&gt;</content><author><name></name></author><category term="product-development" /><category term="testing" /><category term="bdd" /><summary type="html">Like any product development, the primary task is to solve a user’s problem. So you should start with the user’s problem and discuss how it could be solved.</summary></entry><entry><title type="html">The need for executable specifications</title><link href="www.ankushchoubey.com/need-for-executable-specification/" rel="alternate" type="text/html" title="The need for executable specifications" /><published>2022-05-21T00:00:00-05:00</published><updated>2022-05-21T15:52:08-05:00</updated><id>www.ankushchoubey.com/need-for-executable-specification</id><content type="html" xml:base="www.ankushchoubey.com/need-for-executable-specification/">&lt;h3 id=&quot;how-typically-software-is-developed&quot;&gt;How typically software is developed?&lt;/h3&gt;

&lt;p&gt;Typically when we start developing we either have a rough idea about what has to be developed or we have a story.&lt;/p&gt;

&lt;p&gt;If the story is detailed, it’s better but if it’s not then we code up something and then hope it’s the right thing.&lt;/p&gt;

&lt;p&gt;If it’s not the right thing, we have to go back to all stakeholders (management, QA, Doc team, product team), show them a working demo and then change code accordingly. The cost of changing code is too high. And cost of keeping everyone in sync is high as well.&lt;/p&gt;

&lt;h3 id=&quot;how-specification-file-clarify-thinking-about-feature&quot;&gt;How specification file clarify thinking about feature?&lt;/h3&gt;

&lt;p&gt;A functional specification file can help up avoid being foggy with our approach. It can help clarify requirements at a level not possible with most other methods.&lt;/p&gt;

&lt;p&gt;A specification file includes all details about features and scenarios that are going to be built. The scenarios are detailed and include everything that developer will have to build, no less no more.&lt;/p&gt;

&lt;h3 id=&quot;how-specification-file-can-help-everyone-is-sync&quot;&gt;How specification file can help everyone is sync?&lt;/h3&gt;

&lt;p&gt;Whenever anyone within organization has to discuss over features, the spec file can be shared. This will keep everyone in sync.&lt;/p&gt;

&lt;h3 id=&quot;what-problem-is-faced-with-traditional-specification-file&quot;&gt;What problem is faced with traditional specification file?&lt;/h3&gt;

&lt;p&gt;Spec files are updated constantly. Traditional ways of building spec doesn’t help know if spec file and product being built are actually in sync.&lt;/p&gt;

&lt;p&gt;It may happen that some features are added or removed but spec file or the product don’t paint an accurate picture.&lt;/p&gt;

&lt;h3 id=&quot;how-gherkin-feature-files-solves-problem-faced-by-traditional-specification&quot;&gt;How Gherkin feature files solves problem faced by traditional specification?&lt;/h3&gt;

&lt;p&gt;Automated test files, feature files solve this problem by allowing plugins can Cucumber to write automated tests. If the test passes, the scenario was implemented perfectly.&lt;/p&gt;

&lt;p&gt;If test doesn’t pass, then scenarios is failed.&lt;/p&gt;</content><author><name></name></author><category term="bdd" /><category term="product-development" /><summary type="html">How typically software is developed?</summary></entry><entry><title type="html">Reduce the number of moving peaces in a distributed system</title><link href="www.ankushchoubey.com/no-of-pieces/" rel="alternate" type="text/html" title="Reduce the number of moving peaces in a distributed system" /><published>2022-05-20T00:00:00-05:00</published><updated>2022-05-20T15:52:08-05:00</updated><id>www.ankushchoubey.com/no-of-pieces</id><content type="html" xml:base="www.ankushchoubey.com/no-of-pieces/">&lt;p&gt;&lt;sub&gt;Why we tend to over-engineer?&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Any kind of over-engineering, distributed systems or not, happen because we try to solve scenarios without facing it.&lt;/p&gt;

&lt;p&gt;It is a premature optimization.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;What happens when we over engineer?&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;We drastically increase development and maintenance cost.&lt;/p&gt;

&lt;p&gt;If X works well enough with good enough performance, it isn’t worth dividing it up into Y and Z until it’s needed.&lt;/p&gt;

&lt;p&gt;You should think in terms of keeping code together.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;Why we should aim to keep code together?&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;A kind of anti-micro service step. Aim to keep code together until you find a good enough reason to break.&lt;/p&gt;

&lt;p&gt;This is why I advocated previously that I prefer database without stored procedures, functions, etc. CRUD should ideally be enough. If crud isn’t enough maybe database design should be improved.&lt;/p&gt;

&lt;p&gt;When it’s worth splitting?&lt;/p&gt;</content><author><name></name></author><category term="distributed-systems" /><category term="draft" /><summary type="html">Why we tend to over-engineer?</summary></entry><entry><title type="html">Mutating Questions to deepen understanding</title><link href="www.ankushchoubey.com/mutating-questions/" rel="alternate" type="text/html" title="Mutating Questions to deepen understanding" /><published>2022-05-17T00:00:00-05:00</published><updated>2022-05-17T15:52:08-05:00</updated><id>www.ankushchoubey.com/mutating-questions</id><content type="html" xml:base="www.ankushchoubey.com/mutating-questions/">&lt;p&gt;Mutation testing is a technique in software engineering where a piece of code is mutated.&lt;/p&gt;

&lt;p&gt;We can apply same to learning.&lt;/p&gt;

&lt;p&gt;Question Driven Writing/Learning is the best way to learn. To get deeper, we can mutate our question&lt;/p&gt;

&lt;p&gt;So instead of a what is X?
we can ask how does X work?
Any example of X
Why X is important?&lt;/p&gt;</content><author><name></name></author><category term="learning" /><category term="draft" /><summary type="html">Mutation testing is a technique in software engineering where a piece of code is mutated.</summary></entry><entry><title type="html">Writing cleaner commit messages with conventional commits</title><link href="www.ankushchoubey.com/conventional-commits/" rel="alternate" type="text/html" title="Writing cleaner commit messages with conventional commits" /><published>2022-05-17T00:00:00-05:00</published><updated>2022-05-17T15:52:08-05:00</updated><id>www.ankushchoubey.com/conventional-commits</id><content type="html" xml:base="www.ankushchoubey.com/conventional-commits/">&lt;h3 id=&quot;why-commit-messages-are-important&quot;&gt;Why commit messages are important?&lt;/h3&gt;
&lt;p&gt;Whenever we code, we save the state of the code with a commit. And the commit message becomes description of what exactly happened.&lt;/p&gt;

&lt;p&gt;Having good commit message leads to better communication and understanding. People can use commits to learn the code. It is an invaluable peace of documentation when done well.&lt;/p&gt;

&lt;h3 id=&quot;what-happened-when-we-dont-follow-a-convention&quot;&gt;What happened when we don’t follow a convention?&lt;/h3&gt;
&lt;p&gt;Like with anything else, When we don’t follow a convention for commit messages everything is messed up. Everyone has their own rules. Some are too descriptive. Some are less.&lt;/p&gt;

&lt;p&gt;We can’t get important insights&lt;/p&gt;

&lt;h3 id=&quot;why-we-should-follow-conventional-commits&quot;&gt;Why we should follow conventional commits?&lt;/h3&gt;
&lt;p&gt;Conventional commits forces us to have atomic commits. Aka to include only change that has been done.&lt;/p&gt;

&lt;p&gt;This can also help with git bisect&lt;/p&gt;

&lt;p&gt;It also has plugins that make it easier to perform other actions.&lt;/p&gt;

&lt;p&gt;Semantic Versioning
Change log generation&lt;/p&gt;

&lt;h3 id=&quot;what-are-some-ways-for-making-it-easy-to-implement-conventional-commits&quot;&gt;What are some ways for making it easy to implement conventional commits?&lt;/h3&gt;

&lt;p&gt;Commit lint website : https://commitlint.io/
IDE plugins
Git pre-commit hooks&lt;/p&gt;</content><author><name></name></author><category term="clean-code" /><summary type="html">Why commit messages are important? Whenever we code, we save the state of the code with a commit. And the commit message becomes description of what exactly happened.</summary></entry><entry><title type="html">Question Driven Writing</title><link href="www.ankushchoubey.com/question-driven-writing/" rel="alternate" type="text/html" title="Question Driven Writing" /><published>2022-05-13T00:00:00-05:00</published><updated>2022-05-13T15:52:08-05:00</updated><id>www.ankushchoubey.com/question-driven-writing</id><content type="html" xml:base="www.ankushchoubey.com/question-driven-writing/">&lt;p&gt;&lt;sub&gt;What is question-driven writing?&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;QWD is a way of outlining an idea or an essay by writing questions that can be answered instead of usual topics or subtopics.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;Where did I pick up question-driven writing from?&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;I first read about questions via Jordan Peterson’s essay writing guide. Since I am a developer, this seemed very similar to TDD. So I gave it a similar name to help tune myself into the same zone.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;How does question-driven writing help clear thinking and write better?&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Typically when we write, we write something and then aim to push the quality and purpose of it.&lt;/p&gt;

&lt;p&gt;QWD helps clarify the quality and purpose upfront. This kind of becomes a failing test like in TDD. This gives something to aim at. Now, when you answer the question, you’ll answer it precisely without dealing with other related questions/topics.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;How does QDW help in breaking up paragraphs, and blogposts?&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;QDW also naturally breaks up paragraphs and groups related paragraphs together. Also, if you have many unrelated questions, you could break up your essay into multiple essays. (#cleanCode)&lt;/p&gt;

&lt;p&gt;QDW forces us to have one main idea per essay.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;How to do QDW?
To do QDW, start by writing the topic name. And all the questions you have related to the topic.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Once you have a bunch of them written down, start answering them.&lt;/p&gt;

&lt;p&gt;You’ll find some questions that can be grouped, group them.&lt;/p&gt;

&lt;p&gt;Done.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt; What are the similarities between QDW and TDD?&lt;/sub&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Both TDD and QDW set the expectation of writing beforehand.&lt;/li&gt;
  &lt;li&gt;Both lead to precise writing.&lt;/li&gt;
  &lt;li&gt;Both reduce overall writing time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;sub&gt;Does QDW take more time?&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;By having precise writing and a clear aim, QDW reduces blank screen problems.&lt;/p&gt;

&lt;p&gt;The cost of precision saves more time overall.&lt;/p&gt;

&lt;p&gt;When you have a new essay idea, just write all the intents in form of questions. And you will more likely remember how to write it.&lt;/p&gt;</content><author><name></name></author><summary type="html">What is question-driven writing?</summary></entry><entry><title type="html">Some considerations when setting a new project</title><link href="www.ankushchoubey.com/new-project/" rel="alternate" type="text/html" title="Some considerations when setting a new project" /><published>2022-05-11T00:00:00-05:00</published><updated>2022-05-11T15:52:08-05:00</updated><id>www.ankushchoubey.com/new-project</id><content type="html" xml:base="www.ankushchoubey.com/new-project/">&lt;p&gt;Some essential considerations when starting a new project&lt;/p&gt;

&lt;p&gt;Tech stack and framework&lt;/p&gt;

&lt;p&gt;Backend:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Boot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Frontend:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Angular&lt;/li&gt;
  &lt;li&gt;React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Database:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SQL&lt;/li&gt;
  &lt;li&gt;MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read Me:
https://github.com/dbader/readme-template&lt;/p&gt;

&lt;p&gt;Wiki:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Project setup&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Git Commit Format:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Conventional Commit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Versioning: Semantic Versioning&lt;/p&gt;

&lt;p&gt;Deployment:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Docker, Kubenetes&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Some essential considerations when starting a new project</summary></entry><entry><title type="html">Thoughts and Notes on writing better software specifications and BDD</title><link href="www.ankushchoubey.com/writing-better-specs/" rel="alternate" type="text/html" title="Thoughts and Notes on writing better software specifications and BDD" /><published>2022-05-10T00:00:00-05:00</published><updated>2022-05-10T15:52:08-05:00</updated><id>www.ankushchoubey.com/bdd</id><content type="html" xml:base="www.ankushchoubey.com/writing-better-specs/">&lt;h1 id=&quot;what-is-bdd-why-it-is-needed&quot;&gt;What is BDD? Why it is needed?&lt;/h1&gt;

&lt;p&gt;BDD stands for Behavior Driven Development.&lt;/p&gt;

&lt;p&gt;In BDD, we write specs for the features we want to develop. This serves as a contract between developer and other stake holders.&lt;/p&gt;

&lt;p&gt;To be more precise, these specs are executable specs. Meaning there can be tests written for them to verify if a feature is working as expected.&lt;/p&gt;

&lt;p&gt;BDD doesn’t always need to be end to end flows but it is most commonly that.&lt;/p&gt;

&lt;h1 id=&quot;where-does-bdd-fit-in&quot;&gt;Where does BDD fit in?&lt;/h1&gt;

&lt;p&gt;A common way to use BDD is to create specs before starting any development and even before creating a user story.&lt;/p&gt;

&lt;p&gt;This is usually done via: 3 Amigos methodology.&lt;/p&gt;

&lt;p&gt;3 Amigos is a ceremony that involve the following to come up with specs from different point of views:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Development Team&lt;/li&gt;
  &lt;li&gt;Product Team&lt;/li&gt;
  &lt;li&gt;QA Team&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-to-write-good-bdd-specs&quot;&gt;How to write good BDD specs?&lt;/h1&gt;

&lt;p&gt;Some principles of writing good BDD tests are similar to that of normal tests.&lt;/p&gt;

&lt;h2 id=&quot;aim-for-single-assertions-single-then-&quot;&gt;Aim for single assertions (Single “Then”) &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Having multiple Then blocks means your tests are likely doing too much.&lt;/p&gt;

&lt;h2 id=&quot;use-data-that-replicates-real-work-&quot;&gt;Use data that replicates real work &lt;sup id=&quot;fnref:1:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;For example, for a stackoverflow like service instead of&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When user asks the question “Testing data”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;use&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When user asks the questions “How to fix null pointer in Java?”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The later is much closer to real usage.&lt;/p&gt;

&lt;h2 id=&quot;use-business-language-&quot;&gt;Use business language &lt;sup id=&quot;fnref:1:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Instead of expressing selenium style description, use business language.&lt;/p&gt;

&lt;h2 id=&quot;express-intent-&quot;&gt;Express Intent &lt;sup id=&quot;fnref:1:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;The “Then” part of the spec usually can express what the intend with the spec is.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=awwFfCYoGFQ&quot;&gt;Writing Better BDD Scenarios&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:1:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:1:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="testing" /><category term="software-engineering" /><category term="product-development" /><summary type="html">What is BDD? Why it is needed?</summary></entry><entry><title type="html">Thinking on Paper</title><link href="www.ankushchoubey.com/thinking-on-paper/" rel="alternate" type="text/html" title="Thinking on Paper" /><published>2022-05-05T00:00:00-05:00</published><updated>2022-05-05T15:52:08-05:00</updated><id>www.ankushchoubey.com/thinking-on-paper</id><content type="html" xml:base="www.ankushchoubey.com/thinking-on-paper/">&lt;h1 id=&quot;what-is-a-blank-screen-problem&quot;&gt;What is a blank screen problem?&lt;/h1&gt;

&lt;p&gt;The blank screen problem is we have a new coding problem but can’t decide what to code. Think of this as an equivalent to writers block.&lt;/p&gt;

&lt;h1 id=&quot;why-we-get-stuck-at-a-blank-screen&quot;&gt;Why we get stuck at a blank screen?&lt;/h1&gt;

&lt;p&gt;This can happen because we don’t know the requirement very well or what we are trying to implement is too tough.&lt;/p&gt;

&lt;h1 id=&quot;what-are-the-ways-of-avoiding-blank-screen&quot;&gt;What are the ways of avoiding blank screen?&lt;/h1&gt;

&lt;p&gt;Planning and designing are the best ways of avoiding blank screen.&lt;/p&gt;

&lt;p&gt;The best way to plan and design is to do it on paper.&lt;/p&gt;

&lt;h1 id=&quot;why-pen-and-paper-works-well&quot;&gt;Why Pen and Paper Works Well?&lt;/h1&gt;

&lt;p&gt;Paper works best because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;There is no distractions.&lt;/li&gt;
  &lt;li&gt;You can connect ideas easily.&lt;/li&gt;
  &lt;li&gt;You can hold more ideas in memory by writing/drawing it down.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-to-do-it-for-system-design&quot;&gt;How to do it for System Design?&lt;/h1&gt;

&lt;p&gt;For initial system design usual boxes and connecting them is enough.&lt;/p&gt;

&lt;p&gt;Once, the initial system design is built you can use a tool like Google Draw or diagram.net to get a more refined and shareable diagram.&lt;/p&gt;

&lt;p&gt;Reading up and understanding UML diagrams can be helpful in the later part.&lt;/p&gt;

&lt;p&gt;For many problems I have found defining data model is the best way to start designing the system.&lt;/p&gt;

&lt;h1 id=&quot;how-to-do-it-for-algorithmic-problems&quot;&gt;How to do it for Algorithmic Problems?&lt;/h1&gt;

&lt;p&gt;This can be used the same competitive coding problem or real life.&lt;/p&gt;

&lt;p&gt;In competitive coding problems we are given sample Inputs and sample outputs.&lt;/p&gt;

&lt;p&gt;It’s best to always start on paper pen and manually solve for each sample input manually.&lt;/p&gt;

&lt;p&gt;Once thats done, figure out the time and space complexity and optimize.&lt;/p&gt;

&lt;p&gt;Once you are done with these, only then start with actual coding.&lt;/p&gt;

&lt;h1 id=&quot;how-to-do-it-for-ui-design&quot;&gt;How to do it for UI Design?&lt;/h1&gt;

&lt;p&gt;Wiremocks are kind of common in UI world. It’s always better to start with a rough wiremock and get it verified from stakeholders.&lt;/p&gt;

&lt;p&gt;Not doing so leads to un-neccesary rework down the line.&lt;/p&gt;</content><author><name></name></author><summary type="html">What is a blank screen problem?</summary></entry></feed>