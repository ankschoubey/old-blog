<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="www.ankushchoubey.com/feed.xml" rel="self" type="application/atom+xml" /><link href="www.ankushchoubey.com/" rel="alternate" type="text/html" /><updated>2022-09-21T09:12:14-05:00</updated><id>www.ankushchoubey.com/feed.xml</id><title type="html">Ankush</title><subtitle>Full Stack Developer - Cloud/Microservices</subtitle><entry><title type="html">PREFER UPDATING A BLOG OVER WRITING NEW ONES</title><link href="www.ankushchoubey.com/post-format/" rel="alternate" type="text/html" title="PREFER UPDATING A BLOG OVER WRITING NEW ONES" /><published>2050-09-26T00:00:00-05:00</published><updated>2022-09-23T15:52:08-05:00</updated><id>www.ankushchoubey.com/post-format</id><content type="html" xml:base="www.ankushchoubey.com/post-format/">&lt;p&gt;&lt;img src=&quot;/images/switch-jobs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prefer-updating-a-blog-over-writing-new-ones&quot;&gt;PREFER UPDATING A BLOG OVER WRITING NEW ONES&lt;/h1&gt;

&lt;h2 id=&quot;writing-steps&quot;&gt;Writing Steps&lt;/h2&gt;

&lt;p&gt;If I write from POV that how I got the this idea and how I thought about it, readers will know thinking behing an idea and not just the preachiness. Plus, I’ll always have the right words to write.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Done&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Structure Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Written&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thoughts Edited&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Grammar Check Done&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Perfect Grammarly Score:&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Added  https://www.canva.com/&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Links to Other Posts if Any&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tags Added&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Released Publically&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/n-plus-one.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/n-plus-one.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Increase collaboration by knowing whom to contact</title><link href="www.ankushchoubey.com/team-knowing-whom-to-contact/" rel="alternate" type="text/html" title="Increase collaboration by knowing whom to contact" /><published>2022-09-21T00:00:00-05:00</published><updated>2022-09-21T15:52:08-05:00</updated><id>www.ankushchoubey.com/team-knowing-whom-to-contact</id><content type="html" xml:base="www.ankushchoubey.com/team-knowing-whom-to-contact/">&lt;p&gt;&lt;img src=&quot;/images/team-knowing-whom-to-contact.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jasongoodman_youxventures?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Jason Goodman&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/team?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We developers love working in silos. We love our technical challenges.&lt;/p&gt;

&lt;p&gt;Our effort is proportional to how complex the challenge is.&lt;/p&gt;

&lt;p&gt;But for business and true Agility, it’s more important to always focus on end users. And to focus on what’s truly important from a business POV.&lt;/p&gt;

&lt;p&gt;Similarly, there are moments when one needs to collaborate with other teams, and having different teams in the loop is truly useful.&lt;/p&gt;

&lt;p&gt;The higher the quality of collaboration, the less rework a developer has to do.&lt;/p&gt;

&lt;p&gt;On this path, the important thing is to remember whom to connect to and when.&lt;/p&gt;

&lt;p&gt;Ideally, everyone should be pouring in a semi-bureaucratic way.&lt;/p&gt;

&lt;p&gt;The development team must connect to other groups to get work done.&lt;/p&gt;

&lt;p&gt;These teams might be specific to your organization. So wherever you work, figure out what all the departments and teams are. Who are the key stakeholders to contact, and when?&lt;/p&gt;

&lt;p&gt;And make sure you loop them in when taking a decision.&lt;/p&gt;

&lt;p&gt;And, of course, you can use Gherkin BDD files to ensure everyone is in sync.&lt;/p&gt;

&lt;p&gt;So here are a few teams and stakeholders that are common and imp:&lt;/p&gt;

&lt;h1 id=&quot;teams&quot;&gt;Teams&lt;/h1&gt;

&lt;p&gt;Development Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Responsible for developing the application.&lt;/li&gt;
  &lt;li&gt;Ensuring the highest product quality.&lt;/li&gt;
  &lt;li&gt;Responsible for building the thing right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;QA Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ensures application lives up to standard.&lt;/li&gt;
  &lt;li&gt;Signs of if the feature is ready to be released.&lt;/li&gt;
  &lt;li&gt;Responsible for ensuring the thing is built right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Product Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decides what to put in the product.&lt;/li&gt;
  &lt;li&gt;Ensures the right thing is being built.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Doc Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ensures all public-facing documentation is professional.&lt;/li&gt;
  &lt;li&gt;Their responsibilities include everything from images to messages shown to the user to public-facing API responses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Marketing Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Markets the newly released features.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DevOps Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Is a platform team that ensures Devs can work fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Security Team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ensures security provisions are in place.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*Old Way: Database Team&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ensures DB is up and running fine.&lt;/li&gt;
  &lt;li&gt;This role is replaced by DevOps automation in most organizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Data science team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Builts applications that help show insight with the help of data.&lt;/li&gt;
  &lt;li&gt;Their work isn’t always real-time insights.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;key-stakeholders&quot;&gt;Key Stakeholders:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Developers&lt;/li&gt;
  &lt;li&gt;Testers&lt;/li&gt;
  &lt;li&gt;Scrum Master&lt;/li&gt;
  &lt;li&gt;Product Designer&lt;/li&gt;
  &lt;li&gt;Product Owner&lt;/li&gt;
  &lt;li&gt;Engineering Manager&lt;/li&gt;
  &lt;li&gt;Product Manager&lt;/li&gt;
  &lt;li&gt;Head of Engineering&lt;/li&gt;
  &lt;li&gt;Head of Product&lt;/li&gt;
  &lt;li&gt;Head of Finance&lt;/li&gt;
  &lt;li&gt;CTO&lt;/li&gt;
  &lt;li&gt;CIO&lt;/li&gt;
  &lt;li&gt;COO&lt;/li&gt;
  &lt;li&gt;CEO&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="agile" /><category term="collaboration" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/team-knowing-whom-to-contact.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/team-knowing-whom-to-contact.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Making Object Immutable for Concurrency</title><link href="www.ankushchoubey.com/immutable-objects/" rel="alternate" type="text/html" title="Making Object Immutable for Concurrency" /><published>2022-09-18T00:00:00-05:00</published><updated>2022-09-18T15:52:08-05:00</updated><id>www.ankushchoubey.com/immutable-objects</id><content type="html" xml:base="www.ankushchoubey.com/immutable-objects/">&lt;p&gt;&lt;img src=&quot;/images/immutable-objects.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;Photo by &lt;a href=&quot;https://unsplash.com/@davehoefler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Dave Hoefler&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/stone?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;flash&quot;&gt;
    &lt;svg class=&quot;octicon octicon-info octicon octicon-info octicon octicon-info octicon octicon-info&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Note: &lt;/strong&gt;For beginners: Immutable object means objects whose value can't change. Immutability is the intent of the creator of the object/class, i.e. when coding something up, we need to decide if a particular class should be immutable. Also, immutability is as important in the front end as in the back end. While the below posts explain it in Java, other programming languages have their way of implementing immutability.
&lt;/div&gt;

&lt;h1 id=&quot;where-immutability-is-needed&quot;&gt;&lt;strong&gt;Where Immutability is needed?&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;When sharing data between threads, there is a high chance that one memory gets replaced by another. This would lead to inconsistency, and often these bugs aren’t discovered.&lt;/p&gt;

&lt;p&gt;There are two ways to avoid this: thread-safe data structures or immutable objects.&lt;/p&gt;

&lt;p&gt;This particular post will explain where immutable objects are necessary.&lt;/p&gt;

&lt;p&gt;Suppose you have 2 Rest Endpoints. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/someEndpoint&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/anotherEndpoint&lt;/code&gt; both set a particular value to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sharedMemory&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/someEndpoint&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sharedMemory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//some code that uses sharedMemory&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/anotherEndpoint&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postSomethingElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sharedMemory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//some code that uses sharedMemory&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It can happen that this shared memory is not inconsistent.&lt;/p&gt;

&lt;p&gt;Ideally, the solution would be, in this case, to declare the variable within the method it is used.&lt;/p&gt;

&lt;h1 id=&quot;creating-an-immutable-object&quot;&gt;&lt;strong&gt;Creating an immutable object&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;The creation of immutable objects is relatively simple.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Make sure all instance variables are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private final&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;make sure all interactions with the method happens only via the constructor or the public method.
No method should modify the contents of the private final method.&lt;/li&gt;
  &lt;li&gt;Make sure all instance variables are immutable.&lt;/li&gt;
  &lt;li&gt;Make sure the class is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; so that there is no inheriting and subclasses can’t override something.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are some more rules, but these are the minimum requirements. The following section will explain how you automate the checking of immutable classes would also check for more conditions.&lt;/p&gt;

&lt;h1 id=&quot;java-libraries&quot;&gt;&lt;strong&gt;Java Libraries&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Some libraries help create immutable objects, such as &lt;a href=&quot;https://immutables.github.io/&quot;&gt;Immutables for Java&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/google/guava/wiki/ImmutableCollectionsExplained&quot;&gt;Google Guava Library&lt;/a&gt; provides many immutable data structure alternatives. The benefit of using these is that they have the same interface as regular java collections.&lt;/p&gt;

&lt;div class=&quot;flash&quot;&gt;
    &lt;svg class=&quot;octicon octicon-info octicon octicon-info octicon octicon-info octicon octicon-info octicon octicon-info&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Note: &lt;/strong&gt;It's best to start with immutable objects and then modify them if needed.
&lt;/div&gt;

&lt;h1 id=&quot;automating-verification-via-unit-tests&quot;&gt;&lt;strong&gt;Automating Verification&lt;/strong&gt; via Unit Tests&lt;/h1&gt;

&lt;p&gt;But when developing within a team and given the cognitive overload we developers face, we need some way to automate the creation of immutable objects. This can be done as a combo of 2 methods:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1 Mutability Detector&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mutability Detector is a package that provides the following assertion that can be used within unit tests.&lt;/p&gt;

&lt;p&gt;Mutability Detector has many more conditions to detect mutability.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    assertImmutable(MyClass.class); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MutabilityDetector/MutabilityDetector&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2 Automate further with ArchUnit tests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ArchUnit tests allow for writing architecture-level tests. We can write a test such as asserting that a class is immutable if a class is annotated with @component.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In practice, I couldn’t fully make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertImmutable&lt;/code&gt; work with abstract classes.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VO4IGFayJWo&quot;&gt;Immutable Data Structures are Thread Safe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uFxWg3cVMRs&quot;&gt;How to Make an Object Immutable in Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://immutables.github.io/&quot;&gt;Immutability Library Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/guava/wiki/ImmutableCollectionsExplained&quot;&gt;Google Guava Immutable Data Structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html&quot;&gt;A Strategy for Defining Immutable Objects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ST3wU79nwS8&quot;&gt;Mutability Detector In Action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="concurrent-programming" /><category term="reactive-programming" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/immutable-objects.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/immutable-objects.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Perfection isn’t an attainable goal. We are always a step closer to it.</title><link href="www.ankushchoubey.com/perfection/" rel="alternate" type="text/html" title="Perfection isn’t an attainable goal. We are always a step closer to it." /><published>2022-09-11T00:00:00-05:00</published><updated>2022-09-08T15:52:08-05:00</updated><id>www.ankushchoubey.com/perfection</id><content type="html" xml:base="www.ankushchoubey.com/perfection/">&lt;p&gt;&lt;img src=&quot;/images/perfection.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Often we fail to do something because we fear we’ll be bad at it.&lt;/p&gt;

&lt;p&gt;This fear is counter-productive. It is not a useful thought.&lt;/p&gt;

&lt;p&gt;Only by doing do we learn. Only by failing do we recognize and avoid situations that would cause problems. In this sense, we are constantly failing forward.&lt;/p&gt;

&lt;p&gt;Things, if they are progressing well, will always be an upwards spiral. As long as they is an upwards spiral, it doesn’t matter that we currently failed. Eventually, we’ll succeed, and that’s enough.&lt;/p&gt;

&lt;p&gt;Failure is a sign we are doing&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Something out of our comfort zone. -&amp;gt; This is good because it means we are doing something.&lt;/li&gt;
  &lt;li&gt;Something we are doing wrong -&amp;gt; means we can fix it, and then we won’t have a problem.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having a good perspective on failure is highly underestimated.&lt;/p&gt;

&lt;p&gt;If we are failing all the time, however, it could mean a few things. All of these things provide an opportunity for us to improve.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Maybe we don’t know something -&amp;gt; in which case we need to find an answer.&lt;/li&gt;
  &lt;li&gt;Maybe we are trying to solve the wrong problem or from a bad angle-&amp;gt; we need good root cause analysis both post-mortem and pre-mortem.&lt;/li&gt;
  &lt;li&gt;Maybe we are asking the wrong question -&amp;gt; find the right question to ask then.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Often the best approach to move towards perfection is:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Do something.&lt;/li&gt;
  &lt;li&gt;Fail&lt;/li&gt;
  &lt;li&gt;Learn&lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sometimes after this loop, you’ll be good enough and still now perfect. But that’s okay; maybe this is an optimal stopping point, especially if the problem is solved.&lt;/p&gt;

&lt;p&gt;Or maybe it’s time to stop focusing on this problem for a while and solve another problem. After some time, we’ll have a fresh perspective, and if this problem still exists, we’ll have more tools in our belts to fix it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/03/Diminishing_Returns_Graph.png&quot; alt=&quot;Diminishing Returns Graph: Source Wikipedia&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="non-professional" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/perfection.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/perfection.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Chaos Engineering</title><link href="www.ankushchoubey.com/chaos-engineering/" rel="alternate" type="text/html" title="Chaos Engineering" /><published>2022-09-11T00:00:00-05:00</published><updated>2022-09-11T15:52:08-05:00</updated><id>www.ankushchoubey.com/chaos-engineering</id><content type="html" xml:base="www.ankushchoubey.com/chaos-engineering/">&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/39/LogoChaosMonkeysNetflix.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-chaos-engineering&quot;&gt;What is Chaos Engineering?&lt;/h1&gt;

&lt;p&gt;When we do TDD, we reduce logical bugs. With Chaos Engineering, we’ll improve resilience.&lt;/p&gt;

&lt;p&gt;Example: If something fails for an end user, how should it be handled with minimal impact on user experience?&lt;/p&gt;

&lt;p&gt;You might have experienced this when an error occurs on Netflix. Rather than failing, it gives a proper response to the user.&lt;/p&gt;

&lt;p&gt;It’s hard to anticipate failure scenarios in the real world. But there are some common ones. In chaos engineering terms: assaults.&lt;/p&gt;

&lt;p&gt;Full-size services like Gremlin with 30+ assault types are interesting to look through.
There are some Kube-specific services too.&lt;/p&gt;

&lt;p&gt;Chaos Engineering for Spring Boot includes three assaults (latency, exception, kill app) that directly attack @service @controller @repository.&lt;/p&gt;

&lt;h1 id=&quot;how-would-this-help&quot;&gt;How would this help?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It will make sure we are handling more failures #gracefully.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In no case should user experience be impacted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many times, when an error happens, the user doesn’t get an indication that something went wrong.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;handling-chaos&quot;&gt;Handling chaos&lt;/h1&gt;

&lt;p&gt;There are usually common patterns to handle many assaults like CircuitBreaker, which many java libraries provide. Thus, it would require some thought to handle failures on UI too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/chaos-engineering.jpeg&quot; alt=&quot;ByteByteGo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://bytebytego.com/newsletter&quot;&gt;ByteByteGo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chaos Engineering helps us understand and improve observability.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If there is any chaos in our system, we should be able to identify it via observability quickly. If we cannot determine, we’ll have to improve observability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;People also play Chaos Engineering Game Day, where they try to cause chaos and validate resiliency and observability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chaos engineering would replicate testing in production.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having a library that automates some aspects of Chaos Engineering can proactively improve resiliency (and reduce the cognitive overload of having everyone learn and follow chaos engineering)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codecentric.github.io/chaos-monkey-spring-boot/&quot;&gt;Chaos Engineering for Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gremlin.com/&quot;&gt;Gremlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="chaos-engineering" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://upload.wikimedia.org/wikipedia/commons/3/39/LogoChaosMonkeysNetflix.png" /><media:content medium="image" url="https://upload.wikimedia.org/wikipedia/commons/3/39/LogoChaosMonkeysNetflix.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How AutoConfiguration works in Spring Boot</title><link href="www.ankushchoubey.com/autoconfiguration/" rel="alternate" type="text/html" title="How AutoConfiguration works in Spring Boot" /><published>2022-09-11T00:00:00-05:00</published><updated>2022-09-11T15:52:08-05:00</updated><id>www.ankushchoubey.com/autoconfiguration</id><content type="html" xml:base="www.ankushchoubey.com/autoconfiguration/">&lt;p&gt;&lt;img src=&quot;/images/autoconfiguration.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Everything in Spring Boot is configurable. This was very hard to understand, but here are some pointers that could help.&lt;/p&gt;

&lt;p&gt;It was hard for me to extend and/or customize the core functionalities of Spring Boot. These are a few pointers that could help.&lt;/p&gt;

&lt;h1 id=&quot;bean-s&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; s&lt;/h1&gt;

&lt;p&gt;Beans can be thought of as singleton classes. i.e. classes where only one instance can exist.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Beans&lt;/code&gt; are created and managed by BeanFactory. And there is a Bean injector which injects beans where they are needed.&lt;/p&gt;

&lt;p&gt;So, for example, you have a class A and a class B.&lt;/p&gt;

&lt;p&gt;class B is composed of class A, and you have added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;When the class B bean is generated, the class A bean will be injected into it.&lt;/p&gt;

&lt;p&gt;All @Component, @Service and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Repository&lt;/code&gt; are of type bean.&lt;/p&gt;

&lt;h1 id=&quot;conditional-s&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt; s&lt;/h1&gt;

&lt;p&gt;Beans can be generated on conditions.&lt;/p&gt;

&lt;p&gt;For example, suppose a particular library exists only then can a bean be generated.&lt;/p&gt;

&lt;p&gt;For example, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-cloud&lt;/code&gt; stream, Kafka beans would be generated if there is Kafka set.&lt;/p&gt;

&lt;h1 id=&quot;everything-would-finally-plugin-to-some-lifecycle&quot;&gt;Everything would finally plugin to some lifecycle&lt;/h1&gt;

&lt;p&gt;All of spring, is a plugin architecture. The core of spring boot exists and everything else is a plugin that plugs into a spring boot lifecycle extending its core functionality.&lt;/p&gt;

&lt;p&gt;Everything plugs into some spring boot lifecycle.&lt;/p&gt;

&lt;h1 id=&quot;extending-spring-boot&quot;&gt;Extending spring boot&lt;/h1&gt;

&lt;p&gt;Suppose you want to extend spring boots to your liking here is how you’d do it.&lt;/p&gt;

&lt;h2 id=&quot;find-all-beans-bean-autoconfiguration-configurationproperties-andor-value&quot;&gt;Find all beans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoConfiguration&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt; and/or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Value&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In IntelliJ, you can search usage for all Beans easily. These are the beans you can override.&lt;/p&gt;

&lt;p&gt;Overriding these beans allows you to customize them.&lt;/p&gt;

&lt;p&gt;Usually, Autoconfiguration classes end with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoConfiguration&lt;/code&gt;, which makes them super easy to find.&lt;/p&gt;

&lt;p&gt;Find ConfigurationProperties. Many beans depend on these or depend on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Configuration Properties and @Value are what is set by the properties file.&lt;/p&gt;

&lt;h2 id=&quot;read-the-documentation&quot;&gt;Read the documentation.&lt;/h2&gt;

&lt;p&gt;In the documentation, you will likely find info on some beans you could modify or extend.&lt;/p&gt;</content><author><name></name></author><category term="spring-boot" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/autoconfiguration.svg" /><media:content medium="image" url="www.ankushchoubey.com/images/autoconfiguration.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TDD over JSON</title><link href="www.ankushchoubey.com/tdd-over-json/" rel="alternate" type="text/html" title="TDD over JSON" /><published>2022-09-08T00:00:00-05:00</published><updated>2022-09-08T15:52:08-05:00</updated><id>www.ankushchoubey.com/tdd-over-json</id><content type="html" xml:base="www.ankushchoubey.com/tdd-over-json/">&lt;p&gt;&lt;img src=&quot;/images/tdd-over-json.jpg&quot; alt=&quot;&quot; /&gt;
Photo by RealToughCandy.com: https://www.pexels.com/photo/man-love-people-woman-11035481/&lt;/p&gt;

&lt;p&gt;Somethings TDD isn’t straightforward. Here is such a case I faced.&lt;/p&gt;

&lt;p&gt;I was developing an app for a third-party service which required data in a particular JSON format.&lt;/p&gt;

&lt;p&gt;The particular JSON would render as UI in the third-party app’s view.&lt;/p&gt;

&lt;p&gt;Here is how I approached it with TDD.&lt;/p&gt;

&lt;h1 id=&quot;step-1-creating-the-ideal-json&quot;&gt;Step 1: Creating the ideal JSON.&lt;/h1&gt;

&lt;p&gt;Lucky for me, the third part app had a UI builder to see what the end UI would look. I created the UI and copied JSON into my code.&lt;/p&gt;

&lt;p&gt;The UI builder also gave a link which became part of my BDD specs.&lt;/p&gt;

&lt;h1 id=&quot;step-2-created-a-test-with-json-asserts&quot;&gt;Step 2: Created a Test with JSON Asserts&lt;/h1&gt;

&lt;p&gt;I followed the method/when/then format to create a test and added the following assertion:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nc&quot;&gt;JSONAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSONCompareMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENIENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/a/33481923&quot;&gt;StackOverflow: The best way to compare two JSON files in Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I know what the final state of my POJO should be.&lt;/p&gt;

&lt;p&gt;I went and updated the POJO to reflect the expected JSON.&lt;/p&gt;

&lt;p&gt;Another point of luck for me was that the third-party app had an SDK, so I didn’t have to build a custom POJO from scratch. I just had to customize it.&lt;/p&gt;</content><author><name></name></author><category term="tdd-example" /><summary type="html">Photo by RealToughCandy.com: https://www.pexels.com/photo/man-love-people-woman-11035481/</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/tdd-over-json.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/tdd-over-json.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A responseType field for all response classes</title><link href="www.ankushchoubey.com/response-type-field/" rel="alternate" type="text/html" title="A responseType field for all response classes" /><published>2022-09-08T00:00:00-05:00</published><updated>2022-09-08T15:52:08-05:00</updated><id>www.ankushchoubey.com/response-type</id><content type="html" xml:base="www.ankushchoubey.com/response-type-field/">&lt;p&gt;The inspiration for this blog post is &lt;a href=&quot;https://youtu.be/7sQiIR9qCdA?t=690&quot;&gt;API response in a video by Chaos Monkey for Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A typical pattern for handling network assaults is Circuit Breaker.&lt;/p&gt;

&lt;p&gt;A circuit breaker would replace a network delay or failure code with a fallback code, making the code resilient.&lt;/p&gt;

&lt;p&gt;Ideally, the user is indicated when fallback data is used.&lt;/p&gt;

&lt;p&gt;This can be as simple as adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseMetadata&lt;/code&gt; field within HTTP Response.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;actualData&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;responseMetadata:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;STALE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;STALE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;LATEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;FALLBACK&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;updatedDate:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{dateObject}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; could be&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STALE&lt;/code&gt; for old data&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LATEST&lt;/code&gt; to indicate the data is current&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FALLBACK&lt;/code&gt; indicates neither &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LATEST&lt;/code&gt; nor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STATE&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updatedDate&lt;/code&gt; field&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;date of when something is updated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The frontend or client could read the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseMetadata&lt;/code&gt; and show a message to the user indicating that old data.&lt;/p&gt;

&lt;p&gt;The client could also take further action on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseMetadata&lt;/code&gt;, like polling, after a little while until the response is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CURRENT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseMetadata&lt;/code&gt; can be part of a parent class for all response classes. An ArchUnit test canenforce this behaviour.&lt;/p&gt;</content><author><name></name></author><category term="chaos-engineering" /><summary type="html">The inspiration for this blog post is API response in a video by Chaos Monkey for Spring Boot</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/response-type-field.png" /><media:content medium="image" url="www.ankushchoubey.com/images/response-type-field.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Feature Flagging</title><link href="www.ankushchoubey.com/feature-flagging/" rel="alternate" type="text/html" title="Feature Flagging" /><published>2022-08-28T00:00:00-05:00</published><updated>2022-08-28T15:52:08-05:00</updated><id>www.ankushchoubey.com/feature-flagging</id><content type="html" xml:base="www.ankushchoubey.com/feature-flagging/">&lt;p&gt;&lt;img src=&quot;/images/feature-flagging.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@isaactanlishung?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Isaac Li Shung Tan&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/on-off?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-are-feature-flags&quot;&gt;What are feature flags?&lt;/h1&gt;

&lt;p&gt;The concept of feature flags is simple. You can toggle a feature on or off based on certain conditions. And ideally, this requires zero downtime.&lt;/p&gt;

&lt;p&gt;For example, an experiment feature can be turned on for some users but disabled for others.&lt;/p&gt;

&lt;p&gt;There are many levels to feature flagging:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Disable feature for specific users&lt;/li&gt;
  &lt;li&gt;Disable the feature completely&lt;/li&gt;
  &lt;li&gt;Disable the feature in case of certain conditions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feature flagging can also help in AB Testing.&lt;/p&gt;

&lt;h1 id=&quot;feature-flagging-for-cd&quot;&gt;Feature Flagging for CD&lt;/h1&gt;

&lt;p&gt;Feature flags also help in CD. Rather than feature branching, everyone can work on a single branch, but the features that aren’t ready yet can be disabled on prod. This decouples release and feature. Feature flagging is probabilistic because, in practice, it leads to stale branches.&lt;/p&gt;

&lt;p&gt;In case of chaos engineering, a feature flag can help reduce blast radius and improve resiliency. Suppose a feature fails; that feature can be disabled at a run time until fixed.&lt;/p&gt;

&lt;h1 id=&quot;common-ways-of-implementing-feature-flagging&quot;&gt;Common ways of implementing Feature Flagging&lt;/h1&gt;

&lt;h2 id=&quot;storing-flags&quot;&gt;Storing flags&lt;/h2&gt;
&lt;p&gt;The simplest implementation of the feature flag is DB based. A list of features is stored along with a flag to enable or disable it. Each time a decision comes, DB is called to fetch the flag’s status.&lt;/p&gt;

&lt;p&gt;Environment variables can also be used. Configuration management systems like Spring Cloud Config can also be used to store flags.&lt;/p&gt;

&lt;h1 id=&quot;enabling-disabling&quot;&gt;Enabling disabling&lt;/h1&gt;
&lt;p&gt;The code has an IF else statement that enables or disables the feature.&lt;/p&gt;

&lt;p&gt;An even better approach to IF else is dependency injection. If a class can be instantiated conditionally, then we solved the feature flagging problem cleanly.&lt;/p&gt;

&lt;p&gt;Having a class per feature and inheriting a common interface is the best approach here. In the planning features section of this blog post, you’ll find more ideas on how to reach this.&lt;/p&gt;

&lt;h2 id=&quot;end-to-end-services&quot;&gt;End-to-end services&lt;/h2&gt;
&lt;p&gt;There are also full-blown services that help with feature flagging, like &lt;a href=&quot;https://launchdarkly.com/blog/what-are-feature-flags/&quot;&gt;LaunchDarkly&lt;/a&gt; and &lt;a href=&quot;https://www.flagship.io/&quot;&gt;FlagShip&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/feature-toggles.html#CategoriesOfToggles&quot;&gt;Feature Toggles (aka Feature Flags)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/UwrJaOtS4ys&quot;&gt;DevOps Concepts: Feature Flags&lt;/a&gt;: An introductory video that explains feature flagging and branching.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-feature-flags&quot;&gt;Feature Flags with Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.togglz.org/quickstart.html&quot;&gt;Togglz&lt;/a&gt;: A java library for feature flagging. It comes with a UI.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ff4j.github.io/&quot;&gt;FF4j&lt;/a&gt;: A java library similar to Togglz&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/unleash/unleash-client-java&quot;&gt;Unleash&lt;/a&gt;: Probably the best open source feature flagging product.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="feature-flagging" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="www.ankushchoubey.com/images/feature-flagging.jpg" /><media:content medium="image" url="www.ankushchoubey.com/images/feature-flagging.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Towards Data Driven Decisions</title><link href="www.ankushchoubey.com/data-driven-decisions/" rel="alternate" type="text/html" title="Towards Data Driven Decisions" /><published>2022-08-20T00:00:00-05:00</published><updated>2022-08-13T15:52:08-05:00</updated><id>www.ankushchoubey.com/towards-data-driven-decisions</id><content type="html" xml:base="www.ankushchoubey.com/data-driven-decisions/">&lt;h1 id=&quot;what-are-data-driven-decisions&quot;&gt;What are Data Driven Decisions?&lt;/h1&gt;

&lt;p&gt;Data-Driven decisions are the ability to formulate and make decisions out of the data from the real world.&lt;/p&gt;

&lt;h1 id=&quot;why-am-i-interested-in-data-driven-decisions&quot;&gt;Why am I interested in Data Driven Decisions?&lt;/h1&gt;

&lt;p&gt;For 2 years in my college, I was very driven to become a data scientist. During that time, I worked a lot with data. Not just looking at data but understanding it. So I have an intuitive sense of it.&lt;/p&gt;

&lt;p&gt;I have studied value-based decision making, where we define a value and act according to that value in all situations.&lt;/p&gt;

&lt;p&gt;There are some loopholes in the value-based approach and which is feedback. Systems need to be improvised somehow. And especially when we are optimizing a system, we need to know when we have peaked.&lt;/p&gt;

&lt;p&gt;We also need to know MED (Minimum Effective Dose). So that we can prioritize other tasks too.&lt;/p&gt;

&lt;p&gt;I am also interested in Data-Driven Decisions for deciding what feature to work on and optimizing my workflows.&lt;/p&gt;

&lt;p&gt;An interest of mine is Observability in distributed systems.&lt;/p&gt;

&lt;h1 id=&quot;what-are-some-preliminary-observations-i-have-about-data-driven-decisions&quot;&gt;What are some preliminary observations I have about data-driven decisions?&lt;/h1&gt;

&lt;p&gt;Data-driven decisions can be totally quantity or qualitative.&lt;/p&gt;

&lt;p&gt;Qualitative decisions can be converted to qualitative if they are in the form of a questionnaire.&lt;/p&gt;

&lt;p&gt;Qualitative:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Agile Maturity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quantitative:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DORA&lt;/li&gt;
  &lt;li&gt;Agile Metrics&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pomodoros sessions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Custom
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1YsS40schcRMpdaqmuDj_UhGGv4e0S3N7oDOlrIincpw/edit?usp=sharing&quot;&gt;Tracking progress on Grokking Coding Interview&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="decision-making" /><summary type="html">What are Data Driven Decisions?</summary></entry></feed>