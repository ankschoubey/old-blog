{
  
    
        "post0": {
            "title": "Series  Kaggle Getting Started",
            "content": "Why? . Because Getting Started is: . Easy . | Less intimidating . | Less chance of getting stuck . | . How we will do it? . By: . focusing on the process rather than just getting the output. . | starting with easier problems. . | . Prerequisite . PyTorch: A 60 Minute Blitz, Writing Custom Datasets | . Expectations from this series . Time: 5–6 Hours per challenge or more. . Coding Style: fastai coding style . While coding, no function takes 10 seconds. . | Heavy use of %timeit% . | . Explanation Style: Based on Kaggle Notebook Commits . Notebook Commit 1: Will focus on getting input and output . | Next N-1 Commits: Will add new features/improvements. These will be linked. . | Last Commit: Complete solution . | . This way one can see get a peek behind the finished product. . Abbreviations Used . X = training_data y = training_label ds = dataset dl = dataloader o = optimizer . Index . Join Medium. . Join Medium. .",
            "url": "www.ankushchoubey.com/deep%20learning/kaggle/2020/03/30/series-kaggle-getting-started.html",
            "relUrl": "/deep%20learning/kaggle/2020/03/30/series-kaggle-getting-started.html",
            "date": " • Mar 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Digit Recognition",
            "content": ". How to read this? . Skim through the Pre-requisites . | Open each commit notebook then read the explanations. . | Just run each notebook top to bottom. . | Try to understand each line. . | If you find yourself stuck at statements, explore the variable involved. . | Still, stuck?? highlight the explanation and comment. I will get back to your query. . | . Commit Version 2: Getting Input and Generating Submission File . Day 1 . | Score — 0.43 . | Time invested — about an hour . | . My goal for any first commit is always to get input, pass it through a NN and generate a submittable output. . Read the data . train_df = pd.read_csv(&#39;/kaggle/input/digit-recognizer/train.csv&#39;) . Training/testing . I needed a way to separate features and labels. . So the easiest way was to not select a column named ‘label’. . test_df does not contain a label column . train_df.loc[:, train_df.columns != &#39;label&#39;] type(test_df.get(&#39;label&#39;)) == None #false . Dataset . Returns features and labels if ‘train=True’. else it returns just features . class **MnistDataset**(Dataset): def __init__(self, df, train=True): #convert df to self.X and self.y using above def __len__(self): return self.X.shape[0] def __getitem__(self, i): if self.train: return self.X[i], self.y[i] return self.X[i] . Observation: Even if I don’t explicitly mention Tensor, NumPy is converted to tensor. . Creating DataLoader . bs = 64 ds = MnistDataset(train_df) dl = DataLoader(ds, bs) . Checking if DataLoader returns the right output . images, labels = next(iter(dl)) images.shape, labels.shape . Creating a vanilla Neural Network . I created a dumb NN just so that I can pass data through it and get output in the desired shape. . The details don’t matter much. This will be replaced by a CNN later. . Preparing the training loop . epochs = 10 loss_fn = nn.CrossEntropyLoss() import torch.optim as optim o = optim.Adam(net.parameters()) . Creating the training loop . Here are the 4 steps to create a basic training loop . Loop epoch number of times | for i **in** range(epochs): ... . Inside the epoch loop, loop through data loader (dl) | for images, labels **in** dl: ... . Inside the data loader loop, | zero grad optimizer before passing pushing data into NN. . | Take an optimizer step after pushing data through NN. . | . o.zero_grad() ... o.step() . Between optimizer zero_grad and optimizer step, pass data through the NN, compute loss and gradients. | out = net(images.float()) loss = loss_fn(out.float(), labels.long()) loss.backward() . Generating output . A similar step as above has been taken to generate test_dl and the testing loop. . The only difference, . test_dl has ‘train=true’. Dataset will only return features and not labels. . | code to not calculate gradients since we are not training. . | . with torch.no_grad(): ... . The output is in the form of numbers from 0…9. . | Our output is a column (dim=1) array of length 10 with probability. . | The maximum of this array is our output. . | . out.argmax(dim=1) . We store these outputs in an outputs python list. . test_df.shape, sample_df.shape # Out[17]: ((28000, 784), (28000, 2)) . I realized that sample submission and output df have the same length. . | I just need to add ‘Label’ column to the submission data frame and save it in CSV form. . | . sample_df[&#39;Label&#39;] = outputs sample_df.to_csv(&#39;submission.csv&#39;, index=False) . index=False removed the default pandas index when saving . Commit Version 3: Improvements . Changes: Proper Accuracy, Graph, and Data Normalization . Day 4 . | Score — 0.96 . | Time invested — about an hour . | . Proper Accuracy . Accuracy should always be calculated on the validation set. . Creating a separate validation set . val_len = int(len(ds)*0.01) # 0.01 percent of data train_len = len(ds) — val_len # all other are in training from torch.utils.data import random_split train_ds, val_ds = random_split(ds, [train_len, val_len]) . Likewise, 2 data loaders are created. . bs = 64 train_dl = DataLoader(train_ds, bs) val_dl = DataLoader(val_ds, bs) . Changes in the training loop . A separate list called accuracies in created to store the accuracy of an epoch. . ... with torch.no_grad(): accuracy = 0 for images, labels in val_dl: out = net(images.float()) accuracy+=(out.argmax(dim=1) == labels).sum().item() accuracies.append(accuracy/len(val_ds) * 100) . Graph . Since the accuracy of each epoch was stored in a separate accuracies list, creating a graph was easy. . import matplotlib.pyplot as plt plt.plot(range(epochs), accuracies) . Data Normalization . After plotting the graph, I realized accuracy was 43% which is the same as the score of commit 2. . The easiest thing to do was to normalize the data. . Since MNIST images are in the range of 1…250 the easiest thing to do was to divide by 250 which would result in a range of 0…1. . Ideally, the range should be around 0 so an even better approach would be . image = image/250–0.5 . this would result in a range between -0.5…+0.5. . Later we would use torchvision.transforms.Normalize(mean, std, inplace=False) which generates unique normalization value for each dataset . Commit 6: ConvNet, and GPU . Day 6 . | Score — 0.97 . | Time invested — about 2 hours (lots of googling and reading docs) + 1 hours fixes bugs . | . ConvNet . Convolutional Neural Networks are ideal images. . ResNet . ResNet 34 is my goto ConvNet but since MNIST is so easy, I went with ResNet 18. . import torchvision.models as models resnet18 = models.resnet18(pretrained=True) resnet18.fc #print fully connected network . ResNet is designed to output 1000 classes. But our output is from 0…9 aka 10 classes. . lin_in = resnet18.fc.in_features import torch.nn as nn resnet18.fc = nn.Sequential( nn.Linear(lin_in, 10), nn.Softmax(dim=1) ) . Convert Grayscale to RGB image . ResNet expects RGB images. MNIST is grayscale. . `img = img.view(3, 28, 28).expand(3, 28, 28)` . This grayscale to the RGB line is added to our Dataset class. . Normalization . When using an existing model, we need to use the same normalization values as that model. The docs mention the normalization value. . import torchvision.transforms as transforms normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) . The init and getitem dataset class have been modified to use this transformation. . Modifications have also been made to test_ds. . GPU . One I started the training loop, I realized it suddenly became too slow. . GPU is needed! . device = torch.device(&#39;cuda:0&#39;) if torch.cuda.is_available() else &#39;cpu&#39; . If the GPU is on, the device will be cuda. . The neural network and the data in training, validation and texting loop have been changed to run on GPU. . net = net.to(device) ... images, labels = images.to(device,dtype=torch.float), labels.to(device) . And since we are on GPU we can increase our batch size from 64 to much higher. . I experimented with a few sizes from 320…640 and kept an eye on GPU utilization and settled for 512. . . I did the same for num_worker which specifies the number of threads to load a batch. This is CPU stuff. . Along with monitoring GPU and CPU usage, I modified training_loop to show the amount of time taken to complete each epoch. . bs = 512 num_workers = 2 train_dl = DataLoader(train_ds, bs, num_workers=num_workers) val_dl = DataLoader(val_ds, bs, num_workers=num_workers) . This resulted in 7 seconds per epoch. . For testing, the batch_size can be much higher since we don’t have to back prop. . Commit 7: Improvement . Day 8 . | Score — 0.97 . | Time invested — about 30 minutes . | . I learned that you don’t need nn.Softmax if you are using nn.CrossEntropyLoss. . nn.CrossEntropyLoss has nn.Softmax built-in and the results of softmax are not used during back-prop. So it can be safely removed. . Now FC is this: . lin_in = resnet18.fc.in_features import torch.nn as nn resnet18.fc = nn.Sequential( nn.Linear(lin_in, 10) ) .",
            "url": "www.ankushchoubey.com/deep%20learning/kaggle/2020/03/30/digit-recognition.html",
            "relUrl": "/deep%20learning/kaggle/2020/03/30/digit-recognition.html",
            "date": " • Mar 30, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Kaggle CLI QA: How to download a particular folder",
            "content": "Harshini on Medium asks . Nice Article, . But I got struck while trying to download a particular folder from kaggle competition “state-farm-distracted-driver-detection”. I want to download “img/train/c4” folder in that dataset, But when I’m trying to run the command, it’s giving an error like “404 — Not found”.. . But I am able to download a particular image like this “img/train/c2/img_100029.jpg” . *Is there any command to download a particular folder?? . . Hi Harshini, . Kaggle CLI does not support downloading the entire folder or multiple files at once (except in case of downloading entire competition). Only one file can be downloaded at a time via the CLI. . Here is how I downloaded the entire c4 folder . 1. Created directory if it does not already exist . mkdir -p img/train/c4 . 2. Get the list of all files available in the dataset, filtered the files which were in the c4 folder, picked file name, repeatedly download each file. . kaggle competitions files -c state-farm-distracted-driver-detection | grep c4 | awk ‘{print $1}’ | while read x ; do kaggle competitions download -f $x state-farm-distracted-driver-detection -p img/train/c4 ; done . . — — — — — . I don’t use the command line regularly. These are the sources I looked: . Read values into a shell variable from a pipe . | How to mkdir only if a dir does not already exist? . | How to use a shell command to only show the first column and last column in a text file? . | . kaggle competitions download -h . Hope this helps! Have a good day! . Medium reply .",
            "url": "www.ankushchoubey.com/qa/kaggle/2020/03/10/kaggle-cli-download-a-folder.html",
            "relUrl": "/qa/kaggle/2020/03/10/kaggle-cli-download-a-folder.html",
            "date": " • Mar 10, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Simple Hacks for increasing website load time",
            "content": "Reduce bundle size . Always use compression: at least gzip . Always compress. The configuration is set in the webserver. . gzip is good enough in most cases in terms of both performance and speed. . My application went from 4 MB to 800 kb. Fewer data faster speed. . Source 1: Enabling gzip Source 2: Verify gzip on Chrome . Make less number of requests . Always cache static content: js, css and static images. . This can be configured in your web server or your application. Just google “ “how to cache in “. . Of course: be sure to not cache dynamic content. . For js and css files, make sure it has a name that is unique if the file is modified. . Example: in angular after creating a --prod build, the filename is in following format &lt;filename&gt;.&lt;md5 checksum&gt;.js. . This ensures that if the content of the file changes, the md5 checksum will change and a new request will be sent but if the file does not change then it will have the same checksum so it can be pulled from the cache. . Always load images lazily . &lt;img loading=‘lazy’ ... /&gt; is so so easy. Images are only fetched when user scrolls near it. #freeSpeedUp https://t.co/nduXUy5GLmAre there any more such tweaks that exist? . &mdash; Ankush (@ankschoubey) January 21, 2020 Advanced tips: Lazy Loading Images and Video . Do it fast . Fetch js and css asynchronously Source . When fetching js add async defer to script tag. This will fetch multiple js files in parallel. . Keep script tag in the header for this. . . Are there more such easy tips? . Please mention them in the comments and I will add the tip to the list and mention your name. .",
            "url": "www.ankushchoubey.com/web%20development/2020/02/22/simple-hacks-for-increasing-website-load-time.html",
            "relUrl": "/web%20development/2020/02/22/simple-hacks-for-increasing-website-load-time.html",
            "date": " • Feb 22, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "www.ankushchoubey.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "www.ankushchoubey.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Clean Code  Leave it better than you found it",
            "content": "Clean Code #8 . Code is much more like a work of art/craft that people consider it. . Knowing the benefits and tips for writing good code will take you only so far. It requires a mindset shift. Looking at the code through an artist’s eye. . . ![The clean version of the image from the source: Leave it a little better than you found it . Incremental Improvements . If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot. The cleanup doesn’t have to be something big. Change one variable name for the better, break up one function that’s a little too large, eliminate one small bit of duplication, clean up one composite if statement. . Can you imagine working on a project where the code simply got better as time passed? . ~ Rober C. Martin (Author of Clean Code) . Maybe, improve one microservice. | . Tip: Leave TODO as comments for your future self. These could include how you want to improve the code but don’t have time right now to do it. Hopefully your future self will handle it. . Upgrading Fast (get rid of Legacy) . Newer languages and frameworks provide many more features, provide security upgrades and are easier to use. The longer you wait to upgrade, the harder the upgrading becomes. . You will also find that clean code is much easier to upgrade. . Do it one step at a time. . Making a big bang change is never feasible. . Upgrading can come in a variety of sizes. . Simple upgrades such as — Custom SQL executors in code to using an ORM. . Get rid of prepared statements and replace them with Spring Data JPA | . Or they can be a little bigger such as — Going from AngularJs to Angular. . Developers of the code to provide guides and tools to make upgrading frameworks easier . *Like: Official guide for upgrading from AngularJS to Angula*r. . The above guide mentions some things that are worth mentioning here: . Some applications will be easier to upgrade than others, and there are many ways to make it easier for yourself. It is possible to prepare and align AngularJS applications with Angular even before beginning the upgrade process. These preparation steps are all about making the code more decoupled, more maintainable, and better aligned with modern development tools. That means in addition to making the upgrade easier, you will also improve the existing AngularJS applications. . Or a much bigger one like — Going from Java to Kotlin. . Choosing a programming language is a hard process. . Ideally, you would want to choose something which is: . Non-proprietary . | In-expensive or FREE . | Easy to code in . | Flexible enough . | . Java to Kotlin . Enterprises seem to have got stuck with Java 8 (released in 2017) because it is free. The newer versions of Java offer much better and easy to use features but enterprises won’t upgrade. . Kotlin might be a much better choice because: . It is completely interoperable with Java. You can import your Java code and any other built by anyone within Kotlin. . | Spring Boot and Android officially support Kotlin. . | Kotlin is much more modern than Java offering things like default parameters and null checks. . | . A smaller way to check if Kotlin might be right for you is to migrate or create one microservice in/to Kotlin. . Python 2 to Python 3 . The support for Python 2 ended (2019) after 20 years of development. Its code is frozen and won’t even receive security upgrades. Time to upgrade to Python 3. . Code Reviews . . Benefits of Code Review . Code reviews share knowledge . As code reviews expose developers to new ideas and technologies, they write better and better code. . Nobody wants to dive into a critical piece of code they didn’t write–especially during a production emergency. Code reviews share knowledge across the team so that any team member can take up the reins and continue steering the ship. . Code reviews make for better estimates . Any code reviewer is also exposed to the complexity, known issues, and concerns of that area of the code base . Keep in mind, code review is not just a senior team member reviewing a junior team member’s code. Code review should happen across the team in every direction. Knowledge knows no bounds! Yes, code review can help newer engineers, but by no means should it be used solely as a mentoring exercise. . Source: Why code reviews matter (and actually save time!) . The article also mentions ways to make code reviews much more productive. . When done right, code reviews actually save time in the long run. . Share the load . | Review before merging . | Use peer pressure to your advantage . | . Previous: Always know why you are catching an exception . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/medium/2020/01/06/clean-code-leave-it-better-than-you-found-it.html",
            "relUrl": "/medium/2020/01/06/clean-code-leave-it-better-than-you-found-it.html",
            "date": " • Jan 6, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Clean Code  Exception handling",
            "content": "Clean Code 7 . Errors should never pass silently. Unless explicitly silenced. . ~The Zen of Python, by Tim Peters . Create custom exception classes . Your exceptions should say exactly what went wrong. While those provided by programming languages are good, they are too general and are not specific to your codebase. . Oversimplified example: . Bad: Exception(“number is smaller than 0”) . | Better: SpeedException(“Speed should not be smaller than 0”) . | . The reason you want to do this is that you can handle different types of exceptions in different ways and it is much easy to know exactly what went wrong from the logs. . In most programming languages creating exception is easy. Just inherit from the main Exception class which should be enough for most cases. . Custom Exception class also makes your logs easier to read. . Always know why you are catching an exception… . . … or just don’t catch it (throws to the caller) . if you are not going to do anything with the exception don’t catch it just throw it. . Don’t add throw exception in the catch block. Use throws while declaring the function instead. . For Unsupported Operations . In if-else statements or switch cases, it is always good to have a default case which will execute if no other condition is true. . If something is not possible or not supported then: . throw (Java): UnsupportedOperationException . | raise (Python): NotImplementedError . | . . Global exception handling . These allow you to have the same exception handling mechanism in case you have not explicitly handled the exception. . The most basic thing to do here is logging the exception. . Spring (Java): @ControllerAdvice . Previous: Avoid inventing algorithms and data structures . Next: Leave code better than you found it. . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/medium/2020/01/06/clean-code-exception-handling.html",
            "relUrl": "/medium/2020/01/06/clean-code-exception-handling.html",
            "date": " • Jan 6, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Clean Code  Remove un-necessary code",
            "content": "Clean Code #5: You ain’t gonna need it . Declare the local variable as close to where it is used and remove un-necessary once . Local variables declared at some different place makes it harder to read the code. . Example: . Below are the variations of aRandomFunction which does a bunch of operations (skipped by dots) and on completion returns “Hello” along with the date. . . The local variables names and date are declared on top of the functions. . The first usage of the functions are somewhere between the function and the last usage is in the return statement. . . Here name and date variables are moved to where they are first used. . Let’s say after moving we realize that we do not use the variables between the code, we just use it during return. . So we should move it near the return statement: . . . Just return it. Don’t store . Continuing from the previous example: . Storing in a variable is un-necessary is it is never used. . Rather than storing “hello” in name and a new date in date, we should just return it. . . . Remove commented code . In case you do need to refer to the exact code you can always check it in your version control. . . Remove functions and variables which you do not use. . . Variable argument lengths . Python: *args, **kwargs (more than just variable-length argument) . Java also has an implementation for variable length arguments but they are not as elegant as Python implementation. Therefore, a list as an argument might be better suited. . . Default Arguments . Python and Typescript both support default function arguments. . While not officially supported in Java, one can work around the builder pattern to get similar functionality. . ![Source: Managing Constructor with many parameters . . Use annotations/decorators . Annotations extend the functionality of your function dynamically and reduce the size of the code dramatically. . Python: Decorators . In python, these are called decorators. . Python 3.7+ also has @ dataclass **annotation which auto-generates constructor, **str and repr. . Relevant Links: . Primer on Python Decorator . | Source: [functools](https://docs.python.org/2/library/functools.html#module-functools) — Higher-order functions and operations on a callable object . | The Ultimate Guide to Data Classes in Python 3.7 . | Method Types in Python OOP: @classmethod, @staticmethod, and Instance Methods . | . Spring Boot (Java) . ![Source: Spring Annotations Cheat Sheet . Java: For JPA . No need to write @Column over your entity’s variables. By default, camelCase is substituted with snake_case. . lookupId =&gt; lookup_id . You can change these using naming strategies. . . Java: Map using Mapper. Don’t create your own logic. . There are many mapping frameworks in Java that can make the task of converting one object to another much much easier. This can be especially helpful when you want to convert your @Entity to a DTO object. . . Java: Project Lombok to avoid boilerplate . Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java. . Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more. . @Getter and @Setter . | @NonNull . | @ToString . | @EqualsAndHashCode . | @Data . | @Cleanup . | @Synchronized . | @SneakyThrows . | . The good thing is that it is present is SpringInitializer. Just click the Project Lombok option. . With this, the size of your java code will reduce dramatically. . . Remove duplicates . Linters will provide you a list of duplicate codes. Shove it into a function/method. . Use existing/inbuilt methods rather than new once . This goes back to not inventing new algorithms. If something is already made, don’t make it again. Reuse it. (Link — Clean Code: Know thy complexities) . Probably a bad example #1 of reuse: . Below is a very complex function. One of them works with List and other with an array but that is the only difference in implementation. . The bad approach is creating the same logic to work with different data structures. . . A better approach is to have one main logic function and convert one data structure to another and then call the main one. . . We can also take advantage of having the same name for both the functions which means less to remember. . . Probably a bad example #2 of reuse: . This is similar to the above. . Here suppose you already have a complex function that works on a list of integers, and now you have to make a similar one to work on a single int. . . . Single line boolean evaluation . . . Think in terms of Streams . Streams make your code really really tiny and give much better performance. Streams do have a learning curve but are worth it. . (swap in a stream() for parallelStream() and you just went Super Saiyan 3) . Though the implementation of Java streams and having a single line list comprehension in Python are very different, they are similar in terms of style of code. . . Create and use base classes . Base classes are an excellent way to avoid duplications. Make them as generic as possible. . . Previous: Make database do the heavy lifting . Next: Avoid inventing algorithms and data structures . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/medium/2020/01/04/clean-code-remove-un-necessary-code.html",
            "relUrl": "/medium/2020/01/04/clean-code-remove-un-necessary-code.html",
            "date": " • Jan 4, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Clean Code  Know thy complexities, data structures and avoid inventing algorithms (especially for…",
            "content": "Clean Code #6: (especially for maths) . If you are inventing new algorithms, you either don’t know the right algorithm or are working on your PhD thesis. . Eliminating as much of this **accidental complexity **as possible. . Source: Why Your Code Is So Hard to Understand . Keep your implementation as simple as possible . If the implementation is hard to explain, it’s a bad idea. If the implementation is easy to explain, it may be a good idea. . ~ The Zen of Python, by Tim Peters . Knowing the basics of time and space complexity goes a long way. . Going through each is beyond the scope of this. Here is a link if you want to go in-depth: Cracking the Coding Interview YouTube . The concept of List, Sets, and Maps is universal though this particular post is going to look at it through the lens of Java. In the case of Python map is called a dictionary. . Additional Tip: Always use parent interface for the type . Be as general as you can be. . This allows you to swap in any form of implementation of parent interface in a single line. . . When trying to find duplicates . Use Set instead of Lists . Set always contain unique values. . Finding an element in the set is much faster O(1) than compared to a list O(n) . . Java: If you know the size of the list . … if the required maximum capacity of the ArrayList is known, we can get the optimal performance (both average latency and throughput) by specifying the initial capacity to the required capacity. . In doing so, we can get 24% to 34% improvement in average latency and 30% to 50% improvement in throughput. . Source: Performance Evaluation of Java ArrayLists . Always have your algorithmic logic in a separate function . This just makes it much easier to debug. Your function will be doing just one this. . Making it general enough will be even helpful so that you can easily use it. . **Example: **Separate loop and operation section: Clean Code #1 . Rather than implementing own logic, take 5 minutes to see if your modules already provide the implementation . Example: Sorting in Javascript/Typescript . . . A library in java which you can find is Apache Common Lang 3 which does provide a lot of utilities. . Python has much more abundance. Just google a solution for python and you will probably find a pip package. . Previous: Remove unnecessary code . Next: Always know why you are catching an exception . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/medium/2019/12/25/clean-code-know-thy-complexities-data-structures-and-avoid-inventing-algorithms-especially-for.html",
            "relUrl": "/medium/2019/12/25/clean-code-know-thy-complexities-data-structures-and-avoid-inventing-algorithms-especially-for.html",
            "date": " • Dec 25, 2019"
        }
        
    
  
    
        ,"post10": {
            "title": "Clean Code  Avoid creating god classes and long methods",
            "content": "Clean Code #3 . As you gain experience as a developer you start to see repeating patterns that crop up over and over again in your solutions. . When you use chunking (design patterns, algorithms and standard functions) appropriately, it allows you to stop thinking about how the code you write does something and instead think about what it does . Source: Why Your Code Is So Hard to Understand . Classes . One class should do one thing not everything like StatusChanger or StatusManager, not StatusGod . Keep classes small, a 1000 line class is a pain . Methods . Name . Avoid using and in method names like validateAndSave, one method needs to do one thing and one thing well . Don’t Repeat Yourself . There should be one — and preferably only one — obvious way to do it. . ~The Zen of Python, by Tim Peters . Lines of Code . Keep methods small, a 50 line method is a problem. . My rule of thumb is: The method should not be more than the size of my screen. (Source: Jeremy Howard fast.ai) . Passing variables . Keep the instance variables as low. If you are passing 4,5 variables you are probably doing more than one thing . Pass an object instead of multiple methods . Don’t pass the variables that you don’t need. . If creating an object requires multiple steps . Convert it into a factory method . Previous: Leave clues (Naming convention) . Next: Make database do the heavy lifting . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/medium/2019/12/25/clean-code-3-avoid-creating-god-classes-and-long-methods.html",
            "relUrl": "/medium/2019/12/25/clean-code-3-avoid-creating-god-classes-and-long-methods.html",
            "date": " • Dec 25, 2019"
        }
        
    
  
    
        ,"post11": {
            "title": "Clean Code 4  Make the database do the heavy lifting",
            "content": "Clean Code #4 . Rule of thumb: Avoid filtering loops . SQL/Databases are good at 2 jobs: storing data. filtering data as fast as possible. You’re for loop cannot compete with SQL. . The performance of your program will be much faster if you let SQL manage the filtering of data. Plus it will also result in a smaller line of code. . Try to filter with smaller queries with a smaller number of columns before fetching all the columns. Smaller the data, the faster will be the data transfer. You will find a better example of this in the section of Complex Queries bellow. . Use ORM . For Spring (Java), ideally, use JPA method query things.*** . ![Source: JPA Repositories Spring.io . Tips: Use tools to make Entities POJO: https://www.youtube.com/watch?v=LrbaDRcu3Y0 . For Python, SQLAlchemy is popular and preferred or Django ORM for Django. (I have less experience with this) . Complex queries . In the case of Java, you can also JPA specific things like Specifications or Criteria API. . Honestly, I haven’t tried them I know they exist. I have seen them and found that the code looked really ugly . I do find Django ORM to be easier than Spring JPA (you can pass arguments rather than always create a separate function). . Break down big-bang (complex) queries into multiple simpler queries . *** This might be very controversial and I have not seen this talked about anywhere or used in other people’s code. **You are not likely to use this unless you are like me (bad at ORMs).*** . Many times you have a complex feature like search and you want to filter by multiple parameters. . What usually ends up happening you end up with a custom query generator or Criteria API (Java) or a query which is too long. Especially if this query requires additional features like ordering and pagination. . I think a simpler solution is to break it into smaller queries. I give a simplified example below. . Note that this is a much simpler version of what you would encounter but I think it will make the point. . There are 3 tables: . . . . Suppose you want to find who are male grandparents of children whose name start with ‘A’ . You can go for some complex query like . . . These 33 lines can quickly increase in size when you have too many tables. Multiple shorter queries are always much better than one big bang query. . I’ve seen queries which go beyond 100 lines 😖 . Making changes in such large 100+ line queries is a pain. . (Even when writing the 33 line query above, I introduced bug by not writing join on lines 30 and 31. writing smaller queries helped me debug.) . You could break into something simpler queries like: . . . . . . . . . Then code the method yourself to call these in a certain sequence: . . You will find that even though your line of code has increased, the modularity of code has also increased and these functions can be arranged in any way you like. . . Previous: Avoid creating god classes and long methods . Next: Remove unnecessary code . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/medium/2019/12/22/clean-code-4-make-the-database-do-the-heavy-lifting.html",
            "relUrl": "/medium/2019/12/22/clean-code-4-make-the-database-do-the-heavy-lifting.html",
            "date": " • Dec 22, 2019"
        }
        
    
  
    
        ,"post12": {
            "title": "Clean Code  Leave Clues (Naming convention)",
            "content": "Clean Code #2 . These apply to name everything: variable, class names, methods, package, etc. . When you have the semantic model fresh in your mind it’s easy to map your code onto it . It’s not hard to remember that a variable named “x” is the date a record was created and “y” the date it was deleted. . Leave clues that will allow you to rebuild the semantic model when you come back at a later time. . Source: Why your code is so hard to understand . Comments . Comments can lie. The code does not. . Ideally, your code should be so good that you do not require comments. . This might not be true in one case which is when you code something weird and required domain-specific explanation. . Like in Machine Learning, a choice of certain parameters or a certain step can be understood better by putting the link to explanation/research paper in the comment. While reading just the code, it might not be obvious for the reader to understand what to make of it. (Source: Jeremy Howard fast.ai). . Intent giving names . Use pronounceable names . Variables should be named so that they make it clear what it contains. . Variable names should always be easy-to-read, be short yet meaningful, mixed case with a lower-case first letter English words. . b)Use plural names **for arrays/collections of **objects. . c) Constant (static final) variable names should be in all capital letters and separate words in the name with the underscore, i.e., PRIORITY_NORMAL, . Source: java coding-convention and cleancode . . For matrix operations use row columns instead of y and x because in some languages matrix is treated as [y,x] . . Source: Gayle Laakmann McDowell (Cracking the Coding Interview Book) . Abbreviations and short forms . Many people try to optimize for vertical space of the screen but forget horizontal space. . This is kind of an exception to the above rule: for things that are very very common, short forms are better. (You also type less). . Just don’t short everything to be a single letter. Be small but descriptive. . Also, having a list of abbreviations used in your project readme/documentation can be helpful. . Examples, . repo for repository . | util for utility. . | serv for service . | len for length . | dto for Data Transfer Object (pretty common) . | . Make sure you use the same abbreviations everywhere in your code aka one word per concept in all classes. . (Below examples are for method names) . get/fetch/find . | set/update . | . In case you are trying machine learning, I guess this article is much better suited: Jeremy’s notes on fastai coding style . Magic numbers and strings . Any number or string in your code that isn’t immediately obvious to someone with very little knowledge. . Source: StackOverflow . Better to declare them in a separate constants file. . Constants should be snake_case and CAPITAL. . ![Link: List of HTTP status codes . In the case of Java, enums can also be used to achieve something similar but they will contain a lot of java boilerplate. . . There are also language-specific naming conventions involved like: . Java and Typescript prefer camelCase . | Python and SQL prefer snake_case . | For Unit test cases . My aim is not so much about reducing the lines of code. Tests are usually small. (In case if your tests are huge and complex then you must have written a bad code) . I prefer to keep the end of each method the same. Like: . ![Code was taken and modified from Unit tests with Mockito — Tutorial . I use Mockito so I skip the first line. The start of the function then is with all stub actions. . The last 3 lines are usually similar. . A variable expected: expected value . | A variable actual: calls the function/method . | assertion . | I find that for most tasks it is easier to make changes to expected and actual variables rather than put everything into assertions. The assertion is always clean. . An alternative to the above assertion is to write like below which I find to be messy. . ![Code was taken and modified from Unit tests with Mockito — Tutorial . Previous: Flat is better than nested . Next: Avoid creating god classes and long methods #NotEnoughChunks . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/medium/2019/12/20/clean-code-2-leave-clues-naming-convention.html",
            "relUrl": "/medium/2019/12/20/clean-code-2-leave-clues-naming-convention.html",
            "date": " • Dec 20, 2019"
        }
        
    
  
    
        ,"post13": {
            "title": "Clean Code  Flat is better than nested",
            "content": "Clean Code #1: Leave when not okay . This might be the most important tip of all the tips covered which applies mainly to if-else statements. . Nesting clutters your code. . Where does the block end . It becomes hard to find where a particular block ends easily (especially if someone writes 8 or more nests 😖) . Unnecessary horizontal scrolling . Also, you might have to scroll horizontally to see what the complete code is since it does not fit your screen. . Nesting makes your code hard to understand. . While you are reading your nested block, you have to remember what all conditions preceded it. . The below guideline should counter that: . Max indent should be 2, in case of exceptions 3 . Avoid the use of else. . Return/throw when not okay . By returning early you make sure that in each of your functions the last line of your function returns what it is actually supposed to return. This will make your code consistent. . | Also, you would find that you avoid unnecessary nesting (which will calm your eyes 👁 and your linter). Thus, making your code easy to understand. . | . . Bubble vs Gateway . Bad (left): Bubble-Style . Good (right): Gateway-Style . If deep nests exist? Separate loop and operation . Extract the logic to other readable methods or use streams (Java)/lambda or something equivalent in your programming language of choice. . Usually, there is a problem where you have to perform a bunch of operations on an array of objects. . I tend to create at-least** 2 functions** for this: . One that performs an operation on a single object. . | Other calls the first function in a loop. . | In case if something goes wrong, it is easier to debug it since I know what function has what responsibility. . Simplified Example: Link to Code . . You have a bunch of students for which you calculate the average grade. . . In the above BadGrader, you can see than the code of calculating the grades is within the loop. This is bad as we cannot use the same piece of code elsewhere in the program. . . The BetterGrader separates the calculation part from the printing part. . . GoodGrader removes the naive logic that was used to calculate average and replaces it with a much shorter code that makes use of inbuilt functions. . This is an example of chunking which will be explained more in the next post. . Next: Leave clues (Naming convention) . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/medium/2019/12/20/clean-code-1-flat-is-better-than-nested-leave-when-not-okay.html",
            "relUrl": "/medium/2019/12/20/clean-code-1-flat-is-better-than-nested-leave-when-not-okay.html",
            "date": " • Dec 20, 2019"
        }
        
    
  
    
        ,"post14": {
            "title": "Series  Tips on writing Clean Code",
            "content": "TLDR: Clean code — constructing the simplest possible code that would solve your problem resulting in an increase in productivity by producing higher quality in less time. . I’m not a great programmer; I’m just a good programmer with great habits . ~Kent Beck (Creator of Extreme Programming) . . I started writing this as a single post but the number of paragraphs much so like any good programmer I decided to release in chunks. . These come from a series of notes I took since I was in college. . The attributions are lose. I did not think about writing a post while taking notes. . I will do by best to find the authors and link to their work when I find them any time in the future. Most of these came for searching for keywords like “clean code {language}”. . Some ideas I found while experimenting on my own. . . Usually building a software looks like this . You start small. But by the time you reach halfway, it becomes chaotic. . ![https://bonkersworld.net/img/2011.11.15_building_software.png . Reading vs Writing Code . While coding we spend more time reading the existing code than writing the code. We can estimate the ratio to be something like 10:1. . Most of the time you are more likely to modify and improve your code than to produce a new functionality. . ![(https://sizovs.net/2019/05/29/quality-is-not-negotiable/ . For something we spend the most time on, it is very important that we make the process of reading and understanding our code easier for ourselves and other developers. . Why do we write bad code? . Work needed to be done fast . | Tired of project/work . | Requirement changed . | Managers . | WE — Developers . | Work, for now, will clean up later . If we don’t follow good coding guidelines, we risk initial coding speed for long term code quality and productivity. . Usually, once you start on a path you are more likely to continue on the same path. . . What is Clean code? . Constructing the simplest possible code that would solve your problem. . Benefits . Problems become easier to solve since code is modular. . | Less time is wasted on maintenance since lines of code are less. . | Ideas are more clearly communicated. . | Unit Test cases are much smaller and easier to write. . | Making changes is much faster. . | Pleasing to your eyes 👀. . | . . The actual Guidelines aka Index . Clean Code #1: Flat is better than nested &amp;&amp; Leave when not okay . . Clean Code #2: Leave Clues (Naming convention) . . Clean Code 3: Avoid creating god classes and long methods . . Clean Code 4: Make the database do the heavy lifting . . Clean Code: Remove un-necessary code . . Clean Code: Know thy complexities, data structures and avoid inventing algorithms (especially for… . . Clean Code: Exception handling . . Clean Code: Leave it better than you found it . . . Other Relevant Links . Linters . SonarLint is good for most cases. . Python: SonarLint or PyLink . | Java: SonarLint or Sonar Cube . | Typescript: TSLint . | . Domain/Language-specific tips . For Deep Learning/Machine Learning: fastai coding style . | Java: Google Java Style Guide . | Python: pep8 or Google Python Style Guide . | Angular official style guide . | . Natural next steps: . Design patterns: Design patterns for Humans and Java Design Patterns in Stories . | Anti-Patterns . | Falsehoods . | The Clean Code Book . | Cleaner REST APIs: RESTful API Designing guidelines — The best practices . | Microservices and Micro frontend. . | .",
            "url": "www.ankushchoubey.com/medium/2019/12/19/series-tips-on-writing-clean-code.html",
            "relUrl": "/medium/2019/12/19/series-tips-on-writing-clean-code.html",
            "date": " • Dec 19, 2019"
        }
        
    
  
    
        ,"post15": {
            "title": "10 Google Collab Tips",
            "content": "Collab is my favorite place to do deep learning because: . No setup needed . | Free . | Faster than typical local setup . | It is better than Kaggle and easier than Google Cloud. . | Really good editor features. . | . Similar: Code better in Jupyter Notebook . 1. Always Turn On Experimental Feature . Dynamically typed languages like Python are a pain (for me) because they do not provide good auto-complete. This is the best one I have seen so far. . . 2. ️ Jump to Definition . 3. Use GUI for exploring files and Mounting Google Drive . Deep Learning is intimating enough. . You don’t want to remember everything as code. Use the GUI. . . If a certain file you are looking for you can explore right click and click on copy path. . 4. Creating Custom Snippets . You can add custom snippets by: . Creating a collab notebook with a header followed by a snippet | . Including it in your other notebooks by going to Tools -&gt; Preferences and pasting URL of the custom notebook. | . Search and use your snippet in code snippet section on the left | . 5. Get GPU Info . Type: . !nvidia-smi . If you have GPU mounted you will get this reply. . . In case if you don’t know how to mount GPU: . Click RunTime Menu → Change RunTime→ Hardware Accelerator → Choose GPU . 6. Opening Notebooks from Github with ease . To open a notebook from Github. Go to https://colab.research.google.com switch to the Github tab and enter an organization or URL. . . A much easier way is to use **“Open in Colab” Extension for Chrome . After installation, whenever you find a Jupyter notebook in Github, click the icon of the plugin and it will open in Colab. . . 7. Send email when the task is complete . This can be helpful when you want to leave your computer for a long time and want to just get a notification when training is completed. . This is a perfect candidate to apply with Tip #4. . **`import** smtpl`ib `server **=** smtplib**.**SMTP(&#39;smtp.gmail.com&#39;, 587) server**.**starttls() server**.**login(&quot;sender_gmail_here@gmail.com&quot;, &quot;your_password_here&quot;)` `msg **=** &quot;COLAB WORK FINISH ALERT!&quot; server**.**sendmail(&quot;sender_gmail_here@gmail.com&quot;, &quot;receiver_gmail_here@gmail.com&quot;, msg) server**.**quit()` . Source: Colab Tricks by Rohit Midha . 8.️ HyperDash . This one is more of an ML/DL DevOps tips which can work anywhere, even in other Jupyter notebook envs. . [**Hyperdash | Machine Learning Monitoring**](https://hyperdash.io/) | . hyperdash run -n “MNIST” python mnist.py Iter 1280, Loss= 1.576423, Acc= 0.51562 Iter 2560, Loss= 1.450179, Acc= 0.53906 Iter 3840, Loss= 1.160066, Acc= 0.64844 Iter 5120, Loss= 0.898589, Acc= 0.73438 Iter 6400, Loss= 0.685712, Acc= 0.75781 Iter 7680, Loss= 1.085666, Acc= 0.64844 $ hyperdash run -n “MNIST RNN” python mnist.py Iter 1280, Loss= 1.576423, Accuracy= 0.51562 Iter 2560, Loss= 1.450179, Accuracy= 0.53906 Iter 3840, Loss= 1.160066, Accuracy= 0.64844 Iter 5120, Loss= 0.898589, Accuracy= 0.73438 Iter 6400, Loss= 0.685712, Accuracy= 0.75781 Iter 7680, Loss= 1.085666, Accuracy= 0.64844 . HyperDash allows you to monitor your model training or anything that is printed via your phone. It supports both iOS and Android and is super simple to get setup. . Installation Step: . Install HyperDash on your phone | . Go to your Jupyter notebook and run the below cell | I used GitHub login so I added -github in the end . !pip install hyperdash &amp;&amp; hyperdash login — github . Import module | from hyperdash import monitor_cell . Use this magic in the cell you want to monitor. Which for most will be the training loop. | %%monitor_cell “model/experiment name” . In the app, you can see something like this. While I have included this as a tip, it is not something I have used. Because I have never trained for a very long duration. . . As per HyperDash website, it also allows detection of the status of your training and can notify when your training completes, fails, crashes or gets disconnected. . 9. 10. — Random Filler Tips: Dark Mode and Corgi/Kitti Mode . This is kind of a filler tip. (Just because I wanted to round off to 10 tips 😜). . . Go into Tools -&gt; Preferences -&gt; Theme -&gt; Select dark. . . While the dark mode is cool. I prefer using a light theme. . There is also a Corgi and Kitty mode under Miscellaneous which will add animated Corgis and Kitties in the header. . . Other useful tips: . Colab’s New Code Editor . | Colab Tricks by Rohit Midha . | 8 Tips For Google Colab Notebooks To Take Advantage Of Their Free-of-charge 12GB-RAM GPU. . | . Previous: Code better in Jupyter Notebook . Next: How to Download Dataset from Kaggle . I respond to all my comments. ありがとう .",
            "url": "www.ankushchoubey.com/medium/2019/08/18/my-top-10-un-popular-google-collab-tips.html",
            "relUrl": "/medium/2019/08/18/my-top-10-un-popular-google-collab-tips.html",
            "date": " • Aug 18, 2019"
        }
        
    
  
    
        ,"post16": {
            "title": "How To Download Dataset From Kaggle",
            "content": "2 Sentence Pre-requisite: . Kaggle is a platform for data science where you can find competitions, datasets, and other’s solutions. . | Some Kaggle datasets cannot be downloaded directly and can only be downloaded through Kaggle via it’s CLI. . | The Setup (One-time activity) . 1 — Install Kaggle CLI . To get started to Kaggle CLI you will need Python, open terminal and write . $ pip install kaggle . 2 — API credentials . Once you have Kaggle installed, type kaggle to check it is installed and you will get an output similar to this . . In the above line, you will see the path (highlighted) of where to put your kaggle.json file. . To get kaggle.json file go to: . https://www.kaggle.com/&lt;username&gt;/account . In the API section, click Create New API Token. And copy it the path mentioned in the terminal output. . . Type kaggle once again to check. . . In my case, even after copying it was not working. I had the file in place but it did not have the right permissions so I had to type the exact command they gave me. And it started working. . Downloading Dataset via CLI . You can open kaggle help via . kaggle -h . For getting info on competitions you can type . kaggle competitions download -h . whatever the Kaggle CLI command is, add -h to get help. . Find Data . while you can explore Competitions, Datasets, and kernels via Kaggle, here I am going to only focus on downloading of datasets. . What I do is I explore competitions or datasets via Kaggle website. . Download Entire Dataset . To download the dataset, go to Data *subtab. *In API section you will find the exact command that you can copy to the terminal to download the entire dataset. . . . The syntax is like . kaggle competitions download &lt;competition name&gt; . Download Particular File From Dataset . As you can see, the size of the data is 34 GB which is huge. . So instead of downloading entire dataset, you can select which files to download. . You cannot provide download multiple files with a single command (as of 2019/Aug/10) so you will have to download it one by one using the following command. . kaggle competitions download -f &lt;file-name&gt; &lt;competition-name&gt; . . Extract it and start using it. . I usually (plan to) put up a blog post every Saturday and create a YouTube video about it. My next post is a collection of Google Collab tips which will also include a way to download data from Kaggle into collab. . If there are any other useful tips/link/suggestion you would like to share, please put in the comment section below. . I respond to all my comments. . Thank you for reading so far. Have a good day. .",
            "url": "www.ankushchoubey.com/deep%20learning/2019/08/10/how-to-download-dataset-from-kaggle.html",
            "relUrl": "/deep%20learning/2019/08/10/how-to-download-dataset-from-kaggle.html",
            "date": " • Aug 10, 2019"
        }
        
    
  
    
        ,"post17": {
            "title": "Easy Jupyter Notebook Tips",
            "content": "In case you are not familiar with Jupyter Notebook, I recommend watching the following videos: . Use Wild Card Import . import * . In Jupyter Notebook where you want to be able to quickly interactively try stuff out, you don’t want to constantly going back up to the top and importing more stuff. You want to be able to use lots of tab complete and be very experimental, so import * is great. . When you are building stuff in production, you can do the normal PEP8 style proper software engineering practices. . This is a different style of coding. It’s not that there are no rules in data science programming, the rules are different. . ~ Jeremy Howard (Source: FastAI v3 Lesson 1) . Types of Notebooks . It is best to consider 2 types of notebooks for your projects . Lab Notebooks . | Delivery Notebooks . | Lab Notebooks help in trying stuff out without worrying about making things every reproducible. The goal is just to refer back to what was done in the past. . Delivery Notebooks are ‘production’ grade, well documented and reproducible which can be shared with the entire team/client. . For Lab Notebook naming convention can be something like: . date_initialsOfAuthor_actualName.ipynb . Source: IPython Notebook best practices for data science by Jonathan Whitmore (Blog Post) . Split code into multiple cells to get better code-completion . This is a no-brainer but I struggled with this for a long time. . Weakly typed programming languages like Python do not work well with code completions provided by IDEs because the type of value return by a function is defined at run-time. IDEs have a hard time figuring out what the return type is. . . But when running Jupyter Notebook you can avoid this by splitting your code into multiple cells instead of one, running them one by one and then hitting Tab. . . Use %time for measuring the rough speed of cell’s execution . . . This is an ‘always-updated’ blog post. You won’t find all Jupyter Notebooks tips. These are just the once I find the most helper. For a much more comprehensive list check out these links: . Python for Data Science — Getting More out of Jupyter (Video #4) . | 28 Jupyter Notebook Tips, Tricks, and Shortcuts . | . If there are any other useful tips/link/suggestion you would like to share, please put in the comment section below. I respond to all my comments. Thank you for reading so far. Have a good day. . Edit: 01 August 2019: Video Version .",
            "url": "www.ankushchoubey.com/medium/2019/07/29/easy-jupyter-notebook-tips.html",
            "relUrl": "/medium/2019/07/29/easy-jupyter-notebook-tips.html",
            "date": " • Jul 29, 2019"
        }
        
    
  
    
        ,"post18": {
            "title": "Lessons Learned from my first Deep Learning contest",
            "content": ". My rank is 41 out of 441. (0.97 F1 Score). . Before this, I had only practiced 2 lessons from Fast.ai and watched the first 5 lessons. . After the contest, I saw other participant’s approaches and found that their approach was much clearer and cleaner than mine. . Therefore, I decided to complete Fast.ai’s Deep Learning for Coders. . The contest was a month ago from this writing. I had the time to really sit and figure out what went well and what didn’t. . Approach . Here was my approach which I did in stages: . Step 1: Make models . 1. Make a simple resnet50 model. And make sure input and output submission file are correct. . 2. Improve the model. I found that the images were black and old. But the number of images were less and we cannot use external data so my solution was. . Heavy data augmentation (warping, crops, rotations): lead to 5–7 percent increase in F1 score and accuracy. . | Progressive increase image size. . | I initially started with (50,70) images . | Trained it that then increased it. Trained it again. . | . 3. Training approach. . Freeze the model train for 4 epochs | Unfreeze the model train for 7 epochs | I found unfreezing was getting higher accuracy but only when done more than freeze training. 7 is what I stuck at. | I replicated the kernel and trained resnet18, resnet34, vgg16, vgg19 and densenet121 so that I can ensemble there outputs | Model Making Environment: Kaggle Code at Models directory | . Step 2: Max Ensemble . After I had all the outputs from different models. . I used the output CSVs to make a max ensemble. . (You will see that I have renamed file names to be ‘modelname’.csv in ensemble folder and the output file is ‘simple.csv’) . Ensemble making environment: Local . Code: ankschoubey/AnalyticsVidya_Game_Of_Deep_Learning . Lessons and Mistakes Learned . Code . Environment . I trained on Kaggle Kernel. The only way to get output files was to commit. . | I also did not load existing models because on Kaggle you have to attach it as a dataset and then load. It’s a pain so I did not bother. . | It would have been much easier to train on Google Cloud, Collab or Clouderizer. . | . Should have used discriminative learning rate. . Transfer learning without discriminative learning rate is stupid. | . Refactor code early before replicating the kernel . I replicated kernels so that I can train different models on different kernels and get results faster. . | The problem was that I had introduced a bug which got replicated. Also, making changes was a pain because I had to copy paste things multiple times. . | . Use metrics used in the contest . Kind of dumb to mention this: I did not use the F1 score. Rather relied on accuracy. . Save as many things as I can so that you save time later . Save results . | Save model . | Save data . | . Use Checkpoints . Did forget the idea of checkpoints entirely. | . Useless Model . I made an ensemble which sucked because it only lead to 0.05 percent improvement. . | The reason was I used a lot of mediocre models. . | 1 ResNet 34/50 would have been fine. . | Also did not know about DenseNet very well back then. . | I believe that an ensemble of ResNet and DenseNet would have been wonderful. . | . Data . Look at the data and use good augmentation . I saw some images were grey scale and old. I might have got a higher score if I had taken time | . . Using good data augmentation. . My model was not performing well. 93–94% accuracy was the limit. . I buffed up every transformation. And it started reaching 96+. Warping helped a lot. . . Developer Habits . Start submissions early in the contest. And complete your work at least 3–4 days before the end. | .",
            "url": "www.ankushchoubey.com/deep%20learning/2019/06/23/lessons_from_first_deep_learning_competition.html",
            "relUrl": "/deep%20learning/2019/06/23/lessons_from_first_deep_learning_competition.html",
            "date": " • Jun 23, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "",
          "content": "Hi! I&#39;m Ankush Choubey! . I’m a programmer who loves everything technology: Web Development, Deep Learning, DevOps to everything that Elon Musk does. . I am an extrovert, a slow thinker, curious and love finding a different point of view. . I live in Navi Mumbai, India. . This blog is the way I share my thoughts. . Tweet to @ankschoubey ankushchoubey@outlook.com . Resume . Attributions: Favicon Icon made by Flat Icon Website made using fastpages .",
          "url": "www.ankushchoubey.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

}