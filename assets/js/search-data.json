{
  
    
        "post0": {
            "title": "Truthful Optimistic approach to bouncing back from major loss",
            "content": ". Photo by Joppe Spaa on Unsplash . Introduction . The blog post may seem trivial to many readers. This could be because they haven’t faced a big loss in their life. The kind of loss this post talks about is achievement related. It’s not related to the loss of human life. . Many of us have experienced loss, this could be a loss of job or a sudden end of a relationship. And these can devastate us in the short term. This can be especially true if we work really really hard. We put in all our efforts and still, we lost. . There are a few approaches we take when facing a major loss. . Conjure up a story that keeps us away from reality. | Examine, experience and accept reality as it is. | In Julia Galef’s Scott Mindset, a book about clear thinking, she describes these approaches in a chapter on Coping Mechanisms. This article is an expansion to the original ideas of the book for experiences and accepting reality as it is. . The premise of this post is this: You can deal with failure better when you understand certain truths. Understand, not just know. And by better I mean you can bounce back faster. . There is also the topic of how you not repeat the same mistake gain. But that’s for another time. . Dealing with loss truthfully . Understand and internalize these truths. . Settling the past . Truth #1: Karmafal is not in your hands. Only karma is . We don’t control the outcome of our actions. We only control how we act. There are many factors outside of our control. We can influence them with our decisions. But we can’t control them directly. . Truth #2: It doesn’t matter if you win or lose, it matters how? you play . Life is a series of games. If you cheat and win one game, it doesn’t mean you can cheat and win another. But if you lost the first game and didn’t cheat but kept improving and playing, you’ll eventually win a lot of upcoming games that come. . Therefore, it doesn’t matter if you win or lose. What matters is how you played. . Truth #3: You can only do your best . Here’s a hypothesis: Can you do more than your best at a moment? For example, at a certain moment, you learned a certain knowledge and hold certain resources, but you don’t know what’s beyond that knowledge. Therefore, you could only do your best. . That does bet the question of did you give your best. But as long as you did give your best, it doesn’t matter. Cuz you couldn’t have done more than your best. . Truth #4: You can’t win all the time. It’s a simple probability . What were your chances of scoring 99th percentile?? 1/99 assuming you have studied hard and studied better than all the people who also studied. . We always have wins and losses. These are mixed across time. . Looking at the future . Truth #5: Will this matter in 3-5 years . Almost all loss or win doesn’t matter in 3-5 years. We change our trajectory so much that we don’t care in the long term. . Truth #6: The past is gone . No matter how much we may want to change the past, it’s impossible. The only thing we can do is learn from it and use those lessons to shape our future. Accepting this truth can be freeing and allow us to focus on the present and future. . Truth #7: The next chance is still here . There is always another chance. Life is long enough to get important things done, and even if we fail at something today, we can try again tomorrow or pursue a different path. . Truth #8: Losing means learning . We have time, and now we also have experience. This means the next time we are less likely to make the same mistake if we learn it. .",
            "url": "https://www.ankushchoubey.com/v1/dealing-with-loss",
            "relUrl": "/v1/dealing-with-loss",
            "date": " • May 6, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Remind yourself of your core values at all times.",
            "content": "Humans are forgetful. We have infinite (useless things) to attend to. . Keep your core values front and center. Base your life around them. Not anything or anyone else. . Wake up each day choosing to live your core values better. . Sleep each day reflecting on them. Choosing how you could improve you could improve your practices or how you could improve your values. . Keep a place where it’s visible at all times. .",
            "url": "https://www.ankushchoubey.com/v1/remind-yourself-of-your-core-values/",
            "relUrl": "/v1/remind-yourself-of-your-core-values/",
            "date": " • May 6, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Let other people see your values",
            "content": "Your core values are who you are to the core. People around you should be able to guess your core values. Even without you explicitly telling them. . If they aren’t able to guess with a good degree of accuracy, you may have a branding issue or more likely you aren’t living to your core values fully. . At the same time, discussing your core values with others especially giving reasoning when you take certain decisions that others find weird is a good way to deepen your understanding and let others find holes in your values. . Explaining my core values to my friends and family has helped them understand me. And it has helped me be a more genuine version of myself. . . Original Image .",
            "url": "https://www.ankushchoubey.com/v1/let-other-people-see-your-values/",
            "relUrl": "/v1/let-other-people-see-your-values/",
            "date": " • May 6, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Let the world do what it wants to do, you follow your core values",
            "content": "Core values are long term. They aren’t short term. . They may have good shorterm impact too. But not always. . While you are following your core values, you’ll find people taking shortcuts. Hacking and bending reality to fit their short term purpose. . Many time you’ll also be tempted to go on the same path. To not pay attention to details. To skip consciousnly. You may want the same fast pace progress that other’s are having. . But don’t go down that path. Fast is an illusion. A puffed up reality. . Real long term progress is slow and takes months and years. You’ll likely stare into an abyss. But it’s way better to voluntarily choose to go and stare into the abyss. As more snd more time passed, you’ll see a light. A transformed version of you in every area of life. . So making your decisions based on what the world is doing. Let them take their path. You choose yours. . If you have carefully selected your core values, you believe these are your best bets. Choose your best bets no matter the short term impact. .",
            "url": "https://www.ankushchoubey.com/v1/follow-your-values/",
            "relUrl": "/v1/follow-your-values/",
            "date": " • May 6, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Stepping aside from the game of “success” and comparison",
            "content": "According to be Big 5 scale. I am high in conscientiousness and high in openness. Meaning I am hard-working and open to ideas. And this is a usual trait for societal success. . At about 16 years old, I came across self-help. And I was hooked. Exercising, Meditating, Morning Rituals, Reading Books, Quitting Social Media, etc. I have done and restarted these multiple times. . At the same time, I am someone who during his teen years was very jealous of other teens. If I see someone doing something better or I hear a young genius of the same age getting an offer from Google or making apps, I would be very very jealous and critical of myself. . As I have gotten older, I have resolved my jealousy of other people of similar age but also my jealousy of others in general. This article is a description of my current thought process. . . Photo by Dietmar Becker on Unsplash . Comparison with others is a stupid game . In a previous blog post, I talked about Ethos, Pathos, and Logos, and how these persuasion techniques can be used beyond persuasion. One of them is we can identify what sort of game we are playing and choose what game we want to play. . For example, comparison with others is an ethos game. Ethos is character. You are more likely to listen to a doctor, who is well-dressed and from a prestigious college than to a random doctor who is not. . Ethos as a game means you are comparing yourself to others and trying to one-up yourself. “He earns less than me”. “I have a good-looking girlfriend, he does not”. Ethos game is a popular cultural name: Status Games. . Status games are externally driven. And what’s externally driven is almost always fragile. . Therefore, ethos/status games are fragile. . Today you are “more successful” than someone. Yesterday someone else was. Tomorrow someone else will be. . Start to learn to play piano and after a year you’ll find a child prodigy beating you at every note. Become a senior programmer with 10 years of experience and find out some random college kid understands concepts much more deeply. . Maybe you got lucky. Or maybe someone else got lucky. Good for you and good for them. . Most comparison/Ethos Games/Status Games are stupid. It’s a win-lose game. You should choose a win-win game. Make yourself better and make someone else also better. . “Achievement/Success” is never stable. It’s in constant flux. . Simon Sinek has a wonderful video, we’ll see. Once upon a time, there was a guy who broke his legs. Everyone pities and the guys were sad. The monk said we’ll see. Then a few months later a war happened, and every man had to go to war. Guess who didn’t go to war? The guy who broke his leg. The guy is now happy. The monk says we’ll see. And the story goes on and on. . An achievement is a one-time event. It’s not an everyday event. And once you have success doesn’t mean you will stay “successful”. You or someone may lose their success and then have to start from scratch again. That’s life. . Maybe you have some opportunities that others didn’t have. Or maybe you earned your success. Now, you see someone else who has been way faster in his, should that matter? I would so no. Good for him. Good for you. . Stupidest game: RESPECT. . Earning respect externally is the stupidest game I can think of. It’s fragile. . People spend time crafting a perfect social media profile. Everyone trying to treat themselves like a celebrity. Hoping they get likes. Today everyone likes them. And they have made it part of their identity. Now, become too afraid to show the real them. They can speak freely because they are too concerned with pleasing people. . Then there are these stupid games, . “oh, he has 10 servants we have none.”. | “They threw a lavish party where Narendra Modi came, look at you.” (the problem with this statement is “look at you” not the event itself. | . There are also “Attitude status YouTube Shorts” which are on the same level as stupid. . You should avoid the game of external respect. External respect is just a fragile ethos/status game. Instead, earn internal respect. How do you earn internal respect? By doing hard things, being ethical, and following logos (logic). The rest, how others think, and what they’ll say doesn’t and should not matter. . By stepping outside this “respect”, game and free yourself from others’ judgment. . Good enough. . After one point it doesn’t matter. . Suppose you are earning 5 lakh rs per month. After this does it matter if you earn more? You can travel the world well. Your “lifestyle” does not change all that much. . The same is true with everything. Once you are fit enough, that’s good enough. You don’t need to try to get a bigger bicep for comparison with others. . Everything reaches a good enough point. If someone else reaches a good enough point good for them, if you reach, good for you. . Get inspired and learn from others but remember, the competition is you vs you. . Comparison for being jealous is stupid. Compare to become inspired but recognize that your goals may be different from theirs. . For your company to be successful, it doesn’t mean someone else company needs to be unsuccessful. . Restating the same premise: If I achieve something, good for me. If someone else achieves something, good for them. Aim for a Win-win. . At the same time, it’s unfair for you to compare yourself to others. You and they have different lives with different strengths, weaknesses, and challenges. Compare to who you were yesterday, not with who someone else is today 1. . Comparing with your previous self gives you the best understanding of your progress and makes personalized decisions. . Conclusion . You’ll always find someone better than yourself and at the same time “success” is in constant flux i.e. it can change with time. Therefore, you should enter the game of becoming jealous of other people’s success. . Avoid status games. It leads to pretending. They are win-lose. Play win-win games. . Recognize once you achieve a certain level of “output success”, it doesn’t matter what happens after it. . Get inspired and learn from others. But don’t compare yourself to others. The only perfect person you can compare yourself to is who you were yesterday. .",
            "url": "https://www.ankushchoubey.com/v1/step-aside-success/",
            "relUrl": "/v1/step-aside-success/",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Decoding the difference between healthy love and unhealthy attachment, and choosing healthy love.",
            "content": "Photo by Christopher Beloch on Unsplash . Why is it important to differentiate between love and attachment? . We pedestalize love. We feel it’s a cure-all for all problems. Maybe it is. But are we actually in love? or is it just an attachment? . Understanding the difference between love and attachment will help us make better decisions. . It’ll make us not do things out of attachment. Attachment leads to stupidity. | It’ll help us understand and grow love. :) | So once we understand our thought is based on attachment, we can break out of it. . Attachment is called Moh in Hindi. And it’s one of the great sins. . What is the difference between love and attachment? . We often confuse love and attachment. Here is what the difference is. . If we are doing something or thinking something for the benefit of others, we are in love. If we are doing something or thinking of something for the benefit of ourselves and wrapping someone else in it to act a certain way it’s attachment. . The central focus of love is the well-being of the other. You may argue that healthy love is the well-being of both others and ourselves. Attachment on the other hand is just our well-being of ourselves. . How should we catch ourselves and act in love and attachment? . Below are three paths that can help you understand if you are in love or attachment. . Understanding it logically [Can be used day to day] . Understanding your logical reasonings can give you a feel for if you are in love or just acting out of attachment. . The principle remains the same: if the focus is us, it’s attachment. If the focus is the well-being of another person, it’s love. . Example 1 . I want someone to stay in my life, is attachment. | I wish someone the best life he or she can have with or without me, is love. | . Example 2 . I want my kid to do what I want him to do, is attachment. | I want my kid to do his best, is love. | . Exercise: . You can also exercise this by listening to different songs and identify parts that are out of love and ones that are out of attachment. | Think about how you acted the last time, were you doing something for yourself or the benefit of other. | There is also a sacrificial element in love. We sacrifice our own desires for others. . Example 1 . We don’t like walking. But the other person likes walking. They find it meaningful and a bonding time. We sometimes, maybe not often, go for a walk because the other person likes it. | . This can well be expanded into giving up our own comfort for the other person. Like, moving to a new city for them, because it makes them happy. . Example 2 . The other person is facing a problem. And we give up doing what we most enjoy to solve their problem. | . Understanding via Attachment Styles . Attachment styles are how we relate to other people. For example, you may be avoidant of your sibling but anxious to your parents but assertively secure with your colleagues. . There are 4 attachment styles: . Secure → This should be our aim | Anxious → This makes you worried and overdo. | Avoidant → This is where you avoid your own partner | Anxious Avoidant → This is a mix of anxious and avoidant. | You can have different attachment styles to different people. But in love, we usually have the same attachment style as we had with our parents in early childhood. . Anxious, avoidant and anxious avoidant are all unhealthy attachments. . By learning about your attachment style, you can identify behaviors that are common in that style. For example, I am becoming secure but anxious. Here are some common things I did. . Write a message and then delete it. | Ping them constantly | Fear something is going wrong and constantly seek validation. | Think about them all day instead of working. | Give up my own dreams to accommodate there’s. | Watch the same shows as they watched and stopped watching what I liked. | Not sharing how I really feel because it may lead to rejection. | . The list goes on and on. . For someone avoidant, they prefer independence. And have behaviors such as: . Not opening up. | . There are more but these are some I know but learning can help you understand yourself and the other person better. . If you are anxious or avoidant, you should aim toward becoming secure. I’ll write a post about it some other day. . Are you pedestalizing love? . Attachment makes us control the outcome. It makes us irrational. . Do you feel only think about love? Or see it as a cure-all? If yes, you are attached. . How love relates to giving up control? . Attachment makes us control the outcome. It makes us irrational. We can’t control the outcome. . Love makes us give up on the outcome. Healthy love gives both yourself and the other person some control. . We can’t be 100% in love. But we can always do better than we are. . We can’t always be in love. We are selfish by nature and that isn’t a bad thing in moderation. We need to manage our self-interest and the self-interest of others. . We don’t want to be a giver (anxious) or just a taker (avoidant), we want a balance of both. . The best way to go about it is to identify your attachment style, understand when you acting out of love or attachment, act more in love and give up control. :) . .",
            "url": "https://www.ankushchoubey.com/v1/love-attachment/",
            "relUrl": "/v1/love-attachment/",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Why should you be internally disciplined?",
            "content": ". Photo by Jon Tyson on Unsplash . I realized the root cause of why even when I created a had so many systems. I was failing. Because their systems were all external. I needed something internal that drives me. I needed Discipline. . What is Discipline? . Discipline is having a plan about doing or not doing something and then sticking to the plan regardless of how we feel. . We may feel good today and we do the tasks. We may feel bad today and we still do the tasks. And we do the task both on good days and bad days as if nothing happened. i.e. there is no performance degradation. . Much of life’s success is not in the intellect. It’s a repeated process / execution . We pedastalize genius, insights and new. We think it’ll solve everything or the person who has these features will solve everything. . More often goes the uncool “actually doing the work”. It’s easy to come up with ideas. But only when an idea is implemented it becomes useful. . If you look at good leaders, even prime ministers like Narendra Modi, he may not be the best at foreign policy, but that’s not his job, his job is to decide to have the best foreign minister, and then remove any impediments or inefficencies. i.e. this does not require a 200 EQ, this requires an organized disciplined process. At the same time, you’ll find that the PM is disciplined and organized in all aspects of his life. . Internal Discipline is the source of truth and it gets the job done . You cannot rely on motivation. Motivation is fickle and fragile. . Discipline on the other hand is antifragile. It gets the job done and done fully. . You can rely on discipline. It’s the only source of predicting the future. You can count on it. . Internal Discipline gets all jobs done . If the task is small, it gets done. If the task is big, it gets done. It doesn’t matter what the task is. Is it hard? Does it make you fearful? Does not matter. . If you have discipline. You get it done. . Internal Discipline eliminates the need for “how” searching answers . How do you work out? → You work out. | How do you learn to program? → You learn to program. | How do you wake up in the morning → You wake up in the morning. | . Discipline makes most “how” questions irrelevant. Therefore, it’s a time saver. . Internal Discipline makes you stronger . Internal discipline demands being strong and doing things despite the adversities we face. These adversities can be in the form of feelings, tiredness, weakness, or outside factors. Overcoming these daily makes us stronger. . By focusing on internal-discipline, the goals, and systems will take care of themselves . You should be the driver of yourself. Not externalities. . Externalities even systems are fragile. Internal Self Discipline is Anti-Fragile! . The problem is your systems will also fail if you are lethargic and lazy. Internal Discipline will not allow that! . You will be better at managing that and updating your systems if you are disciplined! Therefore, by being disciplined your systems would also not fail. . When you have internal discipline, you may not need external discipline or external systems. You are internally driven. . Commitment leads to Discipline .",
            "url": "https://www.ankushchoubey.com/v1/internal-discipline/",
            "relUrl": "/v1/internal-discipline/",
            "date": " • Apr 22, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Karma and Karmafal - An Introduction",
            "content": ". Photo by jesse orrico on Unsplash . What is Karma? . Karma is the Hindi world for action. According to Hinduism, we should do the right action. And we should take the right action voluntarily despite the challenges we face because it is the best possible path. . Karma, the action, is always something in our control. The result of our actions, karmafal, is not in our control. . Karmafal: The results of our karma . There are things outside of us that we can influence, but it doesn’t mean that we control them. We don’t even control our bodies, we influence them with Karma, and the right Karma or even approximately right karma would push us in the right direction. . For example, let’s say you want to get fit, you start exercising and you influence the outcome of getting fit, but it doesn’t mean you get fit. It may be that you are following the wrong diet, which is fine, you just have to update your diet. Or it could be something outside of your control, like a disease like Thyroid which may be leading you to be overweight or underweight. . Detach ourselves from controlling the outcome. Control the input . Doing Karma is in our control. Having the Karmafal, the result of our karma is not in our control. . We are influenced by many things that weren’t our choice, neither those are results of our actions but are our responsibility. There is a randomness to life. Like in the previous example with a disease, it’s likely not our choice to have a disease, but let’s say we have it, now our best bet is to take good action going forward. . This may sound depressing, but it’s actually empowering. In any situation, we can’t control the results, but we do have the ability to influence the results. . We should abandon the idea of controlling the outcome. We can control the input, we can do our karma to our best and let the outcome be influenced, and the resultant tiny influence we see in the outcome may be enough. . This also keeps you free. When you are not attached to the outcome means that you are not terrified by it. For example, if you like someone, and they are doing something stupid if you are attached to how they may feel, you may never tell them how you feel. And they may continue to do something stupid. When you are not attached to the outcome, you can tell them how you feel (maybe you can learn to be kind), and your input may help them. To take action according to your input is their lookout and their action. It’s not something in your control, but you have influenced it and given them the tools and your thoughts to help them make a better choice. . We control how we play. We don’t control if it rains or not, we control if we go for a run. We don’t control if we get 1000 views, we control how well we present our ideas. . . Further Reading . Daily Stoic: You Control How You Play .",
            "url": "https://www.ankushchoubey.com/v1/karma-karmafal/",
            "relUrl": "/v1/karma-karmafal/",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "5 Simple Things to Improve Backend and Frontend Performance",
            "content": "Return early. Don’t create objects that are not in use . Bad . //bad User user = dbCallToCallUsers(); //DB Call Count 1 UserHomepageSettings userhomePageSettings = dbcalltoCalluserSettings(); //DB Call Count 2 if(validate(users) &amp;&amp; validate(userSettings)){ // business logic } . Good: . User user = dbCallToCallUsers(); //DB Call Count 1 if(!validate(users)){ return or throw Exception(); } UserHomepageSettings userhomePageSettings = dbcalltoCalluserSettings(); //DB Call Count 2 if(!validate(userhomePageSettings)){ return or throw Exception(); } . Count the number of network calls in a flow and keep it at minimum . This is similar to previous point. I try to make sure I have max 3 DB calls per operation. 1 is ideal. . Use Maps and Sets . Instead of using List prefer Sets and Maps. Searching a list of map is almost instant. . Reduce copying of objects from one form to another . Instead of converting from one object to another, to another, to another. Try to make sure you don’t have to convert the same object from one form to another multiple times. . For response classes reduce copying by using a delegate class . We often use “mapper” classes and methods to convert from one object to another. For example, from entity to DTO. . These usually copy the data from one object to another. . This has problems because suppose your original object is 10Mb in memory, when you copy it, you have to copy 10Mb object. Your RAM get’s filled and copying is generally slow. . Here’s a better way to do it with Delegate. . class UserResponse{ @JsonIgnore //We want to ignore the source class private UserEntity user; public String getId(){ return user.getId(); } ... other getters that are similar public String getName(){ return user.getFirstName() + &quot; &quot; + user.getLastName(); // Here we are converting from one form to another without copying. } } . Using delegate we reduce the amount of copying needed in the application. . If you are using java you can use Lombok library which provide a @Delegate to do the same task as above without even writing your own getters. This will make your code very precise and fast. .",
            "url": "https://www.ankushchoubey.com/v1/backend-performance/",
            "relUrl": "/v1/backend-performance/",
            "date": " • Apr 11, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "The many ways of using Ethos Pathos Logos",
            "content": "Introduction . 2000 years ago Socrates came up with his 3 Rehetorics. Ethos, Pathos, and Logos. . These Rhetorics and used extensively in persuasion techniques. . Ethos means the identity of the person to you. For example, if you are given a piece of advice from your father, you are more likely to accept it, rather than a stranger. Even if the advice is exactly the same. Ethos means using authority to persuade. . | Pathos means emotions. For example, if you were seeing a YouTube video asking you to donate to a charity, the video would be more persuasive if it told the story of the people involved, how has their life been, and how your money would help them. Pathos means using emotions to persuade. . | Logos means logic. For example, you see a sign while boarding the train that there is a gap between the train and the platform and you may slip in so walk carefully. (Maybe the example was too dark but you get the point.). Logos means using logic to persuade. . | . Any advertisement you see would include all three, ethos pathos, and logos. And you can find many YouTube videos if you search for “Example of Ethos Pathos Logos”. . When I first learned about it did make sense. But as time went on I found use cases for Ethos, Pathos, and Logos beyond persuasion. Whoever I talked to lit up when I explained the concept. Each and every person found it insightful. . (By the way, the sentence above is Pathos.) . This post is an exploration of the 3 Rhetoric applied in different ways, all of which are aimed at making well-informed decisions. Before the exploration, we should take a look at which of the Rhetoric is most useful and when. . What’s most important Ethos, Pathos, or Logos? . Throughout life, we face different challenges. The way we overcome those challenges is by finding a solution. The way to find a solution is to be logical. . Therefore, if you want to solve life’s problems, you need to be logical. . If you are logical, any situation you face could be solved. . This may be the reason why MBA graduates who were also engineers are preferred more than other MBA graduates. (By the way, the previous sentence was an appeal to Ethos) . If you want to make better decisions overall, you need Logos. . Ways of Using Ethos Pathos Logos Framework . Not getting persuaded easily by identifying ethos, pathos, and logos in an argument and only focusing on logos . In an argument clearly distinguishes ethos, pathos and logos. . And then focus on the logos. . For example, suppose someone tells you not do to things a certain way. You ask a logos question like why? The answer you get is I said so which is an ethos answer. . Logos is truth. Truth cannot hurt you. Truth only leads to clarity. Therefore, Logos can’t hurt you and it will lead you to clarity. . Persuading and helping people better by understanding the situation through the lens of rhetoric. . Suppose someone is trying to help you, but the help they offer is stupid. Many times we just dismiss the help. But we can and I believe it’s much better to help them form their arguments. . You can let them know that you understand they want the best for you (ethos), and you understand their sentiment (pathos) and you respect it (again pathos), and then you explain/ask them how their idea may not be ideal or maybe improved (logos). . Developing a better personality by incorporating all three . We should develop a personality that encompasses all three. . If you are good with logic (logos), but are terrible at ethos and pathos. Then you should focus on the other two. Because even if your arguments are “logically” correct, you are unable to present them properly. . Similarly, if people listen to your and follow your advice i.e you have ethos, but your advice is terrible, you should focus on developing your logos. . Develop and incorporate all three. . Skipping politics, misunderstandings, ego games, and status games by always focusing on logos . Status games are all ethos and pathos. Avoid status games. I have skipped a lot of office politics by focusing my arguments only on work and not the person. . Focus on the problem. Not the person. . Sometimes you will make people hurt, but as long as you are focusing on logos, it may not matter all the much how they feel in this moment. And similarly, it may not matter how you feel at this moment. .",
            "url": "https://www.ankushchoubey.com/v1/truth/ethos-pathos-logos",
            "relUrl": "/v1/truth/ethos-pathos-logos",
            "date": " • Apr 8, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Immutable Configuration and Infrastructure - What they are and Where Can You Build Your Own",
            "content": "In a previous post, I talked about why immutability is so important. After writing that post, I came to see immutability in different forms at many places. One such place is Configuration and Immutable Infrastructure. . Immutable Configuration means, your configuration will not change once deployed. It’ll remain the same. It’s a combination of two things: . Your application does not maintain a state and neither maintains a database. | If you need to make changes, you don’t make changes to the existing deployment. You’ll instead create a new deployment with the changes. | The configuration is usually via JSON. | . Advantages . This has a few advantages: . Your deployments are clear: You know the if you have deployed something, they are exact. For example, if you are deploying with new changes and it fails. You still have the previous perfectly running deployment state. | Immutable means this is fast. Immutable infrastructures don’t have to provision for changes. | One of the most common places to use immutable infrastucture is Gateways. You set up the gateway once by providing config in form of json or yaml. Once that config is provided, there is no way to make changes to it. . Considerations when building your own immutable infra . Finding Good Use case . If you have a functionality where: . You have a set of configurations that are less likely to change. | The functionality does not need to maintain state. | You can choose to use immutable configuration. . For example, you have a list of items to be displayed that do not change regularly. You can save these as JSON configuration instead of DB. This way when you want to read that data, you don’t have to make a network call to the DB. This makes your config fast. . There is always a tradeoff associated. . Tool . If you are using Spring Boot, you can use properties or yaml files to load up configuration at run time. For javascript, you can use .ENV files. . You can also create separate json files for your configuration. . Try to make these configurations modular. . Validate your configuration . Run a script when the application starts to make sure all your configurations are loaded properly. The application should fail to start if the configuration provided isn’t provided well. . If you are using Spring Boot @ConfigurationProperties with @Validated would work. . In javascript you may have to write your own validator. . For json, you can create JSON Schema annotations. .",
            "url": "https://www.ankushchoubey.com/v1/building-your-own-immutable-infrastructure/",
            "relUrl": "/v1/building-your-own-immutable-infrastructure/",
            "date": " • Apr 7, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "GraphQL - Understanding its Advantages, Query Types, and Technical Functioning",
            "content": ". I recently consume GraphQL queries. Here’s what I learned: . What is GraphQL? . GraphQL is a way of getting data over HTTP in the form of JSON where the client has control over what data it receives. . While there are other JSON + HTTP standards, like Rest (for resources), OData (especially for higher complexity), etc. . GraphQL is what I believe is easier to implement for both client and server. . Advantages of GraphQL for Consumer/Client . The client gets only the fields it wants . Suppose you have a User record with the following schema, . class User{ String userId; String name; String address; String education; ...thousand other fields } . You can define a GraphQL schema like this. This is the format the server can give data in: . type query { user: [User] } type User{ userId, name, address, education, ...thousand other fields } . Now the client can decide what data it actually needs. . The client will write the query as follows . query{ user: { id, name } } . Here the client will receive only the list of {id, name} and not other fields like {address, education}. Therefore, ideally, . The payload size is less. So network transmission is ideally fast. | Processing of data is fast, as certain fields that are not to be fetched can be ignored. For example, suppose some field like image takes a lot of processing to generate. If the client isn’t asking for image, we don’t need to process that field. | . This also includes nested items . query{ user{ name: { firstName } } } . The client can ask for different types of data within the same request . GraphQL allows for fetching multiple requests at once. For example, you can have a query like below where both User data and Jobs data are being fetched . query{ users: { id, name, education } jobs: { name, publishedDate, educationQualificationRequired } } . ‌ . This would mean multiple records would be fetched in a single request. . Types of GraphQL queries . There are two main types of GraphQL Queries: . Query: retrieves data from the server. | Mutation: modifies data on the server. | I have explained the query above. So here I’ll explain Mutation. . Suppose you want to add a new user . You can create a GraphQL schema like this . type mutation{ createUser($username): User } . The above schema means that createUser when called with a username will return the User object. . The client mutation query would involve two parts. . The query | Variables | The mutation query . mutate{ createUser($username){ id } } . Variables . { username: &quot;Tony Stark&quot; } . Here, createUser would be called with the username as “Tony Stark” and only the id would be returned. The client can choose to return other values like name as createUser supports them too. . How does a Graph QL work technically? . GraphQL operates on a single endpoint, typically /graphql, that receives POST requests with a JSON body containing a query field, which specifies the data to be retrieved or modified, and an optional variables field for passing in arguments. . { &quot;query&quot;: &quot;schema which the client wants&quot;, &quot;variables&quot;: { &quot;in case your GraphQL&quot;: &quot;has multiple queries&quot; } } . The server then returns a JSON response with a data field containing the requested data. . { &quot;data&quot;: { &quot;whatever&quot;: &quot;was defined in your schema&quot; } } . Ideally, you would have very limited headers like authorization. . Overall, GraphQL provides a more efficient and flexible way to query and modify data, making it a popular choice for modern API development. .",
            "url": "https://www.ankushchoubey.com/v1/what-is-graphql/",
            "relUrl": "/v1/what-is-graphql/",
            "date": " • Apr 6, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Release and Development Snapshot Version Semantic Versioning with Maven",
            "content": "Semantic Versioning allows us to understand the nature of a release by comparing the newly released version with the previous version. . Each version number would comprise of 3 numbers. major.minor.patch . For example, 3.1.2 means . Major version is 3 | Minor Version is 1 | Patch Version is 2 | Major indicated a Breaking Change, meaning this version is not backward compatible. For example, Major version 3 is not backward compatible with major version 2. . The minor version is for backward-compatible features. For example, version 3.1.2 means there has been 1 feature added over Major version 3. . The patch version is for bug fixes, non-breaking refactoring, performance improvements, etc. 3.1.2 means there have been 2 patch releases over minor release 1. . Upgrading using Semantic Versioning . This way, when we say if we have version 2.1.0 and the newest version is 3.0.0 we’ll be more careful upgrading because this is a major release. And therefore contains breaking changes. . If the new version is 2.2.0 we’ll be okay updating as the version number change indicates it’s a minor release. . If it’s a patch release like 2.1.1 we’ll update it right away. . Note: This version number depends on the programmer. While upgrading from one version to another, make sure to run all your automated tests to verify that nothing breaks. . . Using Semantic Versioning in Maven . In maven projects, we have two versions . Release version: Released to the public. | Development version: Indicating this is the next development. The development version has -SNAPSHOT assigned to it. | So, if the release is 2.0.0, the development snapshot will be 2.0.1-SNAPSHOT. . The problem here is what you do on the next release. . You can’t have 3.0.1 as the major release. Nor you can have 3.0.2 as the next patch release. . The major should be 3.0.0 and patch should be 3.0.1 with 3.0.2-SNAPSHOT as dev version. . So here’s what I did, . Remove -SNAPSHOT from the development snapshot. | if the release is major, increment major and set minor and patch to 0. if the release is minor, set patchto0` | If the release is patch, do nothing. | Now, the patch version would just be the same as the snapshot with -SNAPSHOT` removed. . The next development version will always be {major}.{minor}.{patch+1}-SNAPSHOT. .",
            "url": "https://www.ankushchoubey.com/v1/release-semantic-versioning",
            "relUrl": "/v1/release-semantic-versioning",
            "date": " • Mar 30, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Manage Configuration Better By Avoiding Deleting or Making it Last Step",
            "content": "I have tried this in the past. . I wanted to restart something on Kubernetes. . I wrote a nice script. Which goes and deletes a prod. . Here was the problem. I forgot to add grep to filter out which pod to delete. . Thankfully, this was the dev environment and not production. And thankfully I don’t have access to run non-read commands on PROD. . And ended up deleting every pod. . My wrong script: . kubectl apply -f config.yaml kubectl get pods| awk &#39;{print $1}&#39; | kubectl delete pod -n {namespace} . The right script would have been to grep first: . kubectl apply -f config.yaml kubectl get pods| awk &#39;{print $1}&#39; | grep {searchTerm} | kubectl delete pod -n {namespace} . There was a better solution: . rolling restart. I could have used rolling restart here to just restart one deployment. . This way only when the new is ready we delete the old. . . I found a parallel of this principle in git. . I “proud” myself for not learning git well. Instead of resolving a complex merge between the dev and the upper branch. I would delete the upper branch. . The better approach would be to create a branch and rename branches. Test and delete the old main branch. . This is what I would try to follow. . Avoid deleting. Or if deleting can’t be avoided. Create a backup and move deleting to an end state after testing everything. .",
            "url": "https://www.ankushchoubey.com/v1/avoid-or-mitigate-deleting",
            "relUrl": "/v1/avoid-or-mitigate-deleting",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "7 Tools To Make Good Love Choices",
            "content": "I wrote these 7 tools as a way to advise a friend. These came from the struggle and learning I had over the months. . These tools are arranged in order or 3-3-1. . The first three would help you calm down and understand what to do. | The next three would help you think long-term. | The last one is a human mistake we all make. | . Even Thomas Shelby has his moments . . Set 1: To help you calm down and to understand what to do . Tool 1: Process your feelings . No one understands you as well as you understand yourself. It’s no one else’s responsibility to process your emotions. . Suppose you expect someone else to solve emotional problems for you. It’s too much for them. . Ever had someone cry in front of you? Because of you?? How did you react? We all have different levels of emotional capabilities. And it’s not always right or fair to put something that we understand and we can deal with on someone else. . We can take guidance from others. But we shouldn’t give up our own sense of rationality to others. . All of our major problems in life are emotional problems. We solve logical problems super quickly but have a hard time solving emotional problems. . The way to solve emotional problems is to learn to sit. Sit down for a long period and ask yourself questions when emotions pop up. . Don’t dwell on the emotions. Just try to logically break them down. . If you are facing something bad, remember it’ll be better in a few days and better in a few months. Give yourself space. . Tool 2: Know what you want . We often don’t know what we want. We have a vague sense of it. But we don’t really know. . When we don’t know what they want clearly, we have a hard time having conversations or negotiating with others. . What do you want? Why do you want them? Articulate it fully for yourself and then to others. . Tool 3: Have clear communication . You can’t have what you want if you can’t communicate properly. Remember, displaying anger and annoyance won’t help you persuade. The way to persuade is to be assertive and yet be kind. To know what their problem is and to know yours. And to balance out both your interests and theirs. . . Set 2: To help you think long term . Tools 4: Needs over Wants . What we want is not always good for us. We may want to do drugs, but that doesn’t mean it is good for us. . We should do what we “need”. With this, we can ask “Do I really need drugs?“. Obviously “No“. We don’t need it. . Needs are always good for us. So, focus on needs over wants. . At the same time, we cannot sustain without “needs“. Therefore needs are non-negotiable. . Tool 5: Things “needed“ for a healthy relationship are non-negotiable . Like the previous tool. Some things are “needed“ and without those needs, we won’t have a base. . Similarly, some things that are “needed“ for a good relationship. . Mutual Respect | Good Communication | Willingness to solve problems | etc | . Without these “needs” how can’t we even have a good relationship. Therefore, things “needed” to make a relationship work are also non-negotiable. . While expressing yourself, and while deciding what you want, make sure to focus highly on things “needed“ for a good relationship. . We all should hope to not get what we want but to get what we need. . Tool 6: Know your core values. And never compromise. Try to make decisions using them. . When in doubt consult your core values. Your core values are who you are. . For example, my ideal core values are: . Clarity | Responsibility | Inputs | Systems | Time | Optimism | Team Work | Adventure | If I have a problem, which is an emotional problem, I’ll rely on these core values to solve them. . . Set 3: A mistake we all make . Tool 7: Never try to manipulate . We try to manipulate the person or the situation to get what we want. . We try to think in terms of if I do X, they’ll think Y. “Mai aasa karungi to vo aasa soch lenge“. This all is manipulation. . Remember, having a partner or even marriage is just one stage of a relationship, there are stages after it too. . Some things are outside our control, and it’s best if they are outside our control. They are not meant to be in our control. Nature is efficient. And by trying to control it, we make things worse. . So let certain things be and never try to manipulate. . Do good and let go of the outcome. . कर्म करो और फल की चिंता मत करो .",
            "url": "https://www.ankushchoubey.com/v1/7-tools-for-making-good-love-choices/",
            "relUrl": "/v1/7-tools-for-making-good-love-choices/",
            "date": " • Mar 25, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "BDD vs UI/UX/TDD - Understanding the Key Differences for Customer-Centric Problem Solving",
            "content": "We are often confused about what constitutes BDD. . This makes us add un-necessarily details to BDD spec file. . Here’s how one should think about this . Stop thinking about how the product would look or feel. And focus on the customer’s interaction with the product. . Does your product behaviors actually solve the customer’s problem. . If yes, find the best way to implement and represent those behaviours. This means UI design in wireframes and UI functionality covered by UI TDD and backend implementation covered by BackendTDD are not relevant here. . Therefore, BDD drives your UI/UX and TDD. . . Example . You believe the customer would often forget his/her password. So, how should you solve this problem. Doing some brainstorming you come up with an example map. . User comes and logges in. He leaves the tab and comes back. He is shown an prompt to enter his 4 digit pin. . This leads to another example where he sets his 4 digit ping. . When user selects a password, he is allowed to set a shorter 4 digit pin. . Now you convert this into Gherkin. . Given a user has logged in When they leave the tab untouched for 10 minutes Then they should be prompted to enter their 4 digit pin. . Given user is prompted 4 digit pin When pin is valid Then user’s session should resume . Given user is prompted to enter 4 digit pin When pin in invalid for 4 times Then user should be logged out . Now for each of the steps, you can decide the best wireframe, frontend, and backend implementation strategies. . Note: The above gherkins don’t define how something should look. They just define behavior that would solve the user’s problem. .",
            "url": "https://www.ankushchoubey.com/v1/bdd-vs-tdd",
            "relUrl": "/v1/bdd-vs-tdd",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Implementing an OAuth Server Manually",
            "content": "This blogpost will cover what OAuth is and how I went about implementing OAuth. It does not include theorotical details. It includes practical questions that lead me to the implementation. . When you read a question, you can search for it yourself. I have provided all the resources that I used along the way below too. . I’ll explain OAuth in layman’s terms in the beginning and then go on to explain it in more technical terms. . OAuth is easier to implement than developers think. There are a lot of jargons involved. But you’ll find at its core it’s very easy and cost-effective. . What is OAuth? And where it is used? . OAuth is a protocol for allowing access to a user’s data to a third party app. . OAuth is not login. OAuth expects the user is logged in and has allowed the access. . You may have seen screen pages like these where you allow one application to access data from your Google account. This is done via OAuth. . . The above image is from redirecting to “authorize“ url. . How is OAuth different from Login? And how does it work . A normal login just requires username and password. . OAuth is a step that happens after login. If the user is not logged in OAuth step won’t happen. . For example, suppose you create an app called “Chain Mailer“ and you want access to the user’s Gmail data. . You initiate the OAuth flow, this means you redirect the user to Gmail with some special parameters. If the user is not logged in, he is asked to log in into Gmail but Gmail itself. Our “Chain Mailer” app has no control over what Gmail does or what the user does. We have just redirected to Gmail. . If the user logs in they’ll see the permissions page. And if they accept, the 3-Legged OAuth flow would happen between Gmail and our Application. . Note: How OAuth Flow only happened after user logged in into the service. . After the 3-Legged OAuth Flow our application would receive a special token called Authorization Token. We can use this token while accessing data from Gmail. . The Authorization Token would include information that we have the permission to access the data. . Note: From here on things would get technical . How I implemented the OAuth Server myself . I’ll split the next parts into: . Learning Phrase | Coding Phrase | Nuances | Learning Phrase . Before implementing OAuth Server, I had done the 3-Legged OAuth Flow with another service myself. So, I knew what the 3-Legged flow is. . This is the first place to start learning about OAuth. . The questions you may ask here is: . What is OAuth? | What is the three legged OAuth flow. | How to use the access token. → Using the access token by adding a “Authorization“ Header with value “bearer {authorizationToken}“ | To implement it, I started reading up on Google, but I found it very challenging. Here’s how I learn’t OAuth and all the security concepts I needed to learn. . I started watching a YouTube playlist this gave me a broad idea about the implementation. | I asked ChatGPT how to implement an OAuth server. ChatGPT gave me useful responses that I was able to ask followup questions to. | My questions included: How to implement an OAuth server. | What is JWT token? | How to I validate a JWT Token? | What is RSA algorithm? I further jumped into learning about RSA via YouTube. | Here’s my post on RSA: RSA Algorithm | | What’s JWK? | What’s the difference between JWE and JWS? | How to define different scopes? | | | These gave me a basic idea of what to do. . I realized that I just need to create a 3-endpoints and one permissions page. . The Authentication (Login) is already handled. The permissions page comes one later after the Login one. . Implementation Phase . With OAuth multiple third party application can register and access our service. . This means I needed to store information about multiple applications. . I created a DB record called OAuthClient where I stored . clientId - A unique id given to the external application | hashedClientSecret (a hashed version of client secret. Similar to how password is hashed and saved.) | scopes (permissions that are to be provided to application) | redirectUri (uri where I would have to redirect). | . I would generate a clientId, clientSecret and add in scopes and provide these data to third party app. . . I created another DB record where I store information about the token given. I called it OAuthToken. This would include the following. . clientId | code → this is a temporary code that would be resent from the external app to my oauth server during stage 3 of 3-legged Oauth Flow. | accessTokenGiven → A boolean value representing if the OAuth token was already granted for the particular code. | . Using these, I was able to issue OAuth tokens. . . I also needed JWT token generation. . I used a library to create JWTs and included all the information related to the user application and scope. . For generating JWTs I had to learn what PEM file is. . . I also had to create a public JWK endpoint which my api gateway would access to validate the token. JWK is a standard way of sharing public keys for JWT token. . I also added a record for scopes. Which was something like . scope → unique name of the scope | description → unique description of the scope used to show user what to do in the permissions page. | . Here’s my post on how I choose to define scopes: Defining Scopes for your OAuth Service . Nuances . OAuth works protocol is snake cased . I initially implemented all endpoints as camel case. But it did not work. Then I had to modify it to snake case. . OAuth formats . Formats within OAuth protocol are very fixed. Certain endpoints accept and return data in a particular format only and they don’t have randomness. . For example, the token endpoint would always be in the following format. . { &quot;authorize_token&quot;: &quot;{jwtToken}&quot;, &quot;refrest_token&quot;: &quot;{token}&quot;, ... } . We can’t extend the format by adding our own stuff. But mandatory things would be preserved as it is. For that I had to read up the main OAuth specs a few times. . My thoughts . After implementing OAuth server myself, I feel confident about other protocols. Protocols may seem too technical but at their core they are really easy. . Implementing OAuth helped me understand and get better at computer security. And also, helped me step into a much better principle developer role. . Resources . Jump around these . An Illustrated Guide to OAuth and OpenID Connect . OAuth 2.0 and OpenID Connect (in plain English) . OAuth 2.0 tutorial Playlist . ChatGPT . Main Spec: The OAuth 2.0 Authorization Framework . My Blogposts . Defining Scopes for your OAuth Service . RSA Algorithm .",
            "url": "https://www.ankushchoubey.com/v1/implementing-oauth",
            "relUrl": "/v1/implementing-oauth",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Have better variable and method names for technical layer by copying others",
            "content": "Writing good variable names clarifies your thinking. But it can be really really hard coming up with your own variable names. . If you are in a domain, you could pick up domain specific names. . For example, a common school software may have Students, Teacher, etc. . This maybe classic domain driven designs. . But in technical layers it can be harder to come up with variable names. . I started working with NodeJs Mongoose framework. I created my Model and was thinking of what method names should I use for common operations like save and find . There were multiple find operations and they were getting messy because it was hard to understand what is what. . In javascript, we don’t get an error if we are passing less number of parameters. For each find I made it was hard to understand what to pass. . Then I remembered how Spring Data . handles the same problem. . They use findBy{Attribute}And{AnotherAttribute}. . Now my code became much much better. And I followed Spring Data ‘s entire method naming style. . . If you are writing a custom library or working in a language that doesn’t have good variable/method names. You can adopt naming conventions of other projects. . Pytorch . Tensorflow . Spring Boot . UI: DevExpress Extreme .",
            "url": "https://www.ankushchoubey.com/v1/better-var-name-by-copying/",
            "relUrl": "/v1/better-var-name-by-copying/",
            "date": " • Mar 18, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Stating the Truth When It Could Hurt",
            "content": "I often talk about truth and telling the truth all time time. . Many people agree with me that it’s a good thing to tell the truth. . But then comes parts where they start compromising telling the truth. . For example, they say I don’t want to hurt them so I won’t tell the truth there. . Or that “hinting” is same as telling the truth. . But truth isn’t something that you hide. Truth is actually not even something that you “say”. . It’s better to use a different vocabulary. State the truth. . We know that we don’t tell the facts. We state the facts. . Similarly, we state the truth. Meaning the truth passes through as it is. . For example, someone asks how we are doing? . Instead of saying I am doing really good. We say, I am better. If they drill down, I share what is really going on. . If someone asks why wasn’t this software delivery on time, I say, I haven’t been doing so well lately. Or that I haven’t been focused lately. . This is combined with honest action, to finish the work on time. . A recent situation . There is another situation I encountered. And it’s likely where many people are likely to lie. . I was in an Uber a few days ago. And the driver asked if he could take us offline. Offline means without the app. The driver would cancel the booking. And take us to the same destination without Uber. And I would have to pay him the same money. This way, the driver would not have his pay cut to Uber. . At the time, I did think Uber is a big company. But is it right to cheat against the big company. I thought let’s lie to Uber. I agreed to go offline. He canceled the booking and I snuck a deal to get 50 Rs. off the ride. . Pretty sweet. Now, the person who had booked the ride started getting calls from Uber. In the Uber app it showed that their is a cancelling fee of 38.10 Rs. . I thought Hmm. So, even after snugging a deal with the driver. . I got 11.90 Rs off if I add up the cancelling fee. That’s pretty bad. . The person who booked kept getting multiple calls from Uber to pay up. . Hmm. Uber help allowed selecting “My driver asked me to book without Uber”. I thought for a minute, what I should do. The person who had booked the Uber said that the Driver might lose his Job. I thought for a minute. And then decided I should side with the truth. I explained to the person that we should go with the truth and click the “My driver asked me to book without Uber” option. We did get out money back. 38Rs isn’t a big number. It’s about half a dollar. . Here why I choose “My driver asked me to book without Uber”. . The driver who did asked us for going offline, might also be convincing the same to other riders. And they maybe getting cancelling fees too. . Uber is a business built by hard working people. If they are providing a platform to earn, they should get the reward. The driver wouldn’t even have a job if Uber didn’t provide for it. . So, it didn’t make long term sense for the driver to try to betray his parent company. . If I side with the truth, the possibility that the driver no longer repeats the mistakes is created. It maybe possible that the driver chooses to still repeat the same mistakes. But at a minimum, he has an opportunity to choose a truthful path. And everything he does is truthful. . I also thought about how do court judges and people in administration do justice. Even though they know what is truth, they still may have humanly feeling to the person that may not have things in their favor. What should a judge do. . “We side with the truth” . Always. In every situation. No matter how big or small. . If I had told the truth with the intent of doing good. I would have explained the driver that the consequence of his actions. I should have denied his proposal. And that way, I would have given him a perspective that would have led him to a truthful path. . Since, customer is the king. Uber didn’t charge me anything. But it’s still weird to think that I was involved too. . For Uber the company, it costed 750 Rs. The money adds up to what they pay their employees. And everyone’s home runs. . To me it costed 700Rs. That’s fine. | To the person who booked the uber. It costed multiple phone calls. | To the driver may costed his and his family’s earning. | . Truth with truthful action passes through without hurting us. . If the driver had been truthful, he wouldn’t have had to face this situation. And neither would we. . If I had been truthful, both we and the driver wouldn’t have faced the situation. . Because truth passes through without hurting us. . Truth passes through can be imagined and us just standing and truth passing across us. If we are lying, we engage against truth, and it hurts us. If we don’t engage against the truth and let is pass, it doesn’t hurt us. .",
            "url": "https://www.ankushchoubey.com/v1/truth/state-truth-when-it-hurts",
            "relUrl": "/v1/truth/state-truth-when-it-hurts",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "You are really doing BDD when",
            "content": "You are really doing BDD if you answer yes to these questions: . BDD specifications drive the design of VDIs, prioritization and development. Specs first VDIs later. | Specs first Development later. | . | Any new decision made about the product functionality leads to an updated spec file. Therefore the spec file is an integral part of every meeting. | . | Any dispute or confusion about what was decided is resolved by reviewing the spec file. . | You remember the specification files because you have read, modified and used them so much. . | Everyone involved in the product life cycle (including non-technical people) knows what BDD is and has access to spec file. . | When any new person who wants to understand the product is given the BDD file to understand it. | .",
            "url": "https://www.ankushchoubey.com/v1/you-are-following-good-bdd-when",
            "relUrl": "/v1/you-are-following-good-bdd-when",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Economic Systems and Macroeconomics - Crash Course Economics - 3",
            "content": ". Like rolling stones tell us, we can’t get all that we want. because there are limited resources so we have to make choices. *** . There are 3 types of resource according to Karl Marx. . Land | Labor | Capital | . And economic system allows for . What we produce? | How we produce it? | Who gets it? | . There are two types of Economy based on who controls the resources and what the system allows. . Command Economy | Free Market Economy | . . Adam Smith said . It’s not from the benevolance of the butcher, the brewer or the baker that we expect our dinner, but from their regard to their own self interest. . . Command Economy is controlled by the government. It decides what to do. . Free Market Economy is where a companies decides what they can produce based on the profits they receive. . . Invisible Hand: The unintended social benefit resulting from individual actions. . Free Market Economy leads to “invisible hand” where you as a result of paying for something that leads to profit good things happen. . For example, if 1 of 2 competing car brands make better products, they’ll have all the capital and incentives of the free market i.e. more profits. Thus to compete the other brand has to innovate. #invisibleHand . Similar is not the case with command economy. Government can make a car and have no competition but it doesn’t have any special need to innovate. . . Planned/Command Economy is not all bad. Because there are many things Free Market economy can’t handle. . Things like Security, Roads, Education, etc are all things needed for a good functioning free market economy but can only be provided via Government i.e. Command Economy. . Also, government intervine where Free Markets are failing. For example, it can provide regulation on car safety standards or how much pollution is allowed or how should the workers be paid. All of these, saves more money in the long run. . North Korea is a command economy. New Zealand is a free market economy with very few taxes. Most economies of the world are mixed. . And many economies are and have been changing. For example, Canada 🇨🇦 went from mostly free market to providing Universal Healthcare. . While, China 🇨🇳 went from mostly socialist economy to free market. . Modern economies are neither completely free or planned, there’s a spectrum of government involvement. . We should not fix ourselves to one ideology or another and rather focus on what get’s the job done at the time. . It doesn’t matter if a cat is black or white, if it caches mice, it is a good cat. ~ Deng Xiaoping . . While we could absolutely abolish many things like poverty with a command economy, remember that in economic terms we always have trade-offs because we always have scares limited resources. . So, spending money to abolish poverty could lead to less money spend on health care or less money on security so a war that leads to more poverty! . . Circular Flow Model . There is also a circle ⭕️ where . Indivuals Purchase from Businesses. This way business get’s money. . To purchase from business, individual need money. . so individually provide their labor to the business. So individuals now have money. . Government steps in between to provide facilities to both businesses and individuals. And to get their money they tax both individuals and businesses. . wealthIsAlwaysTransfered because only government can generate more money. - Andrew Tate .",
            "url": "https://www.ankushchoubey.com/crash-course/econ/3",
            "relUrl": "/crash-course/econ/3",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "One service should serve multiple mediums (REST, Kafka, gRPC, etc)",
            "content": "In a previous post, I talked about how we should separate Domain Layer from Technical code. Here’s another version of the same with respect to service. . A Service that handles tasks of a RestController isn’t very different from a rest controller. . We should separate out the Service from the Rest Controllers because we want to be able to re-use the service. . But if Service handles rest rest controller responses, it isn’t very different. . An ideal service . . Here’s how you separate out connectors from the business logic. . Connector are mediums we use to communicate with the the outside world. Examples of connectors are Rest API connector (like RestController or RouterFunction+it’s Handler), Kafka Connector. . Services are code that implement the business logic. . All conversion from Entity to DTO or DTO to entity (i.e handle the request event and provide response in format needed by the client) should be handles at Rest API Connector. . The Rest API Connector is responsible for calling the service method between the request and the response. . For the service method, REST API connector is a downstream. So, it does not care about what format of data it sends. It’s just responsible for executing the business logic and sending the data in whatever is it’s format. .",
            "url": "https://www.ankushchoubey.com/v1/separate-service/",
            "relUrl": "/v1/separate-service/",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Specialization and Trade - Crash Course Economics - 2",
            "content": ". Adam Grant was the person who created the wealth of nations. He concluded that specialization and trading are better for everyone involved. . If you don’t specialize and trade, you’ll have to do everything yourself. . For example in the case of pizza, you’ll have to farm wheat, they make an oven and then even cook. . Instead, by specializing everyone’s opportunity cost improves. . The PPF profit possibility frontier helps understand the relationship between producing two products, . For example, if the us is producing 500 planes and it could use the same effort to produce 2000 shoes, For every 1 plane they produce, they leave our 4 shoes. . If China can produce 100 planes or 800 shoes with the same effort, china for every 1 plane produced, leaves out 800 shoes. . It may seem that the US is better off here and should not trade, but if the US trades planes for shoes, they’ll be better off (need to learn here) . . Point outside the PPF curve is an impossibility The point inside the PPF curve is inefficiency. How do you maximize efficiency? By specializing and trading. . . Self-sufficiency is inefficiency . . Wellness can be predicted by a variety of many economic predictors like GDP per capita, employee, and ent rate, by this we see statistically, most improvements came after Industrial Revolution. . We also see that countries that are voluntarily or involuntarily cut off from trading with other countries. like Iran Zimbabwe % . And countries like India and China that opened up the economy and started trading have been experiencing significant growth in % . Individuals and countries should specialize and do things that they have a competitive advantage in and then trade with others in what they have a competitive advantage in. This trade is mutually beneficial .",
            "url": "https://www.ankushchoubey.com/crash-course/econ/2",
            "relUrl": "/crash-course/econ/2",
            "date": " • Mar 4, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Intro to Economics - Crash Course Econ 1",
            "content": ". Economics is not just a study of money or the stock exchange. . Economics is the study of people and their choices. . And this is based on two fundamental assumptions of Economics. . Scarcity | Opportunity Cost | . You could be doing one thing but you are choosing to do something else. In that sense, you believe that doing one is a better use of your time than another. Therefore, your opportunity cost of one is greater than another. . Scarcity means there is a limited supply of resources. . . Economics is when people make choices. When a college student decides to pick major A over Major B. . . Many people believe that if you just put more money into healthcare, it would improve. But in many cases what we need is the right incentive. So, economics is also a study of incentives. . For example, you could provide the college with an incentive on the number of enrollments. But then college would play it to just enroll. . Then you modify it to incentivize the number of graduates, then you suddenly have colleges just passing people or lowering difficulty or only admitting smart kids. . So, it’s very important to get incentives right. Because wrong incentives can backfire. . . Most economists are in Microeconomics. Whether to launch the business snow or later? What to do when a competitor does x? . Macro is the study of a Nation and its decisions like inflation, unemployment, etc. . . Both Governments and the Free Market support each other. One can’t function without the other. . . There is always an opportunity cost. If you don’t want road accidents, you could remove all cards from the road. But you understand the opportunity cost and decide one is better than the other. .",
            "url": "https://www.ankushchoubey.com/crash-course/econ/1",
            "relUrl": "/crash-course/econ/1",
            "date": " • Mar 4, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "The only differences between external_apps and internal_features in a plugin architecture",
            "content": "From A User’s Perspective . First Party Default Apps are just product features. . First Party Installable Apps are apps that can be installed by the user. . These apps are not enabled by default | These are provided by default. | A user won’t even know that these are treated as an app by the platform company. | . Third-party apps are created by third-party developers and can extend the core functionality of the first-party app. . These apps are not enabled by default. | . . Code Perspective . These two types of apps are the same, except the first-party app doesn’t need Authentication to access Platform data, while the third-party app does. . A third-party app may utilize all capabilities that the plugin platform provides unless some capabilities are reserved for first-party apps. . In the previous post, I explained how we could define scopes for our resource would work. . I took the example of movies where an app is using 2 scopes: “read:movies” and “read:userinfo” . Let’s call this app, an external_app. . Now suppose we have an internal feature, which uses the same endpoints that “read:movies” and “read:userinfo” uses. . The only difference between external_app and the internal feature would be that the external_app will use OAuth and scopes to get access to the resource. While the internal_feature would not have to ask for permission to access the resource. . This means, once you create a scope, it’s fixed. . And this simplifies your development a lot. . . So, therefore, we need not treat internal features and external apps very differently. . At the platform level, both internal_feature and the external_app are just apps. .",
            "url": "https://www.ankushchoubey.com/v1/internal-vs-external-plugin",
            "relUrl": "/v1/internal-vs-external-plugin",
            "date": " • Mar 3, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Defining Scopes for your OAuth Service",
            "content": "Here’s my thinking on how we should design scopes for OAuth. And how many a proper REST API could simplify the process. . . In a rest API, we have resources. Our resources are usually accessed with just a noun. . so, . GET /movies to get all movies . GET /movies/{movieId} to get a specific movie . PUT /movies to modify a movie . POST /movies to add a new movie . DELETE /movies/{movieID} to delete a movie . . Our Outh scopes are a restriction on resources . so, we would have scopes for movies resource. . We can append this with the kind of method that can be run on the resource. . . For example: . read:movies -&gt; allows GET calls on /movies REST API resource . write:movies → allows POST calls on the /movies resource. . read:userinfo → allows GET calls on the /userinfo resource . . When the app is submitted to our “App Store“, the app developer declares an app, they are using a particular scope. . For example, let’s say an App that shows user recommendations has asked for read:movies, write:movies and read:userinfo . . The app developer has declared why they use each of the scopes. While declaring, they decide they aren’t using the write:movies scope. . So, they remove it. Or while reviewing the app submission application, the App Store platform rejects the request for accepting write:movies and asks for more clarifications. .",
            "url": "https://www.ankushchoubey.com/v1/oauth-scopes",
            "relUrl": "/v1/oauth-scopes",
            "date": " • Mar 3, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Migrating DB smoothly with a migration script",
            "content": "If you are transferring from one DB to another and want to make sure it happens properly, this is the mechanism you can use. . The same mechanism could be used to migrate multiple tables. And can be implemented in SQL stored procedure or stored procedure equivalent in the DB of your choice. . Add these additional columns to your source table is_migrated: default false | migrated_date | is_error | error_description | | Create a DB migration script which Copies a batch of data from one table in source DB to one table in dB. | The batch size could be 1000. You don’t want the batch size to be too small because it could be slow. You don’t want it too high to be able to recover better. | Whenever a batch is a complete update the is_migrated and migrated_date in the source DB. Then pick up the next batch where is_migrated is false. | If there is an error, set is_error to_ true _and add error_description. | The error_description could be an exception that is thrown. | Once the script is done, check for is_error: true and fix those errors in the script itself. | | Running Run the script by copying the data from PROD to your testing environment. | Fix your scripts if you find is_error: true | Once all is fixed, re-copy data from PROD to your testing environment and run again. | You want to make sure everything works perfectly so that you won’t have to do much during the PROD run. | Once you find all bugs are fixed, run the migration script in PROD. | |",
            "url": "https://www.ankushchoubey.com/db-migration-script/",
            "relUrl": "/db-migration-script/",
            "date": " • Mar 3, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "My Core Beliefs from Feb 2023",
            "content": "I choose my core-beliefs very carefully. . I don’t and won’t do things that I want. . I will do and do do things that I need or things that need to be done. . Both are a form of responsibility. Need being respo to self. Need to be done means respo to others. Because my wants can always be something that’s not good for me. But my needs are always good for me because they are essential. . I won’t lie. I won’t utter a word that I know is a lie. . And I won’t manipulate to get what I want. But I can state it simply. . Because I don’t know what the truth is. But atleast when I’m speaking I’ll stop and reformularw when i’m about to utter a lie so that i’ll be as truthful as possible. . On the same line. I won’t ever manipulate or lie to get what I want. But I’ll state them clearly as I can. And see if I can hget it. If I do get it via an ethical parh good. Or else I’ll try another day. . I don’t attack the person. I attack the action. . I want toxicity and/or problem to end. It doesn’t help to attack the person because person gets defensive. . I need a better way to explain this. I can say I want toxicity to end or problem to end. But I need something more definitive. . There are no shortcuts. There are no hacks. . Shortcut is a lie. The hack does not get you anywhere. I am not afraid to voice my opinion where it’s needed and necessary. I am speak the truth. And I understand there are no shortcuts. And no hacks! . I don’t revolve my life around women. . As a man, it’s tempting. And sometimes I feel insecure FOMO. But there are more important things to do in my life. I have responsibilities and I need to fulfil them! . Plus, it’s not like it helps. Having someone that you trust solves that area only. Not other areas! And if I try to burden someone, it’s not god for them, it’s not good for me. I do my part. And them do theres. .",
            "url": "https://www.ankushchoubey.com/v1/my-core-beliefs/",
            "relUrl": "/v1/my-core-beliefs/",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "My Core Values Summary from Feb 2023",
            "content": "I have 7 core values and these help me live authentically, get the most out of life and be a peaceful cheerful and charming person in the process. . . The core of my core values in Clarity. Clarity refers to clarity of thought. I aim to have clear thinking in every moments. Towards this aim, I adopt habits and patterns that help such as being truthful, developing observability via Data Collection and Meditation and seeking truth by understanding biases, fallacies and loaded language. My core values also help me with clarity and setting a proper realistic vision for myself. Overall, clarity is about truth and a proper vision. . My second core value is Responsibility. Responsibility helps me be stronger instead of weaker. I believe weakness leads to problems and this includes any and all times of weakness. Responsibility like clarity is a continuous process. We choose to act strongly in face of difficulty is a plus plus towards responsibility. We should start with taking responsibility of ourself completely (which includes taking care of our physical/mental heath/ our finances) and then responsibility of things around us (empowering others, helping family, the baton), in this order. We often act in ways that make us move towards a downward path. But we always have the choice. . . Clarity and Responsibility are my fundamental values. These values form the basis of the next 3 values that are very implementation focused and can be easily measured. The last 2 values, fulfill the larger purpose and the missing peace of living a great life. . . My third value is Inputs. Inputs refer to optimizing all the inputs we face in day to day life, the things that capture our attention. We often act in ways that make us move towards a downward path. A lot of times this is because we get inputs from our environment that push us. In the modern world, we have a lot of abundance. This abundance brings us problems because they try to replace many natural things. Social media trying to replace social life makes us feel lonely. Processed food makes us unhealthy. Porn makes us depressed, lonely and hedonistic. News makes us think what “recent” and whats “someone’s opinion” is more important than “tried-and-true“ and what’s “fact“. We keep using our willpower against these modern inputs, we need strong boundaries. Doing so would eliminate things that makes us worse and as a result we get a little stronger. To become even stronger, we can incorporate ancient weapons: fasting, meditation and exercise, all of which are aimed to voluntarily experience short term pain but have maximal long term benefits. . Now that we have eliminated stupid things and added good things, we can move towards automation and goal achievement via Systems. The core value 4. Systems accelerate progress towards our goals. By being methodical, we can achieve anything with much more clarity and ease. By creating habits, routines, taking on training (and sometimes retraining), semi-automated systems (like kanban) and automated systems of the modern world, we optimize what’s left from inputs and makes sure everything runs smoothly. This provides logarithmic big O in terms of effort put in compared to exponential positive results. . . My fifth core value is Time. Time and attention are our non-renewable resources. Clarity, inputs and systems regain our attention. Our attention saves us time and we need time because we have a finite life. Our lives are average 80 years. The way we can make the most of this life is by spending it properly on the things that make the most impact and not wasting it. By being mindful about our mortality, we get clarity, we remove things that aren’t useful and we optimize and nurture things that are important to us. At the same time, we can also increase our time, taking steps towards our longevity. Time allows us to do more of what we want to do. . . With all the above, we achieve a greater level of peace. And now, we aim to accelerate that peace further with last two core values: team and adventure. . . The 6th core value is Team. “Team” is about understanding the dynamics between yourself and people around you. This dynamic is sometimes a dichotomy. You want to help others yet not so much that they keep relying on you. You want to do things yourself yet you something should rely on others. “Team” makes us let of over reliance on ourselves and trust the knowledge of instincts of others. (Though we should always verify. #dichotomy). A large part of life would be with people. We are social animals to the core and we love to live in tribes. And we love to “Love” too. Being around people make us happy, people make us (or demand from us) the best version of ourself and in-turn this leads to best version of themselves. If you didn’t get any of what was written here, start here relationships with people around you make you more cheerful happy person. #Win-Win . The last core value is Adventure. Adventure is about the heroes journey. We get excited by video games, by movies and by books. We love listening to stories (especially real life ones) where people who faced challenges were able to overcome it. That’s adventure. Adventure gives us calling to something that is bigger than we are. And ideally, if one has clarity, takes care of responsibility, is focused, organized, fast and has a team, that’s perfect addition to well formed adventure cuz all of them are tools and weapons in terms of facing the BOSS. The unknown. Our adventure starts when we decide to face the dragon of unknown. And this leads us to courage. So, if you are facing a problem that seems large or you are seeing something that frightened you, take your weapons, do you pushups, face that monster with all the knowledge under your belt. Only you can do it! So be your hero! . . My first 2 core values give me the right direction. The next 3 values accelerate the progress towards them. And the final 2, bring the greatest the world has to offer. Overall, these 7 makes me healthier, wealthier, wiser and the best version of myself for the world and therefore they are best bet is very situations. .",
            "url": "https://www.ankushchoubey.com/v3/my-core-values/",
            "relUrl": "/v3/my-core-values/",
            "date": " • Feb 12, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "RSA Algorithm",
            "content": "RSA is an asymmetric key encryption algorithm and was first published in 1977. . RSA was created by Ron Rivest, Adi Shamir and Leonard Adleman. . . Adding their photo for inspiration. . RSA works on the concept of modular arithmetic. . In RSA, we have a public and a private key. We use the private key to decrypt and the public key to encrypt. . This means that the private key should not be shared. But the public key can be shared with anyone. . Private Key = Key Public Key = Lock . . There are 5 steps in RSA. . Take two prime numbers p and q. (Eg: p=2, q=7) | Calculate N . N is the product of p and q. (N = p*q = 2*7 = 14) | Calculate Phi(N) . | This is the number of co-primes less than N. (Eg. 1, 2, 5, 7 and 11 are co-primes to 14; therefore Phi(n) is the count = 6) | This can also be calculated with a formula (p-1)(q-1) | Eg; Phi(N) = (2-1)(7-1) = 6 | Create the public key (e) such that | 1 &lt; e &lt; Phi(N) | E should be co-prime with Phi(N) | Eg. e = 5 | Find the private key (d) such that | (e*d) mod Phi(n) = 1 | Eg: (5*d) mod (14) = 1 | When you calculate this you’ll see a pattern. | 5*1 = 5; mod 6 = 5 | 5*2 = 10; mod 6 = 4 | 15 mod 6 = 3 | … | 25 mod 6 = 1 | 30 mod 6 = 0 This pattern is expected since (5*6)%6 will be 0. | . Let’s pick a large d . . D = 11 . Not to encrypt you’ll do the following, . (value^e) mod N . To decrypt, you’ll do the following, . (encryptedValue ^d) mod N . . Resources . Eddie Woo: The RSA Encryption Algorithm (1 of 2: Computing an Example) . The RSA Encryption Algorithm (2 of 2: Generating the Keys) . RSA Calculator .",
            "url": "https://www.ankushchoubey.com/v1/rsa",
            "relUrl": "/v1/rsa",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Nihilism of The Modern Age. And Traditional Roles to the Rescue.",
            "content": "What are the traditional roles of a man and woman? And why they are relevant? In a world of narcissism, nihilism, and pleasure, many are tempted to believe that this is all life has to offer. That’s until they decide to take responsibility. They stop being all talk and convert their potential to actuality. . Along that path comes a point. What to do? . We have already covered your needs. One of two types of responsibility a human should adopt. . This post will provide a guide to needs to do i.e. duties. Duties are a traditional synonym for responsibility. . Why we should look at traditional roles? . The more you look at the history and the past, the more you can see the future. ~ Winston Churchil. . Things that have worked for several years have value in them. It’s not always the case that what’s new has value. . In our case, around 100 years ago, most of humanity lived in extreme poverty. So, before 100 years ago, most humans were adapted to a world where they had to work on their duties. . In these times, each person tried to adapt to their best skill. And similarly, men and women adapted to the skill that suited them the best. . Men are usually stronger physically. This made them good at jobs like being a soldier and building buildings. . Women are usually physically less strong and have a kind nature. This made them good at caring for and managing households. . Both men and women worked together to build our modern world today. . The most important thing was that they “had” to do their duties and as well as possible. In the modern world, most duties have become optional or are at least perceived to be optional. This optionality results in a lack of purpose for most people. People don’t know what to do. So they opt for what’s available, momentary pleasure and are in a pit of nihilism. . The pre-modern world provides a much much better alternative. Traditional roles provides the purpose of life that modern alternatives do not. Even if you are modern, if you feel lost then start here with the traditional. Then adapt your plans over time. . Implementing The Traditional Roles . Before jumping further, here is the mindset you should develop. . Start with at least what’s your strength, if you are masculine, pick traditional masculine duties first. If you are feminine, pick traditionally feminine duties first. . Once you are set in one role, start picking up things from the other role. . There is no-problem in picking being caring as a man or being a provider as a women. But try starting with your duties first as these may come much more naturally to you. . Duties of a man . A man has three duties: . Provide | Protect | Problem Solve | Suppose you were living in a jungle in 1600s, what would you do. . You would provide for your family, protect them from dangerous and solve problems like shelter by building a house. . To provide, a man must be useful enough. In the modern world being useful enough means providing the world what it wants. #capatalism (I love capitalism). . To protect, a man must be strong physically and must be strong mentally to face the problems that come up. . In the modern world, there seems to be no-need for such strength, but it seems useless not to have such physical and mental strength. This conclusion is because we still have protection duties. Going down an alley and a thief with a knife shows up. What would you do? Would you panic or would you handle the situation calmly. Therefore, a man must develop his physical body well to be useful in any situation and his mental strength as well so that he can face obstacles that come. . To problem solve, a man must be learn, not give up and be-humble enough to adapt to the situations. Many times this means facing the void of not knowing anything, but trying anyways. . Duties of a women . A woman has three duties. . Nurture | Feed | Care |",
            "url": "https://www.ankushchoubey.com/v1/traditional-roles",
            "relUrl": "/v1/traditional-roles",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "How to plan mid-day?",
            "content": "The mid day is the time where you can be the most active. This is ideally, 1.5 hours after waking up. . To make mid day a success, it’s best to have completed the morning ritual. If the morning ritual is not complete find the best parts of the morning ritual to complete. The morning ritual can provide you with great focus. . Also, as part of night ritual, your room and setup might already be clean and ready to work. . Now, you can divide the mid-day into two parts—first half and second half. . The first half is pre-lunch. This is where you’ll likely be the most active. Fix your lunch time to around 1:30. . My daily standup starts at 9. And I pay attention to it. It’s a great time for me to learn what’s happening in the team and note down concepts that I don’t know. . I also spend time learning a few minutes glancing at things I don’t know. And discussing any impediments I have. . You can work between 10 to 1. 3 hours. This would include a 2 hours pomodoro sprint. This activity is chosen carefully and is a part where no learning is required. . If I need to learn something, I can watch youtube videos or open up documentation. But remember this time is protected. No one should distract me between 10 to 1. .",
            "url": "https://www.ankushchoubey.com/v1/plan-mid-day",
            "relUrl": "/v1/plan-mid-day",
            "date": " • Jan 26, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Desk Setup",
            "content": "This is how it should like like. . . . . Books are divided into values, business and technical . . Values books are in order. Left being truth. And rightmost being team work. . .",
            "url": "https://www.ankushchoubey.com/v1/desk-setup",
            "relUrl": "/v1/desk-setup",
            "date": " • Jan 26, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "How I use ChatGPT as an AI Assist?",
            "content": "I have also been thinking about AI Assist. ChatGPT is too good and it can help me with a lot of things. For instance, . Feedback . Finding improvements to my blog. “How can I improve: {text}”. I might also add in more context: “Make this more professional: {text}”. | This is what I used yesterday to improve my LinkedIn bio and description. It was too baby like. | . This would be an excellent first, reviewer. And reduce feedback time by a lot. . The main way I want to use it is to teach me rather than do it itself. So, I would prefer the asking “How can I improve this text: {text}” over “Improve this: {text}?” . This is because I want to be better myself. And not rely on an automated tool all the time. So, ChatGPT becomes a self improvement and clarity improvement and learning tool. . Summarisation . ChatGPT can also summarise really well, and since I have really long blogposts and really long morning pages, I think that summarisation would make things really nice. | Maybe I can also have my week summarised by passing it my weekly journaling. The problem here is that I can’t pass private data, rather I should not pass. | The summary feature is also available in Google Chat, where it summarizes the most useful points. | . Explanation . I can ask ChatGPT for explanation of things or for debugging. Finally, it is a corpus of entire human insights. . Explain me like I am 5 or comparing one thing to another on a particular aspect are excellent questions to ask. . I think AI is revolutionising us. This is really really huge. And I really love being a part of this. I totally understand, the disruption this is causing and going to cause is much much more than we anticipated, and it’s only going to get started. Jobs would evolve and have to evolve because that’s the only way to stay relevant. . . This is just 2023, what would happen in upcoming years? Damn. It’s a fun time to be alive.—So that was all about ChatGPT, I have asked it many personal questions that I wouldn’t have asked to anyone. And it has helped me a lot. Thank you OpenAI. I hope I can contribute to the world in as useful way and you do. .",
            "url": "https://www.ankushchoubey.com/v1/chatgpt-assist",
            "relUrl": "/v1/chatgpt-assist",
            "date": " • Jan 26, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "My Blindspots",
            "content": "Anxious Attachment . Be very objective of what is actually happening if it is actually mutual. . .",
            "url": "https://www.ankushchoubey.com/v1/my-blindspots",
            "relUrl": "/v1/my-blindspots",
            "date": " • Jan 19, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "Need for Optimizing Inputs in the Modern World",
            "content": "Human Needs . Human beings and all other animals have needs. And these needs are what drive us to move. Unfulfilled needs lead to pain. And fulfilling that need reduces or mitigates that pain. We can call it pleasure. . Pleasure can be big or small. But the main thing here is: Needs drive us to pursue a solution that would reduce pain and move us toward pleasure. . The tradeoffs between different solutions . Like everything, there are multiple solutions to a problem. Some solutions are better than others. Some solutions are readily available. Some solutions require effort. . Our body, over a million years, has been adapted to respond to our environment and needs. A part of it is also repeated exposure and training. If the environment requires us to be stronger, like an instance where we are picking up a lot of weight. We become stronger. . If the environment no longer requires us to be stronger, the body will adapt and put its resources where they can be used. . The change our body &amp; mind goes through is proportional to the problem we are trying to solve. If we are trying to solve a harder problem, our body and mind will adapt more to solve the harder problem and vice versa. . The Modern World . In the past, there were many problems we faced that are solved now with advances by human civilization. . For instance, we were required to be strong and develop the skill of hunting, that got replaced when agriculture came along. . So, apart from feeling up time that was used during hunting, the second-order consequence of this is that we aren’t as strong as our ancestors. . Think of this phenomenon in everything we input in our lives. . If the input in our life requires or pushes us towards becoming better, we’ll respond to the environment by becoming better. Similarly, if input pushes us towards becoming worse, we become worse. . Like the model of hunting, inputs can sometimes be eliminated or replaced by other inputs. . Conclusion . We face inputs all the time and more in the modern world. We can optimize our inputs so that the best ones stay and keep making us better. Over some time, we’ll find ourselves getting better and better. . In the upcoming series of posts, I’ll highlight how we can identify and eliminate negative inputs and find and incorporate positive ones. Doing so would make us smarter, faster, better, and more resilient. .",
            "url": "https://www.ankushchoubey.com/v1/inputs",
            "relUrl": "/v1/inputs",
            "date": " • Jan 14, 2023"
        }
        
    
  
    
        ,"post36": {
            "title": "Start your project with Continuous Delivery till 'PROD'",
            "content": ". Original Photo by Jelleke Vanooteghem on Unsplash . Software developers and businesses all around the world nag release. There is an emotional low and high point associate with it. . Because till something is released, we developers secretly know the work we did isn’t bug free. We cut shortcuts to complete feature after feature and when it comes time to release, the emotional down starts. . This routine is a cycle of Manual Deployment. . . Source: Atlassian (Linked below.). . Manual Deployment is a big deal for both developer and business. But there is a better alternative that forces developers and business to get more intentional and produce high quality work faster. . This post talks about that process and why it’s needed. At the end of the post, you’ll find links to other blogs that can be useful read along with this one. . Software Delivery: Early vs Late . The most important thing for a project is delivery. Delivering a software early means it’s impact is early. Money now is better than money tomorrow. . This gist is one of the core principles of The Agile Manifesto: . Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.” . We often wait a long time before delivering a software. This include making sure all the features are developed and test. But the only step we actually need to deliver something is to put it on PROD. Most features aren’t related to deployment. . Phases of Software Developement: Zero-To-One and One-To-N phase . Software development can be divided into to phrases: . Zero-To-One Phase: This is where you create something new. | One-To-N Phase: This is where you work on top of what you created to enhance it. | Zero-To-One phase is the delivers the gist of the project: The MVP. It solves the core problem customer faces. . Zero-To-One is the start of the project. It’s important to create a stable foundation here to ensure a high quality base. In terms of team allocation, you want to have your best developers working during this phase. (I’ll be writing more on team allocation later) . The One-to-N part is easier. You have something that works and you want to add a bunch of additional enhancements to it. If you had a good Zero-To-One phase, you have a stable base to build on. So for team allocation, you can have many begineer developers paired with a experienced developer. . Why you should build a deployment pipeline first? . Delivering a working software that solves customers problem is the most important task. You have to have infrastructure (server, DB, configuration, etc) ready and perfectly aligned. And there should be no issues between them. Many times this involves making code changes to adapt to the infrastructure. . Why not solve the most important task early? . Early on, during the zero-to-one phase, the amount of code to manage is less. Therefore, you can make code adjust easily compared to later. . The nature of early project phase is largely learning and research. Therefore, there is enough time at hand. . By having deployment solved. Whatever you code &amp; commit next, can reach in the hands of customers the fastest. . #eatThatFrog . Therefore, develop your delivery pipeline as soon as you scafforld (create the base) of your project. Step 2. Start using it. In most cases, once you only create this pipeline once and then update the pipeline as time goes on. . Addressing the misnomer of “deploying this early to prod without ‘proper’ testing will lead to low quality” . A common misnomer is that deploying to prod early will lead to low quality. . The result is the opposite: Having to deploy early and often means you are forced to improve your engineering process. . This means, developers are forced to be more intentional about what they work on, in what order and ensure highest quality. . There is a learning period in everything new we do. We can’t expect us or others to do something perfectly on the first try. But as we make mistakes, we create systems and processes that ensure the mistakes doesn’t happen again. . Continous delivery pipeline is comparable to TPS: Toyota Production System. Any mistake that is made is rectified by improving the pipeline. . For example, let’s say a team adopts continous delivery. . On their first day, a developer commits and his code reaches from dev, qa, uat to PROD and users start using it. It so happened that their was a logical bug in the code deployed. | Rather than scraping the continous delivery pipeline, the team decides to find why the problem was caused and improve the pipeline. They find that the code quality itself was low and their were logical bugs. | To fix this issue from happening in the future, the team adopted better engineering practices. They add Sonar lint, a popular linter to quicky check and ensure code meets standard. | They also adopt TDD and enforced a rule that build passes only when the test coverage is 80%. | Now, the problem for fixed for life. | . | Sonar Lint became a step in the delivery pipeline. And TDD became a habit. | The next time a developer comes and commits something, the stages in the delivery pipeline ensures that the code is deliverable. . Any problem we face should be solved via the delivery pipeline. Ideally, without any human intervention. . There are many things that can be the part of delivery pipeline. I’ll be adding more posts on this soon. . There are several practices that support a continuous delivery. Some include, . atomic commits | TDD | the kanban pull system and walk-the-board-from-right strategy, | feature-flagging | #morePostsSoon | . Optional: Why not-having a delivery pipeline is risky? . In previous section we covered how quality improves with a continous delivery pipeline. Here are reason why the amount of risk of not having a continuous delivery pipeline is higher. . Only PROD is the place where we can deliver and know what the real status of the deliver is. Not having something used by the users means you don’t know what the real impact of your software is. . Making enhancements on something that is not-delivered is largely futile. Discussion over thing that hasn’t been made isn’t the same as having discussion over something that is made. . If the project is de-prioritized, then all work is lost. . And lastly for the joy of coding &amp; committing something is only complete when having it reach prod as fast as possible. . Optional: How to spot fake continuous delivery? . Continous Delivery means software is always in a releasable state to PROD. This mean a each new commit is of highest quality and is releasable. . Many companies and teams I have talked to say they do continuous delivery but they don’t. Their defination is this: We deploy to our dev environment. . Dev is not prod. #PRODisPROD Prod is where real users are. Prod is where value is. . What your first delivery would be? . Your first delivery would be likely something very small and unusable. An atomic commit. A un-responsive login page perhaps. . Having something delivered to PROD, doesn’t mean it has to be available to general public to use. At this stage, you need feature flagging . One your software crosses the MVP mark, you can release the flag. . Optional: What should you learn to make a delivery pipeline? . Connect with a DevOps person and collaborate to build the CI/CD pipeline. Try to learn from them how to make one. . If that’s not possible, learn a CI/CD tool. Jenkins is a common one. Other popular ones include Gitlab CI and GitHub Actions. . If time is in a crunch, make simple bash scripts. . For example, this was the sort of script I created because I didn’t understand how to do something in Jenkins. The files below are not real, they are illustrations of what I made. . script-create-env.sh . echo “Enter ENV name” read end {destinationTool} init “APPNAME-$ENV” // other commands on {destinationTool} npm run build . script-deploy.sh . echo “Enecho “Enter ENV name” read end npm run push $ENV . Notes from other articles . The Case for Continuous Delivery . One of the main uses of continuous delivery is to ensure we are building functionality that really delivers the expected customer value . Second, continuous delivery reduces the risk of release and leads to more reliable and resilient systems. . Implementing CD has second-order effects that reduce the costs of software development . When HP Laserjet Team Implemented CD they found: . Overall development costs reduced by ~40% | Programs under development increased by ~140% | Development costs per program reduced by 78% | Resources driving innovation increased by 5x | . Continuous delivery pipeline 101 . Describes different continuous delivery pipelines. CD needs a Repeatable reliable process . MUST READ: Continuous Delivery: Business Value, Benefits, Challenges &amp; Metrics . Explains the business benifits of continuous delivery. They are: . Increased Velocity | Increased Productivity | Increased Sustainability | “Done” means released . Teams should fearlessly automate themselves out of their jobs, and move on to new projects. . In case you feel stalled, shift gears. Know how to give your team a car when all they have asked for is a faster horse! . Jumpstart with the help of experienced champions who will see you through this initial hump. People, after all, are your greatest assets and train them to do the right thing. Make it easy to do the right thing, and hard to do the wrong thing, and you will be pleasantly surprised at the outcome. . The article is worth sharing with your business team. . ContinuousDelivery . You’re doing continuous delivery when: . Your software is deployable throughout its lifecycle | Your team prioritizes keeping the software deployable over working on new features | Anybody can get fast, automated feedback on the production readiness of their systems any time somebody makes a change to them | You can perform push-button deployments of any version of the software to any environment on demand | Conclusion . A continuous deployment pipeline helps improve value delivery and deployment frequency without reducing quality, rather it enforces quality. The team following continuous delivery is forced to be intentional. . The real continuous delivery is delivery to PROD. All else is fake. . Continuous Delivery is a combination of development improvements and business improvements, forcing both to be more deligent and set good processes for release. The teams that follow CD see a 5 to 10 times increase deployments. . Practices like the following support continuous delivery: . atomic commits | TDD | the kanban pull system and walk-the-board-from-right strategy, | feature-flagging | .",
            "url": "https://www.ankushchoubey.com/v1/continuous-delivery",
            "relUrl": "/v1/continuous-delivery",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post37": {
            "title": "Template for Gherkin Specs",
            "content": "@tagPlaceholder1 @tagPlaceholder2 Feature: A new feature Author - Ankush #this is the main person who write is specs Dislaimer - This spec is complete, to the best of my knowledge, but if I forgot something, please tell me. Amigos - Developers - Team Name (Members participating) QA - Product - Designer - Estimated Release Date - 12/3 Open Issues - Side Note - Personas (if needed) - - User Age - Background - Scenario: Mock UI - NA Card Number - NA Technical Note - NA Testing Note - NA Marketing Note - NA Doc Team Note - NA Given {past tense} When {present tense} Then {future tense} . More Resources to check out to update this article: . A practical guide to writing technical specs - Stack Overflow Blog .",
            "url": "https://www.ankushchoubey.com/v1/template-for-gherkin-specs",
            "relUrl": "/v1/template-for-gherkin-specs",
            "date": " • Jan 7, 2023"
        }
        
    
  
    
        ,"post38": {
            "title": "Separating_request,_entity_and_response",
            "content": "https://drive.google.com/drive/folders/1tsu2S_EnDds8oIRiiip4rwl2qhXEq-Se?usp=sharing . Security is a major concern for web applications. One of the ways to achieve this is by using the least access principle. This means only exposing things that are necessary and hiding the rest. . In a typical web application, we perform CRUD operations on entities. . It’s quite common to have the same entity object be requested, saving to DB and response. . . Here are the roles of classes mentioned above, . API endpoints: deals with input objects. In this case, a single one entity. . | Service and Repository: deal with manipulating and saving entities to the database. And sending the same entity as response. . | Entity: Has 3 roles. Input Object, Output Object and being object stored in database. . | . Code Sample: . Entity . . Repository: . . Controller: . This way is problematic since it, . Many fields used for one role (like input) won’t be used for other role (like storing to DB) . | Internal details are exposed in output . | Validations are harder for inputs . | . Many linters recommend having a separate DTO object for this task. This is a step up over the usual entity but isn’t sufficient as most of the time the entity and DTO are exact replicas of each other. . There is a better alternative to this, which is to separate inputs, output and entity classes entirely.. . . Code Sample: . Request Object: . . Empty Body Response: . . Response With Body: . . Response Assembler: . . Controller: . As you can see from the example above, there are many request objects and a single response object. Each of these requests and responses can have different fields. . API endpoint: deals with getting different formats. . Service &amp; Repository: only deal with manipulating entity files based on the type of request. It then either sends a response directly if there is no body or offloads it’s work to a response assembler. . Response Assembler: job is to create a response. There may be multiple types of responses which response assembler may assemble . There can also be requests and responses that have no body at all. . For example: . Request params maybe enough for GET and DELETE request . | Similarly, HTTP status code and response header maybe enough for responses . If an object is created, then 201 CREATED with response headers like location without a body may be enough. . | . | . HTTP suggests but does not enforce any kind of rules over requests and responses. But by following them as closely as possible, we can ensure communicating intent without transfer of bulky. . The benefits of this approach is: . Request, Response and Entity classes have a clear separation of concern. Each deal with their own specific usage. . | Therefore, no extra fields are added to each. If new fields are to be added to one part, they may or may not concern other parts. . | Securing the application becomes easier as less internal details are leaked. . | PS: Tip: In most cases, the response object requires some fields from the entity. Commonly DTOs are created and data from entities is copied to response using some sort of mapper. There is a better alternative which is to use the Delegate pattern. The getters of response class can delegate to getters of entity class. In Java specifically, this can be made easier by using Lombok’s @Delegate annotation. .",
            "url": "https://www.ankushchoubey.com/2023/01/07/Separating_Request,_Entity_and_Response.html",
            "relUrl": "/2023/01/07/Separating_Request,_Entity_and_Response.html",
            "date": " • Jan 7, 2023"
        }
        
    
  
    
        ,"post39": {
            "title": "Observability For Developers",
            "content": "What is observability, and why is it needed? . Observability are tools that help understand how an application is running. . Typically, one an application is deployed, it is treated like a black box. We don’t know what is happening inside the application except logs. . These logs aren’t good enough specially when considering the complex distributed applications we have. . The solution is to implement good observability. . Observability is also sometimes called testing-in-production. It allows for clearer insight into the application. . For example, let’s say you operate an e-commerce store and allow for multiple payment vendors like Google Pay, Amazon Pay, Apple Pay, etc. The code has been tested and working properly. Now, after an year, you went to buy something yourself. And you decided to use Apple Pay, but the payment fail. You debug and you find a critical configuration property was not added. Now you went ahead and fixed it. But when you check the database logs you realize, there wasn’t a single payment via Apple Pay for the last 1 year. You missed a lot of potential business there. . With observability, your flow to catch the bug would have looked something like this. You get alerts that the number of payment request failing is too high. You want into you dashboard and checked what is happening. It indeed seems too high. You check the logs and find the issue and fix it. You just saved yourself half and year. . With observability, you can be proactive about the bugs and about the optimizations you can make to your application before your customer reports it. This makes you a continuous improvement machine. . For a real life example, you can see Slack’s status which shows if slack is up or down. This provides an easy way for customers to know what is happening. . https://status.slack.com/ . What are the pillars of observability, and why do they make sense? . There are three main pillars of observability. . Metrics | Logs | Traces | Metrics are numerical values related to the application in a moment. Like, CPU utilization, Number of HTTP Requests success or failures, and RAM Utilization. . Logs are the application logs. One must ensure that logs are properly added to the right log level. I wrote an article about the topic here: [Link to logs post] . Traces are the visualization of request flows between multiple microservices (MS). For example, MS1 triggered MS2, MS2 triggered MS3 and MS4. . What are the different observability tools? . There are different pieces involved in observability. . Prometheus: [Link to Prometheus Article] . Tool for metrics. | Application release logs in prometheus format. | Prometheus will poll data every 15 minutes. | It also allows to run queries against the data with use of PromQL language. | It’s important for developers to learn PromQL Language for debugging.. | Developers can also add custom metrics via Prometheus. | . OpenTelemetry: . A tool that adds traceId to requests and helps to track it across microservices. | . Jaegar: A wrapper for open telemetry. . Graphana: An active-development open-source tool for visualizing logs, metrics, traces and more. . Kibana: Another popular tool for visualization. It’s part of a popular ELK stack. . DataDog: A paid tool similar to Graphana. . What’s the architecture of Graphana? . What are the basic Graphana features one should utilise? . At the basic, one should be able to read logs. This is where most developers stop. . [Graphana Logs] . How to set up dashboards in the best way? . The dashboard is where you’ll see all your metrics visualized. You want to visualize it in such a way that you can get to the problems faster. . Make sure you segregate the most important metrics dashboard has only useful information . How to set up alerts in the best way? . Assume that most people don’t know what to do. . Your alert should provide: Context: What happened exactly? Next Step: What to do next? . How to use Graphana to debug a scenario? . Here is what’s a typical flow: . You’ll get an alert | You go to the dashboard and check it out. | You try to explore more, you write custom queries to find more details. | You combine the metrics with logs and traces. | You find the problem and you take steps to fix it. | Learn PromQL. . How can Chaos Engineering help .",
            "url": "https://www.ankushchoubey.com/v1/observability-for-developers",
            "relUrl": "/v1/observability-for-developers",
            "date": " • Jan 1, 2023"
        }
        
    
  
    
        ,"post40": {
            "title": "Why we should strive to tell the truth always?",
            "content": "Living and speaking your truth makes you free . Why lie when you can tell the truth and be free? And will it make things better? That’s a double bonus. . Telling the truth is acceptance of how things really are . We are always asked to accept reality as it is. Acceptance helps us get clearer, helping us make better decisions and avoid traps. . Truth always comes in the long run. . No matter what you do, the truth will eventually come out. . Your body can feel when you are lying . When you lie or do something untruthful, your body reacts. Let’s say you hate something, and you are not saying it. You’ll develop resentment and stress. . If we are not truthful, someone else will suffer . The cost of lying isn’t something we always bear in the short term. Sometimes it’s others. Suppose you go to a doctor, and he doesn’t tell you that you might be at risk of a deadly disease and that now is a good time to avoid drinking. What impact would it have on you? . Living and speaking truthfully orients you properly . If you can’t lie, you’ll be hesitant to slack off at work if you want to face daily standup the next day. Thus, orienting you to become a better person and get the work done. Or it’ll help you solve the problem that makes you avoid your work. . If you can’t live a lie, you won’t cheat on exams, orienting you properly to become the kind of person that will pass the exam. . . Note: Remember this always, if you speak the truth and act in truthful ways, the world will arrange itself in the best possible manner to you. If you lie or don’t live truthfully, the world will arrange in the worst possible manager. Truth is a shield. That survives scrutiny . That protects you against lies of any kind. . Truth and peace are directly correlated. One increases or decreases another. .",
            "url": "https://www.ankushchoubey.com/v1/truth/why-tell-the-truth",
            "relUrl": "/v1/truth/why-tell-the-truth",
            "date": " • Dec 31, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Implement Zero Trust in Real Life",
            "content": "Liars can wrap you and your worldview to get what they want. They often go unnoticed. They are like successful social black-hat hackers. You need good security to protect yourself. . . Note: There is a difference between not knowing the truth (being naive) and lying. Here we are talking about deception. You need zero trust. Zero trust has three ideas. . . . Verify Explicitly: Have explicit systems to examine if what is spoken is true. Pull out your logical fallacies and cognitive bias lists. | Least Privilage: You don’t have to say everything to everyone. Only give people as much access as they need. They don’t need everything. They don’t need your whole self. Your family needs your whole self, not others. You need to be assertive. | Assume Breach: Assume the person you are talking to tends to lie. Or does not speak truthfully as diligently as you do. | . Verify each request/interaction. . The reason we get scammed, is because we accept the ethos and pathos of speaker over the logos of the argument. . In Zero Trust, we stop trusting the entities and instead verify each request that is being sent. . In our real life implementation, we can modify this to verify each and every request. . Split every interaction into ethos, pathos and logos, and focus on the logos part and discard everything else. . Use your weapons of analysing cognitive bias and logical fallacies. And with what remains, make a long term decision. . Catching a liar: . Lies are oversimplistic and tend to change over time. . The liar has to keep a narrative of many things that aren’t true. | When pressed, they may try to blame something else or bring up an irrelevant topic to distract us or place a straw man. | They won’t be specific. | They may twist their words slightly to fit their lie into truth. At such moments, note if they have motivated reasoning. | . Should you confront a liar? Depends on how serious the lie was? . . Tip: Stay away from people who explicitly lie or have manipulative behavior. Gain perspectives: . If you have good social connections and a broader worldview, you’ll eventually know many common lies that others face. . Books like 48 Laws of Power and The Law of Human Nature are also helpful here. . Consider both sides of the coin. And recognize that if something is too good to be true. It probably is. . Things seem too good to be true. . Know the common areas where you can easily be lied: . Recognize the common areas in which you are suggestible. These likely include things you are insecure about. This is something you usually don’t comfortable with. (Side Note: This is why you should confront your truths as it is. Insecurities are just unprocessed truths.). . Since you are insecure, you may have an idealised vision of yourself. . When you are in a suggestible state, you can be easily sold anything. . For instance, you are more likely to believe in a get slim product if you are insecure about your fats. . If you are desperate about something, it’s easier to believe a lie in that domain. . Most things on social media are also lying. Why would you wanna stay on a platform that’s fake? . . Resources . Spotting the Truth in a World of Lies .",
            "url": "https://www.ankushchoubey.com/v1/truth/liars",
            "relUrl": "/v1/truth/liars",
            "date": " • Dec 31, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Code Review Checklist",
            "content": "Why do we need a code review checklist? . We developers must know a little bit of everything from architecture to low-level code details like HTTP Statuses. Apart from that, we also have non-technical work that needs to be kept up to date. . For this reason, we need checklists. . Checklists are proven to increase quality and compliance. They are used heavily in the medical domain. Medical professionals who use checklists make fewer mistakes and are likelier to get through all the steps properly. . An important goal for us developers is Continous Delivery, where every commit we make reaches production and works properly. To avoid the cycle of making mistakes when we commit, we need accurate processes that help catch our bugs early on. . These processes can be in the automated form of linters, tests, etc. But still we need a human to verify what we have been doing. . We need a code review checklist to make the code review process streamlined and understood by the entire team. . How can we use a code review checklist? . We can use code-review checklists like doctors do. . Before committing, we can walk through our code review checklist and tick off points. This will ensure we have a good first screening ourselves before submitting to code review. . The code review checklist is mostly a yes or no questionnaire. It need not be super complex. And would take a max of 5 minutes to go through. . If you aim to do 1 Small story in 1 day and 1 medium story in 2.5 days, 5 minutes is nothing to ensure the same story doesn’t produce a bug. . What items can we add to a code review checklist? . API . Are you using the correct method? | Are you using a suitable schema? | Are you returning the proper error code? | Does the return value need to be cached? | Logging . Are log comments proper? |",
            "url": "https://www.ankushchoubey.com/v1/code-review-checklist",
            "relUrl": "/v1/code-review-checklist",
            "date": " • Dec 31, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Productive use of time",
            "content": "There are a few rules I discovered that helps. . See the reality as it is . Like previously, being able to see to truth of how we spend our time is very important. Since we have digital devices, this tracking is relatively easy. . We need to create slots of MED. Minimum Effective Dose. For example: For sleep MED is 8 hours. For POMODORO, MED is 2 hours. . Going beyond MED doesn’t help. For example, you cannot work more than 35 hours per week and expect your productivity to rise. 35 hours is fixed. . The lucky thing for us is we have structured week, Sunday to Saturday, structured weekdays and structured day, 24 hours and structures hours and minutes. So we can utilize them at our best. . For example, given a human attention span, you can only focus for 25 minutes (the size of a sitcom). And then you should take break because without it, your attention will dwindle. And by taking pause and starting again, you;ll have higher focus. . Like MED, standard recommendations are also useful, like for exercise 75 hours per week distributed over a period of time. . For Piano, this could be 30 minutes of structured practice every day. . Structure is important here. Look at systems section on structured training. You should look at every work opportunity and challenge as a structured training exercice. . Do your current work well. Till completion and produce no backlog. . Like with life, a software development project get’s delayed the more technical debt is there is the system. When half done features are released, then problems arise. . This is taking shortcuts. Like not doing TDD or skipping a feature thinking oh we’ll ship this and then do this later. . It doesn’t work. You want your mind to be as clear as possible to focus on the present and future. How do you do it, by producing no backlog. . This also applies to studies, someone who has studies maths or some other subject well is school doesn’t have to worry re-learning the basics when they grow old and prepare for their MBA entrance exam. Because the work was already done well. . Doing your present work well also means you gain new capabilities and avoid many other tasks that were in the backlog. . For instance, you decided to read 4 books on the productivity. . If you have read the first book properly and slowly, implemented the details, you may not even need to read the rest of the books. . But suppose you haven’t read the book properly and slowly and failed to implement the lessons, then you’ll go on to read another book on the same topic. Then another and another. THis produced more backlog. . If you do your work properly, you produce no backlog for the future. . Do it now. . You can’t wait for the future to arrive. Things won’t sort out in the future. They’ll sort out in the present. in this moment if you take action. . Talking about your problems doesn’t fix it. Taking action will definitely fix it. . How to layer your work? . What tasks should you pick up first assuming you consumed your vitamin N and said no. Here’s my guidelines. . You can divide your tasks in the following and pick these in order. . Do the task first that makes things easy for your future self. This could be learning or planning or writing a note for your future self. | Do the task that brings you more clarity first. This can creating to do list or planning | Then task that’s you don’t want to do. Because your brain has a blindspot that makes important things appear harder. Slay that dragon and eat that frog first. | Then the task you would love to do. This you won’t have done automatically anyway. Enjoy the task and feel fulfilled that you did rest of your tasks well. | Then other tasks that are low quality and time. | You’ll also have to slot delegation to team members somewhere here. . Remember, you only have 35 hours per week. or 7 hour per day or work time. . For personal you have 7 hours per weekend combined assuming you also want to live your life well. Use them wisely. .",
            "url": "https://www.ankushchoubey.com/v1/productive",
            "relUrl": "/v1/productive",
            "date": " • Dec 25, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Creating Systems To Automate Goal Achievement",
            "content": "The only way to become a high performer and fulfil your full potential is to create, iterate and rely on your systems. . In programming terms, systems are O(log n), and No-Systems are like brute force O(n^3). Systems allow us to focus on the task and not reply to other things. . Suppose you want study for IELTS exam and it’s been your goal for 3-4 months. When you look at what you did in these past months, you can see you wasted a lot of time. Re-iterating, you create a system for yourself. You setup flash cards that you practice daily for 5 minutes once you reach home. In a less than a month, you were able to cover up more than you did in last several months combined. . What are the benefits of creating a system? . Systems allow you to free up your mental load. Allowing you to perform at your best, be decisive, and be confident that everything will work properly. . Systems allow you to fall back and know everything is okay and taken care of. They are comparable to taking breaks and letting go. We take breaks and let go knowing we are stronger and in control. . Systems allow us to be happy at the moment and know that the path we are on is the best path there is. . If you want to have a 360 life, a life where you are covered all areas of life pretty well, you need systems. This is because you have limited time, and limited cognitive ability to re-thing something again and again. You need a set process. . What are the different kinds of systems? . Different kinds of systems are: . Targeted Training and Testing - O(n) | Assistance via Environment - O(log n) | Automation - O(1) | Habits - O(1) | Each system has its pros and cons, and when to use each depends on what you are trying to accomplish. . Targeted Training and Testing: Learning and deliberately practising each and every step of something. This includes re-training to keep yourself sharp and eliminate flaws. . Assistance via Environment: Setting your environment in a way that makes it easy to accomplish your tasks. . Automation: Using Technology to its full advantage as a modern human. This would take our output from 1 to 20x. . Habits: Creating healthier habits that are in our best interest. . Targeted Training and Testing . Training is the same as putting your reps in the gym. Initially you are fat or skinny, but as you keep training and working out, muscles develop and this development gives you new abilities that allow you do new things. . Training allows you to not be effected by change in environment or mood. Since you have practices your kick 10,000 time, there is little error that you’ll make a mistake. . You rely on training and testing to get better at a skill. Suppose you want to give a public speech, create a script, practice it a few times, maybe record yourself, iterate and then give the speech. . The stages of progression in training and testing are following: . Level 1: Learn: You are learning about the topic and actually practising the things you learn. There is no learning about actually doing. You need #skinInTheGame as early as possible. . Level 2: Cover the flow: You take things slow and try to cover the flow a few times. i.e. you practice something end to end but slowly. . Level 3: Rectification: You rectify everything starting from your weakest point because that’s where you’ll get the most growth. . Level 4: Iterate and practice: You continuously iterate and practice. . Level 5: Mimic the real world until you feel confident to go out into a real situation . Level 6: Graduate but sometimes return to one of the previous steps to iterate. . // REFLECT and improve . Remember, your training needs to be targetted and focused. Only by removing redistractions and targetting you’ll have enough myelination in your brain to truly focus and grasp what you are learning. . Exposure therapy is also a good example of training. You are scared of something and it terrifies you. Now you take steps to learn it, expose yourself to it again and get better at it. . Find places where you can include training. . Make a list of all the things that you do. Find places that can be trained. . For example; Gymn . Nuances about training and testing . You need to do your reps.: You need to do your reps when it is needed. And take breaks when you are not doing your reps. Work hard. Play hard. . You’ll face resistance You need to train to get stronger in whatever you are doing. :) You’ll face resistance from your own self. Trust the training process and the system you have set. Part of your training is facing and overcoming these resistance. . Don’t expect you’ll special: Perhaps there are people out there that don’t need to practice piano on a weekly basis. Assume you are not one of those people. . Here are some examples of trainings and testing . Pomodoro: Trains your attention and focus by focusing on something for 25 minutes and then taking a break for 5. The timing and Pomodoro principles need to be strictly followed for good training. . Meditation: Meditating for a fixed amount, like 10 minutes/20 minutes, would train your brain to focus your attention on what you truly want and trains you to not be swayed by your emotions. . Practice Sessions: Whether it is Piano or learning a language. You need proper regular practice sessions. These can in be pomodoro style. . Tests: Tests are a good way to assert if you actually know something. This can be Dry Runs of Demo or an actual test where you sit down for the exam time and give the test. Tests can also be in form ask letting someone else ask a question and you answering it. Tests are something we did commonly as kids. . Nuances . Trust the system you have set. .",
            "url": "https://www.ankushchoubey.com/v1/systems",
            "relUrl": "/v1/systems",
            "date": " • Dec 22, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Living a truthful life",
            "content": "Treat this article as a buffet. Start with the introduction and then read the sections until you feel you get the gist. Then jump to the next. . Introduction . There are two parts to truth: . Seeing the truth | Speaking the truth | Acting the truth | Seeing the truth . On truth, we want to be able to see truth as clearly as we can always. How to achieve this. . Part of it can be automated. Part of it can’t be automated. . Observability . Data collection on computers/mobile devices can be automated. For example, you can keep track of all the tasks you need to do. All of them. . Many people don’t write todolist. They think that tasks accomplish automatically. But most time they don’t. I decided to make change to my passport address an year ago and it’s still not done. Similarly I had decided to get a complete health checkup an year ago. That hasn’t happened yet. . The goal with todo list is clarity. If we are failing towards our goal, we should know. If we are not failing towarding our goal we should know. . Similarly, all the quantified self automated systems are also truths. . Rational Pre-decisions . There are other ways to see truth aswell. For example, you predecide that the person who loves you would make time for you. Now, if they don’t make time for you, you know they don’t love you or at least that they might be busy. #loveLanguages . It’s important to not move your goal posts too much here. A little nuance adjustment is okay. But rationalization is not. . Hold opinions lightly . To see truth clearly, you have to hold you opinions lightly. Because when you start saying and speaking the truth, you’ll start seeing everything in absolute clarity and that clarity means most times you realize you were either wrong and not perfect. . The Mountain of Perspectives: What is true? . We are in a 3 dimensional landscape. There are multiple people in it. And their are multiple mountains. . These mountains are truths. Some mountain are tall. Some are short. . People are distributed accross the terrain. Some can see one mountain clearly. Some can’t. Some can see some part of the mountain. . On this terrain, if someone is tied, fog appears and they can’t see the mountain clearly at that moment. . Therefore ultimately, we find that there’s no one mountain. What’s truth for one person may not be true for other. And the interpretation of what’s true may change as more information is gathered. . This can be tricky when you first start with telling the truth. But you’ll get the hang of it. . What should you do to seek truth? . We can control a few variables. . Hold your opinions lightly and examine them regularly. | Filter out Logical Fallacies. Fallacies are very easier to spot and you’ll sharpen your arguments. | Ask good questions that aren’t biased. | Ask other’s for advice. | How we usually avoid telling the truth and what we can do about it? . White Lies: We should instead be as kind as possible but not lie. It’s important to recognize that white lies backfire bigger than just speaking the truth. . Optional: Psychological Safety: Helping others tell you truth . Psychological safety allows people to be themselves around you because they feel safe. . Offer guidelines and offer support. . Be consistent. . Tell your people you can handle the truth. Say it out loud. Over and over again. And mean it. . People who seek feedback more often feel psychologically safer. . Critize yourself publically. . Achieving psychological safety - YouTube . How to Build Psychological Safety at Work - YouTube . Implementing Truth . It’s easier to stop lying than it is to tell the truth: Because most times you don’t know what truth is. So, if you stop lying, you eliminate almost everything. What remains is as true as things can be. . Practicing speaking the truth as clearly as you can: Take a step back and think through if what you are saying is truth. Truth is clear and precise. . In order to be able to search for the truth, you have to think. To think, you have to risk being offensive sometimes. . In order to speak the truth, you have to give up on what you want. . Tell the truth + be useful: You can always laugh. Panic is no good. Seeking truth is difficult when you are in panic. . Optional: Flavours of Truth That We Fail to Accept . Data: Data can be in many forms. It can be text/numbers from a system or it can be observation from a real event. If you can’t see someone is continously treating you badly, you should accept that they treat you improperly. :) . Rejection: Rejection is a truth. No matter at what stage it is. This could be failure in an exam or a failure of relationship. The most rational thing to do here is to accept the rejection and move on. This acceptance is the acceptance of truth. Once we do accept it, we’ll be able to rethink things though and move forward. . Our Desires: We try not to accept our desires. Maybe you wanna have sex badly but you force yourself not to think about it. Thus this thought becomes your new prison. Instead, you can accept this fact and find a healthier alternative than to watch porn :). . Speaking Your Truth . Use simpler straight forward words. . You can’t make others see the truth easily. Saying, “You don’t want to look at truth” might be helpful sometimes but not often. This is because truth is filtered by many personal biases and personal knowledge. . For example, if someone has not experience pain of a loss, they won’t realize what you are going through. They won’t be able to empathize. And similarly, in such situations, you won’t be able to empathize with them. . Optional: Nuances about Truth . Don’t be idealistic be realist. Being ideastic is great for personal discipline. Bt specially with others it becomes too much. . Truth is good. But Panic is No Good: You have to learn to be calm. And specially making someone else panic is no good. We are more likely to create something outof nothing when we panic. In that sense, we are creating truth from a lie. . Belief presupposes truth: Knock on the door and the door shall open. If you knock the right doo . Optional: Truth and Other Concepts . Ego: Ego stops us from getting to the truth. To avoid ego, hold your opinions lightly. . Biases: Biases are blindspots we have. . Truth and Good are tied: . If you are asked if you should lie for the greater good? And you say yes. . Maybe, you are on the extreme. . Truth and Peace are tied: . The closer you are the truth. The more peaceful you are inside. . Conclusion . We should tell the truth because: . Staying connected with reality is the best place to make wise decisions. | Truth is: . Based on reality and true events. | Based on the recognition of personal biases and fallacies. | Based on the recognition that we are more likely wrong given the amount of info in the world. | Empirical, i.e. verifiable in the real world. | Truth is not based on the following: . Self-affirmations and beliefs | Motivated reasoning. | Commenting without doing. | Optional: Resources . Jordan Peterson - First stop lying, then speak your truth - YouTube .",
            "url": "https://www.ankushchoubey.com/v1/truth",
            "relUrl": "/v1/truth",
            "date": " • Dec 20, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Designing and implementing a Morning and Night Rituals for optimal life",
            "content": "Designing a Morning and Night Ritual for optimal life . Why morning and night rituals are essential? Why they aren’t replaceable by mid-day activity? . Morning and Night are essential time because they provide the start and end to the day. . By starting the day of right, we can increase the probability of having a good day. By ending the day right, we can increase the probability of having a good next day. . The morning and the nights can be well planned and be more structured than mid days where plans have to adopt day to day. . Because of this stability provided by a stable structure, they can become essential tools to take care of our needs, reset and work on long-term goals which we miss in daily mid-day planning. . The morning and nights are more personal and handled individually than mid days. . How to plan your morning and night ritual? . Here are the 3 parts we need to plan: . Morning should provide a jump start to the day. | A good night sleep should be in adequote amount and provide essential rest and relaxation | Night ritual: Should prepare us to have a good next day and ease in the process towards relaxation. | Here my take on how to plan: . Morning . Wake up at least 1.5 hours before you have to be out or before a computer screen. This will give you an ample time to start day off right and not rush. In case you woke up late or have less time on hand, you can do as many things as time allows. No need to rush. | Make bed. Make sure it’s reset so that when you come back it’s perfect. This carries our organization that you did last night. Remember, bed is only for sleeping and fucking. | Take care of Hygiene. Drink Water. Poop. Brush. Wash Face. Sit for 20 minutes. You want to sit only once in a day right? Don’t bring your phone. You likely have unprocessed thoughts from the good night sleep you had. And you have a good space to pause and reflect. :) | Go out in the sun. Sun is vital for our body. It improves your mood, produces more testosterone, manages circadian rhythm and helps you sleep better at night. Therefore, get as much sunlight as possible. It’s better to the rest of the activities in sun. Expose as much of your skin to the sun as possible. | Exercise. It can be little. 5-6 minutes. Or the 7-minute workout. Just get yourself moving. | Now you can go have a shower**. hot+cold bath. Relax your body. And get dressed and sharp. | Post-exercise your mind is likely active and with bath and being properly dressed, it’s ready to be sharpened. | Read and reflect. Read about 10-20 minutes of something that you are reading. This is non-fiction. | Meditate. This can be guided. Make yourself calmer. | Now you can take 2 minutes of break like you do at the gym and look at the well planned day you set last night. | Sleep . Aim to have 8 hour of bed time. So, it you are going to start your work at 9, you wake up 1.5 hours before at 7:30. And you have your sleep for around 8 hours so 11:30 bed time. . The goal is to have a relaxing sleep to start next day right. . Night . Like morning, start your night ritual at 1.5 hours before bed minimum. . The activities we have at night are all of relaxing nature. It also serves as a place to handle small things that we won’t have to think about in the morning. . If dinner at your home is prepared by someone else, you can adjust activities in this list. Just make sure it’s consistent and stable. . Clean up your room. So that it’s organized. You want to have your environment reset. | Have dinner with family. This is the place you can put your phone is airplane mode or turn off internet on a minimum. This time is a good time to bond with family and catchup over the day. | Take a walk outside alone. You can spend around 20-30 minutes. It’s a great place to rewind and reflect and walking would also help your with digestion post dinner. | Plan your 3 MITs Most Important Things for the next day. | Layout clothes and pack your bags for tomorrow. This will help you be sharper. Looking and feeling sharp increases your performance. You can also get a shave if you need to. | Now that it’s the end of the day, you might wanna clear out all your thoughts. Nights are a great place for writing. Mornings are great for editing. | Fill in 5-minute journal. This should serve as a reset to end your day. | Dim your lights. Make sure the room is cold. | Sleep. You can use deep breathing to help ease into sleeping. While trying to sleep, along with deep breaths you might reflect on your day. Think about next or talk. It’s your space. | Embrace of 8 hours of sleep. :) | Remember this, morning, sleep and nights are sacred and they need to be protected, prioritized and planned well. The result is a 20x increase in effectiveness and consistency towards optimal performance. So, this time isn’t wasted, it’s invested with a much higher return on investment than anything that happens mid-day. .",
            "url": "https://www.ankushchoubey.com/v1/morning-night-ritual",
            "relUrl": "/v1/morning-night-ritual",
            "date": " • Dec 19, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Actually solve the problem.",
            "content": "People . What’s with people who try to ease situations without ever solving the problem? . It’s like “Oh tumhara maan nahi hai? Maat karo”. . English: “You don’t wanna do it? Don’t do it” . Like what the hell? . “Oh you don’t feel okay.” Just rest. Keep resting. . As if it solves the problem. 🤷🏽‍♂️ The problem remains, and just takes a different form. . Life is full of difficulties . In relationship, there are times when one or both parties have fears stopping them. It’s easy for one of them to back off. Maybe they are anxious or avoidant. It’s like, does it solve the problem? . No, the problem remains. The next relationship, they go to, they’ll face the same problem. Then when should change path . One Jordan Peterson criteria is: If the other path is harder. . Your brain will try to default to easy path. If the other path is harder. Then you should take it. . We can also say that, find good reasons. . For example: Not moving out of India because you are scared. Doesn’t solve the problem. You shouldn’t be scared. Go move out. . When you face the dragon, the dragon becomes smaller . When you are not willing to face what you want to face, the problem becomes bigger. . When you face what you are afraid of head on. Looking the dragon in the eye, the size of the dragon decreases. . . It’s like damn, life is full of suffering. But you are stronger . Life is full of suffering. But that’s if you believe it so. . If you tune your perspectives, life is full of challenges. . And each challenge you face, you become stronger. . And when you become stronger, it’s fun and amazing. You have become an hero of some kind. . Don’t be afraid of challenges. Face them head-on. . Actually solve the problem you are facing to the best of your ability. You’ll get stronger! .",
            "url": "https://www.ankushchoubey.com/v1/actually-solve-the-problem",
            "relUrl": "/v1/actually-solve-the-problem",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "My experience working with MongoDB",
            "content": ". I used to work with SQL in the past. Nowadays I have been working with MongoDB. Here has been my experience. . NoSQL is simple . NoSQL is much much more simpler than SQL. There are no need for multiple table. You can just nexts documents into one. . Unless something is an actual needs to be treated like Entity, you don’t need a separate table/collection. . There is no need to go write a separate create query. Just push something to the DB and it gets saved. . The difference here is: . SQL works on concept of schema on write. The data needs to have a particular schema. | NoSQL works on Schema on read. The data can be with any format, but it’s job of reader to intepret it the way it wants. | . It’s like working with file. . What about integrities and foreign keys? . These maybe important for certain applications. But for most the simplicity of NoSQL is worth it. . For NoSQL, the backend-application which is responsible doing operations on the DB is the one than maintains the DB state. If you really need foreign key like constraint, you can just code it up. . Browsing Data . Browing a JSON document store is painful in tree view. This is because you have to expand out each row to see what’s in it. If you are using a NoSQL database, still use the table view. . The painful tree view . . Table view . . Image source .",
            "url": "https://www.ankushchoubey.com/v1/sql-and-no-sql",
            "relUrl": "/v1/sql-and-no-sql",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Why do I write?",
            "content": "Writing clarifies my thought more than anything. It converts chaos into an order of some kind. . The better I write and explain, the better I get at solving interpersonal problems. . Writing protects me against the Dunning-Krugger effect. The effect is where one has learned a bunch of things but isn’t aware that he knows. . This is because writing builds up documentation of progress. It’s something that I can look back on and derive insights and meaning. . Writing serves as a public view of my knowledge and ideas. . It serves as a great self-promotion on a resume and during job interviews. . My own writing provides a fall back for my future self when re-learning or making important decisions. . . Photo by Aaron Burden on Unsplash .",
            "url": "https://www.ankushchoubey.com/v1/why-i-write",
            "relUrl": "/v1/why-i-write",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Keep messages unread",
            "content": "You don’t need to read every message, every email, every notification and every new video you receive. . Life gets calmer once you relax and let some things be. . Why rush? When you can just wait for things to collect and then read all of them at once. . Try the switch and see within a month, how many unwanted things you were putting your attention to. .",
            "url": "https://www.ankushchoubey.com/v1/messages-unread",
            "relUrl": "/v1/messages-unread",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Adapting to Project Reactor / Webflux Mindset",
            "content": "No using .block() the event loop . If you are going to block, block it the reactive way . Methods should always return a Mono or Flux . Until something is part of the return chain tree, it won’t be executed. . Use Mono.error() instead of throwing . Mono methods should not throw anything . Instead of: . .flatmap(pojo-&gt; { throw new RunTimeException(); }) . use: . .flatMap(pojo-&gt; { return Mono.error(new RuntimeException()); } . Use Mono.fromFuture to convert from CompletableFuture to Mono . use .collectList() only when needed . Always keep things within mono flux chain . The way to hold on to a previous mono flatMap return is nested mono, flux call. . But try to keep things as flat as possible. .",
            "url": "https://www.ankushchoubey.com/v1/webflux-mindset",
            "relUrl": "/v1/webflux-mindset",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Implementation GDPR - Download and Delete A Users Data in Microservice World",
            "content": "Implementing GDPR-compliant microservices to get all user data and delete a user’s data can seem very hard. . But now I think it’s way too easy to implement. . The approach described below can work at the enterprise level for enterprise apps. Just replace user with enterprise and {userId} with {enterpriseId} . . Essentially, we can it in 4 steps. . Every data record should have {userId} indexed. Even messaging services like Kafka with a database backup should be indexed. Even storage services like S3 be segregated as {userId}. | Have all microservices have a DELETE /gdpr/user/{userId} endpoint: This endpoint hard deletes all user’s data | Have all microservices have a GET /gdpr/user/{userId} endpoint: This endpoint returns all data from a user | Have an orchestrator GDPR microservice: This will call all other microservices for /gdpr/user/{userId}. | In case of getting data, it will collect all the data, upload it at some location for a certain number of days and notify the user about it. . The exact same interface is needed to hard delete data from backend ups as well. .",
            "url": "https://www.ankushchoubey.com/v1/gdpr",
            "relUrl": "/v1/gdpr",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Developing better self-awareness with QuantifiedSelf - Observability for personal life.",
            "content": "What do I mean by the Observability of personal life? . Quantified self means tracking certain things in our life so that we can make good decisions. . These decisions are made so that we can course-correct them if we are straining away from something important. . And therefore, it would make us more self-aware. . Why do we need it? . In our fast-paced world, we take on too many things at once. We are constantly distracted by attention-seeking entities like marketing companies. . In this, we forget the take care of the most important person we know. Us. . Ideally, the problem lies in just taking care of ourselves enough. But it’s way more helpful to have proactive systems in place. So that we are guided towards taking care of ourselves. Therefore, this article. . What can we do to implement it? . Before implementation details, it’s important to determine a few factors first. . The goal is to make more informed decisions. The goal is not to distract us. | We must live a balanced life: healthy, wealthy and wise. Or you could say, healthier, wealthier and wiser. All aspects, not just one. | Therefore, each day may not be perfect. And we need certain randomness in place for the best decision to happen. . Being too perfect will lead to anxiety. And as we already know: #PanicIsNoGood (Zeus from Thor: Love and Thunder). . Here are some I tried to implement: . Track your healthy . Check your weight over time . Need not be perfect every day and can be random, just over time. Being too perfect is good for the short term when u want to improve something, but not good for the long term as it leads to anxiety. . Regularly get preventative body checkups . Once a year or once every two years. . Number of times you went to the gym . Cult Fit App . Track your time . Life cycle app: Automated . Shows how much time you spent and where. . . Source . Screentime: Automated . Phones do come with apps that make you more aware of the time you have spent. . . Chrome Extensions: MindHero: Automated . Tracks time spent on websites. . . MindHero - Chrome Web Store . Programming: . WakaTime - Dashboards for developers . . GitHub Streaks . . Source . Be mindful of how much time you spend attentive with family . Family is the most important part of life. . Track your memories . Photographs . Diary writing . Personal diary to write down thoughts and other entries. . Track your money . CRED App . In India, CRED app gives accurate summary of credit card info. . . Track your writing . Grammarly . Grammarly also publishes a weekly email with insights about your writing. It also suggests improvements that can be made. . . . Making decisions . Don’t check the data every day. . Most apps allow for useful prompts and summaries that can be used. . What are the limitations? . //TODO . Resources . Quantified Self: You have the data, now what? - YouTube .",
            "url": "https://www.ankushchoubey.com/v1/quantified-self",
            "relUrl": "/v1/quantified-self",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Why do microservices need an API client sdk for HTTP and Messaging?",
            "content": ". Amazon SDK . How does microservice usage ramp up? . Microservice usage scales very fast. At first, a single service is the APIs. Suddenly there is a bunch. . Each implements the same methods to access the same rest APIs. Each one of them would implement contract testing. . This is a wasted effort. . . API Client SDK . We can, as an alternative, create one client code and let everyone use it. Or one client in each programming language that uses it. . This gives us the following advantage: . Only the client code deals with the format of the API. | Only the client code needs to be contract tested. | If the endpoints of the API change, only the client code needs to be changed. | We can create a single @Value for the base URL for the client and inject it via a config server for all applications. | If we need to add micrometer-prometheus usage metrics for an API, we have one destination. | If we need to retire an API, we just add @deprecated and release the client. | The client would also include: . Request validation: To avoid unnecessary network calls. | Request Body POJOs: So that everyone uses the same format. | Response Body POJOs. | Standard Exception handling | . Message client . The same can be used for messaging like Kafka, where the client can include POJOs format and methods to publish messages in case of incoming webhooks. . Conclusion . In conclusion, an API client would help reduce the efforts of all developers in developing and using an API. The developers using the client need not be concerned with how the API works internally, weather it works on REST, Graph QL, gRPC, etc. They just need to send and receive data in using the right client provided POJOs. .",
            "url": "https://www.ankushchoubey.com/v1/api-client-sdk",
            "relUrl": "/v1/api-client-sdk",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Core Attributes",
            "content": "What are Core Attributes? How they differ from Values . Core values are principles that you consciously choose and live by. Core values simplify decision-making and are relatively easy to implement. . However, sometimes it requires effort to consciously choose a value. For example: during an Argument. . At such moments, we need an instinctive reaction that improves the situation. It may not be perfect, but it defines the kind of person we are. . They are our Core Attributes. . What are Core Attributes? . Core Attributes are habits we develop consciously or unconsciously that define our reactions. . Core Attributes are trainable and can be improved over time consciously. In situations, we almost already know what our reaction will be. . In a Thinking Fast and Slow sense, core values are thinking slow, and core attributes are thinking fast. . Like Core Values, core attributes can be constructive or destructive. For example: expressing anger is healthy. But actually, being angry is unhealthy. . Core attributes are measurable on personality tests like the Big 5. . Attributes are easier for others to recognize. . What are some examples of core attributes? . Good Attributes . Calm: Can be trained by meditating. Focused: Can be trained by saying no often. Patience: Can be trained by consciously choosing a hard path. Anti-Fragility: #betterThanResilence. Can be trained by a mix of being calm and being effective. . Bad Attributes . Laziness: Find the easy path. Pessimism: Finding faults in random things. .",
            "url": "https://www.ankushchoubey.com/v1/core-attributes",
            "relUrl": "/v1/core-attributes",
            "date": " • Nov 23, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "The Prometheus Cheatsheet",
            "content": "What is Prometheus? . Prometheus is a tool that collects metrics data exposed by different applications in a central place. These applications can be in different programming languages. . You can run queries against the data and get results that can be seen or plotted on visualization tools like Graphana. . How does Prometheus work? . Prometheus server polls every application configured every few seconds. The number of seconds can be changed. . . How do you set up an application to give out Prometheus metrics? . Prometheus has many first-hand plugins for languages like Java, Python and Javascript. And has an ecosystem of third-party plugins for other languages like .NET. . Many tools also generate responses in Prometheus format. For example: . WilfFly, which is an old JBOSS server thingy (I’m gen Z), can generate data in Prometheus format. | Spring Boot Actuators also have an endpoint GET /actuator/prometheus that can be used for getting the same data. | . Every application exposing prometheus data requires a prometheus.yml file which describes what’s the fetch interval and other details. . How do you add custom metrics in Prometheus? . There are tools like Micrometer that you can use to add custom metrics and then expose those metrics in Prometheus format to Prometheus. . Reading: Spring Metrics Prometheus . How do you run Prometheus queries with PromQL? . PromQL is the query language used to run queries on Prometheus. . How do you visualize responses to queries? . Can be done in graphana or any other visualization tool . Resources . Spring Metrics Prometheus . Prometheus Graphana YouTube Series . The 4 Types Of Prometheus Metrics . How to build a PromQL (Prometheus Query Language) .",
            "url": "https://www.ankushchoubey.com/v1/prometheus",
            "relUrl": "/v1/prometheus",
            "date": " • Nov 23, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Getting out of the house is the way you become a responsible ball of energy.",
            "content": "Our body has certain non-negotiable needs. Fulfilling these needs satisfies us and let’s us perform at our best. Not fulfilling those needs makes us fail at areas that we are “supposed” to be good at. For instance, . if we don’t eat properly, we’ll feel tired. | if we don’t sleep properly, we’ll feel agitated and highly emotional. | . Similarly, if we don’t get out of the house, our body would be fulfilled it’s non-negotiable need for sunlight, movement and social connection. . This post explores why we should get out of the house on a daily basis, what we should do and also why we should learn to stay away from our family for a minimum time. . Comparing the old times with current . In the modern age, we are able to get everything delivery instantly. All our instant gratification are fulfilled by modern services. Shopping apps and delivery apps are the one here. At the same time, Work- From-Home culture increased during the Corona Pandemic. This further pushed us towards sitting at home more often than we used to. . Before the pandemic, we’d go out to work. For me, this was a 2 hours one way trip to my office 30KM away. While traveling, I found space to read books, listen to podcasts and just sit and think. The travel also kept my body stronger, especially when I would stand on Trains. Mumbai Trains can make anyone stronger. . This travel time was a fixed context and a routine, that took me away from home and the complication of home to office which was designed for work. So, even if I don’t have my room clean, the only time I’ll reface a problem with an unclean room is when I reach back home. For most of the day, I’ll be sitting in an organized clean office. . Once I come back home, the travel time would provide a natural break that would get me relaxed. To adjust to the travel time, I’d go to the gym early in the morning. This forced me to wake up at 6AM daily. . Now, many of us have gotton into habit of just sitting at home. Initially, this was great and we felt the benefits of freed up travel time. We used that time to learn how to cook, learn new hobbies, connect with family, etc. But slowly, the [modern-weapons and our ancient-mind][Blogpost Planned] got onto us, and we became lazier. . Now, we are more likely to stay at home than to go out to gym, we are more likely to waste time than to do something productive, we don’t get sunlight more often, etc. . What does it do to our physical health? . Human body is made to move. Moving makes our muscles tired, leading to better sleep at night. . Moving physically is how our body releases stress during flight or fight. Because flight or fight is literally a physical action. . Moving and getting enough sun ☀️ is also how our body produces enough growth hormones. . What does it do to our mental health? . Going outside and looking at the world is the best way to grow. . We find different unique obstacles. . We find that we can take on unseen challenges. . That we can talk to different people and gain from their experiences. . Going outside keeps us stimulated. . It keeps us away from loneliness. . What are the things we notice once we are outside the house? . Once you go outside and come back, you’ll find people in your home who haven’t been going outside enough to be too different. . Many of them are half depressed and won’t even realize it. . It’s a relatively sad dull house with low energy. . And then you come home and feel like a ball of energy. . You inspire others and make them move. They may not be at their 100% but they’ll be at some percent better. . Staycation . During the pandemic, many of us got into an habit of just sitting at home. . We let laziness creep in slowly. And now we think it’s something normal. But it’s not normal. .",
            "url": "https://www.ankushchoubey.com/v1/get-out-of-house",
            "relUrl": "/v1/get-out-of-house",
            "date": " • Nov 22, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Blind 75 - Reverse Bits",
            "content": "[Video] . Reverse the binary int . Read this for java instruction: Link . Approaches . O(1) time; O(1) space; 7 lines . Get the last bit of value from the original. append to the reverse one. shift reverse one to the left. instead of adding, you can do or because after the shift last value will be 0. Imp - iterate 32 times only. . public int reverseBits(int n) { int rev = 0; for (int i = 0; i &lt; 32; i++) { rev = (rev &lt;&lt; 1) + (n&amp;1); n = n&gt;&gt;1; } return rev; } .",
            "url": "https://www.ankushchoubey.com/v1/reverse-bits",
            "relUrl": "/v1/reverse-bits",
            "date": " • Nov 20, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Blind 75 - Number of 1 Bits",
            "content": "[Video] . [Problem explanation in English] . Return the number of binary ones. also known as hamming weight. . Link . Approaches . O(time) time; O(space) space; n lines . Check if the last bit is 1 by (n&amp;1). Do the right unsigned shift (logical shift). Loop. . public int hammingWeight(int n) { int count = 0; while(n!=0){ count+=(n&amp;1); n=n&gt;&gt;&gt;1; } return count; } .",
            "url": "https://www.ankushchoubey.com/v1/number-of-1-bits",
            "relUrl": "/v1/number-of-1-bits",
            "date": " • Nov 20, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Blind 75 - Subtree of Another Tree",
            "content": "[Video] . Check if one tree is a subtree of another. . Link . Approaches . O(n*2) time; O(1) space; 12 lines . Check if root is same as subtree or root.left is same or root.right is same; . Half the solution is from Same Tree . public boolean isSame(TreeNode one, TreeNode two){ if(one == null &amp;&amp; two == null){ return true; } if(one == null || two == null){ return false; } return one.val == two.val &amp;&amp; isSame(one.left, two.left) &amp;&amp; isSame(one.right, two.right); } public boolean isSubtree(TreeNode root, TreeNode subRoot) { if(root == null){ return false; } if(isSame(root, subRoot)){ return true; } return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot); } .",
            "url": "https://www.ankushchoubey.com/v1/subtree-of-another-tree",
            "relUrl": "/v1/subtree-of-another-tree",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Blind 75 - Same Tree",
            "content": "[Video] . Check if two trees have the same elements in the same positions. . Link . Approaches . O(n) time; O(1) space; 8 lines . This is a preferred solution. . I was originally trying the iterative approach, which was too complex. . Source: Java Solution better than 100% - LeetCode Discuss . public boolean isSameTree(TreeNode p, TreeNode q) { if(p==null &amp;&amp; q==null){ return true; } if(p== null || q == null){ return false; } return p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right); } . Code optimization: null checks can become a single block . Optimized . public boolean isSameTree(TreeNode p, TreeNode q) { if(p==null || q==null){ return p==q; } return p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right); } .",
            "url": "https://www.ankushchoubey.com/v1/same-tree",
            "relUrl": "/v1/same-tree",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Blind 75 - Reverse LinkedList",
            "content": "Given a LinkedList, reverse it in place. . Link . Approaches . O(n) time. O(1) space. . Similar to swapping two numbers. Start with prev as null and current and keep swapping next. Return prev because that’s the last value. . [image] . public ListNode reverseList(ListNode head) { ListNode prev = null; ListNode current = head; while(current!=null){ ListNode tempCurrent = current.next; current.next = prev; prev = current; current = tempCurrent; } return prev; } .",
            "url": "https://www.ankushchoubey.com/v1/reverse-linked-list",
            "relUrl": "/v1/reverse-linked-list",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Blind 75 - Merge Two-Sorted Lists",
            "content": "[Video] . Given two linked lists merge them into one sorted list. . Link . Approaches . Unoptimized Solution: O(n) time complexity: Space: O(1) . Lines of code 38 . Iterate over both and store minimum one in current; Increment in the list from where minimum came. Once one of the lists is empty, empty the other one. . This solution is highly unoptimized. . public ListNode mergeTwoLists(ListNode list1, ListNode list2) { ListNode head = null; ListNode current = null; while(list1!=null &amp;&amp; list2!=null){ ListNode minimum = null; if(list1.val &lt; list2.val){ minimum = list1; list1 = list1.next; } else{ minimum = list2; list2 = list2.next; } if(head == null){ head = minimum; current = minimum; continue; } current.next = minimum; current = current.next; } ListNode remaining = list1!=null? list1: list2; while(remaining!=null){ // this iteration is unneccessary if(current == null){ current = remaining; head = remaining; } else { current.next = remaining; current = current.next; } remaining = remaining.next; } return head; } . Optimized solution . Java - LeetCode Discuss . Lines of code: 16 . public ListNode mergeTwoLists(ListNode list1, ListNode list2) { ListNode preHead = new ListNode(-1); ListNode current = preHead; while(list1!=null &amp;&amp; list2!=null){ if(list1.val &lt; list2.val){ current.next = list1; list1 = list1.next; } else{ current.next = list2; list2 = list2.next; } current = current.next; } current.next = list1!=null? list1: list2; return preHead.next; } .",
            "url": "https://www.ankushchoubey.com/v1/merge-two-sorted-lists",
            "relUrl": "/v1/merge-two-sorted-lists",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Blind 75 - Maximum Depth of Binary Tree",
            "content": "[Video] . Find the maximum depth of the binary tree. . Link . Approaches . O(n) time. O(1) space. 10 lines. . go to each depth, incrementing a depth counter by 1. return max of it. . public int maxDepth(TreeNode root, int depth){ if(root == null){ return depth; } int nextDepth = depth+1; return Math.max(maxDepth(root.left, nextDepth), maxDepth(root.right,nextDepth)); } public int maxDepth(TreeNode root) { return maxDepth(root, 0); } . Code optimization: No need to create a separate function; . Optimized: 5 lines . Source: Java 100% Faster Very Simple - LeetCode Discuss . public int maxDepth(TreeNode root) { if(root == null){ return 0; } return Math.max(maxDepth(root.left),maxDepth(root.right)) + 1; } .",
            "url": "https://www.ankushchoubey.com/v1/maximum-depth-of-binary-tree",
            "relUrl": "/v1/maximum-depth-of-binary-tree",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Blind 75 - Linked List Cycle",
            "content": "[Video] . Check if the given LinkedList is cyclic. . Link . Approaches . O(n) time complexity; O(1) space complexity . Have a fast pointer and a slow pointer. fast increases by 2. slow increases by 1. if both become the same, then the cycle exists. if fast one reaches the end then no cycle exists. . Lines of code: 16 . public boolean hasCycle(ListNode head) { if(head == null) { return false;} ListNode slow = head; ListNode fast = head; while(fast !=null){ slow = slow.next; fast = fast.next; if(fast==null){ break;} else {fast=fast.next;} if(slow == fast){ return true; } } return false; } . Line 1: head null check is unnecessary; Line 18: can be removed by adding the fast.next, check in while loop itself. . Optimized solution below . Optimized solution . Source: Java: Fast-Slow Pointer Method - LeetCode Discuss . Lines of code 8: . public boolean hasCycle(ListNode head) { ListNode slow = head; ListNode fast = head; while(fast !=null &amp;&amp; fast.next !=null){ slow = slow.next; fast = fast.next.next; if(slow == fast){ return true; } } return false; } . Without 2 pointers solution . Source: Java O(1) Memory solution - LeetCode Discuss . Modify the value in the list to something that can’t occur. Check if the current value is that value. . public boolean hasCycle(ListNode head) { while (head != null) { if (head.val == 1_000_000) return true; head.val = 1_000_000; head = head.next; } return false; } .",
            "url": "https://www.ankushchoubey.com/v1/linked-list-cycle",
            "relUrl": "/v1/linked-list-cycle",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Blind 75 - Invert Binary Tree",
            "content": "[Video] . [Problem explanation in English] . Link . Intuition: Swap left and right. Then repeat for those nodes. . 2 lines can be saved by using a single temporary variable instead of left &amp; right, but this is clean. . O(n) time. O(1) space . public TreeNode invertTree(TreeNode root) { if(root == null){ return root; } TreeNode left = root.right; TreeNode right = root.left; root.right = right; root.left = left; invertTree(left); invertTree(right); return root; } .",
            "url": "https://www.ankushchoubey.com/v1/invert-binary-tree",
            "relUrl": "/v1/invert-binary-tree",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "How to develop a robust plugin architecture?",
            "content": ". Photo by Justin Morgan on Unsplash . Disclaimer: I haven’t developed an extremely complete plugin architecture myself. What I have developed is a plugin architecture which is robust enough. There are too many points to the discussion. These are all my thoughts. . Identify places in your application which you want to provide as plugin . . Identify how plugin is going to share data? And can plugin update in real time? if Yes how? . . For example: 1 Plugin can be of 2 parts. . How will P1 and P2 share data? . Ideally, these should be microservices? . Note: This is how slack and teams do it. . Define interfaces that plugin developers can use . Zapier allows using CLI to generate a project architecture | They have specific interfaces that can be used for generating plugin | They also have a z object that can be used for a limited set of features such as API calls. | . Keep your product as lean as possible . For plugin architecture, the whole product should be made pluggable. That is even first party features should be developed as plugin. Which means there will be almost nothing in the core. . You could have 2 interfaces for this. . 1 for publish pluginInterface 2 for first hand interface firstHand extends pluginInterface . Or you could provide a limited set of components that can be rendered on UI. . The term interface and components are loose here. Many plugins are simply JSON based. . You’ll have to create infrastructure for managing plugins and plugin lifecycle . Something like . Interfaces for plugins | Plugin repository How will you manage so many third party plugins? | How will plugin versions be managed? | . | Approval process This will also include manual approavls. | I would also add a virus scanner and other security measures. | . | . Resources . Plugin Development for Wordpress: They are much more low-level about implementation. Especially go through their best practices section. . Plugin Architecture: Why and How?: Goes into detail about why to implement plugin architecture. How is plugin architecture better than monoliths? How are predefined hooks used in plugin architecture? And how yarn2 does it. . Microsoft Adaptive Cards: A very interesting open source UI plugin architecture . Google “plugin architecture java” or “plugin architecture javascript” . YouTube: The Power Of The Plugin Architecture In Python . StackOverflow: The plugin design pattern explained (as described by Martin Fowler) . Trello Plugin - Your First Power-Up . How to build a plugin system on the web and also sleep well at night . May come useful: Sandboxed JavaScript .",
            "url": "https://www.ankushchoubey.com/v1/plugin-architecture",
            "relUrl": "/v1/plugin-architecture",
            "date": " • Nov 13, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Blind 75 - Best Time To Buy And Sell Stock",
            "content": "Link . Learning From . NeetCode . Asked at . Source . Video . https://youtu.be/7KHKFqLPMbs . Problem and Constraints . Given an array of stock prices. What’s the maximum profile that one can get? . All Approaches and Explanations in English . O(n) time complexity. O(1) space complexity . Make sure the left pointer is always the lowest yet. Keep checking the difference between left and right. And return max. . Code, if any . class Solution { public int maxProfit(int[] prices) { int left = 0; int right = 1; int maxYet = 0; while(right &lt; prices.length){ int leftItem = prices[left]; int rightItem = prices[right]; if(rightItem &lt; leftItem){ left = right; right = right+1; continue; } maxYet = Math.max(maxYet, rightItem - leftItem); right++; } return maxYet; } } .",
            "url": "https://www.ankushchoubey.com/v1/best-time-to-buy-and-sell-stock",
            "relUrl": "/v1/best-time-to-buy-and-sell-stock",
            "date": " • Nov 13, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "You can have good intentions but still do the wrong things. So, keep moving towards good action too.",
            "content": ". Why sometimes having good intentions is not enough? . You can be a good person. But that’s always debatable. But to cut it short, you probably have good intentions and usually make good decisions. . But this doesn’t mean having good intent = good decision. But having good intentions is 50% of the battle. . Good intentions make you more likely to make a good decision. . And if you are moving towards a bad action or have already half done the bad action, you can #courseCorrect. Or at least have a greater intention to course correct. . Identifying this disconnect between good intentions and good action is very hard. You might have really good intentions of telling the truth, but rather than being kind, you lashed out, making things bad and useless. . Therefore you must always be searching and moving towards good action. . Why you don’t know the right action yet? And what should you do about it? . You can’t be paralyzed by perfection. You need to keep moving forward. Leave things not perfect and move towards doing other things well. . Eventually, you’ll have all other parts done and will have improved in the process. . You need to become responsible and develop skills to get there. . Further Reading . Responsibility Section of Core Values .",
            "url": "https://www.ankushchoubey.com/v2/good-intentions-good-action",
            "relUrl": "/v2/good-intentions-good-action",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "JUnit Template For Tracking Bugs in Unit Tests",
            "content": "It’s important to track bugs in tests. . Reproducing bugs in tests means the exact scenario gets clear | Once the bug is fixed, we know it will be fixed for life if the test is also part of the build. | This is the template I use to track bugs in tests. . @Nested @DisplayName(&quot;$BugCardId$: Bug Description&quot;) class BugBugNameTest{ static final String validInput = &quot;&quot;&quot; &quot;&quot;&quot;; @Test @DisplayName(&quot;SHOULD {assertion description}&quot;) void {AssertionDescription}Test(){ // GIVEN {code for setting conditions described in WHEN block} // WHEN {code for running actions} // THEN {code for assertions} } } . BugCardId - The Work Item created for the bug. Bug Description - A short one-liner which describes the bug. This should be as clear as possible and focus on the bug rather than something wage. . For example: . Message consumer failing on valid input | . is better than . some problems on dev. | .",
            "url": "https://www.ankushchoubey.com/v1/junit-bug-tracking",
            "relUrl": "/v1/junit-bug-tracking",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "Blind 75 - Valid Parentheses",
            "content": "Link . Learning From . NeetCode . Asked at . Source . Video . https://youtu.be/7KHKFqLPMbs . Problem and Constraints . All Approaches and Explanations in English . My solution . put if opening bracket put into the stack. If it is the closing bracket pop, check if the bracket on top is the closing bracket of the current. In the end, check if the stack is empty. . Code, if any . class Solution { public boolean isValid(String s) { Deque&lt;Character&gt; stack = new ArrayDeque&lt;&gt;(); for(Character c: s.toCharArray()){ if(c == &#39;(&#39; || c == &#39;{&#39; || c == &#39;[&#39;){ stack.addLast(c); continue; } if(stack.size()==0){ return false; } Character top = stack.removeLast(); if(c == &#39;]&#39; &amp;&amp; top!=&#39;[&#39;){ return false; } if(c == &#39;)&#39; &amp;&amp; top!=&#39;(&#39;){ return false; } if(c == &#39;}&#39; &amp;&amp; top!=&#39;{&#39;){ return false; } } System.out.println(stack); return stack.size() == 0; } } . God-Level Solution . iterate. if an opening bracket is found, put the closing bracket in a stack. if the closing bracket is found, pop and check for equality. . Source . maybe i am a idiot,i should give up cs . same 9 years education, why are u outstanding ? . boolean isValid(String s) { if ((s.length() &amp; 1) == 1) return false; else { Deque&lt;Character&gt; p = new ArrayDeque&lt;&gt;(s.length()); for (int i = 0; i &lt; s.length(); i++) switch (s.charAt(i)) { case &#39;(&#39;: p.push(&#39;)&#39;); break; case &#39;{&#39;: p.push(&#39;}&#39;); break; case &#39;[&#39;: p.push(&#39;]&#39;); break; case &#39;)&#39;: case &#39;}&#39;: case &#39;]&#39;: if (p.isEmpty() || p.pop() != s.charAt(i)) return false; } return p.isEmpty(); } } .",
            "url": "https://www.ankushchoubey.com/v1/valid-parentheses",
            "relUrl": "/v1/valid-parentheses",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Blind 75 - Valid Palindrome",
            "content": "Link . Learning From . NeetCode . Asked at . No where . Source . Video . https://youtu.be/7KHKFqLPMbs . Problem and Constraints . All Approaches and Explanations in English . O(n) solution. O(1) space complexity . Have 2 pointers. One at the start other at the end. Skip if !Character.isLetterOrDigit and compare with Character.toLowerCase . Code, if any . class Solution { public boolean isPalindrome(String s) { int l = 0; int r = s.length() -1; while(l&lt;r){ char left = s.charAt(l); if(!Character.isLetterOrDigit(left)){ l++; continue; } char right= s.charAt(r); if(!Character.isLetterOrDigit(right)){ r--; continue; } if(Character.toLowerCase(left) != Character.toLowerCase(right)){ return false; } l++; r--; } return true; } } .",
            "url": "https://www.ankushchoubey.com/v1/valid-palindrome",
            "relUrl": "/v1/valid-palindrome",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "Stress is the root cause of all health problem. Fix it.",
            "content": "Identifying stress? . Stress can have serious effects on health. . First digestive problems. | Hormonal health. | Pelvic health. | Auto immune conditions | . When you are stressed, your body sends blood to brain and legs. Fight or flight. . Therefore blood flows from other areas that are non essential to f or flught. . But if you are cronically stressed, this can have a huge effect on you. . If you are depressed, imagine what a depression person looks like and what he does. Then do everything opposite. . What to do when you are stressed? . Take a step back and go for a walk . Take a step back and breathe slowly and deeply . Realise that you are most likely okay. . Hungry? Sleepy? Etc . If you are having digestive problems. Sit in the toilet for live a lot of hours until that stomach gets cleared. . When you exercise, feel that area where you feel stress. .",
            "url": "https://www.ankushchoubey.com/v2/stress",
            "relUrl": "/v2/stress",
            "date": " • Nov 5, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "Migatteno Gokui",
            "content": "When you stop thinking about everyone else, life gets a little bettwrz . Like dancing freely like noone is wathching. No judgement. No pressure. . Just fun. Then you look around and see everyone have fun. And that’s that. . Peak performance comes from the firs tstep. . Cuz when your rational mind is depressed or stressed or it’s ram filled already. The emotional mind takes over. So therefore knock that depression and stress diwn. And go ultra instinct. .",
            "url": "https://www.ankushchoubey.com/v2/migatteno-gokui",
            "relUrl": "/v2/migatteno-gokui",
            "date": " • Nov 5, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "Blind 75 - Product of Array Except Self",
            "content": "Link . Learning From . NeetCode . Asked at . 19 times. . AmazonAppleAsanaBloombergMicrosoftAdobeAmerican ExpressLyftOracleFacebookUberWalmart Global TechYahooGoogleSalesforceDE ShawPaypalGoldman SachsGrouponQualtricsTikTokZillowIBM . Source . Video . https://youtu.be/7KHKFqLPMbs . Problem and Constraints . All Approaches and Explanations in English . O(n) time complexity. O(1) space complexity . loop twice. first right to left while multiplying. then second left to right while multiplying. this can be done in a single array and one extra product variable . Code, if any . class Solution { public int[] productExceptSelf(int[] nums) { int[] outputArray = new int[nums.length]; int product=1; for(int i = 0; i&lt; nums.length; i++){ outputArray[i]=product; product = product * nums[i]; } product=1; for(int i = nums.length-1; i&gt;=0; i--){ outputArray[i]*=product; product*=nums[i]; } return outputArray; } } .",
            "url": "https://www.ankushchoubey.com/v1/product-of-array-except-self/",
            "relUrl": "/v1/product-of-array-except-self/",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "Core Values V2",
            "content": "Choosing: . 🔭 Truth over Fog | 🦾 Strength over Weakness | 🍃 Systems O(n) over Bruteforce O(n^3) | 💎 Quality over Quantity | 👥 Team over Lone Wolf | .   Anti-Value Noun Form Decision Making Question Adverb Makes Me Comparitive . Clarity | Fake | Clear | What would a clear person do? | Truthful Clarity | A clear thinker | Clarity over Fog | . Responsibility | Avoidance | Responsible | What would a responsible person do? |   | Reliable and dependable | Responsibility over Instant-Gratification; Strength over Weakness | . Inputs | Infinite Choices | Focused | What would a focused person do? | Filtered Inputs |   | Quality over Quantity | . Systems | Bruteforce | Methodical | What would a methodical person do? | Optimized System |   | Systems O(n) over Bruteforce O(n^3) | . Time | Wasted | Punctual | What would a punctual person do? | Productive use of time |   |   | . Peace | Hedonism | Calm | What would a calm person do? |   |   | Long Term Peace over Short Term | . Team Work | Lone Wolf | Team Player | What would a team player do? |   |   | Team over Lone Wolf | .",
            "url": "https://www.ankushchoubey.com/v2/core-values",
            "relUrl": "/v2/core-values",
            "date": " • Oct 30, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "Blind 75 - Valid Anagrams",
            "content": "Link . Video . https://youtu.be/7KHKFqLPMbs . Problem and Constraints . Check if two numbers are anagrams or not. . Anagram means one word can be made by re-arranging another word. . All Approaches and Explanations in English . O(n) time complexity. O(1) space complexity . check if the length is the same. find the difference in the count of letters in both numbers. since there are only 26 letters, you can count in a single int array of 26. index = char - ‘a’ . Code, if any . class Solution { public boolean isAnagram(String s, String t) { if(s.length() != t.length()){ return false; } int[] counts = new int[26]; for(int i = 0; i&lt;s.length(); i++){ counts[s.charAt(i) - &#39;a&#39;]++; counts[t.charAt(i) - &#39;a&#39;]--; } for(int i = 0; i&lt;counts.length; i++){ if(counts[i]!=0){ return false; }; } return true; } } .",
            "url": "https://www.ankushchoubey.com/v1/valid-anagrams",
            "relUrl": "/v1/valid-anagrams",
            "date": " • Oct 30, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "Blind 75 - Top K Frequent Elements - IMP",
            "content": "Link . Learning From . NeetCode . Asked at . Amazon Facebook Oracle Apple Microsoft Google Uber Adobe Snapchat Cisco Shopee Bloomberg Indeed ByteDance Tesla Arcesium Twitter Dropbox eBay VMware Netflix tiktok Deloitte . Source . Video . https://youtu.be/7KHKFqLPMbs . Problem and Constraints . Get k numbers repeated most often. . All Approaches and Explanations in English . O(n*log n) . count all numbers. sort. and return top k. Use streams to make it cleaner. . Code, if any . Normal Solution . class Solution { private int[] bruteforce(int[] nums, int k) { Map&lt;Integer, Integer&gt; counts = new HashMap&lt;&gt;(); for(int num: nums){ // O(n) counts.put(num, counts.getOrDefault(num, 0) + 1); } return counts.entrySet() .stream() .sorted(Map.Entry.comparingByValue()) // // O(n * log(n)) .skip(counts.size() - k) .map(Map.Entry::getKey) .mapToInt(Integer::intValue) .toArray(); } public int[] topKFrequent(int[] nums, int k) { return bruteforce(nums, k); } } . Heap Solution O(k*log(n) . Bucket Sort .",
            "url": "https://www.ankushchoubey.com/v1/top-k-frequent-elements",
            "relUrl": "/v1/top-k-frequent-elements",
            "date": " • Oct 30, 2022"
        }
        
    
  
    
        ,"post79": {
            "title": "Blind 75 - Group Anagram",
            "content": "Link . Video . https://youtu.be/7KHKFqLPMbs . Problem and Constraints . Given a set of strings. Return anagrams in group. . All Approaches and Explanations in English . O(n) time complexity. O(n) space complexity . O(N*26) time complexity. . compare the count of letters in each word and put group them in a map . Code, if any . Works but okay, okay . class Solution { private String getLetterCount(String str){ int[] count = new int[26]; for(char c: str.toCharArray()){ count[c-&#39;a&#39;]++; } return Arrays.toString(count); } public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) { Map&lt;String, List&lt;String&gt;&gt; groups = new HashMap&lt;&gt;(); for(String str: strs){ String letterCount = getLetterCount(str); List&lt;String&gt; list = groups.getOrDefault(letterCount, new ArrayList&lt;&gt;()); list.add(str); groups.put(letterCount, list); } return new ArrayList&lt;&gt;(groups.values()); } } . Optimizations: rather than: Arrays.toString(count); could have been: new String(count) . rather than: . List&lt;String&gt; list = groups.getOrDefault(letterCount, new ArrayList&lt;&gt;()); list.add(str); groups.put(letterCount, list); . could have been: . letterCount could be renamed as hash. #DDD . groups.computeIfAbsent(letterCount, k-&gt; new ArrayList&lt;&gt;()) groups.get(letterCount).add(str); .",
            "url": "https://www.ankushchoubey.com/v1/group-anagrams",
            "relUrl": "/v1/group-anagrams",
            "date": " • Oct 30, 2022"
        }
        
    
  
    
        ,"post80": {
            "title": "Blind 75 - Contains Duplicate",
            "content": "Link . Video . https://youtu.be/7KHKFqLPMbs . Problem and Constraints . If the array contains any duplicate, return true. Else false. . All Approaches and Explanations in English . O(n^2) solution. O(1) space complexity . Double loop. And check if the elements are equals. . Bad. Solution. . O(n) time complexity. O(n) space complexity . Create a set and put items in one by one while checking if num is already there. . Code, if any . class Solution { public boolean containsDuplicate(int[] nums) { Set&lt;Integer&gt; visited = new HashSet&lt;&gt;(); for(int num: nums){ if(visited.contains(num)){ return true; } visited.add(num); } return false; } } .",
            "url": "https://www.ankushchoubey.com/v1/contains-duplicate",
            "relUrl": "/v1/contains-duplicate",
            "date": " • Oct 30, 2022"
        }
        
    
  
    
        ,"post81": {
            "title": "Blind 75 Two Sums",
            "content": "Link . Video . https://youtu.be/7KHKFqLPMbs . Problem and Constraints . Given an array, find two numbers that add up to a target. . Make sure not to use the same index twice. . All Approaches and Explanations in English . O(n^2) solution. O(1) space complexity . Have two loops. One at the first element. Others will check other elements to the right of the first index. . Repeat until the index is found. . O(n) time complexity. O(n) space complexity . Create a map and store the elements in it along with an index. . While storing, check if the target-current number exists in the map. . If it exists, then you have found the element. . Code, if any . class Solution { public int[] bruteForceOn2(int[] nums, int target){ // Time Complexity: O(n^2) // Space Complexity: O(1) /* Runtime: 89 ms, faster than 27.47% of Java online submissions for Two Sum. Memory Usage: 42.5 MB, less than 90.67% of Java online submissions for Two Sum. */ for(int i = 0; i&lt; nums.length; i++){ for(int j = i+1; j&lt; nums.length; j++){ if(nums[i] + nums[j] == target){ return new int[]{i, j}; } } } return null; } public int[] optimized(int[] nums, int target){ // Time Complexity: O(n) // Space Complexity: O(n) /* Runtime: 4 ms, faster than 89.24% of Java online submissions for Two Sum. Memory Usage: 45.7 MB, less than 31.53% of Java online submissions for Two Sum */ Map&lt;Integer, Integer&gt; indexes = new HashMap&lt;&gt;(); for(int i = 0; i&lt; nums.length; i++){ int currentNumber = nums[i]; int neededNumber = target - currentNumber; if(indexes.containsKey(neededNumber)){ return new int[]{indexes.get(neededNumber), i}; } indexes.put(currentNumber, i); } return null; } public int[] twoSum(int[] nums, int target) { //return bruteForceOn2(nums, target); return optimized(nums, target); } } .",
            "url": "https://www.ankushchoubey.com/v1/two-sums",
            "relUrl": "/v1/two-sums",
            "date": " • Oct 29, 2022"
        }
        
    
  
    
        ,"post82": {
            "title": "Why Framework Development Is Biggest Software Development Baton?",
            "content": ". Photo by Markus Spiske . I wrote an article called The Baton Road. Baton is my way of conceptualizing human progress and how to have a significant impact. . What is Application Development? . You can be an application developer, which means you’ll solve problems related to a particular domain. . You’ll have to talk to domain experts. And your customers would likely be business users. . The skills needed here are: . Understanding the domain. | Designing solutions for the domain. | Regular interaction with domain experts. | . Application development is where code solves real-world problems. . Inventing the previous line: The main challenge is translating domain to code. . Domain Driven Design (DDD) and Domain Specific Languages are concepts that help bridge the gap between domain experts and developers. . Domain Developers need to be product-minded, i.e. they should be able to suggest improvements because they know what’s possible and what is not. . Also, they should be able to know the nuances of the domain. . What is Framework Development? . These are developers that make the tools used by domain developers. These can be - IDE, Libraries, Frameworks, Microservice Chassis, DevOps and platform development. . At a high level, this can be something like Spring Boot framework, Kubernetes platform, developers who build AWS, Java language, PyTorch and inventing Algorithms. . At a company level, there is always a standard code and microservice chassis that can be abstracted away to make everyone else’s code lighter. . Why Framework Development Is Biggest Software Development Baton? . Framework developers abstract away things so that domain/application developers have less to learn. . What framework developers do applies to every domain. . The impact that framework developers have is much bigger than any domain developer. . For example, Spring Native speeds up load time for spring boot applications from 2.8 seconds to .3 seconds. Every developer can adopt a huge performance difference just by adding a maven package. . Similarly: an algorithm like Dikshtra’s Shortest Path has had a much more significant impact than the work of most application developers. . Domain problems lead to the need for new algorithms, which eventually becomes part of a framework when it gets abstracted. . Frameworks like Spring Boot, Platforms like Kubernetes and Cloud Provides like AWS have had a much higher impact than any individual. . Resources . Open Source Software (OSS) - Ankush Choubey | Baton Road - Ankush Choubey | Building a Framework on top of Spring Boot by Rubén Pahíno - Spring I/O 2022 Sessions - YouTube | The Product-Minded Software Engineer - The Pragmatic Engineer | How to build domain knowledge - YouTube | Domain Knowledge for Software Engineers - YouTube | kdeldycke/awesome-falsehood: 😱 Falsehoods Programmers Believe in | .",
            "url": "https://www.ankushchoubey.com/domain-vs-framework-development/",
            "relUrl": "/domain-vs-framework-development/",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post83": {
            "title": "Deal with health problems by becoming a domain expert in the field so that you can collaborate better with doctors",
            "content": "Knowledge is power. The more data points you have, the more informed decisions you can make. . For anything major, collaborate with your doctor. . #preventationIsBetterThanCure . Health problems may seem small at first. But they get big swift. . It’s best to prevent them. . These are basic checks: . Sleep | Food | Water | Exercise | Sitting period? | Stress | . Try to manage it yourself. . Get started with home remedies right away. Why wait and suffer? . Collect Data . In all of life, collecting data is the most important thing. . Observe. Observe everything and note it down. . Many things are lifestyle-related, like overeating sugar or too spicy. . Sleeping badly. | Addictions. | Wearing tight clothes. | And more. | . If you search on google, you’ll be able to find more things and other symptoms that you might be able to recognize. . YouTube videos are more helpful as they provides broad context. Information here is kind. But make sure to talk with your doctor before doing something stupid. . All this is doing your homework before visiting your doctor, which will help him make a more informed decision. . You can collect data as: . Photos | Tests | Log of all events including: Food | Sleep | Things specific to your problem | . | . Take your meds . Get into a system to take your meds? Alarms on phones are good. . Take meds seriously because there is a reason associated with each. For example, antibiotics (post-food) and digestive pills (pre-food) are often paired up. The pre-digestive food creates a shield for the intestines and protects them from antibiotics so that you won’t feel a burning sensation. . Ask your doctor why you are taking each med. . You can also Google it. or look at sites like [apollo pharmacy] . For example this is the tablet I was taking: Afdura Tablet 10- Apollo Pharmacy . Some meds have side effects. . Make sure the basics (sleep, food[high protein like chicken], water, exercise) are in place if not already. These will help you speed up your recovery. . Tests . Tests can verify many diseases. . Know all the tests related to what problem you are facing. . Also, know how to read and understand them. . Resources . Disease, disorder, condition, syndrome - what’s the difference? .",
            "url": "https://www.ankushchoubey.com/dealing-with-health-problems/",
            "relUrl": "/dealing-with-health-problems/",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post84": {
            "title": "We only see what we do badly because the reward of doing work well is just peace.",
            "content": "We don’t see the benefits of doing something good until we do something poorly. . When we do something poorly, we feel pressure and have to go back and rework things. But when we do things properly, there is no reward. . The reward is just peace. And if you think about it, that’s good. .",
            "url": "https://www.ankushchoubey.com/badly/",
            "relUrl": "/badly/",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post85": {
            "title": "Increase collaboration for Developers",
            "content": "Give everyone access to every other repo . Allow them to fork and update code and return with a merge request. . Allowing access also helps share snippet of code. Like how to test A would be available in one repo and can be shared. . Embrace every level of DevOps . That’s easy. Each DevOps stage breaks some silo down. . DevOps | DevSecOps | DevTestOps | DevFinOps | DevDevDevDevOpsOpsOpsOps | AgileOps | . Embrace a cycle of continuous code review . Have a continuous humanised code review cycle . Code review should be a continuous cycle | Code review should be humanised | . If you see an error. Report it to the right person/place/raise ticket right away . Who ever you want to increase collaboration with should be on speed-dial or pinned. . If you have opinions say it at last. Let everyone speak their minds freely. . You can say something like “Wait let me check” .",
            "url": "https://www.ankushchoubey.com/increase-collaboration-for-developers/",
            "relUrl": "/increase-collaboration-for-developers/",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post86": {
            "title": "Understanding & Using HTTP Status Codes",
            "content": ". Image Source: HTTP Status Dogs . Browsers can perform different actions based on HTTP Status codes. For example: . If the browser receives a 302 temporary redirect, it’ll redirect to the location specified by the server. . Not all status codes are directly browser compatible. You can find the list of compatible ones here. . HTTP Status Codes are also helpful when you are building a client yourself. . For example: For the retry mechanism, you might retry a few times if there is a 5xx Server Error but might not retry if it’s a 4xx client error . Types . There are a total of 63 status codes that are grouped into 5 types: . 1xx → Info | 2xx → Successful | 3xx → Some redirect | 4xx → Client error: The sender has made some mistake and has to fix it. | 5xx → Server error: The server has made some mistake and has to fix it. | . Specific Codes . Now, when coding, you are likely to use these. But if you find another one, google it, and you’ll find the reason behind it. . 200 → OK | 201 → The server CREATED the resource. The location header includes the location of the resource. | 204 → NO CONTENT, but there is No Content . | 302 → REDIRECT to this URL . | 400 -&gt; BAD REQUEST | 401 → UNAUTHORIZED: The client isn’t authorized and needs to send valid auth credentials. | 404 → NOT FOUND: The resource isn’t available . | 500 → INTERNAL SERVER ERROR Restrict the response because it may reveal the inner workings of the server. | . | . Notes . People often don’t rely on HTTP status codes but instead, use the body to convey information. This approach is especially true in the case of specialized responses since there are very few HTTP status codes. . When to use 404 over 204? . In groups, use 204. | For accessing a single one, use 404. | . For example: . /users - 204 | /users/{id} - 404 | . Resources . HTTP Status Codes: All 63 explained - including FAQ &amp; Video | HTTP Status Dogs | .",
            "url": "https://www.ankushchoubey.com/HTTP-status-codes/",
            "relUrl": "/HTTP-status-codes/",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post87": {
            "title": "First 2 Weeks of A New Project",
            "content": "Infrastructure Setup CI/CD pipelines working | DevSecOps SAST scan Working | . | Requirement Gathering Functional requirements gathered in form on BDD sepecs | Non functional requirement gathering This can be automated in form of SLIs and SLOs | . | . | Risk Analusis | User stories created and groomes Spikes and POCs analysed | . | Team analusis and Responisbilities fixed | Acceptance Criteraliza Analysis Dev Workflow Checklist | . | Basic Rough Design Created | How will we scale discussed? | Release plans made. | Things to learn discussed. | .",
            "url": "https://www.ankushchoubey.com/first-two-weeks/",
            "relUrl": "/first-two-weeks/",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post88": {
            "title": "Keep Yourself Polished All the Time",
            "content": ". Photo by Hunters Race on Unsplash . The need to keep ourselves polished . It is always now! However, your past must have been; however, the future must be. The reality of your life is always now. . It’s important to remember this. . We often keep ourselves polished and in good shape only when we are looking for a job or when we are looking for a date. We polish ourselves when we don’t have something. . But once we have that thing, that job, that relationship, we fall back again into our old habits. . And then, slowly, we are at square one again. The reason we got successful is no longer us. . Therefore, we must always keep ourselves sharp. . How to keep ourselves polished? . How? I don’t know. But here are some thoughts. . Always be doing X. . For example: . Always be finding a new job. This method would keep you polished. | Always be dating your partner. This thinking would keep you sharp too. | Always take care of your physical health as if you are ill. | . The rest of the examples I came up with right now, so they aren’t polished. . Always listen as though the person you are listening to might know something you need to know. | Always be prepared for your Piano performance. | Always plan your finances as though you are poor. | . In this sense, it’s stick motivation. .",
            "url": "https://www.ankushchoubey.com/keep-yourself-sharp/",
            "relUrl": "/keep-yourself-sharp/",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post89": {
            "title": "3 Big Development Mistakes That Had Significant Costs Later",
            "content": ". Photo by Wes Hicks on Unsplash . Doing everything by myself and not letting the team learn, contribute and grow . Though it was also the case that my team wasn’t very interested in learning and growing, they weren’t interested in coding, so I had to do it all by myself. My work hours increased, and others didn’t learn anything. They could have had valuable ideas to share. . Refactoring/Adding new features at the very end instead of code freezing . I opted for fixing Sonar issues and adding new nice-to-have features because I didn’t want to spend time communicating with other teams for the infrastructure setup of the application. . The last-minute refactored code wasn’t well tested as we manually tested SQL Stored Procedures. . Over-engineering . Been a lot guilty of this recently. #curseOfDesignPatterns. . The most important thing in software development is finishing functional requirements. . Non-Functional requirements and requirements like how modular the code is should be discussed with the business, as all this takes away from productive time. .",
            "url": "https://www.ankushchoubey.com/development-mistakes/",
            "relUrl": "/development-mistakes/",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post90": {
            "title": "Core Values Overtime - Pointers, Motivations",
            "content": "Productive . 2022 Oct Motivation Tate | . | . | . | . Inputs . 2022 Oct Having a negative mindset is worst than having a negative outcome or setback. | Motivation “Less is Actually More: What is a Low-Information Diet” | . | . | . | . Responsible . 2022 Oct Competence | . | . | . Peace . 2022 Oct Zoom out | Breath Deeply | “Stress doesn’t come from hard work” | You don’t need a relationship | . | Sep Do not rush anything | Do not avoid anything | Have forward moving activities and novelty | Do what everyone else does | . | . | . Truth Seeking . 2022 Oct Always tell the truth. Be useful and be kind | Ask good queston! #knockOnTheDoorAndDoorShallOpen | Really Think | Don’t go too theorotical | Insincerity: This Book Made Me Disgusted with Tik Tok &amp; Social Media - YouTube | . | . | . Systems Thinking . 2022 Sep Prioritize and do less 1 problem/step at a time | . | Understand the problem before looking at solution Direct all focus towards root cause or risk (finding and fixing) | . | Stick with the system Minimal routines | . | Have deadlines | . | . | . Team Work . 2022 Sep Work as a team | Discuss | Really Listen | Have alert trust | . | . | .",
            "url": "https://www.ankushchoubey.com/core-values-overtime/",
            "relUrl": "/core-values-overtime/",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post91": {
            "title": "Aim to be between Type A and B",
            "content": ". Photo by Glenn Diaz on Unsplash . What are the benefits of having different personalities? . Humans come in man shapes and sized and varied personalities. It’s not possible to run the world with just one. We need a different mixture of each. . In 1 situation, one personality works best. In another situation, another personality works best. . There are many ways to categorize personality. A few I know are: . Myers Briggs Personality Assement | Big 5 | Dark Triad | Type A and Type B | This post is going to talk about Type A and Type B. There are style of work related classifications. . What is Type A? . Type A personality is the one that works hard non-stop. They are well organized and can get high amount of productivity done is a really short time. . But Type A works at its best only in a controlled environment. They are control freaks. If the environment is not under control. They will not just work badly but get demotivated. This further creates a loop of reasons for bad work. At its worst, their tendency to be way too perfectionistic backfires. Perfectionism can make people hard to get started. . The real world is rarely well structured and controlled. Everything is random and some things happen for random reasons. In this environment, the one who thrives should be able to adapt to different circumstances. Learn skills and move forward. . What is Type B? . Type Bs are laid back. There are the ones that are late and still believe they can get everything done. This chill relaxes but get things done. . They aren’t perfectionistic. When they produce work, what they produce might be — for lack of a better work — tatti. And therefore they might produce a lot of debt while they work. This means they have to come back and rework. . The good thing is they have a very very high output. That output comprises of multiple small simple things. . Type B are highly adaptable. They learn quickly. Not perfectly but quickly. . Why should one aim to be between Type A and Type B? . Before answering the question, let’s see how Type A and B compare: . Type A: Bad in real world because they look for a controlled environment. Type B: Good in real world because they are much more agile. . Type A: Produce good quality work that doesn’t need rework. Type B: Produce low quality work that often needs rework. . Type A: Produces less overall quantity of work Type B: Produces more overall quality of work. . As we can see, it seems Type A balance Type B and vice a versa. While it’s perfectly nice to have an interdependent relationship with the other type, often many of our journeys are alone. . We ourselves need to keep the balance between producing high-quality work and getting many things done, all while still not having to go back and rework and still adapt to a changing environment. . This may be hard to imagine so here are a few real-life examples from me, a largely Type A as of 2022 Oct 02. . I love high-quality code. And whenever I join a project, it’s very hard at first but as days go on and the coding standards reach a level of perfection, it’s hard for me to leave the project. Developers around me have already started to talk about new technologies or features they are building, but I am still stuck in the past. Looking at that perfect code. And at the same time, I don’t even know what I can improve in that code base now that I feel I am already perfect. . Whenever I jump to a new project, I have the same expectation of high productivity and quality from day one. This demotivates me and makes me go slower than I would like. But as days go by, this project also reaches a good perfect state. When I revisit the previous one, I find improvements I could do there which I learned from this one. I wouldn’t have ever understood that if I hadn’t made the jump. #grateful . How does this relate to the concept of order and chaos? . Type A: Order Type B: Chaos . This comes from Jordan Peterson’s books. The books describe how to stay between Order and Chaos, the two modes where you feel safe and still excited for new possibilities. . How can one stay between Type A and Type B? . I can’t answer for Type B. But for Type A it’s giving up on control. You’ll anyway try to produce high quality. Produce a lot and you’ll find the quality improves over time. . Think like Kanban, pick a task, and move it to completion. Then pick a new task. Aka one task at a time till completion. That should boost your productivity incredible. . Adapt to environments, you may need to learn and face your comfort zones. That’s okay. Think of this in terms of expanding your comfort zone rather than face. The face is such a loaded term. . Reading -&gt; Learning -&gt; Applying is the fastest way to improve quality. . And chill, relax. Nature is random and it’s still perfect :) or else we wouldn’t have been here. .",
            "url": "https://www.ankushchoubey.com/type-a-type-b/",
            "relUrl": "/type-a-type-b/",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post92": {
            "title": "Microservice Chassis",
            "content": "There is no speed without a microservice chassis. . In any kind of program, you want your technical concerns to be as separate as possible from business logic. . This can be a separate package or a separate library. . Having the technical concerns separated, keeps the code clean and easier to maintain in the long run. . One of the most important aspect of developing microservice environment is the microservice chassis. . The chassis deals with the technical concerns such as, logging, connecting to observability platform, security like mTLS for Zero Trust, etc. . Since all the microservices in the company’s universe use the chassis, if something needs to be upgraded, the chassis library will be upgraded and the business implementation will remain the same. . This allows for a very high development speed. . Also, for most projects, setting up the project is the most painful part of the process. Chassis library makes it super convenient to set everything up. . Most DevOps concerns, can be handles from within chassis, without touching individual code. . Resources . Microservice chassis .",
            "url": "https://www.ankushchoubey.com/microservice-chassis/",
            "relUrl": "/microservice-chassis/",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post93": {
            "title": "How to test interfaces, abstract classes and design patterns?",
            "content": ". . Note: For beginners: Design patterns are template solutions to common problems developers face. There are many design patterns; the best known are the 2 Gang of Four (GoF) object-oriented design patterns. Testing interfaces, abstract classes, and design patterns efficiently can be tricky since parents and children depend on each other. We can write tests to eliminate these dependencies during the test time, making our tests very short and decoupled. . But first, why should you even use abstract classes and design patterns? . Why should we use interfaces, abstract classes and design patterns? . Good code should enforce the intent of how it is to be used. . Ideally, we strive for a SOLID design: A code with a single responsibility that cannot be changed but is extensible. Interfaces and abstract classes help us achieve this goal. . Suppose your systems represent different vehicles. Instead of having separate logic for each, you can represent the common logic in a ‘Vehicle’ class and have its behaviour implemented and modified by the subclasses. . abstract class Vehicle{ void travelTo(Point destination){ // common logic to move a vehicle that uses this.getHorn() } abstract Horn getHorn(); // this will be implemented by children } class Tesla extends Vehicle{ Horn getHorn(){ return new Horn(&quot;John Cena: You can&#39;t see me&quot;); } } . The above code corresponds to the factory method design pattern. . All 24 object-oriented GoF design patterns also embody SOLID principles. Developers should prefer these patterns as they help our code be very clean. . How should we unit test them? . Unit testing a pattern can be tricky since things are so abstract. . Testing all the concrete and parent classes together will make our tests very dependent on the parent and will be hard to maintain. . The trick here is to test both separately. . Testing abstract class . make a dummy concrete implementation within the test class. . // this is a test file for the abstract class // 1. Make a Dummy implementation of the abstract class/interface within the test class DummyVehicleImpl extends Vehicle{ Horn getHorn(){ return new Horn(&quot;THIS IS DUMMY BUT IT CAN SING FROZEN&quot;); } } // 2. Create the instance of a dummy Vehicle vehicle = new DummyVehicleImpl(); // 3. Use the dummy implementation to assert the parent. . The steps to test composition is also similar. . Testing children . In the above section, we tested parents. Now we can test the child. . Each child will have a separate test class that tests its method, excluding the parent’s methods. . class TeslaTests{ Tesla tesla = new Tesla(); // code which tests methods of tesla class and not the parent. } . . What do you think about this approach? Is there a better approach to testing abstract classes and design patterns? Do let me know what you think. . Thank you for reading so far. .",
            "url": "https://www.ankushchoubey.com/testing-design-patterns/",
            "relUrl": "/testing-design-patterns/",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post94": {
            "title": "How to take advice that suggests being fake?",
            "content": "You have to always be truthful. . Advice like: “Don’t message as soon as you receive the text because it makes you look like you have no job.” . Well, there are two ways to handle this. . Either you can be fake and wait for x number of minutes to reply. . Or you can have a wonderful life and be content with yourself, and when you get that message, you are busy having a job. . :) . Often the “act fake” advice has a reason; you have to find that reason and become that person. .",
            "url": "https://www.ankushchoubey.com/advice-that-suggest-being-fake/",
            "relUrl": "/advice-that-suggest-being-fake/",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post95": {
            "title": "Pointers while integrating an external service",
            "content": ". Photo by Alexander Shatov on Unsplash . Have you worked with that external service before? . If not, then expect yourself to make many mistakes. To reduce mistakes, make sure you do good research and at the same time will adapt to a plan. . Discuss with other people who have already done it before. They may know something you don’t. . Are you integrating one service or are you integrating multiple similar services? . If you are integrating multiple services, your code would have to be modular enough. . In any case, try to make your code modular enough so that if suddenly a similar app has to be integrated, there are minimal changes to your code. . Take a look at factory and strategy design patterns. . Does it provide an SDK in your language? . If yes, half your life’s problems are now solved. . How do you connect to the external service? . There likely is some kind of clientId, clientSecret, and OAuth flow at play. You’ll have to save the token somewhere if it’s an OAuth flow. . OAuth flow sounds fancy but it’s really easy. You might also find the SDK or an open source libary makes it easy to implement. . . Image Source: Slack OAuth Flow . In case there isn’t a library? How do you verify if something is really from that system? . You need some kind of token validation. . If that request is sent again, how would you verify that you received it only once? . Are there rate limits in place on the external system? . If yes, how would you handle it? . Are there special conditions in place? . For example, if it’s a request/response scenario for a messaging app, it may request a response within a quick 3-5 seconds. . Would you have to release the app on that particular platform? . If yes, you’ll have to work with the Product and Doc team to make sure everything is polished. . Resources . Overview of Application Integration Source: What is Application Integration? - YouTube .",
            "url": "https://www.ankushchoubey.com/integrate-external-services/",
            "relUrl": "/integrate-external-services/",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post96": {
            "title": "Be a more empathic developer",
            "content": ". Photo by Annie Spratt on Unsplash . It’s easy to blame. It’s harder to empathize. . It’s easier to refactor than to create code from scratch. . If you are creating code from scratch. You wouldn’t know many things because the requirements aren’t clear. . But if you are refactoring or fixing bugs, requirements at that point are likely pretty clear. . Everyone has had a different past experience. . Some people aren’t even developers but jumped into the field for good money. They might have been poor in the past and for them, money is the main thing in Maslow’s Hierarchy Of Needs. . Some are good developers but have too many things going on. Maybe family. Maybe something else. . Some are good developers but dragged into roles that aren’t totally for them. For example Managers. . Some people didn’t even have a Computer Science degree. They are from some other field. . Even if they are a good developer, most problems in Software Development &amp; in #life are questions of knowing the right thing. If you don’t, you are kind of lost. Therefore it’s useful to rely upon and discuss with everyone before trying to implement something. . Rather than blaming, look at the problem. Emphasize with one who is facing it. And be useful to suggest a path forward. . It isn’t useful to run away. Stand there with them, and help them out on their task. .",
            "url": "https://www.ankushchoubey.com/empathic-developer/",
            "relUrl": "/empathic-developer/",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post97": {
            "title": "Increase collaboration by knowing whom to contact",
            "content": ". Photo by Jason Goodman on Unsplash . Silos . We developers love working in silos. We love our technical challenges. . Our effort is proportional to how complex the challenge is. . But for business and true Agility, it’s more important to always focus on end users. And to focus on what’s truly important from a business POV. . Similarly, there are moments when one needs to collaborate with other teams, and having different teams in the loop is truly useful. . The higher the quality of collaboration, the less rework a developer has to do. . Knowing who to contact . On this path, the important thing is to remember whom to connect to and when. Knowing organizational structure is helpful. If there is no organizational structure available. Create one. . Go through and list out all the stakeholders and different teams. Who is the decision maker there? . Ideally, everyone should be pouring in a semi-bureaucratic way. . The development team must connect to other groups to get work done. . These teams might be specific to your organization. So wherever you work, figure out what all the departments and teams are. Who are the key stakeholders to contact, and when? . And make sure you loop them in when taking a decision. . And, of course, you can use Gherkin BDD files to ensure everyone is in sync. . So here are a few teams and stakeholders that are common and imp: . Teams . Development Team: . Responsible for developing the application. | Ensuring the highest product quality. | Responsible for building the thing right. | . QA Team: . Ensures application lives up to standard. | Signs of if the feature is ready to be released. | Responsible for ensuring the thing is built right. | . Product Team: . Decides what to put in the product. | Ensures the right thing is being built. | . Doc Team: . Ensures all public-facing documentation is professional. | Their responsibilities include everything from images to messages shown to the user to public-facing API responses. | . Marketing Team: . Markets the newly released features. | . DevOps Team: . Is a platform team that ensures Devs can work fine. | . Security Team: . Ensures security provisions are in place. | . *Old Way: Database Team . Ensures DB is up and running fine. | This role is replaced by DevOps automation in most organizations. | . Data science team: . Builts applications that help show insight with the help of data. | Their work isn’t always real-time insights. | . Key Stakeholders: . Developers | Testers | Scrum Master | Product Designer | Product Owner | Engineering Manager | Product Manager | Head of Engineering | Head of Product | Head of Finance | CTO | CIO | COO | CEO | .",
            "url": "https://www.ankushchoubey.com/team-knowing-whom-to-contact/",
            "relUrl": "/team-knowing-whom-to-contact/",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post98": {
            "title": "Making Object Immutable for Concurrency",
            "content": ". Photo by Dave Hoefler on Unsplash . . Note: For beginners: Immutable object means objects whose value can&#39;t change. Immutability is the intent of the creator of the object/class, i.e. when coding something up, we need to decide if a particular class should be immutable. Also, immutability is as important in the front end as in the back end. While the below posts explain it in Java, other programming languages have their way of implementing immutability. Where Immutability is needed? . When sharing data between threads, there is a high chance that one memory gets replaced by another. This would lead to inconsistency, and often these bugs aren’t discovered. . There are two ways to avoid this: thread-safe data structures or immutable objects. . This particular post will explain where immutable objects are necessary. . Suppose you have 2 Rest Endpoints. /someEndpoint and /anotherEndpoint both set a particular value to the variable sharedMemory. . private String sharedMemory; @PostMapping(&quot;/someEndpoint&quot;) void postSomething(@RequestBody String value){ sharedMemory = value; .... //some code that uses sharedMemory } @PostMapping(&quot;/anotherEndpoint&quot;) void postSomethingElse(@RequestBody String value){ sharedMemory = value; .... //some code that uses sharedMemory } . It can happen that this shared memory is not inconsistent. . Ideally, the solution would be, in this case, to declare the variable within the method it is used. . Creating an immutable object . The creation of immutable objects is relatively simple. . Make sure all instance variables are private final. | make sure all interactions with the method happens only via the constructor or the public method. No method should modify the contents of the private final method. | Make sure all instance variables are immutable. | Make sure the class is final so that there is no inheriting and subclasses can’t override something. | There are some more rules, but these are the minimum requirements. The following section will explain how you automate the checking of immutable classes would also check for more conditions. . Java Libraries . Some libraries help create immutable objects, such as Immutables for Java. . Google Guava Library provides many immutable data structure alternatives. The benefit of using these is that they have the same interface as regular java collections. . . Note: It&#39;s best to start with immutable objects and then modify them if needed. Automating Verification via Unit Tests . But when developing within a team and given the cognitive overload we developers face, we need some way to automate the creation of immutable objects. This can be done as a combo of 2 methods: . #1 Mutability Detector . Mutability Detector is a package that provides the following assertion that can be used within unit tests. . Mutability Detector has many more conditions to detect mutability. . assertImmutable(MyClass.class); . Github Source . #2 Automate further with ArchUnit tests . ArchUnit tests allow for writing architecture-level tests. We can write a test such as asserting that a class is immutable if a class is annotated with @component. . . In practice, I couldn’t fully make assertImmutable work with abstract classes. . Resources . Immutable Data Structures are Thread Safe | How to Make an Object Immutable in Java | Immutability Library Java | Google Guava Immutable Data Structures | A Strategy for Defining Immutable Objects | Mutability Detector In Action | .",
            "url": "https://www.ankushchoubey.com/immutable-objects/",
            "relUrl": "/immutable-objects/",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post99": {
            "title": "Perfection isn't an attainable goal. We are always a step closer to it.",
            "content": ". Often we fail to do something because we fear we’ll be bad at it. . This fear is counter-productive. It is not a useful thought. . Only by doing do we learn. Only by failing do we recognize and avoid situations that would cause problems. In this sense, we are constantly failing forward. . Things, if they are progressing well, will always be an upwards spiral. As long as they is an upwards spiral, it doesn’t matter that we currently failed. Eventually, we’ll succeed, and that’s enough. . Failure is a sign we are doing . Something out of our comfort zone. -&gt; This is good because it means we are doing something. | Something we are doing wrong -&gt; means we can fix it, and then we won’t have a problem. | Having a good perspective on failure is highly underestimated. . If we are failing all the time, however, it could mean a few things. All of these things provide an opportunity for us to improve. . Maybe we don’t know something -&gt; in which case we need to find an answer. | Maybe we are trying to solve the wrong problem or from a bad angle-&gt; we need good root cause analysis both post-mortem and pre-mortem. | Maybe we are asking the wrong question -&gt; find the right question to ask then. | Often the best approach to move towards perfection is: . Do something. | Fail | Learn | Repeat | Sometimes after this loop, you’ll be good enough and still now perfect. But that’s okay; maybe this is an optimal stopping point, especially if the problem is solved. . Or maybe it’s time to stop focusing on this problem for a while and solve another problem. After some time, we’ll have a fresh perspective, and if this problem still exists, we’ll have more tools in our belts to fix it. . .",
            "url": "https://www.ankushchoubey.com/perfection/",
            "relUrl": "/perfection/",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post100": {
            "title": "Chaos Engineering",
            "content": ". What is Chaos Engineering? . When we do TDD, we reduce logical bugs. With Chaos Engineering, we’ll improve resilience. . Example: If something fails for an end user, how should it be handled with minimal impact on user experience? . You might have experienced this when an error occurs on Netflix. Rather than failing, it gives a proper response to the user. . It’s hard to anticipate failure scenarios in the real world. But there are some common ones. In chaos engineering terms: assaults. . Full-size services like Gremlin with 30+ assault types are interesting to look through. There are some Kube-specific services too. . Chaos Engineering for Spring Boot includes three assaults (latency, exception, kill app) that directly attack @service @controller @repository. . How would this help? . It will make sure we are handling more failures #gracefully. . | In no case should user experience be impacted. . | Many times, when an error happens, the user doesn’t get an indication that something went wrong. . | . Handling chaos . There are usually common patterns to handle many assaults like CircuitBreaker, which many java libraries provide. Thus, it would require some thought to handle failures on UI too. . . Source: ByteByteGo . Chaos Engineering helps us understand and improve observability. . If there is any chaos in our system, we should be able to identify it via observability quickly. If we cannot determine, we’ll have to improve observability. . | People also play Chaos Engineering Game Day, where they try to cause chaos and validate resiliency and observability. . | Chaos engineering would replicate testing in production. . | Having a library that automates some aspects of Chaos Engineering can proactively improve resiliency (and reduce the cognitive overload of having everyone learn and follow chaos engineering) . | . Resources . Chaos Engineering for Spring Boot | Gremlin | .",
            "url": "https://www.ankushchoubey.com/chaos-engineering/",
            "relUrl": "/chaos-engineering/",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post101": {
            "title": "How AutoConfiguration works in Spring Boot",
            "content": ". Everything in Spring Boot is configurable. This was very hard to understand, but here are some pointers that could help. . It was hard for me to extend and/or customize the core functionalities of Spring Boot. These are a few pointers that could help. . @Bean s . Beans can be thought of as singleton classes. i.e. classes where only one instance can exist. . @Beans are created and managed by BeanFactory. And there is a Bean injector which injects beans where they are needed. . So, for example, you have a class A and a class B. . class B is composed of class A, and you have added @Autowired to it. . When the class B bean is generated, the class A bean will be injected into it. . All @Component, @Service and @Repository are of type bean. . @Conditional s . Beans can be generated on conditions. . For example, suppose a particular library exists only then can a bean be generated. . For example, in spring-cloud stream, Kafka beans would be generated if there is Kafka set. . Everything would finally plugin to some lifecycle . All of spring, is a plugin architecture. The core of spring boot exists and everything else is a plugin that plugs into a spring boot lifecycle extending its core functionality. . Everything plugs into some spring boot lifecycle. . Extending spring boot . Suppose you want to extend spring boots to your liking here is how you’d do it. . Find all beans @Bean AutoConfiguration, @ConfigurationProperties and/or @Value . In IntelliJ, you can search usage for all Beans easily. These are the beans you can override. . Overriding these beans allows you to customize them. . Usually, Autoconfiguration classes end with the name AutoConfiguration, which makes them super easy to find. . Find ConfigurationProperties. Many beans depend on these or depend on @Value. . Configuration Properties and @Value are what is set by the properties file. . Read the documentation. . In the documentation, you will likely find info on some beans you could modify or extend. .",
            "url": "https://www.ankushchoubey.com/autoconfiguration/",
            "relUrl": "/autoconfiguration/",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post102": {
            "title": "TDD over JSON",
            "content": "Photo by RealToughCandy.com: https://www.pexels.com/photo/man-love-people-woman-11035481/ . Somethings TDD isn’t straightforward. Here is such a case I faced. . I was developing an app for a third-party service which required data in a particular JSON format. . The particular JSON would render as UI in the third-party app’s view. . Here is how I approached it with TDD. . Step 1: Creating the ideal JSON. . Lucky for me, the third part app had a UI builder to see what the end UI would look. I created the UI and copied JSON into my code. . The UI builder also gave a link which became part of my BDD specs. . Step 2: Created a Test with JSON Asserts . I followed the method/when/then format to create a test and added the following assertion: . JSONAssert.assertEquals(expectedJson, actualJson, JSONCompareMode.LENIENT); . Source: StackOverflow: The best way to compare two JSON files in Java . Now I know what the final state of my POJO should be. . I went and updated the POJO to reflect the expected JSON. . Another point of luck for me was that the third-party app had an SDK, so I didn’t have to build a custom POJO from scratch. I just had to customize it. .",
            "url": "https://www.ankushchoubey.com/tdd-over-json/",
            "relUrl": "/tdd-over-json/",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post103": {
            "title": "A responseType field for all response classes",
            "content": "The inspiration for this blog post is API response in a video by Chaos Monkey for Spring Boot . A typical pattern for handling network assaults is Circuit Breaker. . A circuit breaker would replace a network delay or failure code with a fallback code, making the code resilient. . Ideally, the user is indicated when fallback data is used. . This can be as simple as adding a responseMetadata field within HTTP Response. . { content: { actualData }, responseMetadata: { type: &quot;STALE&quot;, // STALE, LATEST, FALLBACK updatedDate: &quot;{dateObject}&quot; } ... } . type could be . STALE for old data | LATEST to indicate the data is current | FALLBACK indicates neither LATEST nor STATE. | . an updatedDate field . date of when something is updated | . The frontend or client could read the responseMetadata and show a message to the user indicating that old data. . The client could also take further action on responseMetadata, like polling, after a little while until the response is CURRENT. . responseMetadata can be part of a parent class for all response classes. An ArchUnit test canenforce this behaviour. .",
            "url": "https://www.ankushchoubey.com/response-type-field/",
            "relUrl": "/response-type-field/",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post104": {
            "title": "Feature Flagging",
            "content": ". Photo by Isaac Li Shung Tan on Unsplash . What are feature flags? . The concept of feature flags is simple. You can toggle a feature on or off based on certain conditions. And ideally, this requires zero downtime. . For example, an experiment feature can be turned on for some users but disabled for others. . There are many levels to feature flagging: . Disable feature for specific users | Disable the feature completely | Disable the feature in case of certain conditions | . Feature flagging can also help in AB Testing. . Feature Flagging for CD . Feature flags also help in CD. Rather than feature branching, everyone can work on a single branch, but the features that aren’t ready yet can be disabled on prod. This decouples release and feature. Feature flagging is probabilistic because, in practice, it leads to stale branches. . In case of chaos engineering, a feature flag can help reduce blast radius and improve resiliency. Suppose a feature fails; that feature can be disabled at a run time until fixed. . Common ways of implementing Feature Flagging . Storing flags . The simplest implementation of the feature flag is DB based. A list of features is stored along with a flag to enable or disable it. Each time a decision comes, DB is called to fetch the flag’s status. . Environment variables can also be used. Configuration management systems like Spring Cloud Config can also be used to store flags. . Enabling disabling . The code has an IF else statement that enables or disables the feature. . An even better approach to IF else is dependency injection. If a class can be instantiated conditionally, then we solved the feature flagging problem cleanly. . Having a class per feature and inheriting a common interface is the best approach here. In the planning features section of this blog post, you’ll find more ideas on how to reach this. . End-to-end services . There are also full-blown services that help with feature flagging, like LaunchDarkly and FlagShip . Resources . Feature Toggles (aka Feature Flags) | DevOps Concepts: Feature Flags: An introductory video that explains feature flagging and branching. | Feature Flags with Spring | Togglz: A java library for feature flagging. It comes with a UI. | FF4j: A java library similar to Togglz | Unleash: Probably the best open source feature flagging product. | .",
            "url": "https://www.ankushchoubey.com/feature-flagging/",
            "relUrl": "/feature-flagging/",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post105": {
            "title": "Towards Data Driven Decisions",
            "content": "What are Data Driven Decisions? . Data-Driven decisions are the ability to formulate and make decisions out of the data from the real world. . Why am I interested in Data Driven Decisions? . For 2 years in my college, I was very driven to become a data scientist. During that time, I worked a lot with data. Not just looking at data but understanding it. So I have an intuitive sense of it. . I have studied value-based decision making, where we define a value and act according to that value in all situations. . There are some loopholes in the value-based approach and which is feedback. Systems need to be improvised somehow. And especially when we are optimizing a system, we need to know when we have peaked. . We also need to know MED (Minimum Effective Dose). So that we can prioritize other tasks too. . I am also interested in Data-Driven Decisions for deciding what feature to work on and optimizing my workflows. . An interest of mine is Observability in distributed systems. . What are some preliminary observations I have about data-driven decisions? . Data-driven decisions can be totally quantity or qualitative. . Qualitative decisions can be converted to qualitative if they are in the form of a questionnaire. . Qualitative: . Agile Maturity | . Quantitative: . DORA | Agile Metrics | Pomodoros sessions . | Custom Tracking progress on Grokking Coding Interview | . | .",
            "url": "https://www.ankushchoubey.com/data-driven-decisions/",
            "relUrl": "/data-driven-decisions/",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post106": {
            "title": "Developing Healthy Habits for Data-Driven Kanban Board",
            "content": "Board is the single source of truth . Everything is visible on the board. And everyone works off from the board. . The board should keep track of each and everything you do. . Each activity, however small, should be captured. . Each workflow step should be present. Therefore board structure needs to be updated regularly too. . Kanban is visual. And the way it is helps everyone in a team be in sync. And reduces handover. . In practice, . You’ll likely see and use and update the Kanban board multiple times a day. | And the start and end of your day will be on the board. | . Here are few more tips I came up with to help in this. . I prefer keeping the board open in a tab at all times. And working off the board. | I do not keep a personal todo list. | . For teams, . Teams can play a game: it’s called “Moment of Glory” 1 | . Moment of Glory is a game where anyone in the team can ask someone about the board. If that card isn’t updated or in the right column, it’s a moment of glory, and the facilitator or the person updates the card. . Timesheet Management . I use Google Calendar to track each and every activity I do to the minute. And transfer them to the Agile Board. . Pull System . Think of every work item as a release. . Your goal is to work on a work time and make sure that cumulative turnaround time is the least. . Once you start working on a work time, pull it until it is released. . You always work on the rightmost card assigned to you and push it towards completion. . The card/task which gets completed and on production is of must higher value than the 50% done card. . In practice, . Look at the board, look at the right most items and start working on them first. | If you have a new task, add a card to the start of the board (the backlog) but don’t start working on it just yet. Come back to your current card and finish it. | . Agile Daily Standup - How To Walk the Board (aka Walk the Wall) - YouTube . Friday Cleanup . Development That Pays &#8617; . |",
            "url": "https://www.ankushchoubey.com/implementing-kanban/",
            "relUrl": "/implementing-kanban/",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post107": {
            "title": "Speed up Pipelines",
            "content": ". Disclaimer: I have primarily worked on Jenkins. But the tips mentioned aren’t Jenkins specific. It seems though that pipelines tools that come with SCM services like Gitlab are better. . Why we should have a speedy pipeline? . Pipelines such as CI and deployment are used very frequently. We don’t want these pipelines to be slow because we can’t push changes faster. And sometimes developers have to wait for a pipeline to finish before doing something else. #developerMoneyHoney . How can we speedup our pipelines? . Eliminate unnecessary steps: Look at each step in your pipeline and eliminate unnecessary ones. . | Optimize each step: After elimination, look at each step and optimize. . | Run steps in parallel: this is specially true for tests/sonar things. Run them in parallel. . | . For example: a problem I faced was with pipeline for java. . there were 3 steps . mvn install mvn release:prepare mvn release:perform . After analyzing it, I realized mvn install was unnecessary. Since release perform would do the same thing. . Removing mvn install saved 33%time. . now, i saw tests been run thrice. One with mvn install so removing that eliminated it. But also during prepare and perform. . So I decided to skip tests in releas:perform. . This saved 30%time. . Overall the pipeline time was reduced by 63%. . In some cases, 28 min became 10 min. .",
            "url": "https://www.ankushchoubey.com/speeding-up-pipelines/",
            "relUrl": "/speeding-up-pipelines/",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post108": {
            "title": "Encapsulate Blocking Call the Reactor Way",
            "content": "The one rule you aren’t allowed to break with project reactor is this: Don’t Block over Event Loop! . Event loops are main threads that shouldn’t be blocked. . If there is a blocking code, they should be run on a separate thread. . Here are some ways to fix these issues that I have noted down while watching Avoiding Reactor Meldown video. I have added an additional tip at the end. . Use BlockHound to find blocking calls during testing . BlockHound is a plugin provided by Project Reactor that helps find blocking calls. . If you are doing TDD, use junit version. If you aren’t doing TDD, use the normal version but remove it in prod. . https://github.com/reactor/BlockHound . Remember that blockhound will only detect blocks on main thread. This means that if you are writing junit tests, if blocking call is not made on event loop, then it won’t be detected. . Avoid Significant Work Before Subscribe . Always look for async implementations . Completable futures can be converted to mono. Many java libraries have completable future implementations. . Encapsulate blocking calls . . . Find if a method is reactive . .",
            "url": "https://www.ankushchoubey.com/encapsulate-blocking-reactive-way/",
            "relUrl": "/encapsulate-blocking-reactive-way/",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post109": {
            "title": "Ideal Development Workflow",
            "content": ". Photo by AltumCode on Unsplash . This is a value-stream mapping exercise in an effort to reduce cognitive overload and enable continous improvement. . Ideally, all these steps can be columns on a Kanban Board. . . Clear Local Clean up your space. | Commit everything you | | BDD Cycle Read BDD specifications related to the card | Update specifications | NEW #Collaboration: Connect with Product or QA person to get specs verified. | | Planning Break down card into atomic commits | Estimate each commit with pomodoros | Add planned finish date to the card | NEW #Collaboration: Discuss your plan with a team mate to help identify potential risks and pitfalls. | | Coding Remove all distractions | Move card to In-progress lane | Start the pomodoro timer | Start working incrementally with TDD. Commit and push non-stop. | | Release Manually deploy if there is no CD pipeline | Pull card towards right until accepted | At end of each day, fill in card timesheet activity. | | Review NEW #Collaboration: Present your code for code-review to a team make. | | Using the above list I created a template in SwiftEnterprise by Digite, so that the whole team can use it. . .",
            "url": "https://www.ankushchoubey.com/dev-workflow/",
            "relUrl": "/dev-workflow/",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post110": {
            "title": "Resume and Linkedin Tips",
            "content": "Here are some resume tips. Most apply to software engineering roles. . Always . LinkedIn . LinkedIn is a professional network. It isn’t a network of friends. So go with he hopes of making a “network” connection. This might require a shift in thinking. . Get good linkedIn url link: https://zety.com/blog/linkedin-on-resume . Use resumeworded.com to get a score and iterate. . Look at other people’s LinkedIn . Asking for referral: https://www.youtube.com/watch?v=85i78eoltNk . Template: . Subject: Amazon Job Referral (ID: 1629491) Hope you are safe and well. I am B Tech Computer Science student, well versed with Data Structures and Algorithms. I have solved 1000+ standard quality DS and Algo problems and have 4 Internships. Experiences. Also I am expert rated at codeforces and (1991) at codechef. It would really be helpful if you could refer me for a Software Developer/Intern position at Amazon ( 1629491). Thank you. {Attach Resume} . You’ll have to apply for to apply for too many jobs and ask too many referrals. You can use template extensions on chrome such as Magical Expander. :) . Here’s the above once in template . Resume . Have an ATS Friendly resume format . Here is the template I use: New template - Software Engineering Lead - Google Docs . Update your resume regularly. . Find items to add to your resume. At work, look for things that will look good on your resume. Mainly the most challenging responsibilities/tasks look good on a resume. . You are likely selling yourself short. Write down everything you do. Then find our things your employeer might need. . Don’t be shy to add what you are doing right now. . Example: In-process of implementing a continuous delivery pipeline. | This is also because it takes time to find a job. So it maybe 1-2 months before someone picks your resume. At that point resume is already outdated. | . Find other people resume by searching something like: www.linkedin.com “microsoft” view my resume . Getting wordings right. . Use Grammarly. The Premium version will give you more points. . Use active voice always. . Use resumeworded.com to get a score on your resume and improvement points. . You can also use topresume.com to get a score. . Optimize for readability . Add a summary section. Read the full-stack resume section on summary: https://www.fullstackresume.com/. . [Your professional identity] with [how many years in the profession] of broad experience in [Areas of expertise] with a willingness to learn and master/practice [Areas of Interest]. [Strongest area of expertise] specialist/practitioner/expert/adept. . Put your name, and contact details in the footer. It serves as a call to action. . Make it easier for people to find things and find you. . https://www.fullstackresume.com/ . Applying for Jobs . LinkedIn: NathanDuma/LinkedIn-Easy-Apply-Bot: Automate LinkedIn Easy Apply job applications and answer application-specific questions. You’re welcome! | AngelList: Easy Apply - Chrome Web Store | . You have to look for a more targetted approach rather than treating it like a black box. . Target companies so that you avoid wasting time. #whiteBoxApproach. . It’s more effective to search for “best software companies in x country” or “companies that sponsor visa in x” country. And apply there first. . Offers . Look at offers from top companies: Google vs Apple vs Amazon vs Microsoft vs Oracle - Compare career levels across companies with Levels.fyi .",
            "url": "https://www.ankushchoubey.com/resume-tips/",
            "relUrl": "/resume-tips/",
            "date": " • Aug 14, 2022"
        }
        
    
  
    
        ,"post111": {
            "title": "Negotiations",
            "content": "What is Negotiation? . Negotiation is when people come to a consensus. . It isn’t about winning. It’s about Win-Win! . We can’t just think about ourselves. We have to think about everyone. A philosophical argument can be this: What’s good for others is good for me. . Not convinced? Yeah. The philosophical argument isn’t persuasive enough here. . If you think about it carefully, someone can only follow a plan if he/she feels satisfied and convinced of its merits. . If someone else is happy, they’ll pay us back somehow. Similarly, when we are happy, we’ll pay them back. . If someone is unhappy, they’ll either reject or abandon the plan. Similar to us. . Therefore, the probability that negotiation is reached and followed through is entirely dependent on how happy both parties feel at the end of the negotiation. . Is it that important to learn to negotiate? . Negotiation happens in every stage of life. And many times a day. . Monetary negotiations are the most transparent form of negotiations. | Negotiations happen beyond money matters too. Things like marriage, friendships, idea proposals, etc. | Conflicts are also a negotiation of sorts. | Even you negotiate with yourself to get work done. Like, oh, why do I not want to do this? Can I work for 5 min? | . Negotiations are non-stop and non-avoidable. Therefore, negotiations are essential. . The rules of negotiations change and depend on the situation at hand. You can’t do a marriage discussion like you do salary negotiation. . What do negotiations involve? . Negotiation involves many steps: . Knowing What you want. | What does the other person want? | What’s common in the market? | What’s practical? | . | Communication Expressing what you want clearly without reducing or overdoing it. | Listening and understanding what the other person really wants. Asking them questions to understand more of why they want something. #startWithWhy. Good listening skills play a huge part here. | . | Discuss possible scenarios, outcomes, compromises or different angles. | Accepting, being content and following through on your part | Hoping the other person feels accepted, content and follows through. | Since there are these many steps, the area where things can fail many. Therefore negotiations are complicated. And they have to be learned and practised. .",
            "url": "https://www.ankushchoubey.com/negotiations/",
            "relUrl": "/negotiations/",
            "date": " • Aug 12, 2022"
        }
        
    
  
    
        ,"post112": {
            "title": "We are all narcissist!",
            "content": "What is narcissistic? . Narcissism is a high form of selfishness wrapped in moral virtue. . It’s wrapped in moral virtue because only the narcist knows they are right and believes everyone else is wrong. And therefore, their actions are justified. . The narcissist has the confidence of the competent. Without actually having the competence of the competent, nor are they working towards competence 1. It’s all a facade. . How do people become narcissistic? . We are all on a spectrum of narcissism 2. Some people are: . Total narcissists: they talk about themselves | Functional narcissists: they can be polite but don’t enjoy talking unless it’s about them or something they care about. (I fall in this category for the most part) | Empaths: people who care about others. | . Our goal in life is to move toward becoming more empathetic. . There are also other categorizations of narcissism: source . Classical narcissism 2:02 | Covert narcissism 3:50 | Communal narcissism 7:00 | Acquired narcissism 11:34 | Knowing the four categories can help in understanding behaviors. . The two common forms of narcissism are: . Feeling too superior; therefore, words owe me something | Feeling too inferior; therefore world owes me something | . The problem is that feeling the world owes you something with/without virtue is a form of avoiding responsibility for your problems. . What can give rise to narcissism? . One has to spot patterns that give rise to bitterness. Small things that cause . Arrogance: someone is asking for help, but you want help because you feel you earned something, and now you don’t give a fuck. | Resentment: for something that happened in the past. | Deceit: lying about things or not looking to accept reality | . Depression/past trauma can also give rise to narcissism. Trauma need not be something big. Like, a friend laughed at you for liking Justin Beiber. . Narcissism is a form of insecurity. It can be fear of abandonment. . How can we be less narcissistic? . Stop being critical. Accept people as they are, not how you want them to be. | If you are helping people, help to support them rather than receive. It doesn’t mean you don’t have boundaries but think about it. | Tell the truth but be kind. It’s okay to say sorry. There is no harm in it. | Know your patterns. Patterns repeat. Tell people about your patterns. That opens you up a bit. | Be more humble: Engage in activities that require humility, like serving others in some form—measuring yourself on servant leadership score—giving others more power to critique or provide feedback, like code reviews, without getting stiff. Getting rejected often also helps in humility. | Express observations, not attacks. Use I feel, and I observed words more. Understand and respect boundaries. | . Controlling Aggression and Competitiveness . The likely reason to have aggression and competitiveness is that you don’t have a good outlet. You need good goals. . You need to find a goal that pulls you towards achieving it. And towards that goal, you can use all your competitiveness and aggression. . There is also an element of being ethical while being competitive/aggressive. For example, you can be default aggressive while trying to improve your goals. It’s a much more useful way of thinking about having an outlet for your aggression. Let your smarts be of real use to everyone. . Resources and Clips . Narcissists will try to convince you that they love you if you try to leave the relationship . | Baggage Claim - YouTube . | . Jordan Peterson &#8617; . | Robert Greene &#8617; . |",
            "url": "https://www.ankushchoubey.com/narcissism/",
            "relUrl": "/narcissism/",
            "date": " • Aug 12, 2022"
        }
        
    
  
    
        ,"post113": {
            "title": "Mutation Testing",
            "content": "I am looking for ways to improve my tests and code quality. On this search, I came across Test Driven Development. With TDD, our test and code quality are too damn high. But still, while we do TDD, there are times when we still can’t predict real-world scenarios. . For example: If we have a String coming from the external system, it can be null. . We can have a repository of known issues and remember them. A form of threat-modelling/chaos engineering for logic. It’s also helpful to offload such a task to an automated test. That test is mutation testing. . What is mutation testing? . Assuming you wrote a test for a piece of code passes. If there are changes to the code, the test should fail. . That is what mutation testing does. Mutation testing mutates (modifies) the code and checks if tests fail. If the test passes, then we know the test isn’t accurate. . Tests not being accurate can mean two things: . Either the scenario isn’t covered. | Or assertion isn’t accurate enough. | . In both cases, once we have uncovered a mutant, we can update our test and code to handle the situation. . Mutation testing improves both code and tests. . How accurate is mutation testing? . Sometimes mutation testing produces garbage responses. Like when a mutant removes a log line. . Similarly, for specific autogenerated codes, we don’t need mutations. . Sometimes it’s just garbage. But sometimes, it does uncover accurate details. . The accuracy of mutation testing depends on the application, selected mutants, and current test quality. . If the application is simple like CRUD, mutation tests might not uncover anything. . If the types of mutants selected don’t fit your particular application, then mutations might not uncover anything. . Mutation tests may not discover anything useful if your test quality is already high. But that’s the point. Right? A fallback safety might discover things early in the SDLC process. . Comparing mutation coverage with code coverage. What should mutation coverage be? . During a test, a piece of code can be executed. But unless a specific assertion is applied, it isn’t tested. . Code coverage can be high even without any assertion. Mutation coverage cannot be high if there are no assertions. . Mutation coverage depends on code coverage. If a code isn’t reachable, mutating that code will not affect the test. . So aim for high code coverage. . For mutation coverage, my current answer is that sometimes mutation results aren’t good enough. . How to speed up mutation testing? . Make sure your tests without mutation testing is already fast. | Exclude POJO classes. | Select the right mutators. Read “Less is More” | Use history so that tests don’t repeat. | Multiple threads | . Resource . PIT - Mutation Testing Library for Java | .",
            "url": "https://www.ankushchoubey.com/mutation-testing/",
            "relUrl": "/mutation-testing/",
            "date": " • Aug 7, 2022"
        }
        
    
  
    
        ,"post114": {
            "title": "Pre-save Data Validation",
            "content": "It’s imperative to have good data validations in place. Because often, data leads to more bugs even when logic works correctly. . Data errors can be: . null values in the database or from an external system | expecting values to be positive by getting negative ones. | expecting a field to have a specific format but getting something else | The only solution to a data error is running data migrations which is an unnecessary overhead. . Therefore, we should ensure that data is validated before it reaches DB. . Only allows certain data . You minimize data problems by only allowing it for specific fields. . On a UI, it could be dropdowns, date fields with range, and auto-completion options. . Validate on frontend . Libraries like formik and yup can help perform object and user input validation. . Typescript is only helpful in knowing the exact names of the variable, its type or keys within an object. Since it gets converted to javascript, typescript can’t be used to validate data types. . Validate on the backend . In Java specifically, you have JSR Validators. . Use in all POJOs, especially for incoming request objects and entity objects. . You can also create custom validators. . Using enums is also an option. . Validate on the database . This is as important as validating on backend. . SQL already provides a good schema structure that makes it easy for validation. Contraints can be provided in many NoSQLs too. . I faced an issue where mongodb’s upsert operation inserted multiple records instead of updating one. This was a common mongodb issue. . To fix this I used, added unique=true for compound index I had made. . For DB validation, make sure that you mark things as unique wherever they need to be unique. Similarly, other key related contraints should be used. .",
            "url": "https://www.ankushchoubey.com/pre-save-data-validation/",
            "relUrl": "/pre-save-data-validation/",
            "date": " • Aug 6, 2022"
        }
        
    
  
    
        ,"post115": {
            "title": "Tips on fixing and upgrading Maven Dependencies",
            "content": ". . Note: **For beginners**: Instead of writing your code, you can include code written by other people. This is done by setting up dependencies. Maven is a java build tool that helps streamline and automate dependency management so that you don&#39;t have to manually configure things within each machine. Apart from this, maven also helps in testing, and release and has a plugin ecosystem to automate many tasks. Updating dependencies is important. Reasons could be: . your SAST scan found a list of vulnerable dependancies | you want to keep up with the latest. | . Here are few things that could make the process easier. . Update dependencies in parent . If dependencies in the parent can’t be updated exclude and update the child. . If you are excluding do write a comment mentioning why you are excluding and if/when to remove the exlusion. . If dependency cannot be upgraded, find a different package specially if it’s a security problem. . Find child dependies easier with Maven Helper plugin for IntelliJ . It can be hard to know the subdependiencies of a dependency. Maven Helper plugin creates a tree that can help. . It has options to exclude dependies too. . . Run automated tests after updation . Having a good automated test suit helps elevate the risks involves with updation of any kind. . Run all your automated tests to verify if change to dependies is making the code break. . Automate updation . This can be automated by using a maven plugin like Versions Maven Plugin . A pipeline job can be run where version is auto-updated and merged to dev branch if tests are passed. :) . Resources . Find unused dependency .",
            "url": "https://www.ankushchoubey.com/maven-dependency-upgrade/",
            "relUrl": "/maven-dependency-upgrade/",
            "date": " • Jul 29, 2022"
        }
        
    
  
    
        ,"post116": {
            "title": "When doing reactive programming, 'aim' to have streaming end-to-end",
            "content": "A streaming microservice works on streams of data rather than waiting for entire data to load before performing operations. . This means by definition streaming is much high performance and therefore a good aim to have. . Example of Streaming and Non-Streaming Reactive Implementation . Suppose you have an application that shows a list of movies to users. The application comprises a frontend user view and a backend that talks to a database. . You have chosen Spring Webflux for the backend and Angular for the frontend since both provide reactive programming support. Webflux provides it with Project Reactor. Angular provides it with RxJs. . A non-reactive non-streaming way would have been something like this . Create an API endpoint that fetches all movies from the database to the backend service. 2 Once all the data is fetched, then create a payload to send to the browser. (Backend has to wait for fetching to be complete) | Once the complete payload is received by the browser, it will start rendering the details. (Browser has to wait for fetching to be complete) | Spring Webflux backend: . return moviesRepository.findAll() .collectList() // this makes it non-streaming .flatMap(movies-&gt; ServerResponse.ok().bodyValue(movies)); . Angular Frontend: . Typescript: . this.httpClient.get(&quot;/movies&quot;) .subscribe( // this line makes it non-streaming movies=&gt; this.movies = movies; ); . HTML: . &lt;li *ngFor=&quot;let movie of movies&quot;&gt; { { movie.name }} &lt;/li&gt; . A reactive streaming implementation would be like this: . Start fetching movies from the database to the backend. | As movies are being fetched, start creating the payload and send that payload to the browser without waiting for other movies. (Backend does not wait for fetching to be complete) | Browser will receive a record and display it. When it receives another record, it will display that as well. (Browser does not have to wait for fetching to be complete). | This means that both your backend and your frontend have to be reactive-streaming. . Spring Webflux backend: . return ServerResponse.ok().body(moviesRepository.findAll(), Movies.class); . Angular Frontend: . Typescript: . this.movies = this.httpClient.get(&quot;/movies&quot;); . HTML: . &lt;li *ngFor=&quot;let movie of movies | async; index as i&quot;&gt; { { movie.name }} &lt;/li&gt; . When is streaming not-efficient . There are some cases where streaming isn’t effective or can be used like: . Amount of data is too small. | Certain operations/transformations that require the entire data to be loaded. For example, HAL Format isn’t possible with streaming. | Sometimes batch operations are more effective than streaming. | For example, while fetching movies, you have to also fetch data about movie stars from a separate table. Since many movies might have the same movie star, it may be more effective to fetch them once in bulk rather than in a streaming fashion for each movie. . These nuances depend on what you are trying to build. Therefore it is a good “aim” to have streaming end-to-end for true reactivity. But it isn’t always applicable. .",
            "url": "https://www.ankushchoubey.com/reactive-streaming/",
            "relUrl": "/reactive-streaming/",
            "date": " • Jul 24, 2022"
        }
        
    
  
    
        ,"post117": {
            "title": "Writing better commits with Atomic Commits",
            "content": "What is the problem with larger commits? . Many developers complete all their features before committing and merging. When they commit and merge, . their commit is often bulky i.e it is too big | since it is too big, it often causes merge conflicts | since it is too big, the commit message is often not the best indicator of what the code does. | since it is too big, there were too many changes, and the confidence to merge and expect everything to work fine reduces. | since it took so long to merge, other developers might have built the same features again. | . Often the reason is, that we are afraid to merge and want to get everything perfect the first time. But this is counterintuitive. . Why we should do atomic commits? . Atomic commits are frequent commits. . Allows for easily reversing changes | Leads to a more accurate commit history that can be easily understood by developers. and therefore is easier to review. | . | Small changes are easier to revert than bulky changes. | Developers are much more in sync when small commits are merged non-stop. | Small commits lead to a better sense of progress. | Suppose you are working on two features related to upload and download of files to and from AWS S3. Instead of a single commit for both, you can break it down into multiple commits. . // bad added support for file upload and download // better feat(s3-service): configuration for AWS S3 feat(s3-service): add streaming upload file to S3 feat(api): add endpoint for streaming upload /uploads feat(53-service): streaming download from s3 feat(api): add endpoint for streaming download /downloads . How to implement atomic commits in practice? . Commit and push to dev after every completing method/feature. | This push should involve both test and code. | The commit message should be accurate. Each commit should only include a small number of changes. | Use a commit format like conventional commits that separates different types of commits: | . feat: feature | refactor: refactoring | fix: bug fix | doc: documentation | ci: continuous integration changes | build: related to build | . | In practice, you can assume committing feat at least once per hour. Other commit types especially refactor, fix and doc might be even more frequent. .",
            "url": "https://www.ankushchoubey.com/atomic-commits/",
            "relUrl": "/atomic-commits/",
            "date": " • Jul 14, 2022"
        }
        
    
  
    
        ,"post118": {
            "title": "Always choose Reactive Programming",
            "content": "What is reactive programming? . Reactive programming is not a straight paradigm like empirical or functional. Reactive means that code that is written is non-blocking and asynchronous. . Typically, whenever we have an IO operation, the thread waits for the IO operation to complete before proceeding to the following line. This consumes CPU time while the CPU is ideal. . In reactive programming, during IO operations, the thread is auto-switched. Therefore, the CPU is never ideal. . This means that reactive code has a higher throughput overall depending on the number of IO operations. Reactive code is typically several magnitudes faster and consumes fewer resources overall. . Also, traditional code doesn’t work on streaming data. If you fetch a list of records from a database, the entire list has to be loaded before you can act on it. . In reactive, however, you can work with streams of data. So, you can start performing operations on data you have received till now without waiting for the rest of the data. . Similarly, suppose you have a client-server application that needs to display a list. If you code it to be reactive, the list items can be received as a stream. Each item can be displayed one at a time. No need to wait for the entire list to load. This would significantly reduce initial load time. . Why choose reactive programming for every project? . Often a con of reactive programming is said to be the initial learning curve. In my experience, the initial learning curve is much less relevant than the return on investment it provides. . Cloud applications need to consume less memory and higher throughput. Before going for vertical or horizontal scaling, the best thing to do is optimize code. Reactive code is one of the directions to look for. . Reactive libraries are available in many programming languages. Especially the flavors of reactivex (RxJs, Rx Java, etc). Spring Webflux is a variant of Spring Boot that supports building reactive backends. . When should you not use reactive programming? . The only place not to use reactive programming is when everything can be done in memory itself i.e there is no IO operation. . My experience with reactice . I have used Project Reactor Spring Webflux and RxJS in Angular with both the experience has been this. . A much cleaner coding experience . One of the reason is it seems all reactive libraries are a sort of functional pipeline. One stage with another. . Each stage is a pure function and ideally doesn’t have any side effects. . You can think of it like a scope. . I very much agree with this video I found on Youtube. With project reactor, everything is just a Flux from start to end. No need to wrap things into different convertor classes. Everything is just Publisher. . Multithreading programming has never been easier. .",
            "url": "https://www.ankushchoubey.com/reactive-programming/",
            "relUrl": "/reactive-programming/",
            "date": " • Jul 11, 2022"
        }
        
    
  
    
        ,"post119": {
            "title": "On Building Trust",
            "content": "Remember word is bond. . Create good environment for people to trust . Don’t point out things that make them feel awkward of uncomfortable. .",
            "url": "https://www.ankushchoubey.com/trust/",
            "relUrl": "/trust/",
            "date": " • Jul 1, 2022"
        }
        
    
  
    
        ,"post120": {
            "title": "Understanding Boundaries and Why They Are the Key To Better Life",
            "content": "Principles about boundaries . Boundaries are expression of respect . Boundary help maintain a mutual respect and an agreement with yourself and other people. . Boundaries help avoid unnecessary drama. . Sometime boundaries can be too harsh. But almost all boundary are expression of #love in the sense that they tell the other person how best to deal with the situation. . If someone communicates their boundary, they probably want to talk to you. . Boundaries aren’t always mutual . aka in a relationship of any kind between two people, you can have X boundary the other can have Y boundary. . Different for different people . You’ll set different boundaries for different people. And it has to be that way else everything is prioritized too high or too low. . For family, boundaries are small. . For collegues, boundaries are bigger. . For example, you don’t need to feel super sad for offending someone at work over work reasons. . Healthy Boundaries . Don’t lose yourself . If you are loosing yourself for someone else, it isn’t right. It’s not right for you and it’s not right for the other person. . You cannot make someone trust you. You can show your values/attributes and then hope that they see them too. . You cannot force a relationship. You can build them. . Express your boundaries in a healthy way . Instead of lashing out. Express your boundary in a healthy way. . Don’t cross someone’s boundary . Kabhi boundary par maat jaana 1 . You may negotiate honestly over a boundary but don’t cross it. . Don’t try to change someone’s perception too much . It’s isn’t worth it. People are weird and you are too. No one has enough information. . Learn to live and let live. . Plus, people who have a tendancy to try to go and fix the world should try to clean up their rooms first. . Austin Lewis &#8617; . |",
            "url": "https://www.ankushchoubey.com/boundaries/",
            "relUrl": "/boundaries/",
            "date": " • Jun 28, 2022"
        }
        
    
  
    
        ,"post121": {
            "title": "Strategies to be Calmer",
            "content": "Learn to be calmer and neutral . As soon as you catch yourself getting overly emotional. Go neutral. . Aim for no high no low. For moments at a time. . Once you become neutral, you are in 50% better state to make a good decision. . Think about what made you particularly high or low: . Was it because someone allows you to cry and listen to your sad life where you avoided responsibility? | Was it impression of someone? | . Go neutral in thise situations. . Choose your battles wisely . Recognize what you are giving a fuck about. Is it really worth giving a fuck about? . Is it a good value? is it something external? . Does it even align with your values? . Slow down . You aren’t running a race. Take things slow and steady. . This is easier to remember that to actually do it in practice. Slow down. . Go very slow. Remember, slow is smooth. And smooth is fast. . Don’t rush from one thing to the next to the next. Take pauses. . Habit of rushing is a dirty high. . Learning to let things wait . You don’t have to answer notification right there. . Reflect . Reflect on moments you got worked up or where someone else got worked up. Was it worth the fight. . Calm down . If you don’t know what to say. Calm down. Maybe take a break. And then tell the truth truthfully and in a good way. . Become neutral. Aim to be non-reactive to threats on any kind be it people, events, realizations or situations. . Calm down and thing. . Explore and eliminate insecurities . Insecurity is chasing the impossible. . Insecurities come from unrealistic expectations. If you are someone productive, you can’t expect to be good at 20 other things. specially if 15 of those things are stupid. . Ask yourself, are you insecure or someone made you insecure? Was it a person, advertisement, advice, etc. . Remember: Insecurity = Someone is trying to sell you something. . A practice to do is, question every ad. . Does it make sense. | . You become more secure when no one can sell you anything. . Asking logical questions is a good way to eliminate insecurities. . Example 1 Living in a different city: If you are being told to get out of your city to live in some other place? you can view this two ways, why are you asked to get out of city? Is it because other people feel they are making a better choice? Does there choice align with your values or are they having a better value? Are they actually making a better choice? Can this be tested someway? . Example 2 Rejected: You got rejected. Now you feel you suck. You lack something that everyone has. Why? Because it seems that everyone is doing something, getting married, talking to someone, traveling, etc. And here you are alone and lonely. How many people do you know who are normal and single? What was the reason you were rejected? How common is rejection? Did Mark Manson or someone you look up to get rejected? Aren’t use in a community of normal, very normal people that got rejected? Can you be rejected for the wrong reasons? If Mark Manson or someone else got rejected, how much do they suck? Isn’t rejection a normal part of life? . Panic Mode . Aim to calm down and go neutral | Recognize your blessings | Breathe. | . Meditate . Meditate regularly. 3 times a week minimum. . Break things down with logic . Is it really that bad? | Start noticing what happened. Does it feel the same after an hour. Or after a day. Etc. . If it starts feeling different, your calibration is off. .",
            "url": "https://www.ankushchoubey.com/calmer/",
            "relUrl": "/calmer/",
            "date": " • Jun 28, 2022"
        }
        
    
  
    
        ,"post122": {
            "title": "Writing cleaner logs by Disabling Stack Trace for Expected Response Exceptions",
            "content": "In spring boot, you can add @ResponseStatus annotation to an exception. By adding it, whenever the exception is thrown, the response will be according to the annotation properties. . For example: Whevener UserNotFoundException is thrown, the return value is 404 not found. . @ResponseStatus(HttpStatus.NOT_FOUND, reason=&quot;user could not be found&quot;) class UserNotFoundException extends RuntimeException{ UserNotFoundException(String message){ super(message); } } . We often create many such exception classes to make code cleaner. Throwing an exception is cleaner than multiple try-catch blocks. . The problem here is logs. Whenever exception is thrown, the log contains entire stack trace. . But these kind of exceptions are expected exceptions, in some sense they aren’t exceptions at all. . So, we can instead disable stack trace by adding the following to our exception class Source: StackOverflow. . @Override public Throwable fillInStackTrace() { return this; } . To make things better, we can create a custom exception class as follows . abstract class ExpectedResponseException extends RuntimeException{ @Override public Throwable fillInStackTrace() { return this; } } .",
            "url": "https://www.ankushchoubey.com/disable-stacktrace/",
            "relUrl": "/disable-stacktrace/",
            "date": " • Jun 28, 2022"
        }
        
    
  
    
        ,"post123": {
            "title": "Writing cleaner tests with creative variable names",
            "content": "Variable and method names provide a context that makes it easy to understand a piece of code. . Typically in code, it’s enough to have the same variable name as the class name. . So for example, if you have a User class, the object name could be user. . User user = new User(request.getFirstName(), request.getLastName()); . This looks good in code but gets messy in tests especially when there are multiple instances of the same object. . User user1 = new User(&quot;user 1 first name&quot;, &quot;user 1 last name&quot;, ...10 other fields...); . . . User user2 = new User(&quot;user 2 first name&quot;, &quot;user 1 last name&quot;, ...10 other fields...); . . . // someAssertionThatUses user1 And user2 . A better approach is to use a TestData class which I have described in a separate blogpost . User user1 = UserTestData.Given.aUser(&quot;user 1 first name&quot;, &quot;user 1 last name&quot;); . . . User user2 = UserTestData.Given.aUser(&quot;user 2 first name&quot;, &quot;user 1 last name&quot;); . . . // someAssertionThatUses user1 And user2 . In the above statement, having the factory UserTestData.Given.aUser encapsulates creation making the test a bit cleaner. . But still, at the end of the test in the assertions section, the coder will have to remember what the data in user1 and user2 . A better way is to have creative variable names here. . User tonyStark = UserTestData.Given.aUser(&quot;Tony&quot;, &quot;Stark&quot;); . . . User steveRoggers = UserTestData.Given.aUser(&quot;Steve&quot;, &quot;Roggers&quot;); . . . // someAssertionThatUses tonyStark And steveRogers . Now within assertion, the developer will know the exact data in both the User objects. . This not only makes tests cleaner but also makes them funny and exciting to read. .",
            "url": "https://www.ankushchoubey.com/creative-variable-names/",
            "relUrl": "/creative-variable-names/",
            "date": " • Jun 25, 2022"
        }
        
    
  
    
        ,"post124": {
            "title": "Rules of thumbs for Distributed System",
            "content": "Don’t distribute. Or atleast don’t distribute early. . We have a tendancy to over engineer. . Having distributed system creates complexity. You want to avoid complexity as much as possible. Atleast early on. . If a single codebase can deliver good enough performance and is small/organized enough then there is no need of distributing. . It’s easier to have everything very decoupled and in separate packages and then distribute things later if need arises. . Separate database . Database for each service should be separate. Data can be shared either by having API call or by using message queue. . If the database is not separate, then the tendacy to make it spagati is high. . A potential exception to this is CQRS style services where one service writes the data and the other service reads the data. In this case, both services are highly coupled to each other. . Prefer Event Driven Services . Message queues are highly decoupled and can scale very efficiently. Prefer having all internal sharing of data using message queue. . Preferable, publish every business object that the microservice handles. . This requires having good naming conventions. . Replication is okay in event driven microservices. . Keep code and interface quality damn high. . In micro-services, you have to have a very high quality interface. This means Rest APIs, Kafka messages, etc. If quality/standards are not followed, then it effects every other service. . In monoliths, you can almost get away with everything. Specailly if the only consumer is your frontend. .",
            "url": "https://www.ankushchoubey.com/rule-of_thumb-distributed-systems/",
            "relUrl": "/rule-of_thumb-distributed-systems/",
            "date": " • Jun 25, 2022"
        }
        
    
  
    
        ,"post125": {
            "title": "Reason to aim for social confidence",
            "content": "The reason to have social confidence is this: If you don’t, no one takes you or your arguments seriously. . What is social confidence? . There are two types of confidence: . epistemic confidence: being confident about being right | social confidence: being confident your role and expressions in social situations | . Why epistemic confidence is the wrong value to aim for? . There are a few reasons: . Our goal is to win most of the battles we encounter. Therefore, we need a strategy that supports this. | There is infinite knowledge in the world. Infinite perspectives. It’s impossible to fit all that in one brain. Therefore, the probability of being wrong in most domains is high. except the one/two a person is able to master. | Aiming and being right, doesn’t lead to actually learning. In situations we don’t consider relevance of new information. It may happen that information we have was too old. We need to be updated. The only way we got good at a domain was because we realized how stupid we were in the first place. | We are social animals. Trying to be always right is detramental and disadvantages to ourselves and to others. We can’t reach sound conclusions. And it makes us take steps out of our egos and protecting ourselves. | Epistemic Confidence comes out as arrogance. And in many cases it really in arrogance. | Arrogance is “I am better than you” [^1]. Arrogance is routed in insecurity. | Why social confidence is a better value to aim for? . Humans are social animals. We are mean’t to talk and spend time with people. We aren’t lone creatures. Being lone makes is sad. Being with people makes us happier. | We make better decisions with multiple perspectives. Of course those decisions need to be rooted in values. But these multiple perspectives are like multiple lives lived. Having just your own perspective means you have higher chance of failure. | Social confidence doesn’t impact clarity of thinking. It improves it. Having good listening skills, being emphatatic, respectful to other peoples opinions and life choices, all make us better as an individual. | Good things are outcome are social/team efforts. Rarely individual efforts. | Social confidence comes out as true confidence. And in most cases, it really is true confidence. | Confidence is “I am proud of myself” [^1]. Confidence comes from experience and understanding. | Parts to Social Confidence . Slowing down and ability to be calm | Being comfortable in social situations. aka you are able to be yourself. | Dressing well | Good hygine and habits | Good communication skills: both listening and speaking | [^1]([Confidence): [Confidence VS. Arrogance | Which are you?](https://www.youtube.com/watch?v=f3biKalwktk) | .",
            "url": "https://www.ankushchoubey.com/social-confidence/",
            "relUrl": "/social-confidence/",
            "date": " • Jun 19, 2022"
        }
        
    
  
    
        ,"post126": {
            "title": "Communication during conflict",
            "content": ". Photo by Constantin Wenning on Unsplash . There are two parts to communication: listening and speaking. And these roles change between the two. . In any communication any form, there is a some amount of context loss. But in some communication context loss is much higher. . This is because of the way sentences are phrased. Or how is someone is nervous communicating. Or what pre-assumptions someone has made which could and could not be due to lack of information. . This could be us. Or this could be the other person. . We can’t control how the other person understands. Not fully at-least. But we could try to present ourselves in a way that the other person feels more open to talk, express and communicate. . By choosing the right medium, listening better and articulating properly; one can reach close to 100% retention of information. . This would help us reach an understanding faster. The best way to do it is to keep things light and to be calm. . Choose the right medium . The tone of voice, facial expressions, body language, etc provide useful information even if they aren’t studied explicitly. It’s what our social brains are adapt to do. . Therefore, cutting these features out of communication can be problematic in certain cases. . Texting: Should not be used for emotional communication no matter how hard it feels. If it’s becoming hard, transition:Logistics Calls: Normal. Emotional. Video: Better In Person: Best. Aim for in-person communication. . Listening . Remember, the goal is to seek to understand, than to be understood. . Have the attitude of: The person you are listening to is important and worth listening to. . Having mutual respect leads to better understanding and less drama. . Listen carefully and listen everything. . No matter how silly on mundane something seems. It maybe of value to the other person. Don’t negate anything by saying it’s dumb. It may or maynot be dumb. Listen and ask followup questions. . Understand the problem instead of giving solution . Often we try to suggest a solution to something that’s not even a problem. It’s like Hammer 🔨. Wack. And nothing works. Because it wasn’t supposed to. . Life is complex and their are nuances. Those nuances need to be understood. . Learn to emphathize. . . In any case of communication, we can’t be hundred precent certain or 0% certain. Therefore we have to range ourselves between 95% certain and 5% certain. . Calm the other person . Sometimes, it may happen that the person you are talking to has intense emotions. . This could be anger, happiness, sadness. Or they might be too critical of themselves (Like someone you are reading 😇). In someway they have their guards up. . Step 1. Calm them down. . Make them drink water. . Tell them to calm down. And that way you can understand them a bit better. . Do not interrupt . Rather than interrupting, wait for when the person has stopped. Even if they are are saying something that you don’t agree with. Let them speak completely. This not only helps understand the other person better, this is more respectful. . Don’t present your arguments early on. . This makes someone jump to a different tangium. Your goal is to understand their points. . Let the person present his points. . Don’t wait for your turn . Don’t wait for your turn to speak. When the person has stopped speaking, you could take a moment to think and then speak or ask followup questions. It isn’t akward to wait and then speak. . Also, it’s not your respo to overly try to make a situation pleasant. Over trying makes situation more akward. . Speaking . Agree to what you find right. . Often someone interrupts us or are in a emotional state and are continuing to talk. Let them speak and then agree to the points you agree with. This helps establish a common base for further conversations. . If you don’t understand something, re-iterate what the person is saying and ask if it’s right. . Specially in complex or emotional issues, understanding someone is hard. Doing the aboves means that you’d have understood better and the person knows you have understood better. . Ask neutral questions . Specially on text messages. . To understand neutral questions it’s more effective to understand it’s alternative. Loaded questions. . A loaded question is where you already pick a side. . For example: . Loaded: . My friend lied to me about having a job. What should I do in this situation? . Neutral: . If someone lies about themselves? What should be done? Or how should one think about it? . Two techniques: . Remove references. Keep everything third person. | Use phrases like how should one think about this. | Think before you say and stay in the realm of truth . This can be hard at times. But think before saying, pausing is okay. Telling that you need a moment is okay. Then stay in the realm of truth and say exactly how you think or feel. . We look even dumber when we say something without actually knowing. Therefore if you don’t know something say that you don’t know and ask for help. . Express and explain better . Point to or give examples specially about you feel. Slow down. Speak slower. Be congizent of your emotions. Are you feeling too high or too low. . Ask properly and exactly what you want. Be ready to negotiate. Explain how it might benefit them. . If you are unsure about something, ask clarifying question or ask them how you should think about something. . When talking give the choice to other person . Instead of saying: I’ll come to your house this Sunday (uninvited)? . Say: Can I come to your house? . Ask instead of commanding. . Keep things civilized . We don’t want to cross someone’s boundary. It’s not worth it. . Don’t attack the person . Everyone is human. Attack the specific activity and explain why. . Everyone has an ego. You too. And everyone is trying to figure things out with information they have. . If you had an argument . Connect with them later. Lighten the mood. Tell them sorry with parts you messed up or slipped. Try to reach understanding. . . These things have to be automatic. It isn’t ideal to keep thinking about these. Pick on one area at a time to work on. .",
            "url": "https://www.ankushchoubey.com/communication-during-conflict/",
            "relUrl": "/communication-during-conflict/",
            "date": " • Jun 19, 2022"
        }
        
    
  
    
        ,"post127": {
            "title": "Paper work is like DevOps",
            "content": "I have never been fully able to get into the flow of DevOps. I always kept wondering why that is. . I believe I have a good enough hypothesis. . Coding is fast. You just learn a bunch of patterns and implement solutions. . DevOps is slower to work on because it requires a bunch of configurations. Those configurations are very specific and have to work a certain way. . Therefore the actually “DevOps” command/configuration would be small but require a lot of pre-reading/experimentation. Once done, the result is huge but daily progress usually seems much slower. . This feels very similar to paper work be it bank, government, etc. Paper work requires a bunch of skills similar to what’s needed with DevOps. . Patience | Organization | Pre-planning | Regular experimentation | . Plus it requires more stuff, going out to bank, government office. A huge drain for some specially if paired up with being a bit shy. . Anyway it needs to be done. So might as well get it done. .",
            "url": "https://www.ankushchoubey.com/paper-work-devops/",
            "relUrl": "/paper-work-devops/",
            "date": " • Jun 12, 2022"
        }
        
    
  
    
        ,"post128": {
            "title": "Truth and Fidility",
            "content": ". Photo by Paul Skorupskas on Unsplash . Naivity . There are many things we take for granted . Health because we’re young | Cheating in an exam because it seems easy | Learning a programming language syntax | . We believe all these things are very simple and easy. Many of them truly are simple because they have been abstracted. . What happens when you learn about a topic . But once you know about a topic in detail and try to study it in detail you realize that there are a lot of intricacies and nuances. . As you learn more, your picture resolution for the domain increases and it seems to keep increasing. . It’s like a whole new world of something that you didn’t even realize existed. . In some sense, you could say the truth keeps getting truer. . This has been my recent experience with many things: testing, philosophy, and rationality. . It makes it hard to go back to a simpler version . My experience has been it’s very hard to switch to a normal model. . Things I learned that made me truthful and more rational seem to destroy many of my friendships. At the same time reveals more of my flaws which I can’t un-see and would have to fix. | . | Things I learned about philosophy seem to make me weirder. | Things I learned about testing: well makes me want to test everything and despise code that hasn’t been written with TDD. | . Is it worth the cost? . I’m not sure yet if all this is worth the cost. . Each increase in fidelity seems to be making me disconnect from simpler life, having more friends, a fun existence, and normal life. In some sense, that fun existence is the opposite of responsibility. . Though Naval says it’s possible to be both, learn truth deeply, and still be happy. or maybe it’s just that the grass is always greener on the other side. .",
            "url": "https://www.ankushchoubey.com/truth-fidility/",
            "relUrl": "/truth-fidility/",
            "date": " • Jun 5, 2022"
        }
        
    
  
    
        ,"post129": {
            "title": "Running and Being Effective during Meetings",
            "content": "A meeting is a place that can bring in new ideas and insights and save everyone’s time and effort. . Therefore it’s very important to have an effective productive meeting. . There are some ways to have effective meetings: . Set the context . Most meetings aren’t as effective because the people involved don’t have the context behind what is being discussed. . This can be solved in a few ways: . Agenda: A few sets of outlines or questions | Provide Pre-reading material A set of materials to read/watch before attending the meeting. | It’s better to send a specific link than just mentioning the name of the topic. | . | Set the context during a meeting Start the meeting by setting the context. Why we are doing what we are doing? | What do we intend to get out of this meeting? | . | . | . Be prepared early by maintaining notes . Be prepared for the meeting yourself. You could create a google sheet (sheets.new) for each important recurring meeting. . For example: . Retrospective meeting happens at the end of every sprint or every release. Since the release ended, everyone is already happy and have forgotten everything that they went through. . So, instead have a google sheet with your Retrospective format and fill in info there. So that you’ll have a set of useful points to add to the retrospective. . Encourage Discussion . Round Robin Asking/Sharing Inputs Many people are shy and don’t speak up. To get everyone involved discuss concepts/questions in a round-robin fashion. | You could even ask specific people who may be too silent “What do you think about this?” | . | . Keep it short/exact . Set time on the calendar It’s unproductive to wonder when the meeting is. | It’s best to have an exact date and time with the meeting link if it’s online (#postCovidWorld) | . | Short Meeting Durations Aim for 30 min meetings. Max 45. | The longer the meeting drags on, the more everyone will feel bored and start losing attention. | If the meeting is dragging out longer, take a break. 10 minutes should be good enough. | . | . Set the Next Actions . Towards the end of the meeting: . Setting up time for the next meeting and putting it on the Calendar | Create an action list. An MoM of sorts Discuss the outcomes of the meeting and have them written down along with who is accountable for it. | . | .",
            "url": "https://www.ankushchoubey.com/effective-meetings/",
            "relUrl": "/effective-meetings/",
            "date": " • Jun 1, 2022"
        }
        
    
  
    
        ,"post130": {
            "title": "Why memorizing is still relevant?",
            "content": "There is a cognitive bias called the Google Effect. . It means that if we know where to find the information, we won’t try to remember it. Instead, we’ll roughly know the location of where to find it. . This might seem nice at first. But here are some problems: . #1 . To make sense of the world/a topic, we need to keep our minds on info long enough to create meaningful connections. . This won’t happen when we just know the reference and have to go read things over. . #2 . In the real world, the problems we face are usually of a repetitive nature this is because we haven’t taken the time to form the habits/strategies to cope with them. The more we can remember, . #3 . We need to make decisions. To make decisions fast and efficiently, we need to know, remember and recall hard facts on the fly. . #4 . By remembering we also save a lot of time in finding, re-reading, and coming to the same conclusions again. . All these make it important to memorize/remember things better. .",
            "url": "https://www.ankushchoubey.com/why-memorize/",
            "relUrl": "/why-memorize/",
            "date": " • May 31, 2022"
        }
        
    
  
    
        ,"post131": {
            "title": "Ways towards Freedom",
            "content": "Why I have been contemplating freedom? . I have been contemplating this for a while. Defining my core values has been a step toward consciously choosing the kind of person I want to be given the ups and downs. . The reason to have freedom is to be “free” (duh!). To be free to choose what one wants to do when one wants to do it. And do not be tied to anything in particular. . What are some ways to achieve freedom? . So given the premise of freedom above, I believe these are some known ways to have a little more freedom in life. All of these are mutually exclusive. . How does money help achieve freedom? . The more money you have, the less you have to worry about a lot of things. . You could eat what you want, travel where you want, etc. . It’s not as important to have money. It’s more important to become the type of person that can make money. That would set you free. . How does commitment lead to freedom? . Children are full of potential. They are something but aren’t anything in particular. . Committing to something, be it values, a career choice, a relationship, etc gives you freedom from all the other choices that look green from the outside. They may or may not be greener but that’s a discussion for some other day. . By committing to something, you release the potential it brings. . How does detachment lead to freedom? . Detachment means having emotions under control. We assign too much importance to our emotions. Emotions are indicators but aren’t absolute truths. . Detachment keeps your mental RAM free because you aren’t attached to the outcome. aka you just don’t care. . This makes you a much more rational person. . Rationality as a way towards freedom? . Being aware of your cognitive biases, logical fallacies, and loaded language; lets you be free of them. . How does discipline lead to freedom? . This one is the ultimate. If you are disciplined, the work gets done despite resistance. . Being disciplined doesn’t mean you have to be super serious. Being super serious does the opposite. . Winning the game to become free of it? . Many games are one-time games. Like money, once you win the game of money, you’ll just have to spend a little bit of time maintaining it. . Similarly, if you have a good “personal brand” that’s reputation and truth worthy, you win everything without much effort. . If you win the game, you become free of it. . Ending notes . Freedom is a feeling. It may be that you are truly free but just don’t feel like it. . The ultimate freedom is freedom from the mind. .",
            "url": "https://www.ankushchoubey.com/freedom/",
            "relUrl": "/freedom/",
            "date": " • May 31, 2022"
        }
        
    
  
    
        ,"post132": {
            "title": "Shadow Clone of Ideas",
            "content": ". Shadow clone is a popular concept in Naruto where a person can clone themselves into multiples. Each clone can then go and do something and once that’s done, the clone disappears and the original person would retain the memory of the clone. . The protagonist, Naruto, could make 1000s of clones. . If making clones were that easy in real life, each one could be assigned a different important task which would lead to super high productivity. Since the clone knows each other super well, there would be almost no friction. . The downsides multiply too. Each clone would have the same weaknesses. All have the same mind. . Not only that but sometimes that is too much mental gymnastics on one person. . I would have opted to make shadow clones anyways but since it isn’t possible (yet), the other best solution seems to be to increase productivity, make shadow clones of knowledge and build good teams. . This means that ideas (clones of knowledge) can evolve and be implemented separately. This brings out uniqueness and the process of collaborating itself would make things better. And it’s less effort on any one person. .",
            "url": "https://www.ankushchoubey.com/shadow-clones/",
            "relUrl": "/shadow-clones/",
            "date": " • May 29, 2022"
        }
        
    
  
    
        ,"post133": {
            "title": "The Gist of Behavior Driven Development - BDD",
            "content": "Starting with a User’s Problem . Like any product development, the primary task is to solve a user’s problem. So you should start with the user’s problem and discuss how it could be solved. . This might lead to interesting approaches that could help. . Typically it’s not the most effective to bring people in a group to brainstorm because it often leads to one or two people dominating the conversation. It’s helpful to ask everyone to think about 3 points. And then take turns discussing each. . Once the problem is defined well and some solutions are agreed upon, one may start with defining features. Though typically, it’s better to validate the potential business and the solution before proceeding further. . Once the solution is finalized, you can start defining specifications. . The document that keeps everyone in sync . The specification is a document that describes what features are to be built exactly. . This would be a single source of direction. If something is in the spec file, it has to be built that way. If it’s not in the spec file, it should not be built. . The spec file keeps the entire organization in sync. . The product team uses it to finalize features. | The development team used to know what to work on. | The QA team used to build tests around those features. | The marketing team uses it to decide how to best market. | The documentation team uses it to create documentation. | The design team uses it to design the product. | A new member of any team uses it to learn about the product. | . Without a specification file, everyone is confused. No one person can know everything. And even if he does it creates a bottleneck and a single point of failure if the person decides to leave the organization. . Since the spec file keeps so many people in sync, details for those specific teams should also be mentioned. . Creation of Specifications . The creation of specifications is a collaborative process, involving different teams. Especially Product, Development, and QA, also known as the three amigos. . In reality, it’s best not to start by collaborating. It’s best for a single person on the product team to write down specification files. . This is because he/she knows the business better than others and typically has effective communication skills. It’s likely not the best way to test the English skills of a developer or a tester ;). . A product person would likely write in simple business terms that are understandable to all stakeholders. And since he/she understands best, the initial draft spec file would be out faster. . Next, the 3 Amigos can be followed to gain better clarification and add more information. . Too many directions . A problem someone writing the spec file can face is too many branches. The team collaborates and discovers 10 different potential paths. There is no need to travel all the paths. . Though the business and solution would have been validated, real validation happens when the user starts using the product. Therefore we should limit the number of features, and for that, it’s wise not to even write details of features we think are possible or good to have. #focus . Executable Specs . The modern way of maintaining spec files is by using feature files like Gherkin. . Gherkin provides a way to bridge the gap between what’s in the spec file and what has been developed. This is done by writing automated tests. If the test passes, we know the feature has been developed and is working. . . Specifications by Example . This also leads us to the point of how to write better specifications. The standard practice is this, described by examples. An example is how a user would interact with the system we have built. Examples solve the ambiguity. The keyword scenario is an example. . Rather than writing, a file of up to 25 MB can be uploaded. . We can write as an example: . Scenario: Disallow upload of files greater than 25 MB . Given I am on the file management page | When I upload a 26 MB file | Then the upload should fail | And should not be visible in the files list | . Scenario: Allow upload of file less than equal to 25 MB . Given I am on the file management page | When I upload a 25 MB file | Then the file should be uploaded | And visible within the files list | . Therefore in the above case, two examples/scenarios were generated, success and failure. . Behavior-Driven Development . Many other tips can make scenarios cleaner and more specific. The cleaner and more specific the scenarios are, the easier it will be for everyone to collaborate and build better products. . This whole journey encompasses BDD. BDD isn’t as specific as Test-Driven Development. The scope of BDD is much much larger and encompasses the whole product lifecycle from defining problems and validating to development and everything in between. . More Resources: . Questions and Answers Regarding BDD . When Behaviour Driven Development Goes WRONG! . John Ferguson Smart “Twelve BDD Antipatterns - stories from the trenches about how NOT to do BDD” . SpecFlow - Learn BDD .",
            "url": "https://www.ankushchoubey.com/bdd/",
            "relUrl": "/bdd/",
            "date": " • May 23, 2022"
        }
        
    
  
    
        ,"post134": {
            "title": "The need for executable specifications",
            "content": "How typically software is developed? . Typically when we start developing we either have a rough idea about what has to be developed or we have a story. . If the story is detailed, it’s better but if it’s not then we code up something and then hope it’s the right thing. . If it’s not the right thing, we have to go back to all stakeholders (management, QA, Doc team, product team), show them a working demo and then change code accordingly. The cost of changing code is too high. And cost of keeping everyone in sync is high as well. . How specification file clarify thinking about feature? . A functional specification file can help up avoid being foggy with our approach. It can help clarify requirements at a level not possible with most other methods. . A specification file includes all details about features and scenarios that are going to be built. The scenarios are detailed and include everything that developer will have to build, no less no more. . How specification file can help everyone is sync? . Whenever anyone within organization has to discuss over features, the spec file can be shared. This will keep everyone in sync. . What problem is faced with traditional specification file? . Spec files are updated constantly. Traditional ways of building spec doesn’t help know if spec file and product being built are actually in sync. . It may happen that some features are added or removed but spec file or the product don’t paint an accurate picture. . How Gherkin feature files solves problem faced by traditional specification? . Automated test files, feature files solve this problem by allowing plugins can Cucumber to write automated tests. If the test passes, the scenario was implemented perfectly. . If test doesn’t pass, then scenarios is failed. .",
            "url": "https://www.ankushchoubey.com/need-for-executable-specification/",
            "relUrl": "/need-for-executable-specification/",
            "date": " • May 21, 2022"
        }
        
    
  
    
        ,"post135": {
            "title": "Writing better commit with conventional commits",
            "content": "Why commit messages are important? . Whenever we code, we save the state of the code with a commit. And the commit message becomes description of what exactly happened. . Having good commit message leads to better communication and understanding. People can use commits to learn the code. It is an invaluable peace of documentation when done well. . What happened when we don’t follow a convention? . Like with anything else, When we don’t follow a convention for commit messages everything is messed up. Everyone has their own rules. Some are too descriptive. Some are less. . We can’t get important insights . Why we should follow conventional commits? . Conventional commits forces us to have atomic commits. Aka to include only change that has been done. . This can also help with git bisect . It also has plugins that make it easier to perform other actions. . Semantic Versioning Change log generation . What are some ways for making it easy to implement conventional commits? . Commit lint website : https://commitlint.io/ IDE plugins Git pre-commit hooks .",
            "url": "https://www.ankushchoubey.com/conventional-commits/",
            "relUrl": "/conventional-commits/",
            "date": " • May 17, 2022"
        }
        
    
  
    
        ,"post136": {
            "title": "Choosing Images/Diagrams in Essays",
            "content": "Why we should have images and diagrams? . Images and Diagrams make our essays more rememberable and can be used to illustrate concepts that are hard to describe in words. . How we should choose images/diagrams? . Which image/diagram type is better for illustrating the point? . An image or a diagram should complement the writing but not distract from the writing. The image/diagram should be linked to what’s been written. . Choosing images and diagrams very much depends on the contents of the essay. . If it is a physical object or an activity, we can find the best representation of the object or activity. | If it’s an activity that involves many steps, then we could include images of each step. | . Diagrams can be tricky sometimes. In some places, graphs and Venn diagrams can be good. . For code style, using appropriate UML diagrams can be useful. . Diagrams need not always be perfect. Sometimes rough diagrams are better than no diagrams. . Why should we add captions to an image? . It makes it easy to understand the diagram if it has a caption. The caption should describe the diagram in detail but need not be a paragraph long. A sentence or two might be enough. . Why should we add the source to an image? . Like any writing, it helps to credit the creator of the image or diagram if we are using someone else’s. It takes too long to make an image or a diagram. By adding sources, we encourage the creator to create more. . Resources . Awesome Screenshot – Screen recorder and Screen capture . Online FlowChart &amp; Diagrams Editor - Mermaid Live Editor . Annotate: Web Annotations with Screen Sharing - Chrome Web Store: Allows for easily drawing on Google Chrome with a Drawing Tablet. .",
            "url": "https://www.ankushchoubey.com/essay-images/",
            "relUrl": "/essay-images/",
            "date": " • May 13, 2022"
        }
        
    
  
    
        ,"post137": {
            "title": "Question Driven Writing",
            "content": "What is question-driven writing? . QWD is a way of outlining an idea or an essay by writing questions that can be answered instead of usual topics or subtopics. . Where did I pick up question-driven writing from? . I first read about questions via Jordan Peterson’s essay writing guide. Since I am a developer, this seemed very similar to TDD. So I gave it a similar name to help tune myself into the same zone. . How does question-driven writing help clear thinking and write better? . Typically when we write, we write something and then aim to push the quality and purpose of it. . QWD helps clarify the quality and purpose upfront. This kind of becomes a failing test like in TDD. This gives something to aim at. Now, when you answer the question, you’ll answer it precisely without dealing with other related questions/topics. . How does QDW help in breaking up paragraphs, and blogposts? . QDW also naturally breaks up paragraphs and groups related paragraphs together. Also, if you have many unrelated questions, you could break up your essay into multiple essays. (#cleanCode) . QDW forces us to have one main idea per essay. . How to do QDW? To do QDW, start by writing the topic name. And all the questions you have related to the topic. . Once you have a bunch of them written down, start answering them. . You’ll find some questions that can be grouped, group them. . Done. . What are the similarities between QDW and TDD? . Both TDD and QDW set the expectation of writing beforehand. | Both lead to precise writing. | Both reduce overall writing time. | . Does QDW take more time? . By having precise writing and a clear aim, QDW reduces blank screen problems. . The cost of precision saves more time overall. . When you have a new essay idea, just write all the intents in form of questions. And you will more likely remember how to write it. .",
            "url": "https://www.ankushchoubey.com/question-driven-writing/",
            "relUrl": "/question-driven-writing/",
            "date": " • May 13, 2022"
        }
        
    
  
    
        ,"post138": {
            "title": "Some considerations when setting a new project",
            "content": "Some essential considerations when starting a new project . Tech stack and framework . Backend: . Spring Boot | . Frontend: . Angular | React | . Database: . SQL | MongoDB | . Read Me: https://github.com/dbader/readme-template . Wiki: . Project setup | . Git Commit Format: . Conventional Commit | . Versioning: Semantic Versioning . Deployment: . Docker, Kubenetes | .",
            "url": "https://www.ankushchoubey.com/new-project/",
            "relUrl": "/new-project/",
            "date": " • May 11, 2022"
        }
        
    
  
    
        ,"post139": {
            "title": "Writing better BDD specifications",
            "content": "What is BDD? Why it is needed? . BDD stands for Behavior Driven Development. . In BDD, we write specs for the features we want to develop. This serves as a contract between developer and other stake holders. Therefore, it must be signed by all parties before the work starts. . If something happens or someone is unsure, we check the BDD document. . To be more precise, these specs are executable specs. Meaning there can be tests written for them to verify if a feature is working as expected. . BDD doesn’t always need to be end-to-end flows but it is most commonly that. . Writing good specifications . It’s important to write specifications such that everyone can understand it. . The easier it is to understand. The easier it is to implement. . There are 6 principles for creating good specifications: . Business Language: BDD documents product-development related document. This document has to be shared and collaborated on by stakeholders. THerefore, it is important to have business language here. | Real data | Intention revealing | Essential details only: BDD documents are related to problem faced by the end user and not technical concerns in general. The more high-level it is, the easier it is to use the same document for different technologies. | Focused | Brief | It’s better here to include a link to read more out this than to continue repeating. So posting the link here: Keep your scenarios BRIEF . Aim for single assertions (Single “Then”) 1 . Having multiple Then blocks means your tests are likely doing too much. . Writing Better BDD Scenarios &#8617; . |",
            "url": "https://www.ankushchoubey.com/writing-better-specs/",
            "relUrl": "/writing-better-specs/",
            "date": " • May 10, 2022"
        }
        
    
  
    
        ,"post140": {
            "title": "Thinking on Paper",
            "content": "What is a blank screen problem? . The blank screen problem is we have a new coding problem but can’t decide what to code. Think of this as an equivalent to writers block. . Why we get stuck at a blank screen? . This can happen because we don’t know the requirement very well or what we are trying to implement is too tough. . What are the ways of avoiding blank screen? . Planning and designing are the best ways of avoiding blank screen. . The best way to plan and design is to do it on paper. . Why Pen and Paper Works Well? . Paper works best because: . There is no distractions. | You can connect ideas easily. | You can hold more ideas in memory by writing/drawing it down. | How to do it for System Design? . For initial system design usual boxes and connecting them is enough. . Once, the initial system design is built you can use a tool like Google Draw or diagram.net to get a more refined and shareable diagram. . Reading up and understanding UML diagrams can be helpful in the later part. . For many problems I have found defining data model is the best way to start designing the system. . How to do it for Algorithmic Problems? . This can be used the same competitive coding problem or real life. . In competitive coding problems we are given sample Inputs and sample outputs. . It’s best to always start on paper pen and manually solve for each sample input manually. . Once thats done, figure out the time and space complexity and optimize. . Once you are done with these, only then start with actual coding. . How to do it for UI Design? . Wiremocks are kind of common in UI world. It’s always better to start with a rough wiremock and get it verified from stakeholders. . Not doing so leads to un-neccesary rework down the line. .",
            "url": "https://www.ankushchoubey.com/thinking-on-paper/",
            "relUrl": "/thinking-on-paper/",
            "date": " • May 5, 2022"
        }
        
    
  
    
        ,"post141": {
            "title": "Writing cleaner tests with Test Data Factories",
            "content": "Problem . A typical information-system application goes like this: . Create a data object | Create a repository/DTO to sync it with Database | Create a service | Create a REST API endpoint | . So, when we write tests, we tend to initialize the data object and multiple places. . For me it has happened before that a single change to constructor has lead to changes are 100s of places. This manually change could avoided if I knew IntelliJ properly. . But without IDE features too, initializing a data class in multiple tests makes tests bulkier. . We can abstract away all these into a single class that can provide all the test data for a data-object. #encapsulation . For example: . You have a data-class SampleDataClass . @Data @RequiredArgsConstructor class SampleDataClass{ @NonNull private String name; @NonNull private String field2; ... } . In tests you initialize each field manually, . @Test //TEST 1 @DisplayName(&quot;SHOULD {someAssertion}&quot;) void should{SomeAssertion}(){ SampleDataClass sampleData = new SampleDataClass(&quot;name&quot;, &quot;field2&quot;, &quot;field3&quot;, ...); // calls and assertions } @Test //TEST 2 @DisplayName(&quot;SHOULD {second Assertions}&quot;) void should{second Assertions}(){ SampleDataClass sampleData = new SampleDataClass(&quot;anotherName&quot;, &quot;field2&quot;, &quot;field3&quot;, ...); // calls and assertions } //... more tests which declare data object . Here if you have to modify of add a new field, you’ll have a hard time. . Solution: Simple Test Data Factory . Instead, you can create a Test Data Factory. Something like . class SampleDataTestFactory{ class Given{ public static aSampleDataClass(){ // Note here name doesn&#39;t matter return aSampleDataClass(&quot;aRandomName&quot;); } public static aSampleDataClass(String name){ // this is the only place where class is initialized return new SampleDataClass(&quot;name&quot;, &quot;field2&quot;, &quot;field3&quot;, ...); } } } . Note the stucture of the classes. This is intentional. . When calling the method it would look something like this: SampleDataTestFactory.Given.aSampleDataClass() . This is a much fluent (english like) statement. . So now your tests can look something like this: . @Test //TEST 1 @DisplayName(&quot;SHOULD {someAssertion}&quot;) void should{SomeAssertion}(){ SampleDataClass sampleData = SampleDataTestFactory.Given.aSampleDataClass(); // calls and assertions } @Test //TEST 2 @DisplayName(&quot;SHOULD {second Assertions}&quot;) void should{second Assertions}(){ SampleDataClass sampleData = SampleDataTestFactory.Given.aSampleDataClass(&quot;anotherName&quot;); // calls and assertions } //... more tests which declare data object . Note that both Tests use a different simple factory method. One doesn’t care what the name field is but other does. . Most of my test factories would initialize data randomly unless explicit value is needed which is very rare. . Extending Further . Intially, I started with the just creating test data but then I realized I could club more common things in the Test Factory. . These include: . APICalls - Each method passes the parameters and return the result | MockRepository/DTO - returns an OnGoingStub for methods of repository | MockService - Similar to MockRepository but for service | Helpers - Special helpers methods for dealing with Data Object | All of these methods are public static and using them has the same fluency as above SampleDataTestFactory.Given.aSampleDataClass() .",
            "url": "https://www.ankushchoubey.com/test-data-factories/",
            "relUrl": "/test-data-factories/",
            "date": " • May 3, 2022"
        }
        
    
  
    
        ,"post142": {
            "title": "Writing cleaner tests with Fluent Assertions",
            "content": "Your tests should be very easy to read essentially english like. There are multiple techniques to achieve this. . One of the ways is having fluent assertions. Fluent assertions are assertions chained together. The structure is such that it makes it more concise and easy to read. . We’ll take an example comparing Junit assertions with AssertJ assertions. . In the below example, we are checking if a Map contains specific keys, and if date is correct. . Map&lt;String, String&gt; jsonMessage = {someServiceCallReturningAJson}; // JUnit Assertions: Not Fluent Set&lt;String&gt; expectedKeys = new HashSet&lt;&gt;(Arrays.asList(&quot;date&quot;, &quot;userId&quot;, &quot;randomField&quot;)); Assertions.assertEquals(expectedKeys, jsonMessage.keySet()); Assertions.assertEquals(&quot;2001-07-04&quot;, jsonMessage.get(&quot;date&quot;)); // AssertJ: Fluent Assertions assertThat(jsonMessage) .containsKeys(&quot;date&quot;, &quot;userId&quot;, &quot;randomField&quot;) .containsEntry(&quot;date&quot;, &quot;2001-07-04&quot;); . The JUnit assertion is bulkier and will continue to get much bulkier with more assertion. . The AssertJ fluent assertion on other hand is grouped, contains helper methods that do not require specially conversion of object for common comparision. .",
            "url": "https://www.ankushchoubey.com/fluent-assertions/",
            "relUrl": "/fluent-assertions/",
            "date": " • May 3, 2022"
        }
        
    
  
    
        ,"post143": {
            "title": "Being good at one thing doesn't automatically make you better at another",
            "content": "This essentially means you still have to put in the work. . If you are good at technical skill, that doesn’t automatically make you the best if you are lacking in communication. . Similarly, if you are ethical/follow ethics rigorously that doesn’t mean you’ll win at life. There are other things also. And just by following a ethic or being good at a certain skill doesn’t make you entitled to everything. . This is a great equilizer for all. . No one is good at everything. And therefore requires help from others. .",
            "url": "https://www.ankushchoubey.com/good-at-one-thing/",
            "relUrl": "/good-at-one-thing/",
            "date": " • May 2, 2022"
        }
        
    
  
    
        ,"post144": {
            "title": "What and when to publish on message queue",
            "content": "Publishing Every Business Entity on each update/write. 1 . Publishing every business entity is especially useful for event-driven systems. . Rather than writing code to publish after each saves manually, we can use event listeners. Event listeners would run a piece of code each time a specific event like database save occurs. . For example: Spring Data Mongo has AbstractEventListener and ReactiveAfterSaveCallback. . class SampleEntityDataPublisher implements ReactiveAfterSaveCallback&lt;SampleEntity&gt;{ Mono&lt;SampleEntity&gt; onAfterSave(SampleEntity entity, org.bson.Document document, String collection){ return Mono.just(entity) .doOnNext(entity-&gt; Mono.just(entity) .flatMap(entity-&gt; { // code to publish }) .publishOn(Schedular.elastic()) .subcribe(); ); } } . Above, Spring Webflux code, publishOn and subscribe ensure that publishing will run in a separate thread and doesn’t affect the execution of the main thread. . Publishing Commands . In the CQRS pattern, we publish every command instead of the end state. It’s the consumer’s responsibility to choose how to interpret that command. . For example, a command could be . Movie object “Thor” was created for the USA with Id 1. Actor: “Chris Hemsworth” | Movie object was updated. Name = “Thor: Ragnarok” for id 1. | A consumer service would be caring about counting movies by “Chris Hemsworth”. It would ignore the second message since it isn’t valuable for it. . Anadi Misra &#8617; . |",
            "url": "https://www.ankushchoubey.com/what-when-to-publish/",
            "relUrl": "/what-when-to-publish/",
            "date": " • Apr 27, 2022"
        }
        
    
  
    
        ,"post145": {
            "title": "Debugging Effectively",
            "content": "Debugging has a standard set of steps. . But we do stupid things like search on stackoverflow without even reading what the error is fully. . This wastes stupid amount of time. Usually, configuration bugs can be mitigated much more easily if one has read Documentation and knows the configuration. . Know exactly what the error is . Read the error | Really understand the error | . If you’d like to be more methodical, add it to your bug card. . Look at logs. . Set appropriate log level for the packages involved. If it’s harder to understand. . Isolate the code/problem. . Does error come on one setting/env/deployment but not other? If yes: why so? | . Learn to use debugger mode and trace. . Fixing your debugging tool may help. . Replicate environment . This can be done in several ways: . Create tests . This could be unit/integration/etc. . If you can’t write a test, can you replicate it locally? . This could mean connecting UI and backend, upping some docker containers, or Minikube. . Finding solution . If it’s something that you can’t find, . Glance through documentation first. (Idealistic) | . or . Ask: . Ask People who may know. | Teams who may have faced the issue. | . Or read stack overflow or github issues. . If you still can’t find, ask a question on Stack-overflow. And when you do find the solution by yourself, post an answer. .",
            "url": "https://www.ankushchoubey.com/debugging-effectively/",
            "relUrl": "/debugging-effectively/",
            "date": " • Apr 19, 2022"
        }
        
    
  
    
        ,"post146": {
            "title": "Solving a OptimisticLockingException During Upsert in MongoDB-Spring Webflux",
            "content": "I faced a unique problem and it is worth writing about. The cause was parallel access and saving of a single document that caused OptimisticLockingException. . Problem . I had a @Document which had to be manupilated. . The @Document had a repository which extended ReactiveMongoRepository. . So it was something like this . SampleDocument.java . @Document(&quot;sample_document&quot;) class SampleDocument{ @Version Long version; @Indexed(backgroud=true) String customId; String fieldToBeModified; } . Notice @Version annotation . SampleRepository.java . interface SampleRepository extends ReactiveMongoRepository &lt;SampleDocument&gt;{ Mono&lt;SampleDocument&gt; findByCustomId(String customId); } . To update the document I had webflux code written like this: . repository.findByCustomId(someString) // Step 1 .flatmap(sampleDocument-&gt;{ // manipulation of document // Step 2 return Mono.just(sampleDocument) }) .flatmap(sampleDocument -&gt; repository.save(sampleDocument) // Step 3 ); . As you can see, the code to fetch the document (Step 1) and to save (Step 3) back are two separate lines. Between the lines are steps to manipulate the document (Step 2). . This was what caused the problem. . MongoDB uses version field in a document to maintain Locking. If the current version is 10 and you try to save 8 then this would lead to OptimisticLockingException. . In a concurrent environment like webflux when multiple thread are reading from the same data, it’s highly likely that the order the record is updated by some other thread before the current thread saves the data again. . This would specially be true where there are lots of upsert/update queries. . Solution . To fix this I switched to manually writing an update query and executing with MongoOperation. . Update updateQuery = new Update(). // code to update document return mongoOperation.findAndModify(query(where(&quot;custom_id&quot;).is(someString)), updateQuery, options().returnNew(true).upsert(true), SampleDocument.class) . Instead of 2 different DB actions. It became one DB Action. . The update query does not need to bring data back to Webflux server to manipulate the document. The document is manipulated at Database only. The database is therefore responsible for ordering the updates which was fine in my case. . Extra: Finding root cause and fixing with TDD . I’m gonna try to provide examples of TDD wherever possible. . To find the cause, I suspected the data was being saved parallelly. . So I created a unit test as follows. . Manipulate documents parallel. This was done with @RepeatableTest and @Execution(CONCURENT) | Assertion wasn’t straight forward with @RepeatableTest so I instead collected all version in a static list. | After all @RepeatableTests were over I asserted if version was as expected. | I ran the code and saw OptimisticLockingException occuring and assertion failing. | I replaced repository find and save with MongoOperation update as described above. | The test passed. | @Nested @DisplayName(&quot;WHEN upsert is called parallely&quot;) class WhenUpsertIsCalledParallelyTest{ static final Long repeatTimes = 100; static final List&lt;Long&gt; allVersions = new ArrayList&lt;&gt;(); @RepeatableTest(repeatTimes) // Part of Step 1 @Execution(CONCURRENT) // Part of Step 1 @DisplayName(&quot;SHOULD manipulate a single record&quot;) void shouldManipulateASingleRecord(){ // when: SampleDocument document = myService.upsert(someString).block(); // Part of Step 1 // data collection: allVersions.add(document.getVersion()); // Part of Step 2 } @AfterAll static void assertVersionIsRepeatTimes(){ assertThat(Collections.max(version)) // Part of Step 3 .isEqualTo(repeatTimes); } } .",
            "url": "https://www.ankushchoubey.com/optimistic-locking-exception-mongodb/",
            "relUrl": "/optimistic-locking-exception-mongodb/",
            "date": " • Apr 16, 2022"
        }
        
    
  
    
        ,"post147": {
            "title": "Fixing Tools - IDE, Code Editors, Etc.",
            "content": "Mastering an IDE means knowing and using features, shortcuts, plugins, etc. . It takes too many interations and years to learn and master a new tools. As you know IDE in detail, your productivity level increases tremendously. . Switching between IDE and Code Editors have very low impact if all of them essentially do the same thing. . This is similar to my approach for deciding to learn a programming topic. . A good IDE should provide: . Lots of feature to reduce coding effort | Plugin Support | Frequent Updates | I believe 2 IDE specially excel at these: . IntelliJ | VS Code | I find IntelliJ to be better at out of the box features specially refactoring. Using IntelliJ opens up for easy migration between all JetBrains tools. . Eclipse is probably the worst ever. . VS Code has better and more plugin. . Favorite Plugins . Maven Helper: IntelliJ . This IntelliJ plugin provides easy way for analyzing and excluding conflicting dependencies. . SonarLint on almost every IDE: . identifies and helps you fix quality and security issues as you code. . Code Stream on almost every IDE: . Allows for easy code reviews. . Language/Technology specific plugins: . All IDEs includes plugin for specific language/technologies. . For example: plugins for Kubernetes, Cucumber, Docker, etc. . Resources . 13 Simple Ways To Edit Code Faster in IntelliJ IDEA - YouTube .",
            "url": "https://www.ankushchoubey.com/fixing-tools/",
            "relUrl": "/fixing-tools/",
            "date": " • Apr 14, 2022"
        }
        
    
  
    
        ,"post148": {
            "title": "Writing Meaningful Log Messages",
            "content": "Logs are every important when trying to debug an application. With proper logs, not only will it take less time to debug, it will make your code more understandable. . This post covers server side logs. . . When to Log . There aren’t any good guidelines for when to log. . Logging too much can make your code ugly and slow. Logging to little makes it hard to debug. . These are some places where you may consider logging. 4th is non-compromisable though it is autoset by most programming languages. . There are 4 main places to log: . Conditionals -&gt; Log level DEBUG | Loops -&gt; Log level DEBUG | Major Processes -&gt; Log level INFO | Exceptions -&gt; Log level ERROR | After writing a piece a code, look at it and add logs wherever needed. . . How to log . Log messages should include the details of variables involved. . For example: . Bad: Does not mention variable details . Log message: User does not exists . String id = &quot;1&quot;; String name= &quot;Elon Musk&quot;; if (repository.existsByIdAndName(id, name)){ throw new UserDoesNotExistException(&quot;User does not exists&quot;) } . Good: Includes variable details . Log message: User does not exists with id=1 name= Elon Musk . String id = &quot;1&quot;; String name= &quot;Elon Musk&quot;; if (repository.existsByIdAndName(id, name)){ throw new UserDoesNotExistException(&quot;User does not exists with id=&quot;+id + &quot; name= &quot;+ name); } . Even Better: Includes variable details as map leading to cleaner log . I find it’s even cleaner to print a map with key as variable name and value as actual value; . Format: ${human readable message}: {data1: value1, data2: value2} . Log message: User does not exists: {id: 1, name: Elon Musk} . String id = &quot;1&quot;; String name= &quot;Elon Musk&quot;; if (repository.existsByIdAndName(id, name)){ throw new UserDoesNotExistException(&quot;User does not exists: {id: &quot; + id + &quot;, name: &quot; + name + &quot;}&quot;); } . Java also has Map.of that can allow writing maps in a single line. The only reason not to use it is that it doesn’t allow null values. . You can also create your own Logger which prints a map of everything including null values. . Quote your arguments . I find it better when arguments are quoted because it can show if items have empty spaces in them. . Bad: User does not exists: {id: 1, name: Elon Musk } . Good: User does not exists: {id: &#39;1&#39;, name: &#39;Elon Musk &#39;} . We can take a look at the second log and see we have an extra space in the end. . More resources . Enterprise Application Logging Best Practices (A Support Engineer’s Perspective) | .",
            "url": "https://www.ankushchoubey.com/writing-log-messages/",
            "relUrl": "/writing-log-messages/",
            "date": " • Apr 13, 2022"
        }
        
    
  
    
        ,"post149": {
            "title": "Blurry lines between Unit and Integration Tests",
            "content": "Problem with Mocks in Unit Testing . Typically, unit tests includes testing a certain class/method without involving other methods. The other methods are simulated with Mocks. . Mocking frameworks like Mockito provide functionality like: verifying how many times a mock method was called or if there were no interaction. . While mocks do provide make tests faster to run, they aren’t very accurate since they are built by hand. . Problem with typical Integration Testing . Typically, integration tests include creating a separate environment all together and running tests from middleware to database aka everything backend. . These tests are bulkier, require a lot of infra-setup and take longer to run. . Bluring line . Java has many “embedded” implementation of common external systems like database, kafka, mockservers, etc. These allow for writing tests without having to create a separate infrastructure. . Thus they are integration tests but not in integration fashion. . Also, tests written this way are more accurate than using mocks but do lack certain good features of mock as described in first section. Though the benefits outway the loss. Though we can mix and match using Mockito’s @SpyBean. . One can write accurate “unit” tests and still use “embedded” database. This has become harder to distinquish between unit and integration tests. Because this is a hybrid of both the overall effect is more accurate tests. .",
            "url": "https://www.ankushchoubey.com/bluring-line-between-unit-integration-test/",
            "relUrl": "/bluring-line-between-unit-integration-test/",
            "date": " • Apr 3, 2022"
        }
        
    
  
    
        ,"post150": {
            "title": "Whenever you encounter a bug",
            "content": "Write a test first . Encountering a bug after development means your tests aren’t good enough. (or you weren’t doing TDD 😉) . To make sure the bug doesn’t repeat, write a test for it. . By writing a test, you’d have simulated the exact situation where the bug arose. . When you fix the code, you know the bug is perfectly fixed. And anyone modifying the code in the future won’t miss it. . Make sure right things are logged . Logs should provide accurate enough description of the state of the system. . If it takes you too long to find the cause of the bug, it maybe that your logs aren’t good enough. .",
            "url": "https://www.ankushchoubey.com/encounter-a-bug/",
            "relUrl": "/encounter-a-bug/",
            "date": " • Mar 26, 2022"
        }
        
    
  
    
        ,"post151": {
            "title": "One Month Microservice",
            "content": "I aspire to build microservices/microfrontends and deploy to production within a month. . A microservice should not be super big. If it is, it’s not micro anymore. . The idea with One Month Microservice is this. . One month and a synchronized-3-man-squad is enough to code up a microservice and deploy to production. . Assuming 3 weeks of coding. | One week of deployment. | . If it’s takes more than 1 month the following may be reasons, . Learning curve for the particular microservice is too high | New Team | Design could be improved | Microservice infrastucture (chassis) is not in place. | Team isn’t a synchronized 3 man squad. aka it’s too big with a lot of moving pieces. | .",
            "url": "https://www.ankushchoubey.com/one-month-microservice/",
            "relUrl": "/one-month-microservice/",
            "date": " • Mar 21, 2022"
        }
        
    
  
    
        ,"post152": {
            "title": "Thoughts & Notes on User Stories",
            "content": "I have had a love-hate relationship with Agile. The reason has likely been I didn’t realize it’s effectiveness. . These are my thoughts and notes on User Stories. I hope to improve and expand on these ideas in upcoming months. . User Stories . The goal with user story is to deliver the best value in smallest/most efficient package. . This would void un-neccesary rework, make sure we start the story at the right time and help make estimate for how much work can be done within a fixed time. . The lessons one can gain from creating user stories, splitting, making DOD, making DOR, etc are all transferable skill to personal planning as well. . Writing User Stories . Guiding phrases help narrow focus. . The description can be phrased this way. . As a &lt;user&gt; I want &lt;outcome&gt; so that &lt;business&gt; . Often &lt;outcome&gt; can be used as story title. . The dichotemy of User Story and a Technical Task . By the symantic of it, user story is about something a end user wants. So user stories map to features that effect users. . While developing there are also other tasks such as database migration, job creation, etc that aren’t user stories. These are technical tasks. . It’s better to classify it separately so that a business user doesn’t get confused by it. . But here is the catch, if you separate them, the business user will prioritize business stories over technical tasks. But aren’t business stories dependent? . Therefore, in real world it’s much better to have only user stories. A user story can be large if it involves too many technical sub-tasks. . A user story needs to have executable spec (BDD). Technical Tasks don’t. . . Tip: Having only User Stories means the number of user stories are less making it easier to remember and manage. Breaking User Stories . There are two major story breaking ways: . Horizontal | Vertical | . Horizontal can be thought of as breaking a story by type of activies involved like database, user interface, middleware, etc. This isn’t ideal. . Vertical . Breaking vertically means to break by functionality instead of by activity. . So it could be a functionality is itself a mixture of 2-3 smaller functionalities. We could break it as such. . Definition Of Ready and Breaking Down . Definition of Ready is when it’s right to start a user story. We don’t want to have a lot of context switches because it reduces productivity. . U-INVEST . INVEST is a good acronymn to start with to decide how big story should be. . Independent: Is the story dependent on any other story? | Negotiable | Valuable | Estimatable | Small : Is the story atomic or does it contains multiple sub-stories? | Testable | . The invest remains same as sizing of stories. . The U is for User Interface. . I found there are other things involved here too, like: . API : if it’s an API, you may want to do API First Development | Learning : is there any learning involved? | . Definition of Done . Defination of done is when we can say the story ended. . The following I believe is must. . TDD followed | Deployed | Product Owner Accepted Story | .",
            "url": "https://www.ankushchoubey.com/user-stories/",
            "relUrl": "/user-stories/",
            "date": " • Mar 21, 2022"
        }
        
    
  
    
        ,"post153": {
            "title": "Writing cleaner tests with method/when/should blocks",
            "content": "Problem Description . Often tests code style is ignored. Having different test writing styles makes it harder to write quality tests. Tests quality is as important as code. This post explores a effective template I developed to help write cleaner tests and keep them uniform. . method/when/should blocks . there are 3 main blocks. each block in nested within parent block. . method block WHEN block SHOULD block given/when/then mini-blocks | . | . | . | . method block: is name of method. all tests related to a particular method will be within this block.abstract . WHEN block: describes the condition over a method. . SHOULD block: describes the assertion. . GIVEN/WHEN/THEN mini-blocks: helps keep tests clean . You may have noticed WHEN, SHOULD and AND are capitalized. This is by design. This helps highlight logic. . Examples . 1 - We are creating a method which inserts new value if id does not exists in database else updates existing value.class . upsert method WHEN value exists SHOULD update value | . | WHEN does not exists SHOULD insert new value | . | . | . 2 - We have a UI components which should message “No Content” if data items is not present. Else it shows a list of item names . displayItems method WHEN data is not present SHOULD display “No Content” | . | WHEN data exists SHOULD display list of item names | . | . | . Benefits . method/when/should block is perfect companion for TDD, is language agnostic and can be easily used with templating features like IntelliJ’s live template. . Having specific blocks means that test descriptions are always written a certain way. This clarifies thinking and makes sharing and understanding easier. . Blocks group tests together, making them easier to find. . Also, when tests run in IDE like IntelliJ, the output is much cleaner. The example section above is a good representation of this. . Template for JUnit . class {NameOfClass}Tests{ @Nested @DisplayName(&quot;{methodName} method&quot;) class {MethodName}Tests{ @Nested @DisplayName(&quot;WHEN {condition description}&quot;) class {ConditionDescription}Tests{ @Nested @DisplayName(&quot;SHOULD {assertion description}&quot;) void {AssertionDescription}Test(){ // GIVEN {code for setting conditions describe in WHEN block} // WHEN {code for running actions} // THEN {code for assertions} } } } } . Given, When and Then are mini-blocks. The code will be written after an tab intend. . More extentions . AND block: Describes more conditions for WHEN block. . Usage: . WHEN a condition AND another conditions | . | . More SHOULD Blocks: . SHOULD-NOT | SHOULD THROW | SHOULD-NOT THROW | SHOULD CALL | SHOULD-NOT CALL | .",
            "url": "https://www.ankushchoubey.com/method-when-should/",
            "relUrl": "/method-when-should/",
            "date": " • Mar 19, 2022"
        }
        
    
  
    
        ,"post154": {
            "title": "Strategies on becoming more productive",
            "content": ". Photo by airfocus on Unsplash . Batch tasks . This could be batching within a certain parts of year, month, week or day. . For example: . All travel within November | Working harder on Monday, Tuesday and Thursday. Relaxing a bit of Wednesday and Friday. All blogging tasks on Sunday. | Major studying on Weekends. | . | Day Important focused tasks during first half of the day without any distractions | Meetings/Collaboration during second half of the day | Stopping work at 6 PM | Family/Relaxation/Recovery time post 6. | . | Plan and only do what’s essential . Planning is an essential activity that saves maximum time with least effort. . Ask yourself at every moment: “Is this essential?” / is this essential now? . Often when planning we ignore tasks that can give us long term ROI like learning/reading. Such tasks take huge time in the short term. Some set time within the day (like an hour) should be allocated. . Plans should be a mix of responsibility and rewards. Ask yourself: “If I could have the day I wanted. What would that day look like?” . Or you could also categorize the type of activities you want to do. . Pull Right and Mono Task . This comes from Kanban. Value is only delivered when a task in complete. . It’s not valuable to have many infinished tasks. Therefore, start the tasks that are closest to finish. Finish them first before picking up new ones. . If you are using a Agile/Kanban Board, start from the rightmost part of the board. This also fits really well with “Walking the board” method of Daily Standup where team starts with talking about the rightmost task and walks towards the left. . Mono Task. Do one thing at a time. You’ll save 50% more time. . A tip: Keep your phone outside the room. Your productivity will improve infinitely. . Keep a mental note/recalibration of every next hour . This would automatically focus you. Every hour. But maybe not every minute. . Return to the board/tracker often . Ideally return multiple times in the day. This works really well with previous tip. . The board/tracker should be upto date. Updating board during Daily Standup or other meeting is a “Moment of Glory”. 1 This means that board/tracker wasn’t in upto date state. . Aim to have no “Moments of Glory”. . Limit time/spike . Almost all tasks can be estimated to a few hours or a day. Even if someone estimates a task to a day, he/she will really actually work on it for a few hours. So aim to estimate to hours. . If a task isn’t estimatable, it needs to be broken down. . Once the task is estimated to hours, pomodoro or something similar can be used. . Focused hours/pomodoros . Pomodoros are most effective way to get tasks done. . Pomodoro incorporates both Mono-tasking and recalibration. . 25 minutes of focus without distraction provides a mono-task environment. If anyone/anything interrupts, you could say you are on a Pomodoro and will connect back later. . The breaks in pomodoro have a effect of recalibration. Specially if you will go away from 5-10 minutes, you come up with better strategy. . Keep track of distractors/distractions . Learn to let things wait. . Keep a list of distractions in a separate list. These are things that make you want to stop/block your particular card/task and switch to it. Or it can be something else you need to do. . This could include: . A person you want to follow up or help | A task that needs to be done | Something that needs to be ordered. | Etc | Identify improvements and organize . Along with planning, identifying and improving on timewaster will give back more time. -&gt; Time Assets. . Have a set of rituals that help your organizes. Some of these can include: . Cleaning up your Agile/Board at end of the day | Shutting down the computer (not hibernate) at 6 PM each day. | Going through and deleting tasks bookmarks, files, notes, photos every Friday. | Cleaning up the room every weekend. | Development That Pays - YouTube Channel &#8617; . |",
            "url": "https://www.ankushchoubey.com/saving-time/",
            "relUrl": "/saving-time/",
            "date": " • Mar 18, 2022"
        }
        
    
  
    
        ,"post155": {
            "title": "Human Intuition while working in Technology",
            "content": "Often when talking about process improvement, we focus on only technology element. . Human element is ignored. This is understandable. technology can enforce rules that improve the process easily. Technology can also remove a lot of human evidence. . Developing the human intuition is about understanding why something is being done more than how something is being done. . Because once someone understands why something is done, they can suggest ways to prove it for themselves locally. . This is usually the thing I find lacking in most devops, Agile, TDD and similar concepts. .",
            "url": "https://www.ankushchoubey.com/human-intuition/",
            "relUrl": "/human-intuition/",
            "date": " • Mar 18, 2022"
        }
        
    
  
    
        ,"post156": {
            "title": "The Synchonized 3 Man Squad +/-1",
            "content": "I have come to the belief that 3 people working on a particular micro-service/micro frontends/unit is the most optimal. . Small teams are more effective than larger teams. Keeping a large team in sync is hard. . They have to be dedicated to a single MS/MF because the cost of bringing someone later makes the project delay more. . 1 man isn’t enough because they’ll have too much freedom/dependency. Code would be written in such a way that only 1 person knows. . 2 is good. It helps in synchronization. . 3 is perfect. It’s a synchronized and shared workload. If a person is on leave, 2 can manage easily. . 4 is the upper limit. This is a warning zone. Though it may be perfect is project requires a lot of support. But if the project requires a lot of support, it may mean that it isn’t designed well. . More than 4: You have spaghetti. Shortcuts. People doing their own things. High communication bottlenecks. . The idea for this post was developed while talking to my friend Austin Lewis .",
            "url": "https://www.ankushchoubey.com/3-man-squad/",
            "relUrl": "/3-man-squad/",
            "date": " • Mar 17, 2022"
        }
        
    
  
    
        ,"post157": {
            "title": "Enforcing Architecture with Architecture Testing",
            "content": ". Introduction . SW Architecture is one of the most important pillars of an SW project. Following Engineering and Agile practices are part of the equation too. But having a clean extensible architecture facilitates a much faster development. . When working with a group of people, it is significantly time-consuming to enforce rules for maintainability. For example, it’s common to find different classes that do the same thing named differently. Some team member names it controllers. Some name it “handler”. . Similarly, some places need special care. For example, the API Requests body needs to be validated. . There are a few ways to enforce architecture: . Strong Linter | Creating Helper Libraries | Architecture Testing | This particular post will focus on Architectural Testing. . What are Architecture Tests? . Architecture tests help enforce rules that are otherwise missed by linters. Linters provide some coding standards but usually aren’t sophisticated enough for the capabilities architecture testing can provide. . For example, if you have a java @Entity and want to ensure all of it has certain javax validation whenever someone creates a new @Entity. . Libraries for Architecture Testing . I found two libraries: . ArchUnit: For Java | TsArch: Typescript version of ArchUnit | ArchUnit . ArchUnit provides Architecture Testing for Java and works well with JUnit. . Example: If you want to ensure all String fields for Request Objects have @Size annotation, you could write it with ArchUnit. . fields() .that() .haveRawType(String.class) .should() .beAnnotatedWith(Size.class) . Since I started using ArchUnit, the quality of code has improved by a huge margin. . Implement Architecture Testing as TDD . With architecture testing, the work of an architect now expands and can live long after the architect is gone from the project since every architectural decision is written as a test. . I try to implement this the same way. . For example, I want all tests to be really fast. I had written an article about it. And one of the ways is that it requires avoiding @DirtiesContext in Spring Boot. And forcing the developer to choose between parallel execution and non-parallel execution. . I can share it with the team and hope everyone follows it. . But we developers have too many things on our plate, and we juggle a lot. And mostly, it’s the code reviewer who’ll asses these decisions. . So, I instead write these are ArchTests. . Also, ArchTests can be thought of as TDD. Before starting, the architect decides how everything should look and grow. . Formatting ArchUnit Tests . I like the method/when/then format. I have a format that makes it easier to write arch unit tests. . classes/methods/fields . that: have | should | . Here are some ideas for arch tests . If something is mocked, its name should start with mock | . More Resources . I have read many resources while trying to learn about ArchUnit. Here are a few: . Using ArchUnit To Enforce Architecture Best Practices | Archunit: Validate the architecture of our projects | TsArch: Typescript version of ArchUnit | .",
            "url": "https://www.ankushchoubey.com/architecture-testing/",
            "relUrl": "/architecture-testing/",
            "date": " • Mar 16, 2022"
        }
        
    
  
    
        ,"post158": {
            "title": "Clean code - Naming convension for design patterns",
            "content": ". 1 . I have been learning design patterns recently. And as a result, implementing them in places that seem fit. . Usually, these patterns are nice. They make code concise and understandable. . This is given that the person reading it knows what the design pattern is. . So to mitigate this problem my current approach is. . To prefix name of class with the design pattern. . For example: . Strategy: &lt;ClassName&gt;Stratergy | Observer: &lt;ClassName&gt;Observer, &lt;ClassName&gt;Listener, &lt;ClassName&gt;Callback | Factory: &lt;ClassName&gt;Factory. (In case of simple factory: {methodName}SimpleFactory) | Decorator: &lt;ClassName&gt;Decorator | Chain of Responsibility: &lt;ClassName&gt;Chain. Method name: {methodName}Handle | You get the point. . Hopefully, this would make it easy for person reading the code to understand how to use it in future. . . If there are more tthat can be done, please mention in the comments below. I’ll be happy to know more approaches. . . Photo by Glen Carrie on Unsplash &#8617; . |",
            "url": "https://www.ankushchoubey.com/naming-design-patterns/",
            "relUrl": "/naming-design-patterns/",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post159": {
            "title": "Speeding Up Spring Boot/JUnit tests",
            "content": ". . Note: For beginners: Tests provide fast feedback to your code and ensure everything works as you intended. Rapid tests help get feedback and ensure your integration and deployment pipelines work faster. There are several ways I recently discovered that increase speed on Spring Boot + JUnit tests substantially. From 8 minutes to 3 minutes. . Some of these are . Use Right Test Slice (Saved 25% running time) | Speeding up @SpringBootTest and avoiding @DirtiesContext (Saved 25% running time) | Run tests in parallel (Saved 37% running time) | . Use Right Test Slice (Saved 25% running time) . Several runners come with Spring Boot. . @SpringBootTest is the most general of them. Primarily this is used in combination with @DirtiesContent, which will restart spring boot after every test class by default which isn’t ideal. . Using @SpringBootTest is Integration Tests. We don’t want every test to use this. . We want to load the minimum spring-boot infrastructure as possible and still ensure accurate tests. There are a few things that can help: . If tests are related to a DB. Use @DataMongoTest or equivalent JPA runner with @Import annotation. | If tests are related to Web/Controller. Use @WebFluxTest or equivalent Spring MVC runner. If you want to use embedded MongoDB with it, use @AutoConfigureDataMongo. Most other systems also have annotations starting with @AutoConfigure{systemName} | Important: If tests require initializing a single bean. Use @ExtendWith(SpringRunner.class) with @Import to specify the bean to initialize. | The best case: Aim for Tests that are purely java based and do not involve spring boot, but it isn’t possible in every scenario. | Speeding up @SpringBootTest and avoiding @DirtiesContext (Saved 25% running time) . @DirtiesContext is an annotation that recreated the Spring Context after each test or each test class. To avoid using @DirtiesContext, ensure all your tests don’t depend on the same data. For this, you can wrap your data creation in a test data factory and ensure the data produced is random. . As previously mentioned, one should avoid using @SpringBootTest, but if you can’t do without it, ensure you use WebEnvironment.MOCK without @DirtiesContext. . @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK) . Try to use it with @Import or @ContextConfiguration to limit the creation of beans. . . Run tests in parallel (Saved 37% running time) . Create a junit-platform.properties file in test/resource/junit-platform.properties and add the following minimum. 1 . junit.jupiter.execution.parallel.enabled = true . Now you can either use one of these, . add the following to every class you want to run parallel. @Execution(CONCURRENT) | add more to junit-platform.properties | junit.jupiter.execution.parallel.mode.default = same_thread|concurrent junit.jupiter.execution.parallel.mode.classes.default = same_thread|concurrent . 1 . Some tests can’t run parallelly, so I prefer manually adding @Execution(CONCURRENT). . I found data tests with @DataMongoTest by asserting over different data. . Another positive side effect of having @Execution(CONCURRENT) is that these tests run first. And since these tests are faster than the SAME_THREAD mode, they lead to instant feedback. . . What are some other ways to speed up JUnit performance? . Parallel Execution - JUnit Documentation &#8617; &#8617;2 . |",
            "url": "https://www.ankushchoubey.com/spring-boot-junit-faster/",
            "relUrl": "/spring-boot-junit-faster/",
            "date": " • Mar 7, 2022"
        }
        
    
  
    
        ,"post160": {
            "title": "My current approach to TDD",
            "content": "This is my current approach to TDD. . For new development: . I have a rough idea of what I am going to implement. This is optional: If I don’t or I am implementing something too big, I make a simple diagram with diagram.net. | I make a class file | I hit Ctrl+Shift+T in IntelliJ to quickly create a corresponding test file. I will using the same keyboard pattern to to quickly switch between test and code while doing TDD. | I go Ctrl+Shift+T into the class and write the name of method and arguments it may return. The actual return value is set to null. | I Ctrl+Shift+T into the test and write the name of method as follows and mention the “WHEN” and “SHOULD” blocks. I don’t know all “WHEN”/”SHOULD” blocks so I’ll write them as time goes. “WHEN” blocks define conditions | “SHOULD” blocks are atomic and assertable. | . | class MainTestClass{ ... @Nested @DisplayName(&quot;upsert method&quot;) class UpsertMethodTests{ @Nested @DisplayName(&quot;WHEN value IS-NOT in DB&quot;) class ValueNotInDBTest{ @Test @DisplayName(&quot;SHOULD insert value&quot;) void shouldInsertValue(){ //empty for now } } @Nested @DisplayName(&quot;WHEN value IS in DB&quot;) class ValueInDBTest{ @Test @DisplayName(&quot;SHOULD replace value&quot;) void shouldReplaceValue(){ //empty for now } } } ... } . After any change after this to code or test, I’ll run the wrote test file. | I start writing the tests to specify conditions in one “SHOULD” block. Each test is as accurate as possible and any needed behaviour is either asserted or verified. | I Ctrl+Shift+T into class and implement code to pass that particular should. | The process of writing “WHEN”“SHOULD” blocks, writing the test, CTRL+SHIFT+T and coding in class, running the test again is repeated. | For extending existing functionality: . I go the the implementation class and understand it. | I Ctrl+Shift+T/switch to the test. | I add or a new “WHEN” or “SHOULD” or “x method” class | And then repeat the cycle again. | . Relevant Further Reading: . TDD | Writing Clean and Fast Unit Tests | .",
            "url": "https://www.ankushchoubey.com/current-tdd-approach/",
            "relUrl": "/current-tdd-approach/",
            "date": " • Mar 4, 2022"
        }
        
    
  
    
        ,"post161": {
            "title": "Strategies on Truth",
            "content": "1 . There are family of algorithms/strategy to seek truth. Each one applies to specific cases . These are some . Telling truth to yourself completely is most important and easiest . | If you aren’t specific. Aka you are wage. Then you aren’t telling the truth . | If you are with other people and you are not letting them talk, probability is high that you’ll miss the truth . | If you are saying something memorized, or talking too fast, probability is high you’ll miss the truth . | While understanding something, only if you can explain it deeply. Then you know it. -&gt; Truth . | Best way to do it is to actually teach . Tests/Questions asked by other or ask by yourself. Unhide thefog. Let’s you get specific. Truth is always specific. | Though counter is specific isn’t always truth but it is still the best guess . If you seek truth, no matter what you are doing or how bad it seems, you’ll be good in the long term. . | Problem with truth is acceptance. So point 1 makes it easier. . | Like all core values, you have to realize truth completely to accept and integrate it. . | On one level, all of truth is just effective communication/speech . | Expression of Intend is more important than expession of facts. Expression of intend isn’t always words. . Truths are true events or facts. | So you sre going to do something is not the truth. It’s a possibility. We mistake this and believe we done it. . If you have done something, it’s a truth. . This is along the lines of why sharing what we are going to do isn’t complete truth yet. . Photo by Bruno van der Kraan on Unsplash &#8617; . |",
            "url": "https://www.ankushchoubey.com/truth-stratergies/",
            "relUrl": "/truth-stratergies/",
            "date": " • Feb 24, 2022"
        }
        
    
  
    
        ,"post162": {
            "title": "Strategies on Team Work",
            "content": ". Treat others the way you want to be treated. Treat yourself the way you want to be treated. . | Everyone’s problems/expectations are similar on one level: . | everyones want to share and want to be really listened to their point of view. | Everyone want to feel safe and safe enough to trust. | Everyone wants to he respected: respected of boundaries (hopefully healthy ones). | Everyone want people to support them even if it’s little. | . Everyone has ego. | If you criticize the person, you poke the ego. | If you critize an approach, then probability that their ego will be poked in a healthy way and it will be on your side or atleast open to discussion. | . This is to say you don’t want somone to win or lose. You want Win-Win. Win-Win is a win for all parties to a certain degree. . To build trust, you have to trust and try opening up. But open up on solid ground. You don’t want to be naïve because opening up increases probability of being hurt but also it won’t reciprocate. You want to build trust “together”, not being trust one sided. | Everything in “Team Work” is about doing things “together”. . This one is recent for me: Let everyone (others and yourself) choose and solve their own local problems. | They have right to choose what they want to focus on. You may suggest or lead by example. But forcing you opinions rebounds. . Plus forcing opinions assumes that one really knows “life” which probably no one does fully. . Having mutual respect leads to better understanding and less drama. |",
            "url": "https://www.ankushchoubey.com/team-work/",
            "relUrl": "/team-work/",
            "date": " • Feb 24, 2022"
        }
        
    
  
    
        ,"post163": {
            "title": "Ownership",
            "content": "IDENTITY: Responsible . . Ownership . What does taking personal responsibility mean? . Taking personal responsibility for ourselves means knowing that whatever happens to us in our responsibility. . Why we should take personal responsibility? . If something is good or something is bad, we have a lot more control over the situation that we realise. This can be a strategy we need to adopt, something that we have been doing that needs to be changes or something that we had been escaping that we should do. . We don’t control what happens, we control how we respond. Often things we are faced with may not be our faults but it’s our responsibility to pick it up voluntarily. . The more voluntary responsibility we are able to pick up, the more powerful and in control we would feel even if some area of life has minor temporary set backs. . Also think of this in terms of relationships, stronger individuals make stronger families. Stronger families make stronger world. Taking on personal responsibility is ultimate decentralized command. Every individual is stronger then all of them can grow together forward. . So, at every moment of the day, everything that happens to you, live as though you are the only one responsible to deal with it. Cuz for the most part you really are. . What happens when we don’t pick up responsibility? . Not picking up responsibility is neither good to us and neither good to others. It’s wasted potential. It’s all the things that we could have done, all the good we could have accomplished that could make everyone lives better, but we instead choose the alternative. . It’s better to try and fail that to not try at all. 1&gt; 0; . An experiment we can do to get started is: Take on and complete as many responsibilities/opportunities thrown towards you in a week and see what happens. . Role Models: Peter Parker (Andrew Garfield), Jordan Peterson . For: Courage is proper action despite not being fully ready. If you are given an opportunity to be courageous, you are already prepared. . Illustration by Justin Gerard [^5] . Responsibility and other factors . Why you shouldn’t leave things undone? : Because when problems come, these are the vulnerabilities that become a problem. . You have to take your own respo: so that you won’t blame anyone for anything. If things go good you know it was your choice. If things go bad, you know it was your choice awell. . Nuances . Strategies . Take full responsibility for yourself. . | Taking responsibility is a choice you make in every moment. . | You aren’t obligated to take responsibility for others. But you should guide them or at least be so responsible that you lead by exa mple. . | If someone gives you responsibility, take it. . | specific examples: if your boss,family,partner by themselves are giving you respo. It means they think you are ready for it or ready for growth. take it and fullfil it to it’s best . Important: Start with local problems that repeat. Don’t try to solve something that isn’t even a problem of high ROI. |",
            "url": "https://www.ankushchoubey.com/responsibility-stratergies/",
            "relUrl": "/responsibility-stratergies/",
            "date": " • Feb 24, 2022"
        }
        
    
  
    
        ,"post164": {
            "title": "Elements of Good REST API Design",
            "content": "Here are somethings about API design that I recently learn’t. . An HTTP Rest endpoint is divided into following. . API name and Method | Request | Resposne | . Naming . A good API design has good naming. . You want to always have API that refer t some “items”/”entity” nouns . so this is better . /ducks → get all ducks . /ducks/{id} → get duck by duck id . rather than . /getAllDucks . /getDuckById . Any good API has upper format rather than lower. . Always have plural names . Request . Request Methods . Now that name is sorted, how to we call these, let’s say we want to delete duck, in the bad way we could have had an API like /deleteDuckById . But even better is to use HTTP Methods. HTTP Methods provide intend to your API and reduce the number of API endpoints to remember at least from point of view of consumer. . to read it you read it something like this, . Intend → API Name . GET → /ducks . GET → /ducks/{id} . DELETE → /ducks/{id} . POST → /ducks . Ideally, POST isn’t supposed to be bulk insert. . Request Headers . Some common onces are . content-length . Response . Response Status Code . There are many standard response codes available. . 200 → OK . 201 → Created (Supposed to not have response body) . Response Body: . HAL Format . Response Headers . There are standard respose headers available. . Location: Location of newly created resources. . Customizing the protocol . HTTP does not reenforce a lot of rules. Even though it it recommended ways are set, . I though Google would follow protocol to the bone but they too don’t. Looking at google drive through Chrome’s network tab, I found they have their own way of doing things. .",
            "url": "https://www.ankushchoubey.com/good-rest-api-design/",
            "relUrl": "/good-rest-api-design/",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post165": {
            "title": "Thoughts on Reading Documentation",
            "content": ". Photo by Jilbert Ebrahimi on Unsplash . Reading documentation is the best way to learn a particular technology. . Well-written documentation is similar to a book and reading it has a similar effect. . Documentation presents the original developer’s philosophy behind the technology. . The depth of knowledge you gain with documentation can potentially remove hundred of hours of unnecessary Stackoverflow searches. . It’s a difference between knowing something syntactically and knowing the philosophy behind a technology. . Most documentation is about 2-5 hours of reading Max. . I find having a highlighter extension in Chrome to be extremely useful. . Apart from the usual, the appendix sections contain many gems like FAQs and standard references, making things easier. . If you aren’t able to read the complete documentation, glance through the index. If the documentation is good, you’ll find something in the index. . In the long run, it takes less time to read documentation than to go through hours of stack overflow. .",
            "url": "https://www.ankushchoubey.com/reading-documentation/",
            "relUrl": "/reading-documentation/",
            "date": " • Feb 16, 2022"
        }
        
    
  
    
        ,"post166": {
            "title": "Articulate Fully",
            "content": "Being able to articulate something fully is the whole game of a knowing if you have a clear mind or not. . Often you may find that by talking to someone, you are able to find solution to your own problems by yourself. This is because you Before you weren’t able to articulate completely what you’re thinking. By forcing yourself to articulate you make yourself more clear. . So, if you are stuck at something, be it anything of a kind: A problem you are trying to solve. . Emotional | Physical | Abstract | . I believe anything than bother’s you should be fully articulated. . All you need to do is articulate it fully and hopefully as easy as possible. Even forced articulation is better than no articulation. . There are multiple ways one can force articulation some of them are mentioned below. . Explain at five levels . One of the practices one can person is explain it to pretend or really explain 5 people. . A child | A teenager | A collage kid | A adult | A expert | . Contemplate . while contemplating you want to fix certain variables about your problem, and then explain the rest and try to fix those too. . I find the best way to contemplate is to perform at formal sitting meditation with eyes closed. . Talk/Explain to someone else . Close your eyes . Close your eyes to think better. . Slow/Calm down . Focus on Intend. Then say what you want. . Don’t over focus on your words. .",
            "url": "https://www.ankushchoubey.com/articulate/",
            "relUrl": "/articulate/",
            "date": " • Jan 29, 2022"
        }
        
    
  
    
        ,"post167": {
            "title": "Personal Budgeting",
            "content": "Many times discussing governments spending, it is discussed how while a budget was allocated, the government didn’t spend as much or they spent more. . For example, the Education budget was set at 20 billion but only 5 billion was spent. Or they overspent which ate up other areas. . Usually, these discussions assume that spending the complete budget allocated is best. . Underspending: Not doing enough | Overspending: Doing too much and eating into other areas. | . The same can be applied to resources of one’s #life. . . I believe these are the most important resources a person spends on. . Time Budget | Attention Budget | Money Budget | . So, given the premise above, the goal is to have a specific time, attention, and money budget for each important area of life and major activity. It isn’t ideal to set budgets for everything (else you won’t have an attention budget). . Time (in hours) and money (in currency) are easily quantifiable. Attention isn’t. . For attention, the game becomes imaginary. . There are a few ways to imagine this: . Count the number of decisions in a day: Imagine you have 100 decision points in a day. The more number decisions you take, the probability of you making a bad decision increases. | . | Number of context switching Multitasking is the worst | . |",
            "url": "https://www.ankushchoubey.com/personal-budgeting/",
            "relUrl": "/personal-budgeting/",
            "date": " • Jan 28, 2022"
        }
        
    
  
    
        ,"post168": {
            "title": "Time Assets and Liabilities",
            "content": "Time is the most precious finite resource we have. We should make good use of it. If we do, we make time our ally. . Like any resource, one can think of time in numeric terms. This allows us to categorize activities as assets that add back time or liabilities, which take time away. Our goal then is to create more time-assets with high time-ROI. . 80% of our activities during a given day are not new. They are merely routines. . So essentially, carefully observing, choosing, and forming our habits would lead to more time-assets and less time-liabilities. Usually, time-assets and time-liabilities are opposites of each other. . Most time-liabilities snap our attention and lead us to care about wrong things. Therefore, time-assets help us course correct. Therefore, time management is closely linked to attention management. . Most time assets are generatlly slower and more stuctured which is why they are usually avoided. Time liabilities on the other hand feel easy to get started with so they are done more. So, one needs to make it easy to get started on time-assets and harder to get started on time-liabilities. . Some of the most impactful time-assets and liabilities are: . Time-Assets Time Liabilities . **Planning**: Even a little bit of planning, something like 10 minutes alone creating a written plan could save hours, days, or even years. Planning allows course correction. Ideally, don’t start working without a plan. | **Rushing**: Though it may seem you are making progress. The probability is higher that you are moving in the wrong direction. It’s better to fix a plan | . **Meditation**: | **Instagram** | . **5 Min Rule**: Don’t allow yourself to be down or procrastinate for more than 5 minutes. During such time ask yourself: Is this worth the return on my time?Remember you can’t live forever. | Forever Rule: **The opposite of 5 min rule**: Letting fear/laziness/indecision stop you. | . **WIP Limit**: Focus on a few things and complete them. If your WIP limit is exceeded, don’t add work on newer tasks unless older ones are complete. | **Trying to change people**: You cannot change people. You can suggest but cannot force. Leading by example. It’s the best option you have. | . **Pomodoro**: Working in Pomodoros keeps you focused. If you can’t work with Pomodoro, you haven’t planned carefully enough.To have Pomodoro sessions.1. Create a distraction-free zone.2. Plan your tasks. Ideally, pick a deliverable.3. Put on headphones and play instrumental/[focus music](https://www.youtube.com/playlist?list=PLx65qkgCWNJIs3FPaj8JZhduXSpQ_ZfvL).4. Work on the task using [a Pomodoro app](https://pomofocus.io/).5. Stick to break schedule religiously. Get away from the room during the break but no internet. One Pomodoro is better than zero Pomodoro. |   | . During normal decision-making, one can calculate the ROI of their actions: think about how much time you’ll invest and how much return you’ll get back. This calculation needs to be a specific number in terms of both hours and percentage even if it’s an estimate. .",
            "url": "https://www.ankushchoubey.com/time-assets-and-liabilities/",
            "relUrl": "/time-assets-and-liabilities/",
            "date": " • Jan 26, 2022"
        }
        
    
  
    
        ,"post169": {
            "title": "Maintaining Documentation",
            "content": "We ideally want to write code so well that someone reading the code can understand it in one go. . But the ideal isn’t always practical in the real world because people come from different backgrounds and experiences. . So, you want to make sure your documentation is as perfect as possible given the project scope. . If the API/Library is going to be used by the public, it needs to be perfect. . . . The biggest problem is maintaining up-to-date documentation. These are a few things I have learned recently about this: . . 1. The best way to document is to automate . Tools like Swagger for APIs and storybook from UI components make it very easy to auto-document code in most cases. . 2. Encourage use of your own documentation . Using your own documentation would help you find and fix bugs in it. . For example, You could encourage your team to use Swagger UI instead of Post Man for testing APIs. . 3. For within the team: Have a shared wiki . Wiki helps keep everyone in sync and like the previous point, encourages updations wherever necessary. . 4. Tests are also documentation of sorts but for the internal team only. . Tests capture what the code would do. So for a new dev on a team, going and reading through tests can give him an idea of what the code does. .",
            "url": "https://www.ankushchoubey.com/documentation/",
            "relUrl": "/documentation/",
            "date": " • Jan 25, 2022"
        }
        
    
  
    
        ,"post170": {
            "title": "Using StackOverflow as challenge log",
            "content": ". I currently use stackoverflow like a repository of doubts and questions. . If I am faced with a problem that I could not find a obvious solution to for a few days, I’ll ask a question of StackOverflow. . If I get the solution myself, I’ll add an answer to my own question. . This way, I’ll have a repository of previously solved technical challenges. .",
            "url": "https://www.ankushchoubey.com/stackoverflow/",
            "relUrl": "/stackoverflow/",
            "date": " • Jan 15, 2022"
        }
        
    
  
    
        ,"post171": {
            "title": "Code Reviews and Pair Programming",
            "content": "Code reviews allow having a much high quality of code. And pair programming is the best way to do code reviews. . Typically, if less code is being reviewed then more bugs are found. If more code is reviewed, reviewer gets lazy. . 10 lines of code: 10 isues 500 lines of code: no issues “looks fine” . So one should air for small and early code review -&gt; continuos code reviews- is this pair programming? . I would say yes. . Nowadays there are also Pair Programming AI like Kite.ai and GitHub Copilot that may be interesting to use. . Some other benigits of pair programming are, . You get to learn about new techniques like how someone uses their IDE | You get to learn about the person/team too. | You get to learn about the code base faster if you are pairing up with someone who has experience with it. | . While pair programming is most effective in person, the best way I could find in an online setting is by using remote-destop software that code reviews can interact directly with the code. Screenshare’s aren’t as effective. . partner will show you more efficient ways of doing things including how to use ide. . It may happen that pairing up isn’t ideal and one has to review code later, in that case github/gitlab do provide option to comment on a piece of code. The programmer may submit the code to reviewer for review. . Template . I have been templatizing common communication phrases to use them like a checklist to communicate effectively. . Here’s one for code review . If you don’t understand something, ask for clarification. . | If you want to suggest/enforce a rule, says. . | Tag the person Write down what you want to suggest or happen. If you don&#39;t understand something, ask clarifying questions. Write down why you want it. Reasons to support it Provide references and help . Sources: . Pair Programming at Atlassian with Lucy Bain | .",
            "url": "https://www.ankushchoubey.com/code-reviews/",
            "relUrl": "/code-reviews/",
            "date": " • Jan 7, 2022"
        }
        
    
  
    
        ,"post172": {
            "title": "Making TDD and Testing easier",
            "content": ". Software engineering isn’t only about code. It’s engineering . TDD need not be a big deal. It can seem cubersome but there are mindsets and tools that can make transition smoother. . TDD is shown to reduce defectsby a large margin. Tests will save you time in the long run. . Question Doing TDD is faster than traditional development? . | True . | Correct! This might seem counter intuitive at first. . | . | False . | Over a long time scale and after the initial learning curve . | . You have successfully completed this question! Check Answer Try Again Why TDD? . By writing your tests first, you are defining expections you have with your code early on. This leads to cleaner code. . The opposite is you write code and then you try to create tests. It’s hard to decide what to test when you are writing tests later. If you write tests later, you do it for what is working. . Both tests and code written with TDD is cleaner and precise. . TDD leads to extremely fast feedback. . The Three Laws of TDD . You are not allowed to write any production code unless it is to make a failing unit test pass. | You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures. | You are not allowed to write any more production code than is sufficient to pass the one failing unit test. | How to TDD? . Assume the test will work properly, what is the minimum test? Write that test. | Fix compilation errors if any. 1 | Write minimum code required to pass the test. | Run all the tests | Iterate | I have written a detailed blogpost on how I do TDD. . Making TDD easier . Usually TDD can be cumbersome because: . Testing is extra code | You have to switch between current code and tests | you have to rerun tests | No one does it | Mitigrations . 1. TDD is a todo list of feature to do . By writing test first, you get clear on what you want to implement. This leads to better design. . Also, initially it’s hard to think about what to do. All tests essentially fix the inputs/external conditions to the method and verify either the output or internal state change caused by the method. . method/when/should can also be helpful here. . TDD only that much functionality and nothing more. Only test what’s within the class. not outside it. . Also, when deciding to learn a piece of code, read both code and the tests. . 2. Switch between testing and code easily . In intellij press Ctrl + Shift + T for vs code : https://marketplace.visualstudio.com/items?itemName=Acino.jump-source . 3. Rerun tests automatically . On local: have tests run automatically after each save . Given when tehn Search for libraries that make easier to test . 4. No one does it . Yeah. It takes times to learn. TDD/any development practice is easier when whole company is aiming at it or enforcing it. . More tips . 1. Don’t start the application. Verify everything by writing tests. . This works for test after code too. But specially works for TDD. . Instead of verifying by starting the application then going to browser or database, verify by writing and running the test. . Starting the application and testing is usually a longer process than writing a test. Plus, their is a compounding time saving when rerunning the test instead of manual verification. . More Resources: . The Practical Testing Book . Anadi Misra &#8617; . |",
            "url": "https://www.ankushchoubey.com/tdd/",
            "relUrl": "/tdd/",
            "date": " • Dec 24, 2021"
        }
        
    
  
    
        ,"post173": {
            "title": "Web Development Tip - Reverse Engineer by looking at DOM",
            "content": "This is probably the most simple web development tip. I discovered this while trying to custom build a PDF annotation component. . I looked at Box.com and it’s DOM through Chrome’s developer tool. . That gave me a idea of how it might have been done. . That allowed to reverse engineer and build the annotation feature which worked when zooming in, out and adding new annotations. .",
            "url": "https://www.ankushchoubey.com/look-at-dom/",
            "relUrl": "/look-at-dom/",
            "date": " • Dec 22, 2021"
        }
        
    
  
    
        ,"post174": {
            "title": "Angular and React Comparison",
            "content": ". Angular and React though they are competitors aren’t in a completely fair league. This is because one is a full-fledged framework and one is not. It may be better to compare Angular with a React framework like Next.js. . There are things I like about both. . Language . Angular comes with typescript by default. Typescript is much more superior to JS. React can be used with typescript too but it’s a developer’s choice. . React is easy to get started . Especially with functional components, getting started with react is too easy. . React has too many little things to take care of. . Strength can be a weakness or one could say React isn’t a full framework. . React has too much to learn. And every project is essentially different. . Angular comes with preferred ways of doing things which I like more than base React. Angular has everything important built-in. So you’ll find every Angular project uses the same set of libraries for common tasks like rest call (HttpClient). There is less to learn and remember. . You essentially want to reduce knowing a lot of things so that you can focus on getting stuff done. . Code Cleanliness . Assuming React is used with Typescript, functional react with hooks is a much better way of creating components than class-based React and Angular. . Plus I like JSX (React) than HTML templating(Angular), it’s concise and there is less to remember. HTML templating in angular requires remembering an additional set of code (ngFor, ngIf, etc). In JSX, it’s the same language used while creating components. . The code structure is much better in angular projects. . Every angular project is structured similarly. . By default, CSS management is also better in angular. Every component has its own CSS. Parent components can have the same CSS namings and it would not affect child components unless specified (:host ::ng-deep). . React can also do this by using css modules. .",
            "url": "https://www.ankushchoubey.com/angular-react-comparison/",
            "relUrl": "/angular-react-comparison/",
            "date": " • Dec 4, 2021"
        }
        
    
  
    
        ,"post175": {
            "title": "My Core Values",
            "content": "In a previous blog post, I tried to explain why defining your core values is essential. These are some of my core values designed around my strengths and flaws. I have modified these multiple times. . I want things to be as “sorted” in the long term as possible without being super involved. I do not compromise on my values. They are my best bet. In this post, you’ll find some ways to have things sorted. . . . Authenticity: Being okay with not being perfect . To know that you’ll probably make some mistakes. But it’s gonna be okay. . Authenticity allows for confidence. | Authenticity allows for not having too many threads in your mind. | Authenticity allows you to accept who you truly are. And to accept who someone else truly is without putting filters. | . There are many aspects to authenticity; . knowing who you truly are: self-awareness | acting in way that is truly you | This doesn’t mean you don’t change. Authenticity is an acceptance before the change and being able to change for yourself. . Therefore, it supports accepting and adapting to your changes. . Eg: You don’t have to be the same person you were when you were 5. . It’s a level of indescribable self-love. To truly care about oneself. It’s saying to yourself that you are imp to yourself. And worth taking care of. . Authenticity isn’t arrogance. It isn’t meant to put someone down. Other values, including Team work do apply and are very important. But authenticity is a comfort in your own skin. . For: . Phrases like: I do it for myself. | This isn’t everything. But things like dressing better, exercising, taking care of yourself is what you must do for yourself | . nuance . Don’t talk about yourself badly. Specially when you havent done anything wrong. We are sometimes too critical of our past selves when we don’t remember the exact incidents. . Responsible for self: Full accountability for myself . IDENTITY: Responsible . What does taking personal responsibility mean? . Taking personal responsibility for ourselves means knowing that whatever happens to us in our responsibility. . Why we should take personal responsibility? . If something is good or something is bad, we have a lot more control over the situation that we realise. This can be a strategy we need to adopt, something that we have been doing that needs to be changes or something that we had been escaping that we should do. . We don’t control what happens, we control how we respond. Often things we are faced with may not be our faults but it’s our responsibility to pick it up voluntarily. . The more voluntary responsibility we are able to pick up, the more powerful and in control we would feel even if some area of life has minor temporary set backs. . Also think of this in terms of relationships, stronger individuals make stronger families. Stronger families make stronger world. Taking on personal responsibility is ultimate decentralized command. Every individual is stronger then all of them can grow together forward. . So, at every moment of the day, everything that happens to you, live as though you are the only one responsible to deal with it. Cuz for the most part you really are. . What happens when we don’t pick up responsibility? . Not picking up responsibility is neither good to us and neither good to others. It’s wasted potential. It’s all the things that we could have done, all the good we could have accomplished that could make everyone lives better, but we instead choose the alternative. . It’s better to try and fail that to not try at all. 1&gt; 0; . An experiment we can do to get started is: Take on and complete as many responsibilities/opportunities thrown towards you in a week and see what happens. . Role Models: Peter Parker (Andrew Garfield), Jordan Peterson . For: Courage is proper action despite not being fully ready. If you are given an opportunity to be courageous, you are already prepared. . Illustration by Justin Gerard 1 . Truth: Unhide the fog by becoming truth seeking missile . IDENTITY: Honest person, Truthful person . Everything that’s best happens in truth. If it isn’t truth, then it isn’t the best. . If you don’t know what to do, tell the truth. . Lying/Not telling the truth is the quickest way to hell. You base your decisions on what you perceive reality to be. . If your estimate of the world is wrong, you’ll make bad decisions. . The only way is to let go of the outcome aka you are not going to use your speech to get what you want, (cuz you actually don’t know what you want) rather you’ll tell the truth and assume whatever happens is the best thing regardless of how it looks. 2 . While dealing with people, you have to ask people multiple times to make sure they tell you everything because often humans tell white lies to not hurt your feelings. . Role Models: Naval Ravikant, Sam Harris, Jordan Peterson, Kapil Gupta, Mark Manson . Books: Lying by Sam Harris . FOR: . Authenticity: Being the same person when no one is watching. | Integrity: the quality of being honest and having strong moral principles. Being whole and undivided. | Verbalize Thoughts | . AGAINST: . Lieing | Deception | Hiding truth for short term gain aka to get what you want | . Calmer: Breathe . IDENTITY: Peaceful person, Calm person . Happiness is a single player game. It is a skill that you develop and a choice that you make. . All of humanity’s problems stem from man’s inability to sit quietly in a room alone. . Not wanting something is as good as having it. . The Backwards Law: Pursuing positive experience is a negative experience and accepting negative experience itself is a positive experience. . Being unhappy is inefficient. . Happiness/Peace is a skill that you develop and a choice that you make 3. You can choose to live a certain way that will lead to peace. . To have peace, your brain should be in controll in every situation. You have to be mentally tough. . You need to be peaceful if you want things to be good long term. Develop detachment (not wanting), be less judgemental and optimism. Aiming for peace requires a lot of recognizing, rethinking and flipping/unlearing almost everything. . If you don’t believe that you can achieve ultimate peace (Nirwana), you’ll have a hard time finding it. . Role Models: Naval Ravikant, Sam Harris, Kapil Gupta, Sadhguru . Books: Subtle at of not giving a fuck by Mark Manson . FOR: . Internal Locus of Control | Optimism | Rationality: allows for a next level thinking where decisions can be made from a birds 🦅 eye view and while knowing the long term effects. | . Systems Thinking: Become an effortness executioner - ‘Everthing is undercontrol’ . IDENTITY: Organized, Systems Thinker . You do not rise to the level of your goals. You fall to the level of your systems. . Rome wasn’t built in a day . Direction and long-term consistency are better than shortcuts. . Aims are good for setting up initial direction. But systems/processes are how you work towards them and beyond them. . Systems allow you to free up your mental RAM. Systems break problems down. They assure that as long as the systems are working right, the direction is right. . Systems can include by are not limited to: trained habits, routines, frameworks, automation, etc. . Role Models: Elon Musk, Jordan Peterson, James Clear, Mark Manson, Ramit Sethi, Tim Ferriss, Naval Ravikant, Josh Kaufman . Books: Atomic Habits by James Clear . FOR: . Do-Something | . Focus: of an eagle . IDENTITY: Focused person, Indistractable . If more information was the answer, we’d all be billionaires with perfect abs . If you don’t have attention, you don’t have time. . Less is more . Pay stupid games. Win stupid prices. . You are what you feed yourself. Inputs matter because not only do they encourage certain behaviors, but they impact your everyday experience. . Over the long term, you want “inputs” in your life to push yourself in the desired direction. . Some things to consider: . Information you consume. | People you interact with regularly. | Where and how you live. (#cleanYourRoom) | . Role Models: Ryan Holiday . Books: Subtle at of not giving a fuck by Mark Manson, Stillness by Ryan Holiday . FOR: . Books | Truthful people | . AGAINST: . Social Media | Addictions | . Productive: Recognize the limited gift of time . IDENTITY: Productive . It’s not that we have a short time to live but we waste a lot of it . Being busy is a form of laziness. . We have a finite life. Though it is long enough to get important things done. . Your habits are reenforced. If you waste time regularly, you’ll continue to waste time. . Let’s suppose your time is worth minimum wage. Assume that to be 100Rs per hour. Let’s suppose you waste 6 hours a day. That’s 600Rs per day. 1,80,000 lakh rs per month. 21,60,000 rs per year. Over 10 years it’s 2 crore rs. . Plus this calculation 🧮 excludes compounding. Time spent early will compound. . Life is short. Speed of implementation matters a lot. Being impatient can be a good thing. . Be impatient with yourself and a bit patient with others. . Role Models: Elon Musk, Jordan Peterson, Ryan Holiday, Cal Newport . FOR: . Planning every hour of the day | Reducing context switching by Monotasking and Batch processing. | . AGAINST: . Lying in bed all day | Social Approval | Status Game | . Team Work: Node in a network . IDENTITY: Caring, Helpful . Treat others like you want to be treated . Seek to understand. Then to be understood. . Humans are a social animal. We are node in a network2. The way we act and interact in the network determines the life of everyone. . We stand on the shoulders of all those who came before us. And we are building a foundation for all those who will come after. . Plus who are we doing all this “core-values” for if we can’t even help and be there people around us. One cannot do it alone and it is worthless doing it alone. . There are multiple levels of “team work” and each requires a different approach. . Everyone else | Close Friends | Family and Partner | . This also requires a level of self awareness and knowing how your interaction/quality of relationships can be improved. . One can be strict with himself but has to be patient with others. And remember that you are probably not right so listen to people carefully -&gt; Openness. . Role Models: Avengers, Straw Hat Crew (One Piece), Jura Tempest Federation (That Time I Got Reincarnated as a Slime), Some family related parts of Peaky Blinders . FOR: . Trust | Care | Seek to understand then to be understood | Think Win-Win | . AGAINST: . Drama Triangle | People Pleasing / Trying to impress | Betrayal | . Playfulness: Antidote to boredom . What is playfulness? . Being playful means not being serious. . Being playful means interacting with the world softly and experimenting like it’s a play game. . Being playful is the antidote to the seriousness caused by all the other core values. . Why playfulness is needed? Isn’t peace enough? . Playfulness is not only good because it’s fun but it’s necessary. Life is short therefore it’s imp to have your cake and eat it too. . Playfulness increase output. Provides a level of comfort when dealing with chaos. A smile. A fun adventure no matter how hard things are. . Being playful gives meaning to other values: . It makes Team become friends and therefore depends on bonds. | It makes the search for truth a game and telling truth in a nice way a game too. Plus most truths are hilarious. | It makes Inputs and Systems fun experiments. Leading to higher output | It’s just more fun to live playfully and interact with the world and make sense of it. . For: . Humor | Games | Being willing to break the rules | . Against: . Being too serious | . . I am trying make these values my second nature by forming habits. The ideal goal is identity level change 4 but it will take time which is why I haven’t published my post on it. . Illustration by Justin Gerald &#8617; . | Jordan B Peterson &#8617; &#8617;2 . | Naval Ravikant &#8617; . | Atomic Habits &#8617; . |",
            "url": "https://www.ankushchoubey.com/my-core-values/",
            "relUrl": "/my-core-values/",
            "date": " • Nov 25, 2021"
        }
        
    
  
    
        ,"post176": {
            "title": "Typescript",
            "content": ". Typescript is probably my favorite programming language. Switching from typescript to javascript should save around 60% of a developers time. . There are many reasons for it which I’ll try to present in this post. . Typescript . Typescript is a super set of Javascript which means everything which is available in Javascript is automatically available in Typescript. . Typescript only adds a few extra features which are convenient for developers. . Typechecks . Probably the main reason to use typescript is this. . Having typechecks remove unneccesary errors. Types makes code more predictable. . Dynamically typed programming language have bad IDE support. . VS Code has fantastic support for Typescript with typeaheads which are and will probably always be missing with Javascript. . Everything is configurable. . Every typescript project has a “tsconfig.json” file which can be used to control everything typescript can do. . These include but are not limited to: . Where to put the final output | Ability to choose how strict the language is aka enable/disable following null checks | any assignments | etc | . | Shortcut paths | . Typescript compiles to JS . You don’t miss anything with typescript because in the end it compiles down to javascript. . You can choose which version of javascript to compile into from tsconfig.json file. . Typescript works fantastically with many libraries are framework. . Both major web libraries (React and Angular) support typescript. . How to transition from js to ts. . When you have a large application with lots of connected pieces, it makes sense to have connections between them standard. . So that as the application grows, the connections stay strong. And if parameters in a connection changes, it can be detected and changed at all places that use the connection. . This is missing in Dynamically typed languages like Javascript. But is available with a static checker like typescript. . . Typescript does only a few things: . Applies types and checks them | Checks code quality to a level desired | Compiles to JS version of your choice. |",
            "url": "https://www.ankushchoubey.com/typescript",
            "relUrl": "/typescript",
            "date": " • Nov 15, 2021"
        }
        
    
  
    
        ,"post177": {
            "title": "Keep most of your configuration within application not Jenkins",
            "content": "If you have a separate DevOps teams, Jenkins will usually be configured by them. . Developer will have an easier life if they have as less dependency on external team as possible. . Sometimes, Jenkinsfile includes every minor detail. For example: . In a node project, Jenkinsfile could include things like running an application in production mode along with certain parameters. | . This can be okay if the paramaters are configured via Jenkins UI. But if same configuration is going to be used, it is easier to maintain and adapt by keeping them inside application and using Jenkins to only trigger script within application. . In node applications, you can use following to configure default behaviors. . scripts in package.json | .npmrc file for npm | tsconfig.json for Typescript | . In Maven projects, you can have operations such as: . Ignoring File during build | Coping certain files | To disable test cases for certain builds etc. | .",
            "url": "https://www.ankushchoubey.com/configuration-within-application/",
            "relUrl": "/configuration-within-application/",
            "date": " • Sep 27, 2021"
        }
        
    
  
    
        ,"post178": {
            "title": "Learning Strategies For Development",
            "content": "These are some strategies I use to learn. These are influenced by Tim Ferriss’s 4 Hour Chef, which I read in 2016. . Choose material optimized for learning . Material beats Method 1 . The best learning materials are the ones that lead you to certain core truths, philosophies, or understandings that let to adapt to any situation. They aren’t optimized for facts. . I pick resources that are: . Step by step | Have a clear road to implementation | Interactive | For Music: . I tried learning Piano by reading a book, but it was boring and vague. So I purchased SimplyPiano. | Similarly, for the guitar, I got SimplyGuitar. | . For Programming Topics, . I prefer platforms that allow trying out code online without any local installation. Codecademy is a good one. I used it for many things. | . | . Increase the number of iterations . Increasing iterations doesn’t mean more time. . For example: If you want to make good Kanban boards, make many Kanban boards and use it regularly in your life . Similarly, use the knowledge you have learnt. . Role of Books . I don’t use books to learn everything. But certain concepts are such that they require an entire book. . I don’t buy a book instantly. I wait a few days to see if I need it. . Sometimes YouTube videos are enough to cure curiosity or find the answer. . Books are great for deep topics and have a lot of details in them. . Learn in chunks . I cannot learn something at one. If I try to do it I will have to recollection of the concepts. So I prefer doing a little every day or regularly. . This also forces me to recall what I had previously learned. . So for, . Piano and Guitar: 10 Min a Day | Technical Topics: Max 2 Pomodoros (25 min timers twice with 5-10 min break in middle) | Books: 10-20 minutes max | . Clear Doubts along the way . If you are stuck, search for the solution. . Usually learning from different sources helps. . Have Cheat Sheets . Cheat sheets allow recalling what you have learned instantly! . Often googling cheatsheets is sufficient. . Put into Practice Fast . Deployable. . Record yourself. . Talk to other people . Using flash cards . Flashcards can be helpful addition to remembering more. In many things, there is a need to remember more. . Here are some things to keep in mind when using flashcards. . Use 80/20 rule and focus on the few concepts worth memorizing. You want number of cards to be at a minimum. | Assume each card is going to take 10 seconds per revision. Multiple by number of cards you create to get how much time you’ll remember. | Know all the concepts first and organize them. Maybe use a highlighter, pen to mark them. | If a flashcard is too big to remember, then break it down. | Write in memorable way, good questions and for answers use diagrams, accronyms or some patterns. | Digital Flashcards have advantage that you can modify. But maybe having less number of flashcard overall is better. | You may expect 1-2 hours of flashcard study a week. If it’s a competitive exam, then per day. . Flashcards are one part. Often discussion with others is a better way to internalize. . 4 Hour Chef &#8617; . |",
            "url": "https://www.ankushchoubey.com/learning-strategy/",
            "relUrl": "/learning-strategy/",
            "date": " • Sep 26, 2021"
        }
        
    
  
    
        ,"post179": {
            "title": "Choosing better values",
            "content": ". I have been developing this for a few months 1. Later I found out this is a pretty common thing. My recent learnings have come from the Subtle art of Not Giving A Fuck. . What are values? . Values are often hidden, sometimes unknown, and a highly personal frame with which people operate. Our values define who we are and what choices we’ll make in different situations. . Values apply to everything we do. Be it known or unknown scenarios. . If you are faced with a problem that you have already solved, then you’ll rely on your experience or skill for it. If you are faced with an unknown problem, then you’ll depend on your values. Therefore it is important to consciously develop your value and choose better ones. . If you don’t choose our values well, then you’ll give a fuck about too many things. Most of those things are unnecessary and make us unhappy. . Therefore, choosing your values is choosing what to give a fuck about, and that in turn makes us have a more meaningful life. . Exploring and choosing your values leads to the highest level of self-awareness where you move beyond what you feel and why you feel a certain way. . Why define them explicitly? . To have your values articulated means you can use them much more easily while making decisions. . There are many things we inherit from immitation. So sometimes we do things are are naturally good at it. . But when sitation is a bit different, we change. . It has happened that in certain times of my life I have been a natural at many of my core values. But since I didn’t have a developed mind, it faded. And then I had to relearn them and focus on the nuances. . Good and Bad Values . Good Values Bad Values . Socially Constructive | Socially Destructive | . Based on reality/truth | Superstitious | . Requires work internally aka on oneself. Doesn’t rely on external people, events, or scenarios being a certain way. | Depends heavily on external events, people, and scenarios to be a certain way. | . Since it’s internal: it’s immediate and controllable | Since it’s not internal: It’s not immediate or controllable | . Example: Honesty | Example: Not being alone for a while. | . For each value we choose or decide to choose, we can run through the list and decide if it’s good or bad. . Implementing values . Focus on the value rather than the specific scenarios/tip . Learn to resist searching for specific scenarios/tips. Focus on value instead. The former applies to certain situations. Values would apply to every situation. . Living your values doesn’t have to involve infinite googling. It does require infinite introspection. . Try coming up with your own strategies . Every value is going to be a collection of micro-routines and habits. Many of these habits are going to be something that you have had for 20+ years. . And a lot of it is going to be modified or changed on an ongoing basis. . So, you’ll have to come up with your own set of strategies first. This will require some first-principle thinking. And often require modification to small things. . Habits are the best way to enforce a value/identity. As you repeat a habit, you find more and more evidence of your new value. . CRUD your values over time . CRUD is a programming term that stands for Create, Read, Update and Delete. . As you grow, you’ll have access to new information. Sometimes you may even find the value is no longer surviving its purpose. . Similarly, sometime you may find that slightly changing your values gives it new and deeper meaning. #likeAGoodVariableName . If you have a particularly bad event, you can verify your actions on your values. You may find that you might not have lived up to your values fully. Or it may be time to tweak your value a bit. . Learn to identify values . Learn to identify values in yourself and others. . How? . Look at a piece or a set of actions in situations. Resist the urge to look at what the person is saying. | Determine what must be a shared value supporting the actions. | Resist the urge to have a backstory. | Determine if the value is good or bad or if your values match. | Having a backstory justifies actions. Values aren’t about justifying the past or present. It’s about how one acts. . Example 1: //TODO . Ankush is an honest person. He says he is honest. Ankush seems to tell everything non-stop. Even at times when it’s hard. Sometimes, he’s too blunt which makes him disconnect from people. Even his close family members and friends find it hard to bear him sometimes. When they do bring something up, he attacks. This makes people not wanna tell him the truth. But Ankush does think about what they said and scrutinize it. When he realizes he’s wrong or likely wrong, he does tell people that they were right. But sometimes it’s too late. . Here it seems: . Ankush is honest. | And at the same time, Ankush doesn’t care enough about other people’s feelings. | And insecure about being wrong/criticized. | But it seems sometimes he realized he’s wrong and does say he’s wrong and apologized. | Therefore a few values some up: . Honesty | Not caring about other people’s feelings | Handing early criticism with an attack | Impatience | Probably trust issues with other people’s opinions early on. (needs to think things completely to accept) | . Note that these are early assumptions and that they are in fact assumptions. A situation has many nuances and especially if you are looking from the outside, it may be hard. . Look at both good values and bad values . People are weird. We always have a mix of good values and bad values. . Using the process for yourself and others, you might come across both. . Often other people’s feedback is also a good place since we might be blinded by our own. . Some values seem good on the surface but are bad. . For example: Being excessively open . Choose your own values . Every individual is different, therefore it is important to build your own set of values to follow. Don’t borrow someone’s values. Define your own. . Expect it to take forever . With time you’ll find more imp values. Therefore, it’s highly unlikely that your values will be fixed forever. They might evolve with time. . Optional: Nuances about values . Relation between Values, Systems and Happiness: In Atomic Habits, James Clear talks about how having system run everyday leads to happiness. You don’t have to have reached your goal as long as your system is running. Values are the ultimate system. | Result of value: Acting on values is immediate but the reward of good values isn’t always “happy” in the short term. | Surrendering to your values: If you have good values, technically you can surrender yourself to them and everything will be fine. In some sense, without goal, you still have values to guide you. Even if you have a dark place, your values would hold you up together. | Expected Value vs Actual Value: We often pick values. That doesn’t mean we embody them. Our actual values are what we do in situations. Therefore, out goals is to have closer expected and actual values. | Doing poorly in an area of life? It maybe that our Actual Values aren’t sorted well or executed on. | If you are searching for too much tip, you have some root cause value causing problems. Working on values is better in the long term. Quick hack may seem the way for now. But in long term, it’s the value | . | Values and Tough Decisions: Values are most important when making tough decisions. Tough decisions are already “tough” (surprise surprise). By focusing on value, we offload some stress. | . Optional: Values and other concepts . Rationality: Humans are rational agents only within the scenario aka he/she is in a local minima. We need guiding principles to make optimal decisions. | Decision Making: It isn’t always possible to make the most optimal decision. We have limited knowledge and time, and we need to act. | Value-Based Decision Making: Decisions are made on values rather than facts. These provide good heuristics. | Resistance: In the real world, you’ll often be faced with choices that tempt you to not take on your chosen value. | This could be a person or situation. Each decision is a test of your value. | One has to give up something to uphold something else. | Every decision you make is a vote for or against a value. Don’t vote for what you don’t want. | . | Value and Identity: Often we can’t let go of a value because we have tied it up to our identity. We need to keep our identity simple to have a good impact. | Value is an Activity/Habit: Something that is necessary and repeatable. You can’t have a wage value. You have to be specific. | Values in social situations: You’ll find that often you like and respect people who share similar values. | This is especially important for close relationships: family, spouse, business partners, etc. | You can usually pick up others’ values if you listen to them cuz most people essentially speak the same things over and over again. | . | Sharing your values and building boundaries: Having strong boundaries and explaining/sharing what your values are with others will help them and you adapt to your values better. | . Optional: Resources for learning more about values . Book: The subtle art of not giving a Fuck: Mark talks about the importance of developing a value system. If our values are poorly chosen, we suffer. | He describes what constitutes good and bad values, then goes on the describe 5 values based on “The backward law”. These values cover: A radical approach to responsibility. | Being less certain of yourself and being okay with being wrong. | Failure is the way forward | Important of saying and accepting no | Contemplating details | | The most important line I found was this (paraphrased): “This book will allow you to fall back and still be okay” | Mark’s blog focuses on personal values too and he explores many areas, especially relationships. | The Subtle Art of Not Giving a F*ck - Summarized by the Author | . | Jordan Peterson According to Jordan, people should try to develop a vision for themselves. And pick values accordingly. | He advocates writing as a way of thinking through problems. | The two recent books Jordan wrote include a set of 12 principles each. 12 Rules for Life. Generates order and stability | . | Beyond Order Explores how to best with chaos. Chaos is the possibility of the new and unknown. | . | | Some of the values/principles Jordan advocates in these books are: 12 Rules for Life Tell the truth or at least don’t lie. | Make friends with people who want the best for you. | Set your house in perfect order before you criticize the work. | | Beyond Order Imagine who you could be and aim single-mindedly at that. | Do not do what you hate. | Plan and work diligently to maintain romance in your relationships. | | | Links: SKILLS You MUST Develop In YOUR 20’S - Jordan Peterson &amp; Lewis Howes | Advice to Young Men in Their 20s - Jordan and Mikhaila Peterson | . | . | Book: The 7 Habits of Highly Effective People The more you think about these. The more they make sense. | You could even say, the 7 habits are values. Be proactive | Begin with the end in mind | Put first things first | Seek to understand then to be understood | Think Win-Win | Synergize | Sharpen the saw | | The book also includes the importance of defining purpose and values in Habit 2. | . | Naval Ravikant Naval has very simple heuristics. | Like: If you are conflicted between two choices and each has equal weight, pick the hardest one. | If you can’t decide, the answer is No. | Always choose the long term over the short term. Friends. Relationships. Business partners. etc | . | Links: Happiness Podcast - 30 Minutes | Naval on Foundational Values | . | . | Shwetabh Gangwar Shwetabh is a YouTuber with many videos on practical daily topics. | Shwetabh is probably the most relatable in day-to-day life. | His book “The Rudest Book Ever” focuses on useful perspectives. Like: People are weird | Rejections are normal. Since people are weird you don’t need to go to find out. | Failure is normal | . | Links: Shwetabh’s YouTube channel | . | . | YouTube videos. There are many youtube videos on the topics. Just search “Personal Values” . | Andrew Tate’s 41 Core Values | . The inspiration for this post of Digital Minimalism by Cal Newport &#8617; . |",
            "url": "https://www.ankushchoubey.com/core-values/",
            "relUrl": "/core-values/",
            "date": " • Sep 26, 2021"
        }
        
    
  
    
        ,"post180": {
            "title": "Separate Technical Code From Domain Code in both Frontend and Backend",
            "content": ". Original Image . Need for Custom UI Library . To be most productive with any front-end technology, I am convinced that a custom component library should be created. . This custom component library should be used for everything. Any new kind of table, any new time of image viewer, etc. . The component library should be completely decoupled from the main application data. Instead, it should have its different namings. . All heavy lifting of business logic is done by the main application. While the component library will deal with all the views. . Even if you already use a UI library like DevExpress, using them from within a custom component library will allow re-enforcing rules and make it easy to change the code later. . This custom UI library can have the following: . Common UI Elements | Common UI Layouts | Reusable scripts | . Some Common UI Library Elements . These are some UI elements that I believe are perfect for including in a custom UI Library. I have compiled this list by looking at third-party UI libraries. . Tables | Forms Input | Checkbox | HTML Editor | Buttons | . | Charts | Maps | Toast | Progress Bars | Tooltip | Popovers | Popups | Gallery | Menus | Accordion | . In general the rule is . if you are using a UI Element twice, wrap it in a custom component. . Implementation Lesson . 2022 Oct 14: Separate Domain Code From Technical Code This is classic Domain Driven Design. This applies as much to frontend as to backend. | . | .",
            "url": "https://www.ankushchoubey.com/separate-technical-code/",
            "relUrl": "/separate-technical-code/",
            "date": " • Sep 23, 2021"
        }
        
    
  
    
        ,"post181": {
            "title": "CSS Tips",
            "content": "Keep CSS and HTML to a minimum . CSS and HTML are every dependent. Remove unnecessary tags and CSS classes. | Lesser the CSS and HTML, easier it is to modify. | . Use flex and grid for adjusting positions . These are much more dynamic than using position absolute. | Resource: Flex: https://www.youtube.com/watch?v=K74l26pE4YA | Grid: https://www.youtube.com/watch?v=uuOXPWCh-6o | . | . Don’t use absolute lengths, use relative lengths . absolute lengths include cm, px, etc. relative lengths include em, cm, rem etc. | if a width or height need to be a certain character length use “ch”. This cannot be used for font-size | “vh” and “vw” can also be used but they are not perfect. instead use em or rem. rem is more preferred. | Resource: https://www.w3schools.com/CSSref/css_units.asp | . Use CSS variables . CSS variables allow for easily changing CSS on the fly. | Resource: https://www.youtube.com/watch?v=NtRmIp4eMjs | . For DevExpress, modify dx-widget property . .dx-widget class is applied to all DevExpress component so modifying it for changing something like font-size will effect every dx component. | For responsiveness, rely on CSS not JS. | Unless absolutely needed, JS should not be used to re-enforce responsiveness. | . Media Queries . Assuming you are used most of the tips above, your CSS should be fairly small. | Now you can use media queries for modifying elements on specific screen sizes. | Before using media queries decide on the size of displays you want to support. This will make sure media query parameters is same across application. | Resource: https://www.youtube.com/watch?v=yU7jJ3NbPdA | .",
            "url": "https://www.ankushchoubey.com/css-tips/",
            "relUrl": "/css-tips/",
            "date": " • Sep 13, 2021"
        }
        
    
  
    
        ,"post182": {
            "title": "Decentralization of High Tech",
            "content": "1 . Every sufficiently advanced technology is indistinguishable from magic.2 But as more and more people understand and use the technology, the magic fades and it becomes an everyday affair. . There are 3 interconnected factors that influence this: . Abstraction and Field Maturity | Demand and Cost | Education | Abstraction and Field Maturity . Abstraction makes it easy for programmers to learn new things. Open Source projects are best at these. . Every advanced technology eventually comes to a point where simple statements get the job done without need to understand details. . It takes long time for things to get polished. Open Source projects spend years perfecting things. . Web Technologies is probably in it’s most mature state. Like with Spring Boot: . You have integrations to include things like Batch Processing, Database Connectivity, Micro Services, Security, etc. | Each of which at one point in time were totally a big subject to learn and implement. Now most are a few hours of configuration. | . Like with Arduino: . Arduino has different environment, chips and hardware that make it easy for anyone to quickly prototype and test hardware products. | There are modules available for camera, microphones, sensors, etc. | All of which are abstracted and the only things connecting them are arduino and programming. | . Deep Learning: . Deep Learning is also getting to a state of maturity where things that required special knowledge are replaced with easy abstractions. | Frameworks like Tensorflow are providing out if the box solution for common activities like Recommender Systems. | . Research eventually give rise to applied applications. . Demand and Cost . More a product is needed, the more innovative solutions are made to make it cheaper and available to as many people as possible. #capitalism . Once it is available to more people, more innovative uses come out of it. . Software is cheaper to replicated therefore pace of innovation is much faster. . Hardware costs are variable in different countries. China has had a lot of hardware innovations because the cost of hardware is much lower due to high supply. . Role of Education . YouTube and online video in general has been a revolutionary technology. A man is limited to opportunities he/she gets. Online video allows for opportunity for everyone to learn the same thing. . Books are boring for most folks. . Space? . I believe once SpaceX reaches Mars, we’ll go through a similar cycle for space technology too. Where some things become so abstracted and spread of education increases that more people can start ticketing with things. . Photo by Forest Katsch on Unsplash &#8617; . | Steve Jobs &#8617; . |",
            "url": "https://www.ankushchoubey.com/decentralize-high-tech/",
            "relUrl": "/decentralize-high-tech/",
            "date": " • Aug 29, 2021"
        }
        
    
  
    
        ,"post183": {
            "title": "Complex Technologies are extension of Simple Ones",
            "content": "I have been learning System Design lately. And one of the thing I notice time and time again is how useful Algorithms, Data Structures and Design Patterns are. . For example: A message queue like Kafka is not only simple conceptually but scales to handle much large data. . This is not to say that once can go an build some things advanced by themselves. . There goes a lot into making a software. Every tiny improvement. Edge case and it’s bugfixes are a contribution of years of research. . But to know that something is an extension of simple concepts like Queue and Pub/Sub is humblings. That the tools that are built are just a combination of ideas that were arranged and executed well. . What does this mean practically? . Practically, this means we try to make things complex up front. . For example: CI/CD can be simple at the start too. . You don’t need to add to many things to just automate pushing something to an environment. You can add and update things overtime. . Similarly, you can let go of automation early on. . For example: calculating DORA metrics by hand .",
            "url": "https://www.ankushchoubey.com/complex/",
            "relUrl": "/complex/",
            "date": " • Aug 24, 2021"
        }
        
    
  
    
        ,"post184": {
            "title": "Making Internet Less Distracting",
            "content": "1 . The following should reduce influence of recommender systems significantly. Making internet less distracting and help improve privacy. . Least Access Principle . This is a security principle. . By default, the number of accesses granted to a user/role/application should be least needed to run that application. . The more access someone/something has, the more will be probability of a security risk. . Reduce Data Points . A recommender system can only work with data we provide. If data is reduced, it will have hard time figuring out what to recommend therefore making things less distracting. . Specifics . Phone . Do not allow notifications | Do not give any permission for the application if it is not necessary. | For iOS 14.5+: Turn off app tracking for all apps | . For Services . Turn off personalized ads | Do not store unnecessary data. Even after deleting, most services will take 6 months to delete it from all their servers. | . For Example: In YouTube you can, . Delete all playlists | Unsubscribe from all channels | Change locations to some other country (I Choose Japan) | Turn off Personalized Ads | . I found that Google services are good at providing these kind of features and changing these settings have an immediate effect. Facebook Products and Amazon hide a lot of details. . Resources . Remove the explore page from Instagram on iOS : ios | Block Site - Stay Focused - Chrome Web Store | . Set it up such that the tab autocloses. Because this reduces a touch point. . Once you realize you had opened a distracting website. Take a moment to notice, what were you thinking or feeling just before opening. . Was it because something that requires relatively-hard thinking came along and your brain decided to switch to something known and easy? . Photo by FLY:D on Unsplash &#8617; . |",
            "url": "https://www.ankushchoubey.com/internet-distractions/",
            "relUrl": "/internet-distractions/",
            "date": " • Aug 24, 2021"
        }
        
    
  
    
        ,"post185": {
            "title": "All Questions are False",
            "content": ". Photo by Shot by Cerqueira on Unsplash . Habits, routines and our way of thinking protects us from a certain group of problems. The more broad they are, the more number of problems they can take care. Therefore, it become important to explore un-explored ideas. . This has been a reason why I have been trying to get gist of Indian philosophers to the degree that does not include metaphysical claims. . One of the patterns that has been repeated over and over is that every problem is mind made. . All Questions are False . All questions are false, unreal, nonessential, because life is not a problem to be solved; it is a mystery to be lived. Only the fools go on questioning and go on thinking that some answers will help them. No answer is going to help you; every answer will create more questions. . ~ Osho . 2 Features of Being a Human that Lead to Questions . Sadhguru would say something like: . All problems and suffering come from 2 features of being a human being: Extremely vivid memory and fantastic imagination. | You are suffering your capabilities. | . . View this post on Instagram A post shared by 𝚂𝚊𝚗𝚍𝚒𝚙 𝚁𝚊𝚔𝚜𝚑𝚒𝚝 (@global_human_beings) . Question of Meaning of Life . When asked about meaning of life, Sam Harris would say something like: . One is only concerned with questions like the meaning of life if what they are doing in the present moment is not good enough to demand their full attention. | By becoming aware of the present moment we enjoy what life really is in the present. | And we have this power at any time of the day. | . You don’t have to have an opinion . You don’t have to have a personal opinion about everything. . Not exhaustive . Apart from Osho, Sadhguru and Sam would have a similar belief: . One of level, these concepts that the mind is the one that creates problems make sense. But I believe they shouldn’t be treated as exhaustive. . I have always wondered why buddhism advocates for both control of your mind and control of your actions. . This is probably because, just being control of your mind and letting the world fall apart is not only hard to achieve but it is stupid in some sense. We benefit a lot from facing and solving problems not only for ourselves but for the people around us. . Punctuate your day with moments . When talking about mindfulness, Sam Harris recommends following approach apart from a formal sitting practice: “Punctuate your day with moments of awareness.”. . That one can experience Nirvana for moments at a time by just being aware of the present moment fully and realizing that on one level there aren’t many things that important for humans that our present experience. .",
            "url": "https://www.ankushchoubey.com/questions-false/",
            "relUrl": "/questions-false/",
            "date": " • Aug 16, 2021"
        }
        
    
  
    
        ,"post186": {
            "title": "Inversion",
            "content": "Mental models are heuristics that help in conceptualizing common occurring themes and help in better decision making. . Clarity is power. If you know something well enough, the decisions you make around that information will have a higher chance of being accurate. . One way to gain more clarity, which I have written about extensively, is being truthful. . Being truthful assumes that what you know to be true may not be 100% truth but you’ll speak, act and convey in a way in which you know it is as true ads possible. . To gain more clarity, the other size of telling the truth is exploring the unknown, what you do not yet know or understand. . Thinking is effective ways to explore what you don’t yet know. . Inversion is a technique that helps understand the other side in a much more structured manner. . In inversion, you invert the argument or statement. . For example: . If you want to plan to do X. . Straight Way of Thinking: How will I achieve X | Inversion: How will I fail at achieving C | . Once you know how you would fail, you can take steps to avoid failing. Inversion can be applied recursively. Aka you can try to find arguments against your arguments. . One can also treat inversion can a healthy debate . Inversion forces you to think from the other side. And it helps increase the probability of actually achieving the task you set out to achieve. .",
            "url": "https://www.ankushchoubey.com/inversion/",
            "relUrl": "/inversion/",
            "date": " • Aug 14, 2021"
        }
        
    
  
    
        ,"post187": {
            "title": "Tips for working with `package.json`",
            "content": "Create and use scripts . There are some common names of scripts you can create like postinstall start, etc. . For example: for Ivy enabled Angular versions, one can avoid repetitive recompilation by running ngcc. We can add a script in package.json to run ngcc after every npm install . &quot;scripts&quot; : { &quot;postinstall&quot; : &quot;ngcc&quot; } . It’s better to manage npm related activities using package.json than manage it using something like Jenkins. . npm outdated . This shows you all the packages which are not the latest. . npm outdated can be also used in your deployment pipeline. This can service as an important monitoring metric for maintainance of the application and ensuring longer life. . Clear cache before npm install on every environment . Cache can be cleared by using . npm cache clear . Clearing cache before installation on your dev/QA/prod env will ensure it will run the same on any environment. . Use custom registry . Even when installing on local, make sure to use custom registry. . If you are going to use a registry like Nexus to manage packages, it makes sense to use the same registry for installation local. The closer you can replicate your prod on local, the fewer bugs you are going to face. . This can be done in 2 ways: . Using --registry npm install --registry &lt;link-to-repository&gt; . | Creating a project level .npmrc file . | . Inside the file write: registry=&lt;link-to-repository&gt; . Managing node_modules . use yarn instead of NPM . yarn is a package manager just like npm but it provides a few features that make it better. . multi-threaded download. This makes yarn much faster than npm which only supports single-threaded downloads. | offline mode. Once a package is downloaded, it can be downloaded again. even if the node_modules folder is deleted. This is because yarn stores a backup of everything. | . If you are not using yarn, zip node_modules before making dependency upgrades . Often things don’t go smoothly when upgrading changes dependencies. Since, node_modules are ignore in git, the only way to revert or switch between branches with dependencies is a clean npm install. . Yarn supports offline line mode which means nothing is downloaded if dependencies had been updated once. If you are not using yarn, zip node_modules before making dependency upgrades. You can unzip it easily if you need to revert. . Skip above node_modules tips and use pnpm . Installations: npm i -g pnpm . Usage: pnpm install . pnpm is a disk efficient package manager which stored all node_module packages in one place and used sim links for installing within projects. If you have a same package in multiple project, pnpm will make sure to download and store it only once. .",
            "url": "https://www.ankushchoubey.com/package-json/",
            "relUrl": "/package-json/",
            "date": " • Aug 11, 2021"
        }
        
    
  
    
        ,"post188": {
            "title": "Solving N+1 Problem in Hibernate",
            "content": "N+1 Problem . If you are working with JPA entities and you have joins. Then you might have faced this problem. . If you have something like @OneToMany mapping between a parent and a child and fetch parent. All the child entities will be fetch one by one is a kind of a loop. . You can check this behavior by using the following application.properties and then checking logs. . spring.jpa.properties.hibernate.show_sql=true spring.jpa.properties.hibernate.use_sql_comments=true spring.jpa.properties.hibernate.format_sql=true . So if you have 2 records for parent and 4 corresponding child records. . A total of 2*8 separate queries wil be run. . . Query Number Purpose . 1 | Fetch Parent Entity: id_1 | . 2 | Fetch Child Associated with parent id_1: id_a | . 3 | Fetch Child Associated with parent id_1: id_b | . 4 | Fetch Child Associated with parent id_1: id_c | . 5 | Fetch Parent Entity: id_2 | . 6 | Fetch Child Associated with parent id_1: id_d | . 7 | Fetch Child Associated with parent id_1: id_e | . 8 | Fetch Child Associated with parent id_1: id_f | . If similarly you have a 1000 records and 10 corresponding child records. . Then 1000*10 = 10,000 queries will be run. . This is inefficient. . We need some way to reduce the number of query calls. Even if the amount of data is the same, the cost of running more queries is much higher that getting the same amout of work done with less number of queries. . FetchModes . FetchModes allow you to say to Hibernate to fetch all childrens at once instead of fetching them one at the time. . FetchMode is different from FetchType.EAGER or LAZY. The former is used to decides where to fetch children along with parent or later when needed. . FetchMode.JOIN . @Fetch(FetchMode.JOIN) List&lt;EntityType&gt; entityName; . One a single query will be run. . If you are using this, all data will be fetch at once using join but the payload size will be huge. . FetchMode.SUBSELECT . @Fetch(FetchMode.SUBSELECT) List&lt;EntityType&gt; entityName; . If used a minimum of 2 queries will be run. . One for parent @Entity | One for for each child @Entity type will be run. After the query is run all chilren of particular type will be fetched. | . FetchMode.SUBSELECT is also seems to better when used to FetchType.LAZY. Here, all parent entities will be fetched first. When child entities are needed, all child entities will be fetched at once instead of multiple queries. .",
            "url": "https://www.ankushchoubey.com/n-plus-one-hibernate/",
            "relUrl": "/n-plus-one-hibernate/",
            "date": " • Jul 15, 2021"
        }
        
    
  
    
        ,"post189": {
            "title": "My First Program",
            "content": "My first piece of code was a calculator in Visual Basic. It was 2005 and I was in 4th grade. My father sat beside be and taught me how to make it. . Then after a year or so, in Mumbai Mirrors Newspaper’s Sci-Tech section there was a piece on a kids programming language called Scratch.edu. . I went out playing that morning and told my friend that I’ll be building my own GTA Vice City. . These are the few things I published on Scratch. . MAD Shark . Jul 27, 2008 . Exploring the Heavens . Oct 03, 2008 . Frames taken from Britannica Encyclopedia. . Great AMERICAN SPEECHES . Oct 03, 2008 . Frames taken from Britannica Encyclopedia. . 3D Project . I did not post this but I remember it well. . I created a room layout. A rectangular box in middle and 3 lines from corner of image to corner of rectangle. . When I pressed up key, the image zoomed in. I hoped to make more changes such that it would looked like that old Wolf Dom Game. . . My first real taste of programming was first year of Diploma (11th Grade) in C language. .",
            "url": "https://www.ankushchoubey.com/first-program/",
            "relUrl": "/first-program/",
            "date": " • Jun 16, 2021"
        }
        
    
  
    
        ,"post190": {
            "title": "Art of Reducing Lines of Code in Java/Spring Boot",
            "content": "While there are many techniques which are language agnostic, these are some of my favorites with Spring Boot. . Project Lombok . Use this if you don’t use Spring Boot with Kotlin. This will module will reduce side of code by around 15-25%. . Lombok allows you to generate java boilerplate at runtime by using Annotations such as: @ToString, @EqualsAndHashCode, @Getter/@Setter, etc. . My favorite onces are . @Data: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, and @Setter on all non-final fields, and @RequiredArgsConstructor. | @Cleanup: Automatically calls close() method in case of Streams and Connections. | . @RequestParam without Arguments . If the name of variable is same as value in @RequestParam, remove @Request Param. . Remove @Column on @Entity . In a @Entity, if the name of variable is same name of column writing @Column is unnecessary. . By doing this, not only remove a line from every variable, the quality of code is better as there is naming is consistent between DB and backend. . Use JPA @Repository Methods instead of Hibernate EntityManager/JdbcTemplate . Ideally your queries should be so simple such that the only type of read operation you do is simple CRUD. . Such simple queries are easier to understand and are a good sign of a well designed database. . Such operations are available out of the box with @Repository. .",
            "url": "https://www.ankushchoubey.com/clean-code-spring-boot/",
            "relUrl": "/clean-code-spring-boot/",
            "date": " • Jun 12, 2021"
        }
        
    
  
    
        ,"post191": {
            "title": "Faster SQL Batch Save in Spring Data JPA",
            "content": "By default in Spring Data JPA, when you save a list of entities a for…loop runs storing each record one at a time. . This would take a lot of time to execute. This is because the value of @Id often needs to be fetched from database and set to the @Entity before save. Therefore multiple transactions need to me made. . You can check this behavior by using the following application.properties and then checking logs. . spring.jpa.properties.hibernate.show_sql=true spring.jpa.properties.hibernate.use_sql_comments=true spring.jpa.properties.hibernate.format_sql=true . Speeding Up Writes . Spring Data JPA allows for storing multiple records at once but multiple things have to be set first. . 1. Switch to Sequence Generator for primary key . Batch writes does not work with GenerationType.IDENTITY. . Make using sequence_generator . @Id @SequenceGenerator(name = &quot;seqName&quot;, sequenceName = &quot;seqName&quot;, allocationSize = {allocationSize}) private Long id; . The {allocationSize} is how many writes you wish to do at once in case of a large list of entities. . 2. Create the sequence in your database . Make sure that increment size is equal to {allocatedSize} used in @GenerateValue . 3. Add JPA Property . Add the following property . spring.jpa.properties.hibernate.jdbc.batch_size={allocatedSize} . Within Code . repository.saveAll(listOfEntities); . How things work under the hood? . Once a list of entities need to be saved, JPA will make request to database for getting the next value of sequence generator. . This value will be set to the @Id of the first @Entity . Since we already have already provided {allocationSize}, JPA knows can automatically fill in values exist between the current value of sequence generator and the next. . Therefore JPA does not need to ask DB each time for the value to be set as primary key. . Example: . There is a sequence which increments by 1000. . We want to save a list of 500 entities to the database. . JPA asks database for value of sequence. . Database return value of 1. . JPA knows that the next increment is at 1000 so, it can fill in values between 1 and 1000. . JPA sets 1 to 500 to @Id field to entities. All the entities are together sent to the DB as a single transaction. . Suppose we get around want to save another 100 new entities. . JPA knows the last @Id it set was 500 and it was 499 more @Id values it can use. . So it for the new 100 entities, it set @Id values between 500-600 without asking Database for sequence value. .",
            "url": "https://www.ankushchoubey.com/batch-save-spring-jpa/",
            "relUrl": "/batch-save-spring-jpa/",
            "date": " • Jun 12, 2021"
        }
        
    
  
    
        ,"post192": {
            "title": "Keeping database simple",
            "content": "Around 2 years ago, I wrote a blog post detailing how to keep backend DB Queries simple but it missed a very critical piece which is having a simpler DB. . This post highlights some of my DB preferences. A Database design is highly dependent on the application so there may not apply to every DB. . Aim for DB with Only Tables. No Stored Procedures, Functions or Views . Your DB for the most part should be such that the only operation you to CRUD and simple lookups. . Therefore a lot of effort should be taken to designing extremely reusable and simple tables. . In one of my projects, I had created an extremely efficient data pipeline. . Their were multiple views in a hierarchical tree calling one another. If you looked up on root view and applied some filters, you would get the data you want. This data needed to be inserted into a separate table so I created stored procedure to do it. . In coming months, new things were added the stored procedure and it became so complex that it is now to risky to tinker with. . Therefore now, I prefer DB which has no DB side functions or procedures, or if possible without views. If there is a complex query I every much prefer storing and triggering the queries from on the backend server. . There shouldn’t be multiple tables doing the same job. . Simple and Reusable Tables . If you have a social media type feature, it is best to have a single table to track likes than have multiple like tables for each type of data. . Keep Data within Database Platform Independent . A common problem that happens when you store something like HTML is what would happen if classes or tags are modified. One would have to write a migration script and image all the scenarious. This is a lot of work. . Therefore, database ideally shouldn’t store HTML or a particular DSL. . Instead have a converter at the backend to do the conversion from data within database to HTML or DSL. This would mean that you can swap in and out different DSLs over the same data. . Markdown is a good example. Markdowns are light weight. Use Markdown based WYSWYG editor instead of HTML Based. . This is what trello seems to do: . . Column Names . For primary key id is enough. . Many prefer using &lt;table_name&gt;_id as primary key but adding table_name is unnecessary. We already know what table it is. . In case of joins between, &lt;table_name&gt;_id will be same length as selecting column with dot &lt;table_name&gt;.id. . Also, if you have just id you can quickly identify a foreign key which has column in this format &lt;table_name&gt;_id. . Indexing . I identify the columns which require joins or search. . And then index in the order in which they are called most. . Liquibase XML Format . Liquibase is a tool for managing DB Deployments. . Using something like Liquibase XML format allows you to be DB independent and makes migration easy. . For Complex Analytics Operations . For complex analytics use cron jobs to store data in separate table 1 or use Materialized Views 2 . TechLead &#8617; . | Designing Data Intensive Applications by Martin Kleppmann &#8617; . |",
            "url": "https://www.ankushchoubey.com/v1/simple-db",
            "relUrl": "/v1/simple-db",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post193": {
            "title": "Always keep yourself ready to switch companies",
            "content": ". Capitalism . Money is a proof that you’re adding value to the world. 1 . The more you earn, the better it is for everyone. . Plus, you need money to provide for yourself and your family. . New domains, people and environment . New environments and people give you new perspectives. . As a programmer, we need can work in different business domains. If you are getting bored by your domain. . Interviews keep you sharp and help you know your progress . Even if you are not going to jump companies, interviews will keep you sharp. . In capitalism, free market decides your worth, interviewing is like calculating your credit score. . You don’t owe people anything . Move to place where you get better opportunities/resources. You don’t need to be at a single place. . Derek Sivers &#8617; . |",
            "url": "https://www.ankushchoubey.com/switch-jobs/",
            "relUrl": "/switch-jobs/",
            "date": " • May 26, 2021"
        }
        
    
  
    
        ,"post194": {
            "title": "Gist of DevOps",
            "content": "My dear younger self, You believed DevOps is bs and a buzzword. It kind of is. But it is highly valuable and important too. Though you won’t always build something awesome from scratch and instead configure an existing tool to do the job, without DevOps you won’t be free to code. You’ll spend all your time maintaining and deploying your code manually. In this post, I’ll try to convince you why upper management likes DevOps so much. Where did DevOps come from? . There are 2 separate engineers. . One who made the product -&gt; Developer | The other who made sure the product is running properly -&gt; Operations Engineer | . Operations Engineer’s role included: . Deploying application to server | Making sure it is operating properly | . Increasingly, some of the roles of Operation Engineers became so repeatable that it could be automated. Also, certain problems that operation engineer might face was much more easily handles if softwares were developed a certain way. . These gave rise to DevOps. . What is DevOps? . DevOps is a mixture if tools and practices that make it efficient to build and maintain code. . Agile is what to do. DevOps is how to do. . DevOps practices occupies different stages of product development and beyond. . DevOps is such a broad term with loose definition that many other concepts are plugged into DevOps as a “best practice”. For example: Pair Programming. . DevOps also get’s merged with security and called DevSecOps. Security is usually an afterthought. But DevSecOps aims to fix security problems in the phase that created it making it much less costly to fix it. . You cannot copy another organizations DevOps structure as it is. Your organization and products are unique. Make your own style. Don’t copy everything that google or facebook do, though you can learn a lot from them. . Since DevOps relies so much on automation tools, some things can be achieved faster. . Increase compliance | Streamlining of processes | Automating repeatable tasks | . All the tools and practices results to: . Increasing speed of deployments Very important to stay ahead of competition even if core of business is not software. | . | Increasing quality of software Allowing making changes easily and reducing bugs | . | Reducing cost of discovery and fixing issues Bugs discovered faster can be fixed early | All this reduces downtime. | . | . Some DevOps practices and accompanying tool that are very helpful are. . Build Automation: Jenkins | DB Automation: Liquibase, Flyway | Code Linting: Sonar, CAST | Continuous Integration (CI) | Continuous Delivery (CD) | Continuous Deployment (CD) | Continuous Monitoring: ELK, Databriks | API Management: Mulesoft | Test Driven Development (TDD) | Behavious Driven Development (BDD) | . I’ll be writing posts on these when I have enough experience working with each. .",
            "url": "https://www.ankushchoubey.com/devops/",
            "relUrl": "/devops/",
            "date": " • May 25, 2021"
        }
        
    
  
    
        ,"post195": {
            "title": "Applications of Recommender Systems",
            "content": "Photo by Charles Deluvio on Unsplash . Recommender systems are easiest and probably most lucritive ML Application. . The whole of social media, content sites and E-Commerce Companies are built around it. . The goal is said to be to provide right information at the right time and avoiding information overload. The statement seems ideal and a recommender system can be made to work such a way. . Most often for consumer facing products, the real reason is the opposite. Keep people hooked to using the product for longer. . In social media, it would be used to recommended content/people similar to once you are viewing or something you might like. . For E-Commerce companies, the focus is on recommended you the product you’ll likely purchase. . Recommender systems are also used at a smaller scale like Keyboard Suggestions on your phone. . For Enterprise, recommender systems can help improve productivity by a lot. . By having documents/data grouped, the right information can found faster. | By having similar documents groups/recommended, comparing between documents can be made simpler. | . Recommender Systems often require much less data to operate than other Machine/Deep Learning problems. .",
            "url": "https://www.ankushchoubey.com/recommender-systems/",
            "relUrl": "/recommender-systems/",
            "date": " • May 16, 2021"
        }
        
    
  
    
        ,"post196": {
            "title": "Gist of Cryptocurrencies",
            "content": ". Photo by Nick Chong on Unsplash . INFO: Economics (specially Macro economics) and effects of each and every minor details is beyond my understanding. So I may be off in this post . Money . Money 💰 is a form of value. . A money is valid only if enough people are willing to enchange it for goods/services. . Once upon a time, sea shells 🐚 were used as value/money. But sea shells or other exhanges were hard to carry so later inventions such as coins, then cash and now money also includes numbers in a computer followed. . Value of Money . Money is only valuable when it is limited. If there is infinite money, the value of each individual unit will reduce and you need more money in exchange of same value. . Simplified example . Imagine there if there is 1000 unit of a currency in circulation. . At this place, 1 unit buys you a house. . Let’s suppose, the government decided to print more money and now 1000 more printed units are being added. . Now, the same house will hypothetically require 2 units of currency. . The value of single unit was reduced by half. . Commodity Currency . To avoid this, previously gold was used to set an upper limit. For each note you could exchange it for a real gold kept somewhere safe. This is called commodity currency. . There were even gold coins. If you had gold even if you don’t believe in the currency, you could still use it in other ways because gold was valuable. . Fiat Currency . But around 1960s in US, gold was removed because governments could not simply print money to pay of their debts. . This got called as Fiat currency. The current which has no backing. Enough people believe in the value of the fiat currency, therefore it is used ad money. . Essentially with fiat currency like dollar, government make life easier for them but at the same time make life difficult for normal people holding the money. . Cryptocurrencies . Cryptocurrencies remove this power from the government and aim to decentralize it amoung individuals. . Bitcoin has an upper limit. There can never be more 21 million and inflation in Bitcoin is accurately predictable. . Governments cannot just control how many bitcoins or another other decentralized currency are exchanged. . Money for most of history was believed and regulated by the free market. It is only in recent history that it became highly regulated and centralized by governments. . Cryptocurrencies can only succeed as long as enough people believe it is valid. .",
            "url": "https://www.ankushchoubey.com/crypto/",
            "relUrl": "/crypto/",
            "date": " • May 7, 2021"
        }
        
    
  
    
        ,"post197": {
            "title": "Positive effects of doing hard things",
            "content": "I used to love Deep Learning and wanted it to be my career option. . I learned it for many about 2 years. After work, sitting for an hour or two. There were often weeks when I understood nothing. I was early in my career then and things would likely be different of I try things out now. . Though I never used Deep Learning as a job, there are a few skills I learned that have persisted. . Watching Videos at 2x Speed | Understanding many technological field | Grasping hard technological concepts much faster | Pushing through a mental limit break | . There is immense upside to doing hard things even if they are not directly use. . Indirectly doing hard things changes us for the better. .",
            "url": "https://www.ankushchoubey.com/tough/",
            "relUrl": "/tough/",
            "date": " • May 4, 2021"
        }
        
    
  
    
        ,"post198": {
            "title": "Compare yourself with who you were yesterday",
            "content": "Games with no end goal . I realized this when I was playing an iOS game called Mini Motorways. . The game is an infinite game, meaning there is no final goal where the game ends. . So each time, I would play the game, I would leave feeling unsatisfied. Looking back, I had a good enough score. But without any baseline to compare it too, I don’t know if I was doing well. . By comparing with yourself, you have a fair and proper baseline. 1 . Escape competition through authenticity 2 . If you are playing someone else’s game, you’ll be worst at it. . If they are entering your game, they’ll be worst at it. No one can compete you for being you 2. . Plateau of Latent Potential3 may be making you unaware of how good you have become since you started. . If often takes months (years in you are young) to do something significant like to get an job offer in a specific field. You’ll likely neglect this if you are always comparing. . Rate of Change vs Actual Change . By comparing with yourself, you focus on rate of improvement. Though the actual improvement is what will determine your present, rate of improvement which is much easier to manage will let you win in long term. . Jordan B Peterson (The title is taken from 12 Rules For Life by Jordan Peterson) &#8617; . | Naval Ravikant &#8617; &#8617;2 . | Atomic Habits &#8617; . |",
            "url": "https://www.ankushchoubey.com/compare/",
            "relUrl": "/compare/",
            "date": " • May 4, 2021"
        }
        
    
  
    
        ,"post199": {
            "title": "Quick Refactoring Tips",
            "content": "It may be good to have unit test cases . Study the code layout. . Create base classes, Interfaces etc . Create your own library . Make Copy of Class files before modifying. . Refactoring is easier with Injectables. Just create a new class. . Commit in small increments. . Continuously Integrate your code . Refactor one functionality at a time instead of everything at once. .",
            "url": "https://www.ankushchoubey.com/refactoring/",
            "relUrl": "/refactoring/",
            "date": " • May 4, 2021"
        }
        
    
  
    
        ,"post200": {
            "title": "There is no one size fits all",
            "content": ". Photo by Todd Quackenbush on Unsplash . There is no programming language that fits every case. Python is not the best programming language. At least not for web development. . There is no perfect framework that is best for every case. React may be cool. But Angular is probably more stable for bigger projects. . There is no stock/mutual fund that works for everyone. Some are more stable. Some are made for those who can afford to take risks. . There is no career choice which brings out the best for everyone. Not every Software Engineer codes well (most suck). . There is no fixed routine/process that fits every case. . And even if you find a thing that fits, changes in environment/time will make it unfit again and you’ll have to find a new one. . If you think you think something is as simple as black and white, the probability you’re wrong is high. . Abandon Ideology 1. Abandon being totalitarian i.e to believe things should be done a certain way always. . There is no one size fits all. Choose the right tool for the job. . Beyond Order: 12 More Rules for Life &#8617; . |",
            "url": "https://www.ankushchoubey.com/one-size/",
            "relUrl": "/one-size/",
            "date": " • May 4, 2021"
        }
        
    
  
    
        ,"post201": {
            "title": "Develop your own opinions and reasonings",
            "content": "Authors/Experts are no different to us. They are human too. Their isn’t much to argue about logical facts. One cannot argue over statements like 1+1=2. But for other things there is always a room for introspection and finding flaws and fixing it. . While coding many try to follow “best practices” without giving them a thought. Many follow Agile “practices” without knowing or reasoning why. . Not having your own reasoning makes you susceptible to ideological thinking along with it’s upsides and down sides. . By not reasoning yourself, you are not being unique, you are just a replicate of someone else’s thinking. .",
            "url": "https://www.ankushchoubey.com/original-opinion/",
            "relUrl": "/original-opinion/",
            "date": " • May 3, 2021"
        }
        
    
  
    
        ,"post202": {
            "title": "Decision Making Heuristics",
            "content": ". Photo by Tim Graf on Unsplash . These heuristics can serve as a useful guide only if one trusts the reasoning behind each. . Tell the Truth 1 . By telling and articulating the truth, you remove clutter/garbage and focus on what really matters. . If it sounds too good to be true, it probably is. . World if filled with scam artists. . Do/Try/Invest in many things. You don’t have any decision making capacity unless you have an offer. . You don’t have any decision making capacity unless you have an offer on the table. . So apply for multiple jobs, learn multiple skills, meet multiple people, try multiple options; you don’t know which ones will stick at first. . If downside is negligible, reversible or it can be capped and upside is very high, do it. 2 . If you can gain 2x, 10x from the decision and the loss in negligible or reversible, the potential upside is much much higher. . If you need to make a big decision and you can’t decided, say No. 3 . Modern world is abundant with opportunities. You’ll find another one. . If there are multiple similar options and each seem similar, take the path that seems the hardest in the short term. 3 . Your brain is likely compensating short term hard right path for an easy path. Easy paths also have a higher chance of being too good to be true. . If you can’t decide, pick the decision that will lead you to more peace of mind. 3 . You can only continue to make good decisions if you have a peace of mind. If it violates your consens, say no. . Let others make there own decisions . Mind your own decisions . Delay the impulsive decision by 30 minutes or an hour or a day . Don’t be implulsive . Be decisive . Every decision is choosing one thing over other things. You won’t always have 100% information. . Be decisive: Temporary fix to a temporary problem becomes a permanent problem. . Metrics . Extreme decision are rarely good. . Even if you think mathematically, extreme decisions would lie on the edge of all the possible decisions you can make. In almost any case, you have more number of non-extreme decisions you can make during any decisions. So probabilistically since number of extreme decisions are low, chances that they must he good is low. On one level this analysis is dumb too. . Say no to many things . The goal of a decision to do something is to have high ROI than from doing other things. . Jordan Peterson &#8617; . | Tim Ferriss &#8617; . | Naval Ravikant &#8617; &#8617;2 &#8617;3 . |",
            "url": "https://www.ankushchoubey.com/decision-making-heuristics/",
            "relUrl": "/decision-making-heuristics/",
            "date": " • May 3, 2021"
        }
        
    
  
    
        ,"post203": {
            "title": "Cases To Be Humble",
            "content": ". Photo by Bill Jelen on Unsplash . You know very little. Collective human knowledge is much larger. . There are people much better than you who believe they don’t know everything. Listen to Elon Musk once and you’ll know. . There may even be kids much better than you are. . Everything you see around you was made by group of humans working together. Many sacrificed themselves to their work to make these things a reality. . You live in a country where you have basic facilities: Internet, House, Food, Water. Hopefully you have a family and a few good friends. There are many who aren’t as lucky who live in a poor 3rd world country and or war zones. . Universe has been here for billions of years and will be around for billions. Like every one human being, you’ll die one day. What you leave behind is your knowledge and your work. .",
            "url": "https://www.ankushchoubey.com/humble/",
            "relUrl": "/humble/",
            "date": " • May 3, 2021"
        }
        
    
  
    
        ,"post204": {
            "title": "Physical Exercise",
            "content": ". Photo by Kirill on Unsplash . Benefits of Exercising . You’ll look good. You’ll develop good posture. And therefore attract beautiful potential mates. . You’ll feel good. You’ll feel confident. Your chest will be pumped out. . You’ll be smarter and more disciplined. Laziness will be gone. Brain will be pumped with blood. You’ll be much more productive in less time. . You’ll fall sick less. Your body with fight those diseases like never before. . You’ll pick up heavy things with easy. You’ll be the man who gets relied on by others. . You’ll be able to do more things for longer. You’ll be able to swim, run up mountains, run for longer, jump, climb 🧗‍♀️ walls, do a back flip, rock in the dance floor. A lot of great experiences are to be had by moving . Get Started . Do anything that you can do. . Plan things out in advanced. . Work on 80% of your capacity. You don’t want to get so sore that you cannot do anything the next day. .",
            "url": "https://www.ankushchoubey.com/exercise/",
            "relUrl": "/exercise/",
            "date": " • May 3, 2021"
        }
        
    
  
    
        ,"post205": {
            "title": "Meditation is how you become peaceful all the time",
            "content": ". Photo by cottonbro studio . What is meditation . Meditation is a activity which is weird for many. It can seem stupid or woo woo. . There is nothing in meditation that will give you insights about physical universe/galaxy. . Meditation (investigation of mind) can be separated from religious concepts. You need not believe something to meditate. . You can be mindful and disciplined at the same time. . The best time to meditate is when you feel discomfort. Detach become mindful of your thoughts and the you’ll realize the thought cycle is stupid and will go on forever with one thing after another. . Being regular . If you don’t have 10 minute to meditate 🧘🏽‍♂️, you should meditate for an hour. . Give yourself 10 minutes, other things can wait. . One you have learned how to truly meditate, You’ll have to tune it up from time to time. . Meditating at the same time and place is useful. . Have formal sitting practice in the morning before you do any major task. . How . There is no one perfect meditation. Different forms/formats of meditation will make you better at every form of meditation. . Selecting the ideal meditation is about moving opposite to what’s automatic. If you are feeling too much inside, try to focus on the outside. If you are feeling too much outside, focus inside. . Meditation can be practiced anywhere and at any time. While eating, brushing, talking to someone, using your phone or laptop. While this is great, it is not a replacement for formal sitting. . When you meditate with open eyes 👀, it’s okay to look here and there. Recognize the intention to look. Where is the intention coming from. . Goal and Progress . Your goal while meditating is not be become a meditator. Your goals is to investigate your mind truthfully. . The progress of meditating is seen when you are not formally meditating. It includes a calmness if things you do. . Don’t be rigid while meditating. Let yourself flow. .",
            "url": "https://www.ankushchoubey.com/meditation/",
            "relUrl": "/meditation/",
            "date": " • Apr 28, 2021"
        }
        
    
  
    
        ,"post206": {
            "title": "Research Fast, Understand the Gist, Apply, Iterate, and Move Forward",
            "content": ". Photo by prottoy hassan on Unsplash . Information is clutter. Applying information is power. . The more applicable information you can find, the more you can apply them and make better decisions. . Why information should be applied? . Information if not applied is meaningless unless it is your profession to find and document new information. . By applying information faster, you will solve your problems faster or at-least move towards solving your problems faster. . The information that is not applied will be forgotten. . You don’t always have time to sit and learn/consume something end to end. There is a high need for having on site learning mindset. Because it is the most optimal in terms of learning, applying and time. . Just in Case vs Just in Time . We fall into trap of consuming “just in case” information which we believe will be useful someday. Unless we are learning for fun, we should ideally focus on “just in time” information. . For example: While job searching, it is better to prepare while actively giving interviews than by waiting months before starting applying for jobs. The probability that you’ll have to relearn everything is high. . Catchup when need be 1 . It’s better to wait for a good amount of information to accumulate before consuming it rather than consume a constant stream of data. . A good way to follow this is to avoid all feeds and recommender systems. . Example: . Rather than consuming breaking news every few minutes, it’s better to let things accumulate for a day or so before consumption. Most breaking news is often low quality and is rarely important longterm. . Finding applicable information . There are many ways to find applicable information, these are a few that come to mind. . Planning . A plan may or may not be used, but planning is useful because it uncovers many aspects of the problem. Also, it is easier to discovers paths to avoid. . Questions . Frame your questions accurately. . Know the right people who can answer your question. Internet also allows us to connect to “experts” who are happy to answer you. . Specially having friends and colleagues you can rely on helps in avoiding pitfalls. . Googling the right way is also a key skill. . Reading Books . Some non-fiction books are made in a way where you can skip chapters liberally. Do so, close the book and live your life. . For other non-fiction books, you can do the same if you understand the topic enough. If you don’t, don’t skip because you’ll risk learning false information. . Being Multidisciplinary . Aspects from one discipline apply to other. Learn something random and you’ll find you apply the same principle in other field. . It see,s better to learn by categorizing. Like: A music instrument, a physical activity, a social activity, etc. . Mental Models and Heuristics . These can help you find out more information about a topic faster by making good guesses. . Some of my favorite mental models are: . Inversion (Most Useful) | Occam’s razor | Map is not a territory | Confirmation Bias | Circle of Competence | Pareto Principle | . Make Time and Think . Thinking means you’ll question things from the first principles. To see if they are valid or not. . Then you scrutinize it. By thinking you find the solutions yourself and rely less on other sources. . Implementation Thoughts . 2022 Oct 14: You don’t consume something that’s not a problem. | 2022 Oct 14: You find and fix problems and or goals. Mind has limited space. | . Tim Ferriss &#8617; . |",
            "url": "https://www.ankushchoubey.com/applied-info/",
            "relUrl": "/applied-info/",
            "date": " • Apr 22, 2021"
        }
        
    
  
    
        ,"post207": {
            "title": "You need time to think",
            "content": ". Photo by Elijah Hiett on Unsplash . Difference between thinking and knowledge . There is a difference between acquiring knowledge and thinking. . Our gadgets are such that they remove any need for thinking. We can find all information in minutes. . The problem this leads to is that we always search for a ready-made answer instead of thinking ourselves. . I have seen this during development a lot where some developers would search open-source solutions or paid solutions when in reality creating solutions was a just a few lines of code. . This happens because of not thinking. . Thinking . Thinking means you’ll question things from the first principles. To see if they are valid or not. . Then you scrutinize it. . Why . Individuals search for truth. Groups search for consensus. By always finding information rather than thinking, you increase your chances of being the same as others. Of course, logical facts are undeniable. . If you can think and articulate, you are powerful. You can influence people. People give you money. Ask for your advice. . Learning happens when you compare and contrast. Compare and contrast requires time to think. . Clear thinking also allows you to explain easily. . Your problems get solved when you think. . What you don’t use you lose. So make time to think. . Unprocessed thoughts . Unprocessed thoughts come out as garbage. . Unprocessed thoughts are not well articulated and come out as garbage. 1 . If you have unprocessed thoughts you fumble through life. 1 . About an hour a day should be good. . But if you haven’t processed your thoughts for long, it may take longer than a hour a day for a few days. . But it is important to remember unless this is absolutely a pain point to not let this be the only thing that’s on your plate. You have things to do and responsibilities to fulfil. . As you grow, the less manual work you have to do. And more decisions you have to make. . It’s better to spend 6 hours sharpening the ace and just spending an hour chopping down a tree than to do the opposite . So you’ll spend more time strategizing and learning rather than doing . Obstacles . Note-taking is problematic. By externalizing everything, you won’t think through well. One should only write what they think about a topic if something is new and carefully thought through. . The greatest obstacle to thinking is we resist boredom. Boredom is important as it sparks creativity. . Jordan Peterson &#8617; &#8617;2 . |",
            "url": "https://www.ankushchoubey.com/think/",
            "relUrl": "/think/",
            "date": " • Apr 7, 2021"
        }
        
    
  
    
        ,"post208": {
            "title": "Keeping Web Dev Code proper",
            "content": ". Photo by Markus Spiske on Unsplash . Choose a stable framework. . If less modification is required, your code will last longer. . Make very small modular pieces. . In Angular/React, create components even for small things like img or video tag. You’ll find that there are certain attributes you assign to every img tag that can be taken care of from one place . Separate app logic from business logic. You should be able to copy-paste these modules into another code base and use it without changes. . In angular, make use of everything: components, service, directives, pipes, interceptors, etc/ . Make layout components . These are common layouts you use throughout the application. Coding them in one place reduces unnecessary duplications. . CSS . The best way to deal with CSS is to write less of it. . CSS gets messy fast. By keeping your components small. You are halfway there to a good CSS. . Also make good use of display: flex. It gets most of the job done. . HTML . The best way to keep HTML clutter-free is to not write javascript/typescript logic in it . Angular provides a ts file, use it for everything. Even for ngStyle or ngClass. . This will keep your HTML very clean . Create a get method to keep things clean. . Have very few utility classes. . It’s stupid to have too many utility classes spread throughout your codebase. Have only a few at a single place. . Only keep a utility class or method if it is used. Remove unnecessary code. . Resources . YouTube channel: Fireship | How to Properly Structure Angular Code | .",
            "url": "https://www.ankushchoubey.com/web-dev-clean/",
            "relUrl": "/web-dev-clean/",
            "date": " • Apr 1, 2021"
        }
        
    
  
    
        ,"post209": {
            "title": "Summary of Marketing Section from The Personal MBA",
            "content": ". Marketing . Marketing is about finding the right prospespects, keeping their attention and make them interested in what you have to offer. Every business needs to do it because no matter how good your product is, you won’t have profit until your customers can find you. . Direct-Marketing sometimes reduces the lines between itself and sales because it reduces amount of time to close the deal. . But overall, Marketing and Sales are completely different activities. Marketing is about keeping attention. Sales is about closing the deal. . The product that does not sell without advertising. Will not sell with advertising. . Attention . The number 1 rule of marketing is that attention is limited and every other company is trying to grab attention. . People are only interested in things they like and the things that are important to them. Therefore high quality attention is important. And high quality attention must be earned. . At the same time, the aim is not be popular. The aim is to increase profits. So if you can get yourself on TV, you’ll be popular but you’ll waste a lot of time not finding the right customer. . Receptivity . People ignore what they don’t care about. . Receptiveless is how open a person is to your message. There are three parts to this: message, timing and medium . Message: The person should be interested in the message you are offering. Timing: The person should recieve the message at the right time. Medium: The person should recieve message from the right medium. Example: A personlized message will likely be more effective than same commercial message to every person. . From a business perspective, you want your customers to be as receptive as possible. . Remarkability . Remarkability is being enough different to pique the interest of your customers. Being remarkable voiletes customer’s usual expectations and grabs their attention for free. . High remarkability generated word of mouth. Advertisement is what is done when you are not remarkable (or not remarkable enough). . Probable Purchaser . Assuming everyone will purchase your product is bad. There are only a set of people who would. So it makes no sense to try to appeal to everyone. . Appeal to the right customer at the right time. Every good marketing compain does this. . Preoccupation . Always assume that your prospect has preoccupied himself/herself with something. Your goal is to be interesting enough so that you can grab their attention. . The threshhold for this maybe low or high depending on your environment and type of product. . Level of Awareness . You need to be sensitive to how much your probable customer cares about your offer. . There are 5 levels to this: . Unaware | Problem Aware | Solution Aware: Knows solution but not aware of specific offer | Offer Aware | Full Aware | Your goal is to identiy the level the prospect is at the push them towards upper level -&gt; The Funnel. . The best way to do it is to personalize your message for each prospect and level. . End Result . Humans don’t always do what the think they are doing. Eg: People who buy SUV don’t use it for it’s purpose. They use it to feed their status. . Find out what they really desire and appeal to it. . Ankush: Combine this with Education Based Selling. You cannot sell loads of crap just because it makes someone feel high status. . Demonstration . Demonstration is one of the oldest tricks which significantly increases probability of sale. . Demonstrate your product to the customer. Make them use it. Let them see the results themself. This removes a lot of doubts the prospect may have. . Qualification . It is better to screen prospects and find the right customers that to have bad customers. This has to happen before sale. . Ideally your funnel should remove bad customer. Bad onces will consume un-neccesary time, attention and resources. . After that you can focus on better serving the right once. . The prospect who is not right for you may be right for your competitors. You don’t have to be jumpy about not serving bad prospects, help them by refer them to competitors. . Point of Market Entry . Point of market entry is the point at which the random prospect becomes interested in finding the solution to the problem. . Certain markets have obvious entry point and exit point. . Having the attention of the prospect during point of entry is valuable because the prospect will set you as a standard while comparing with your competitors. This increases your likelihood of sale. . Point of entry is the reason why organic and paid-ad search are so valuable. . Addressability . There are certain problems and types of prospects that open up in public. These can be sensitive issues. . So you’re not going to find a TV Ad style boadcast to do much of a trick or expect a viral word of mouth recommendation. . But you can position yourself in places where they are more liekly to find you. . For example for sensitive health issues, doctors are an easy medium to get to your prospect compared to TV ad. . Nowadays people also Google the solution to their problem, therefore targetted ads are also useful. . Addressability is how easy it is to get in touch with your prospects. Ideally you wannt high addressibility. . If you choose an already addressable market, you’ll reduce your efforts significantly. . Desire . Desire is one of the part of marketing that get’s people off. If someone does not desire your product, no one will purchase it. . Scammy marketters are people who promise a product which is different for what they deliver. But it is almost impossible to sell someone something that they don’t desire. . Your goal is not to appeal to people who don’t desire, it is to find people who can convince themself of how your offer will benifit them. . The more core human drives your marketting offer connects to the more effective it will be. . Visualization . When your work speaks for itself, don’t interrupt. . Test driving is one of the most effective tactics. The prospects stop rationlizing, the emotional part of their brain takes in and they start wanting. Once that is done, it is only a matter of time before sale is made. . Our minds are designed to visulize the consiquences of our actions. By making it easy (by putting as much sensory info as possible) for your prospects to visulize how purchasing the product solves the problem and makes them feel, they will conclude with “I want this”. . Framing . Everything we hear is an opinion, not a fact. Everything we see is a perspective, not the truth. . Framing a natural form of communication. There is always some sort of compression when we tell the image. Therefore it pays attention to be concious about it. . Framing your communication to be persuasive and exact can get the point accross faster while honoring the listener. . Framing is not same as deciet, you are not lying. . While framing make sure that the listener know what they need to know because if not done it will harm your reputation. . Free . Getting attention is not the same as getting paid. . Offering free value is a quick way to attract potential customers. But the free value should be such that additional sales negate the amount of resources spent of free. . Done well, this will lead to sales you wouldn’t otherwise have made. . Permission . No one likes spam. So it is better to ask for people’s permission to send them more information in case of newletters, phonecalls, etc. . Do not abuse your privilage. if you keep you keep providing real value in those newsletters, etc. you’ll find more people interested in your paid offering and will create a deeper relationship with the prospect. . Before asking for permission, make it clear what they’ll be getting and how it will benifit them. . This is the next best thing since it reduces marketing cost and increase likelyhood of prospect purchase overtime. . Hook . The smaller your message, the less likely people are to forget it. . Hook is a small enough message that keeps people’s attention and conways to them what you are offereing and who you are. It also makes it easy for people to tell about you to their firends. . Examples: . A million songs in your pocket -&gt; IPod | 4 hour work week | . Hook can be title, subtitle, slowgan etc. Use it in as many places as possble. . Generate a lot of hooks and test which onces work. . The hook grabs attention and the remainder of your marketing sales activities close the deal. . Call To Action (CTA) . Your prospects won’t know what to do next, so tell them and make it obvious for them. CTA should be simple, single and obvious. . Best CTA ask for either sale or permission to follow up. . Ensure that every message you create has a clear CTA. . Narrative . A common format of a narrative is “Hero’s Journey”. The hero recieves call of adventure and overcomes obstacles to achieve his goals. . The customer wants to be a hero. Knowing that others are already walked on the path makes it easy for them to follow the path themself. . Therefore testomonials, case studies and other stories make it easy for customer to choose your call to adventure. . Controversy . If your position is to agree with everyone else, then you’ll become boring. . Controvery means taking a stand for something you care about even if people disagree with it. Controversy promote discussion and attract peopl’e attention. . Not all controversty is good. As logn as you are able to maintain a sense of bigger picture of how you’re trying to help, a bit of controvery can create useful awareness. . Reputation . Like it or not, the market’s perception becomes your perception. . Branding often means increasing and maintaining reputation. . People are willing to pay to premium for a good reputation. . Reputation is not under direct control you can only try to improve it overtime. It includes everything: products, advertisement, customer service, etc. . Building reputation takes time and effort but is one of the most important marketing out there. .",
            "url": "https://www.ankushchoubey.com/marketing-mba/",
            "relUrl": "/marketing-mba/",
            "date": " • Mar 16, 2021"
        }
        
    
  
    
        ,"post210": {
            "title": "User Experience",
            "content": ". Photo by Alvaro Reyes on Unsplash . I started learning about UX a few months ago. This post summarizes things I have learned far. . User Experience . User Experience (UX) is about making a product or service in a way that is useful, easy and delightful for end users. . UX is something that has to be actively worked on. It won’t happen automatically. . Because if UX is not good, . User will get frustrated using the product | User will not find the product attractive to use. | . And therefore they won’t use your product. . Sympathize with the user. . The way to understand what the users want is by sympathizing with the struggles that user’s face. . Test fast . The earlier you can get feedback from the user, the shorter your product development cycle will be. . The user can only know what he/she likes when he/she can experience the product. But since product development takes resources, prototyping helps to make the process faster. . The fastest way to do it is to create paper prototypes. Paper is inexpensive, quick and has zero learning curve. . You can prototype not just User Interface but also physical products. . Once the paper prototype is created, you can increase the fidelity of the prototypes. . If a picture can say a thousand words, a prototype can save a thousand meetings. . It’s best to involve the end-users as much as possible in the design process. . The prototype also helps engineers to build exactly what the end-users want and reduces overall development time. . UI is part of UX, not the other way around. . UX includes more than the User Interface. It includes every interaction the user has with the product or the company. . UX is concerned with how the user feels when using the product and not just how it looks. . Such things can include reducing the number of steps needed to perform a task. . A Checklist for “beauty” of User Interface . As a developer how can I become a better designer. Source: “As a developer how can I become a better designer?” ANSWERED! .",
            "url": "https://www.ankushchoubey.com/ux/",
            "relUrl": "/ux/",
            "date": " • Mar 10, 2021"
        }
        
    
  
    
        ,"post211": {
            "title": "The philosophy behind testing in software and in general",
            "content": ". Photo by Mykenzie Johnson on Unsplash . Testing is like double-entry bookkeeping. . Testing is insurance. It may not find anything, but when it does, it saves significant time. . It is cheaper to fix things earlier. . Thinking . You should not make assumptions. Always test. . Productivity . Testing makes it sure that you are moving in the right direction. . Test small, test often, and test fast. . Code . Keep your test coverage high. An excellent way to do that is for every new line of commits to have a test coverage of 100%. . TDD (Test First) is 50% more efficient in the long term. . Writing unit tests first only works well when you know exactly what you want to write. If you are experimenting, it may be useless. . You could invert the last line . If you can’t write tests first, you need to learn. . Every new bug should get a new test written first. (adapted from Facebook Engineering) . Keep your overall QC process as automated as possible. . Like SpaceX, push beyond failure during testing/development. So you can ensure everything goes well in prod. . Medical Field . The more you test, the more data points you have. The easy it will be to isolate the infected and avoid disease spread. . Test the most critical things often. . Maths . You never accept the alternative hypothesis. You always reject it. You would rarely know if a hypothesis is 100% current unless it is a logical statement. . To test, you can plug the numbers right in and see if the equation holds. . Learning . If you are learning, you can only know if you have learned right by testing yourself. .",
            "url": "https://www.ankushchoubey.com/testing/",
            "relUrl": "/testing/",
            "date": " • Feb 28, 2021"
        }
        
    
  
    
        ,"post212": {
            "title": "How to recover from physical injuries faster",
            "content": "Photo by yang miao on Unsplash . To recover from physical injuries faster like tightness and muscle soreness, your blood should be flowing well. . There are someways to do it and all of them are important to do and lead to similar level of benifits: . Massage . It does not have to have a lot of pressure. It can be as soft as possible. Even little bit will help. . If you cannot directly massage the area in pain, massage the area around it. This will atleast let blood flow near the effected area. . 1-2-3 Method 1 . Source: What Exactly is Foam Rolling and Why Should I Roll? . Atlease 1 minute in an area | divide the area into two zone apply technique to each zone slowly while remembering to breath | . | 3 Motions: Rolling, Spans and Streaches Rolling: Roll back and forth a few inches at a time | Spans: If you reach a tight area wave | Streach: Compress the area and streach in full range of motion | . | A&gt; Always start from ground up. B&gt; Breath slowly. C&gt; Consistency is better than intensity. Before . Cold Exposure . Take cold showers. Atleast 90 seconds. And don’t be afraid of the cold and start taking heavy breaths. Be calm, take deep breaths. . Your’s body will start pumping blood faster to keep your body warm. . Do atleast 30 seconds on the area that is directly effected. . Move and Exercise: Avoid complete rest and immobilization. . Problems multiply when you don’t move the part. Your body does not fully know how to recover a part until you show it how you use it. . So move as much as you can. It’s okay if you can only do quater motion. Do it before it starts paining. . if you cannot move the specific body part because it is too painful. Move other parts, keep blood flowing well. . Rest Enough but not too much. . Rest enough. You want to increase the probability that you’ll work the next day. . What Exactly is Foam Rolling and Why Should I Roll? &#8617; . |",
            "url": "https://www.ankushchoubey.com/physical-injury/",
            "relUrl": "/physical-injury/",
            "date": " • Feb 23, 2021"
        }
        
    
  
    
        ,"post213": {
            "title": "Ethical Capitalism",
            "content": ". Photo by billow926 on Unsplash . Capitalism is Pure Genius . Capitalism involves pushing oneself to help others. . Entrepreneurs find a problem, solve it, and earn money as a reward. . In capitalism terms, money is proof that you are adding value to the world. 1 . Those who don’t own a business, help others by becoming an employee, thus adding value. . The Path To High Impact Is Through Capitalism . It is efficient to adapt ourselves to the world than to do the opposite. Money is a form of trust. . You’re going to need money to have the effect of any kind and at any stage. Being a capitalist (employee or entrepreneur), providing value, and being compensated with cash is the best way to do it. . Capitalism + Ethics . Capitalism is not perfect. If not kept in check, it can turn evil (Example: East India Company) and provide no value. . Ethics is not intrinsic to capitalism. And it probably never be as it is hard to map out. A combination of the two leads to more results than one or the other. . Ethics enables you to play long-term games, be trustworthy and win social trust. . The mix of the two is probably why companies like Apple and Tata Group are so successful and trusted for so long. They provide high value while not compromising on ethics. . It seems better to think in terms of adding value than to think in terms of money. . Naval Ravikant &#8617; . |",
            "url": "https://www.ankushchoubey.com/ethical-capitalism/",
            "relUrl": "/ethical-capitalism/",
            "date": " • Feb 18, 2021"
        }
        
    
  
    
        ,"post214": {
            "title": "The Path / Ethics",
            "content": "Photo by Jake Blucker on Unsplash . The Path . The path is trying to be the best version of yourself. . Why . If you are not the best you can be, you create or neglect problems. These problems accumulate and will make you suffer. And it’s not just you who will suffer. It will engulf all the people around you. . Therefore, it’s an ethical crime to be weak1 and not be the best version of yourself. . Consistency . dThe reason to be consistent is that you experience compount effect. Small changes overtime can significantly change things. . Look at yourself from 5 years ago. Any habit that was small would have been really small for the first 2 years. then suddently it started growing significantly. . Things that at first don’t seem significant become significant when you compound them over a few years. . So if you are cleaning your room, planning the day, meditating, etc. You are on the path! Their is light at the end of the tunnel. . Staying on the Path . Sacrifice . You have to give up who you are to be who you want to be. . The boy shall die and the man will live. 2 . The Dark Side . The dark side is the easy path. It’s a path devoid of responsibility. Blame, complain and general disinterest is forms of the dark side. . Humility . One is tempted to go to the dark side when he/she is not humble. . if not one overestimated himself. . One should try fixing problems around him starting from the smallest. Smallest problems like making your bed make a man humble. . Taking on the burden . There is a difference between being handed something and taking it on voluntarily. . One should take on the burden voluntarily because what is neglected is rushes in when things go bad. 1 . Default Aggresive . Be the one who does things. Who solves the problems. Not the one who just reacts to the the situations. . Are you on the path? . Fast, lift, sprint, stretch, and meditate. . Build, sell, write, create, invest, and own. . Read, reflect, love, seek truth, and ignore society. . Make these habits. Say no to everything else. . Avoid debt, jail, addiction, disgrace, shortcuts, and media. . Relax. Victory is assured. 3 . How do you know if you are on the path? . Foundations are build and maintained | You are optimally between order and chaos | You are default aggressive. You fix problems before they occur. | You can choose the short term pleasure, but you choose not to. in favor of long term. | You always tell the truth. And are not afraid of the consiquences/ | Your productivity level is high. | You are always calm. | . Jordan Peterson &#8617; &#8617;2 . | Game of Thrones &#8617; . | Naval Ravikant &#8617; . |",
            "url": "https://www.ankushchoubey.com/path/",
            "relUrl": "/path/",
            "date": " • Feb 4, 2021"
        }
        
    
  
    
        ,"post215": {
            "title": "Employee Ethics",
            "content": ". Photo by Shridhar Gupta on Unsplash . In previous posts, I discussed the reasons to be ethical and how it related to businesses. For employees, ethics can be summarised with the Principal-Agent Problem. . Principal-Agent Problem 1 . The Principal wants agents to act like in the best interest of the agent. | The agent who does act like Principal get rewarded. | . Organization Structure . Organization need to foster an environment for employees to be more ethical. Though there are some things the sole hand of employee. . The Ethics . Not accepting bribes and not stealing. | Not engaging in office politics and maintaining good company culture. | Focusing on efficiency and conflict resolution. This means working together to find a solution. | . | Take on accountability and responsibility | Getting work done | If you don’t feel like part of the company, move on. | . Naval Ravikant &#8617; . |",
            "url": "https://www.ankushchoubey.com/employee-ethics/",
            "relUrl": "/employee-ethics/",
            "date": " • Jan 23, 2021"
        }
        
    
  
    
        ,"post216": {
            "title": "Open Source Software (OSS)",
            "content": ". Photo by Richy Great on Unsplash . The more I think about open source, the more confusing things get. In some sense, Open Source projects are pretty similar to Non-Profits. . Impact of OSS . The overall impact of OSS has been high. If there was no OSS, we would either have to buy everything or build everything from scratch every time. . Most of the libraries I use daily are open source. . Types . Most OSS are libraries for developers to use. . Some exceptions are Signal, VLC and Chrome. . Why companies make their project open source? . Recognition . Companies, especially smaller ones, gain a lot of recognition by being developing open-source software. An example of this is BaseCamp which built Ruby on Rails. . Market Capture . Enterprises and even smaller companies prefer free open source software over the paid ones if it gets their work done faster. . Hiring . Open-source software help companies find and recruit good talent. Though it is likely not the main reason for making open-source software. . Revenue . Most companies don’t depend on their open-source software for profit. . The once which do usually rely on: . Donations | Provide additional proprietary features at Premium. Like: Cloud Support. | Problems with open source . Not all OS projects are equal. Some projects are better maintained than others. . Sustainability . The revenue does not seem sustainable. The companies which only focus on open source products either require a lot of Donation (like Ubuntu) or have to pivot heavily to be sustainable (like RedHat recently) . Deception and Priorities . OSS often doesn’t openly admit to having bugs. If a developer knows of bugs in the OSS they can choose not to use the product. But usually, developers get to realize the bugs themself after a few months of using the products. . Critical bugs may be ignored as open-source projects have their own set of priorities. Sometimes the prioritize the number of issues fixed over addressing critical once. There is low/no accountability 1 since it is free. . Paid products provide priority support for paid customers, thus resolving issues faster. . When choosing an open-source project, check GitHub issues first. 1 . Also, open-source projects do get abandoned which does not happen with paid products. . Flutter EXPOSED: Extreme JANKY animations. “A nightmare framework” &#8617; &#8617;2 . |",
            "url": "https://www.ankushchoubey.com/open-source/",
            "relUrl": "/open-source/",
            "date": " • Jan 22, 2021"
        }
        
    
  
    
        ,"post217": {
            "title": "Business Ethics",
            "content": ". Photo by Charles Forerunner on Unsplash . In the previous post, I discussed the reasons to be ethical. In short, ethics provides leverage. This post addresses points specific to businesses. . Competition and Revenues . Most profitable companies create a monopoly. 1 . Example: Google, Facebook, Amazon | . Monopolies are bad for innovation long term. Competition is good for innovation. . Often publically traded companies listening to shareholders focus on short term gains while neglecting ethics. . Example: Slave Trading Companies during the Colonial Era. 2 | Recent Example: Facebook is known for copying features from smaller competitors then purchasing them | Amazon is known for bankrupting competitors by: Investing in companies then launching their copy of cheaper product under Amazon brand 3. | Forcing business to be sold to Amazon by selling the same product at a massive loss and waiting for a competitor to go bankrupt before restoring price. 3 | . | . | . Some companies choose to stay private, avoiding being influenced by shareholders. . Example: SpaceX | . If your business is no longer needed, pivot and move to something else. . Customer . Your goal as a company is to help your customers. 4 . If you cheat, you’ll create a bad word of mouth about your brand. Word of mouth is the most powerful marketing strategy. . Be the kind of business whose customer wants you to succeed. 5 . Protect customer data by providing 100% encryption. Even you should not be able to read it. . Employee . The more you take care of your employees. The more employees take care of you. 5 . Companies should run on ideas, not hierarchy. You have to let the best ideas win. Which means that people at Leadership position should listen to their employees and sort out solutions. 6 . Peter Thiel &#8617; . | Sapiens by Yuval Noah Harari &#8617; . | The Amazon monopoly and the problem with Jeff Bezos’ business model &#8617; &#8617;2 . | Mark Cuban &#8617; . | Simon Sinek &#8617; &#8617;2 . | Steve Jobs &#8617; . |",
            "url": "https://www.ankushchoubey.com/business-ethics/",
            "relUrl": "/business-ethics/",
            "date": " • Jan 21, 2021"
        }
        
    
  
    
        ,"post218": {
            "title": "Piano",
            "content": "Photo by Dolo Iglesias on Unsplash . In some sense, playing the Piano is manually doing what a speaker does but with higher satisfaction. . If I someday build my own office, I’ll put a Piano in it. . Be able to play 100% correct notes or the right timing. At least 3 times. Before increasing speed. . Slow speed is where you’ll be focused on musicality and have the highest myelination. Slow is smooth. Smooth is fast. . Observe notes and listen to the music. In simply piano you have beats comming in. You’ll find that each beat hits at a tick. Listen to the tick and replicate. You’ll find you don’t need to go faster or slower. . Learn sheet music . You don’t need to memorize songs if you can read sheet music. . It’s much faster to progress in the long run. . It is joyful to open any random song and play it without having to watch a YouTube tutorial for each song. . The more sheet music you see, the easier it is to read. . Practice . You don’t learn the piano, you play the piano. . Every new technique (like chords, scales) learned will make you a better pianist. Thou should not skip anything. . Isolate parts of pieces to practice better. . Practice regularly. 10-15 minutes daily is better than an hour once a week. . Initially learning a piece, play slowly. Increase speed gradually. Once you are at the desired pace, always play at that pace. Not fast. Not slow. . If you suck as a new technique, continue practicing it in the upcoming days. You’ll get it in 15 days. . Learn techniques from many sources. . Listening/watching the piano music first will helps you learn faster. . Being Calm . You’ll make mistakes if you are not calm. So always keep calm and check your breath. . Banging your fingers is a sure way to suffer. Stiff hands will become loose as you practice more. . You cannot play a specific piece faster physically than the speed at which you can imagine playing it. Mistakes at the piano are often mistakes in thinking. . Get proper tools . Get a proper stand and seat. You’ll find you play instantly 50% better. . The worst thing you can do to your piano is to put key labels on it. . Humility . If you think you play well, you’ll likely cry seeing Kids on YouTube play better than you. . Learning Piano is a rabbit hole. You might probably not learn everything. . How I am learning? . SimplyPiano App. | YouTube Tutorial for Piano Techniques. | Alfred’s Adult Guide for Piano | .",
            "url": "https://www.ankushchoubey.com/piano/",
            "relUrl": "/piano/",
            "date": " • Jan 16, 2021"
        }
        
    
  
    
        ,"post219": {
            "title": "Why Ethics?",
            "content": ". Photo by Tyler Quiring on Unsplash . I have been wondering over this lately. I don’t have concrete thoughts formed yet. . Ethics extends from personal to even business decisions (like data privacy). . Ethics . Ethics is hard to define. Objectively, it is a myth, a shared myth 1. . For the sake of this post, let’s reduce ethics to: . Not doing wrong things that you know are wrong. | . Not being corrupt . One should be ethical so that once’s mind isn’t corrupt when facing life’s challenges 2. . So that once can act sane and not make things worse. . Reducing decision fatigue . A side effect of being ethical is that you’ll have fewer decisions to make. You can instantly eliminate un-ethical once. . The price you pay not being ethical . Your habits and actions are proofs to yourself of the kind of person you are. 3 . If you take the same behaviour and stretch it to a lifetime, you will likely be in a very different place to where you are. . The direction of things is more important than the speed at which you achieve them because you could end up in a very different place. . Long Term Greedy 4 . Being ethical is being greedy long term. . The hallmark of any compounding process is short term pain for long term reward. . For example: If people know you are ethical, they trust you more. They’ll be more likely to do deals through you. 4 . Example 2: If you are ethical, you are surrounded by ethical people. 4 . Being ethical includes a lot of short term pain for a future reward. . Having nothing to hide. 4 2 . Being ethical allows you to tell the truth almost always and not be afraid of the consequences. . Node in a network . Your actions and decisions are more than yours. They are a ripple in a network 2. . If you can affect 1000 people positively, they might do that same to other people. Positive things branch out like a tree. . Meaning . Ethics provide life more meaning. . A meaningful life is more exciting and fulfilling. . Rights and Responsibilities . Rights and responsibilties is how you create trust and have a fare trade. . If you want rights, you have to take responsibilities. 2 . Ethics is something you practice and not just something you learn 4 . Sapiens by Yuval Harari &#8617; . | Jordan Peterson &#8617; &#8617;2 &#8617;3 &#8617;4 . | Atomic Habits &#8617; . | Naval Ravikant &#8617; &#8617;2 &#8617;3 &#8617;4 &#8617;5 . |",
            "url": "https://www.ankushchoubey.com/why_ethics/",
            "relUrl": "/why_ethics/",
            "date": " • Jan 14, 2021"
        }
        
    
  
    
        ,"post220": {
            "title": "Sapiens Book Summary",
            "content": ". Why this summary . The book took around two months to complete. I am a slow reader. I am trying to write this as a way to better process what I understood. . This summary may spoil your reading experience if you have not read the book yourself. . The order of points is random. . The book . The book is a brief history. It transitions fast and beautifully from one topic to another. . It also presents arguments and counter-arguments in a way that tries to explain the whole thing from maximum points of view. This kind of writing and thinking is something I aspire. . Lessons . Cousins . We had a lot of cousin humans. Once upon a time, Around six species of humans roamed the earth at the once. | We are not unique. 3 billion years ago our universe was born. It will stay for billions. We are not even the human species that has survived the longest (as of yet). | There are countless species. We are just specie that got lucky thanks to our intellect and imagined realities. | Imagined Realities . History is random. There are cause and effect to certain events but there is no reason why history could not have turned in some other way. | Religion is a recent thing. (10,000 years ago). | The way we interact and work together with stranger and form groups larger than 150 is by imaging things. | Societal constructs like nation, company, ethics, etc are imagined realities shared by billions. It’s so strong that we act according to them in the real world. | There is no justice in history. Even a human right is an imagined construct. There is nothing in biology that suggest it to be a truth. These constructs do help keep people sane. | Destroyer of Species . Huntergathers were healthier than us but they did not live for that long. | There is no going back once the Agriculture Revolution started. Why would someone want to go back to hunting? | We are Thanos for other species. Our species has captured and killed and effected almost all animals on earth. | We don’t look at animals with the same view as we look at other humans. We abolished human slavery but are okay with animal slavery. | Capitalism . Science is largely a product of Capitalism and politics. | Capitalism allowed us to progress fast. | Capitalist if not checked can do anything for money. Slave trading companies were listed in the London Stock Exchange. This seems kind of similar to current privacy breaching companies or how we farm animals. | The stock investor would not care what happens in the company. he is just interacted in making a return. | Government and legal checks are necessary to keep Capitalists in check. | Accepting Ignorance . The scientific revolution was a result of Europeans accepting that they are ignorant. That they don’t know things. | The reason the Scientific revolution took place in Europe instead of India or China (even if Asia controlled 80% of world GDP) is because of social constructs. | Asians did not accept their ignorance and did not venture out to find answers to things they did not know. | New material discovered increase progress rapidly. | Unification . The 3 things that brought humankind together; Empired, Religion, Money. | Money crossed lines which religion could not. Everybody loves money. | There have been many types of money and does not include just a coin. | We are all influenced by European culture. No country has an original culture. It’s a mix. | Math . Maths allowed us to predict the future. | Time and timetable tracking is recent. Though it is very efficient. | Buddhism . Western liberals mix their view with the Buddhist view. | The Buddhist view is not that the happiness in individual and it must be protected. | The main part is the internal states are fleeting and they change every moment. There is no point in chasing after it. | Credit . Banks and the whole financial system are built on credit. They provide more money than they have hoped for a future return. This is a large contributor to human progress. . Lone Individual . Individual needs are now satisfied by state and organizations instead of family and community. . If you want money, you can take a loan. | if you want an education you go to school. | if you are unemployed there are un-employment schemes. | if you are old, there are retirement schemes. | . Transendance . Humans have transcended genetic boundaries. . We learn faster and adapt quicker. Unlike other animals whose genes dictate what they do. | We have created medicines and technologies that far exceed and extend our natural limitations. | . Communication . A band of good communication sapiens of 500 could beat Neanderthals with a pack of 5 times more. | Gossip is natural to us. Gossip conveys important information like who to avoid, what to do, what not to do, etc which helps us be safe. | Peace in our time . Humans have been safer than ever. And we seem to be moving towards more peace. | Compared to history, the decolonization of colonies has been relatively peaceful. Everyone seems to be tired of war. | Nature . Biology is always changing. It is never constant or fixed. If you go by this line of thinking, more than human 2 genders are possible and biology won’t have any problem with it. .",
            "url": "https://www.ankushchoubey.com/sapiens/",
            "relUrl": "/sapiens/",
            "date": " • Dec 29, 2020"
        }
        
    
  
    
        ,"post221": {
            "title": "A replicable Development Environment with Docker + VS Code",
            "content": "The pain . The most discouraging part of software development is setting up a local development environment. Coding is relatively easy. . Typically it takes me over a day of effort for setting up all tools. . Also typically software updates sometimes break a setup and lead to more changes. . Docker . Having a development environment in Docker means that it is replicable. You can switch machines or share the environment with team easily. . This method works with non-GUI setup. A solution for GUI is Vagrant. I did not use it because I use only 2 GUI tools, VS Code and Chrome. . Initially, I tried creating the Container without using extensions. It was painful. Remote - Container for VS Code extension makes it simple. . Guide .",
            "url": "https://www.ankushchoubey.com/development_environment_docker/",
            "relUrl": "/development_environment_docker/",
            "date": " • Dec 25, 2020"
        }
        
    
  
    
        ,"post222": {
            "title": "Developer Productivity",
            "content": ". Photo by MORAN on Unsplash . These are things that affect improves developer productivity significantly: . Hardware . A Fast Computer | Bigger Display | Multiple Monitors You can preview the application on one screen and keep the IDE or DB open on the next. | . | Software . A Good IDE | Plugins to automate things | A modern programming language | Dev Himself . Typing without looking at the keyboard | Initially: Use GUI tools instead of command | Later: Skip both GUI and Manual Command Line: Creating tiny scripts (.bat/.sh) to automate repeated actions. | Understanding the requirement properly. | Prototyping the User Interface to avoid confusion. Paper prototyping is enough for many cases. | Thinking and having the thoughts organized before writing the code instead of thinking while coding. | Knowing if the algorithm needed is common that an open-source solution is readily available. | Googling the right thing while debugging. | Not over-engineering. Example: Don’t use microservices if your application isn’t big. 1 | Keeping code clean | Single tasking | Automated tests and TDD 2 | The Problem With Microservices &#8617; . | Habits of Efficient Developers &#8617; . |",
            "url": "https://www.ankushchoubey.com/dev_productivity/",
            "relUrl": "/dev_productivity/",
            "date": " • Dec 22, 2020"
        }
        
    
  
    
        ,"post223": {
            "title": "How I learned basics of programming.",
            "content": "The following is a beginner-focused essay. . I was a dumb programmer for the most part. I knew syntax and understood solutions to problems but could not solve them myself. . The speed of my progress was slow because there was no need for me to code well. My academic assignments were relatively easy. . Syntax . For my first programming language (C), I watched YouTube while writing all syntaxes by hand. The video taught me the importance of indentations. . Algorithm and Competitions . I had to prepare for a job interview and coding competitions. So I started practising on HackerRank. . Book: Think Like A Programmer . I knew syntax pretty well but could not write code myself. I always needed a tutorial. . I came across a YouTube series and book of the same name: Think Like A Programmer. . I watched all the videos, read books and tried applying them. I was not good initially thought I had learned some ways to estimate what end program would look. . My thoughts were getting structured. . Book: Automate the Boring Stuff with Python . I knew beginner level Java. I wanted to automate some parts of my computer but found it very difficult to do. . I had learned the syntax of Ruby. Ruby was huge at that time. . I have hesitated to learn Python. I did not want to revisit the same things with different syntax. But the Automate The Boring Stuff book was compelling. . I started reading the book and would often read and try out cheatsheets. I even had cheat sheets printed out. . Python reduced the complexity of development. I was able to focus less on syntax and more on what the code does. . Book: Cracking the Coding Interview . I was getting better. This book improved it further. . I did not solve all the problems. I had read through the theory. . Practicing . I build all my academic projects myself without asking for help. That helped me a lot. . I was trying to build things for myself. Like . a python script that would automatically empty desktop. | A python selenium script that would log in to Facebook and wish Happy Birthday to people. | A script to download Anime. | . It took around four years. I wasted the first three years and got focused on the last one. .",
            "url": "https://www.ankushchoubey.com/learn_programming/",
            "relUrl": "/learn_programming/",
            "date": " • Dec 21, 2020"
        }
        
    
  
    
        ,"post224": {
            "title": "Research",
            "content": ". Plateau of progress . There are many fields where the reward of discovering new things are a long time before there is implementation. (Like pure maths, theoretical physics, etc.) . During the colonial era, Europeans gained a significant advantage over other civilizations. One reason was their willingness to accept things that they don’t know and to find ways to understand the world better. 1 . The question of scientific progress was as important as anything political. . Though today we live in an era were a lot of scientific progress is made. The increase is because a large number of people are working on the problem. Even if the problems they are trying to solve are trivial (like social media). . The amount of effort required to research in the pre-colonial and colonial era was far greater. This should increase productivity and it does in some sense. But it has lead to a reduction of effort on the human part and therefore the result is the same. . Research . Research gets an entitlement. People think it is hard. . It’s likely how people define it. You just have to work at something. And if you work on it you may discover things that you don’t even know are new. . The reason research gets a bad entitlement of because of ready-made solutions and the things that are already been discovered/made. . We miss the point that all the polished discoveries we see today had humble beginnings. . I would argue that if the discovery you made or a solution you made even is it already exist and you didn’t know about it is still an act of research. You may even find some improvements. . The act of research does not have to be big. . Ready-made solutions - Globalisation . Globalisation has allowed us to take fruits of someone else’s research. . As of 2020, China and the USA dominate technology. We Indians (and many from other countries) are more of a witness to this domination. . There are also different issues to solve. The social issues in India and different than those in developed nations. And therefore globalisation has a faster positive impact compared to research activities. . Sapiens by Yuval Harari &#8617; . |",
            "url": "https://www.ankushchoubey.com/research/",
            "relUrl": "/research/",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post225": {
            "title": "Hurrying does not help.",
            "content": "Hurring is similar to stock market investing. . If you rush, you make a profit some times and you losses some times. In the end, you are in the same place. . Watching YouTube videos at 2x speed won’t help. Especially if it is a field you are not familiar with. . If you write super fast, you’ll not be able to understand what you wrote. . If you read too fast, you won’t have enough comprehension. . If you push yourself to work, you’ll burn out. . There is a point before you rush called the minimum effective dose (MED) 1. . If you go beyond MED the speed will fast but progress will be slow. If you go below MED the speed will be slow and progress will be slow. . If you are the MED, your speed will be optimum and progress will be optimum. The tricky thing is MED for any task changes in moments. . No rush. No pause. 2 . 4 Hour Body &#8617; . | Tim Ferriss &#8617; . |",
            "url": "https://www.ankushchoubey.com/hurrying/",
            "relUrl": "/hurrying/",
            "date": " • Dec 17, 2020"
        }
        
    
  
    
        ,"post226": {
            "title": "Why Software Engineers Should Enter Other Fields.",
            "content": "Software Engineers . Software Engineers solve problems by building solutions. . We keep iterating on the solutions, make it better and eventually replace the solution with something completely different. . We have efficient processes for managing projects and handling productivity. Even if a deadline is near, the solution is shipped. . Software developers ability to get so much done is because of the nature of software and focus on efficiency. . What problem to solve . A non-technical person does not know the problem that can be solved using technology. . A technical person does not know what problems to solve. The result is that time is solved solving problems on trivial issues like social media instead of more important fields. . How other fields can benefit . Some fields have slow progress rate. There is a long delay in medical research getting to production (Approx 20 year 1). There hasn’t been much innovation in the field even in engineering fields like Civil engineer or biotechnology. . The reason is likely because these fields require physical products and take longer to build and test. A technology solution can help speed up some of their processes. . Graphics Modelling and Simulations to speed to testing | Data Organization and Retrieval Systems to make sure the right information is accessed. | Deep Learning Models to help search for replacing overdependence of specialized hardware. | Automation of manual tasks | . The best way to ensure these fields get benefits of innovations in computer technology is to work closely with experts in the field or to get into it ourselves. . Photo by National Cancer Institute on Unsplash . Tim Ferriss - 4 Hour Body &#8617; . |",
            "url": "https://www.ankushchoubey.com/engineer/",
            "relUrl": "/engineer/",
            "date": " • Dec 13, 2020"
        }
        
    
  
    
        ,"post227": {
            "title": "Eventually Perfect Feature",
            "content": ". Photo by Stephen Phillips - Hostreviews.co.uk on Unsplash . There are two approaches to building a new feature to existing software. . Approach 1: Ship with all sub-features on the first release . This approach works well when the feature is small or needs to be secret to gain a competitive advantage. . Approach 2: Ship with minimum sub-features. Then iterate. . This approach works better because most software features never get used. . Unless you are a FANG company or even if you are, you should save your resources to focus on the area that matters most. Which you only understand after the feature is in the wild for a while. . If the feature is secret, allowing beta of minimum required feature is helpful. .",
            "url": "https://www.ankushchoubey.com/eventually_perfect/",
            "relUrl": "/eventually_perfect/",
            "date": " • Dec 8, 2020"
        }
        
    
  
    
        ,"post228": {
            "title": "Write Tests after Cleaning Code.",
            "content": "Quality of code determines the quality of the test. . An unclean code will lead to an unclean test. . Hence, the tests will be as hard to understand and modify as the code. . If one decides to improve code quality, then all of the tests to be refactored too. . Overall the workload will be about thrice more work than it needs to be. . A better alternative is to write code, clean it, and write tests. .",
            "url": "https://www.ankushchoubey.com/writing_test/",
            "relUrl": "/writing_test/",
            "date": " • Nov 20, 2020"
        }
        
    
  
    
        ,"post229": {
            "title": "Plan quickly. Move fast. Break things.",
            "content": ". Photo by Chase Clark on Unsplash . I have made this mistake a lot. . I spent too much time planning and too much time deciding the perfect strategy which often took months to come up and then either never implemented it. . Later I found out that the hard way was much shorter and would often take me just a few hours or at max a week. . There is an analogy in programming which says that a programmer will spend six hours automating something that takes six minutes. . If something is repeated so every frequently then the six minutes saving in time is justified. . But for most things, it is better to move on fast and break things. .",
            "url": "https://www.ankushchoubey.com/move/",
            "relUrl": "/move/",
            "date": " • Nov 3, 2020"
        }
        
    
  
    
        ,"post230": {
            "title": "Age is not a perfect measure of experience",
            "content": ". Photo by Paige Cody on Unsplash . Kids learn too . Some kids learn hard skills like playing the piano at a very young age. They often get labelled as a child prodigy. . This categorization assumes that the child is born with talents and ignores the fact that he/she has to spend years learning the skill. . Most child piano prodigies start at age 4, by the time they are age 10 they already have 6 years of Piano experience. No doubt they have skills. . People who learn faster . On the other hand, some people put in more effort to learn to skills properly. . They either grasp the ideas or maybe had better learning resources. . Either way, they learned skill with no formal learning/training would take years. . Argument . Most corporate environments favour “years of experience spent at work” at a primary factor for determining salary and projects. . This ignores the ability of the person to get the job done. .",
            "url": "https://www.ankushchoubey.com/age/",
            "relUrl": "/age/",
            "date": " • Nov 3, 2020"
        }
        
    
  
    
        ,"post231": {
            "title": "Easing the process of DB versioning & migration tool adoption",
            "content": "Likely reasons for Liquibase non-adoption . Multistep step process | Experimentation while creating statements | Creating rollback | Copying the statements | Saving into git | Running Liquibase in QA | Fixing problems that come while running Liquibase. | Lack of GUI | . These make Liquibase slower and unappealing bottleneck compared to the alternative of just putting the script in a CR. . Solution 1: . Providing an alternative to Liquibase . or . Making Liquibase Easier . A simple web tool can be created which only developers would use to automatically generate output in Liquibase or another format which can be executed on a DB. . Features: . Generation of Liquibase script | . As described above . Execution of DDL scripts on DB | DDL commands can only be executed via the tool. | . Along with a message for why the change was made along with the developer id. Optionally, if DDL is associated with a story or a git branch then that info can also be added. . Logs . Like Kibana: An easy way to track all the DDL changes in a DB. | . Similar to logs easily available and searchable. . Solution 2: DB Deployment Manager . In each team a person can be made responsible for all DB DDL changes. Similar to CAST Quality Manager. . Change the focus to process (Automated DB Deployment) instead of tool (Liquibase) . Developers don’t seem to know the goal of Automating DB Deployment. . I don’t believe anyone would disagree with Automated DB Deployment. The problem is likely the tool: Liquibase. .",
            "url": "https://www.ankushchoubey.com/v1/adoption-of-db-migration",
            "relUrl": "/v1/adoption-of-db-migration",
            "date": " • Oct 31, 2020"
        }
        
    
  
    
        ,"post232": {
            "title": "First Hackathon",
            "content": ". Photo by Roman Synkevych on Unsplash . I always wanted to participate in one but I was afraid that my skills are not enough. . But after working as a programmer for the last two years, I realized that almost everyone starts with no skill and figure out a solution eventually. . So my goal for joining was to learn as much as I can. I knew I could do at least something even if not at a level I would expect. . These are some lessons I learned . Goal is not working software . The goal for the organizers was not complete working software. The goal was to see how the problem can be tackled from different points of view. . Team . Our team could have been better organized. We almost wasted 2 weeks out of 5. In the second week, I tried taking up leadership, arranging meetings, and talking to people. But the by 3rd week my “leadership” declined. . The reason for the decline was that I was managing another full-time project. . Support . The organizers were supportive. Plus we had access to AWS Experts. So we could ask them questions on specific issues we were facing with AWS. . Experimentation . Many teams played it safe. They stuck to what they already knew. . We experimented. We tried things we did not know before. Though we did not win the challenge, this experimentation increased our learning and the likeliness that we’ll be better prepared for the next one. .",
            "url": "https://www.ankushchoubey.com/first_hackathon/",
            "relUrl": "/first_hackathon/",
            "date": " • Oct 30, 2020"
        }
        
    
  
    
        ,"post233": {
            "title": "Software project never ends",
            "content": "Building software is having no fixed deadline. Below are some reasons why. . Software vs Physical Products . Software products are hard to wrap the head around when compared to physical products. . A physical product occupies physical space which of course software does not. . Once a physical product is made, unless it is designed for modification, it cannot be modified. . The software can be modified and improved at any time. . There is always something to do . When you look for problems to solve, you’re sure to find something. . Optimize code. | Clean code up and make ready for the future. | Fix bugs. | . And it can be hard at times to stop. . Over Engineering . Something can be built easily but we spend a lot of time deciding what the future thing might be and then we over-engineer. . I have been guilty too. . The reason to stop. . It is said that in any software product around 70% of features are not used. . Many software themselves are not used. . Time spent fixing this trivial non-existent problem can be spent fixing some other big problems. . Human Intuitions and Definition of Done . Humans can find ways to improve everything. Our judgment is not objective. We need something objective. . Having a strong definition of done can help be objective. .",
            "url": "https://www.ankushchoubey.com/software_end/",
            "relUrl": "/software_end/",
            "date": " • Oct 23, 2020"
        }
        
    
  
    
        ,"post234": {
            "title": "Office is just school for adults",
            "content": "For many, working 9-5 often is considered non-ideal. Instead, wishing to work for themselves or not to work at all. . Some benefits of working at an office that are hard to replicate otherwise are: . Social Circle . We tend to keep office friendships shallow. . But in a lifetime, we make more friends at the office than from school and college combined. . These include people from many different backgrounds and age groups. . Learning opportunities . Higher-ups in the office want people to take up more responsibility. . A win-win is when there is something you want to do or learn that can help solve a business problem. . All you have to do is ask! . Unlike school, you can pick and choose a lot of things. . Experimentation . Office also provides opportunities to experiment. Try new things out. . Of course, these things are planned within a team and for the benefit of all. . Example: Proposing a new product idea. . Hierarchy . Schools have a hierarchy of authority organized by age: Teachers over the students. . Most offices resist age-wise authority. They tend to favor ideas and a person’s past deliveries. . Time . Unstructured time is hard to manage. . The office provides a well-balanced structure for most. . Meaning . Work provides meaning. . There is nothing that gives more satisfaction than knowing that customers like your product. .",
            "url": "https://www.ankushchoubey.com/the_office/",
            "relUrl": "/the_office/",
            "date": " • Oct 21, 2020"
        }
        
    
  
    
        ,"post235": {
            "title": "Empowerment/Enabling",
            "content": "The answers by themselves are not that important. . The process for finding the answer is more important so that they can replicate the process later. . Over-dependence is a bottleneck. Always providing ready-made solutions seems to turn people weak and dependent. . And it is your responsibility 1 to make them capable of themselves finding the answers and making informed decisions. . So, everyone is free to work on problems that truly matter to them. The once that only they can solve. Allowing people to work in parallel. . Great companies are structured such that the star entrepreneur/performer can leave the company at any moment. The company will still run just fine. . Extreme Ownership by Jocko Willink &#8617; . |",
            "url": "https://www.ankushchoubey.com/giving_help/",
            "relUrl": "/giving_help/",
            "date": " • Oct 20, 2020"
        }
        
    
  
    
        ,"post236": {
            "title": "Definitions",
            "content": "There are many terms that are not hardcore logic. . These terms get biased by people’s past and their current thought processes. . You can think of these as levels but it’s always hierarchical. . For instance . Rich for someone is being able to afford a house. | Rich for someone else is being a billionaire. | . The questions like “How to be rich?” are very different for both of those paths. . Likewise, Happiness can mean just having basic needs fulfilled or can mean pure excitement. . Some other things than getting defined vaguely are . Success | Love | Modernity | Secularism | Suffering | Good/Bad | . Good Communicators . I have noticed a quality of good communicators when they explain a term . They listen. | Then try to understand exactly what the person is trying to say. They’ll ask questions if they have not understood properly. | If they have to convey, they convey the exact information at the level that the person can understand. | . One of the ways they do it is by using the right vocabulary words while keeping things understandable. .",
            "url": "https://www.ankushchoubey.com/definition/",
            "relUrl": "/definition/",
            "date": " • Oct 18, 2020"
        }
        
    
  
    
        ,"post237": {
            "title": "Who is your audience?",
            "content": "Photo by Wan San Yip on Unsplash . I once was a participant in the Dance group at my school. . We were performing on Children’s Day. . We started our performance with LMFAO Party Rock Anthem (English). It was a tough dance which we had practised many times. We had also casually added Chamak Chalo (Hindi) to increase our performance length. . When LMFAO ended, we were all tired but there was no applause or appreciation from the audience. . Then a tune rang and everyone started cheering. Chamak Chalo was starting and the audience went bonkers. . The students at the school listened to Hindi songs. We were forcing English songs on a different demographic. . Now when “performing”, I try to keep this in mind. . I recently had an opportunity to play the Piano at an office event. I had decided to play classical as that would best show my skills. But my audience had probably never given much thought to Vivaldi or Beethoven. So I picked Perfect by Ed Sheeran. It was an easy song. But the audience loved more than I had expected. .",
            "url": "https://www.ankushchoubey.com/audience/",
            "relUrl": "/audience/",
            "date": " • Oct 16, 2020"
        }
        
    
  
    
        ,"post238": {
            "title": "Correlation between Deep Learning Concepts and Philosophy",
            "content": "DL = Deep Learning . NN = Neural Network . P = Philosophy . Gradient descent . DL: Optimization algorithm used for training NN. . P: You can reach the place you want one step, in the right direction, at a time. . Keep weights small . DL: Helps NN learn new data faster . P: Keep your identity small so that you can adjust easily. . Local and Global Minima . DL: Local Minima means your NN has learned something but it is not optimal. We always aim for Global Minima. . P: Your views and opinions are not perfect. They are probably just your perspective. . Randomize Weights . DL: Helps you explore the landscape and avoids getting stuck in local minima. . P: Put yourself in random situations to learn from it. . Exponentially Weighted Average . DL: A type of average where more weightage is given to past numbers than latest number. . P: Do you change your path completely if one outcome goes wrong? What about the last n outcomes that were right. . Metrics . DL: Used to check how well a NN has trained. Further training will be adjusted accordingly. . P: Use metrics to see what’s working and not working. Adjust plans accordingly. . Test Data and Testing . DL: Tests NN on unseen data. . P: Test assumption/beliefs to see if they are true or not . Overfitting . DL: NN memorized only certain things completely and cannot variations of unseen things. . P: What you don’t yet know is more important that what you already know. .",
            "url": "https://www.ankushchoubey.com/dl_lessons/",
            "relUrl": "/dl_lessons/",
            "date": " • Oct 14, 2020"
        }
        
    
  
    
        ,"post239": {
            "title": "Cloud is Worth the Hype",
            "content": ". Photo by Taylor Vick on Unsplash . Cloud has recently excited me more than anything else in the world. Consider this a fanboy rant. . Earlier, I was avoiding the cloud because it seemed very hard. But like every computer science buzzword, it is much much easier than expected. . Recently I started learning AWS. These are a few things that have changed my mind. . Cost: Pay only for what you use . Cloud is anyway cheaper than building and maintaining your server. . The cost can be optimized further by setting up things properly. . Cost is impacted by decisions such as: . Pay per minute | Different cost for different configuration | Pay per GB of data stored | . And cloud vendors themselves provide options and encourage customers to optimize their usage to reduce cost. . Rapid Availability . Resources are available to you the instant you want them and in the location, you want them at. . If I were to start a Deep Learning project, on my local machine, it would take a full workday to just set things upright. Plus, you’ll have to deal with upgrades and maintenance yourself. . The same thing I wanted to do on AWS, it took just 3 minutes. . Special Hardware . In fields like Machine Learning, you need high computation and specialized hardware. . A cloud provider can provide it instantly. . Similarly, Quantum Programming is a new field for programmers that were not available to most developers. But cloud providers are providing infrastructure for this new field. . Choice: “We’ll provide infrastructure. Your code!” . Traditionally, if you buy hardware and it is not used, you cannot do much other than selling the hardware to reclaim the cost. . Cloud solves this problem by allowing users to change their underlying infrastructure at any moment. . Maintainance: “We’ll provide support. You code!” . Small things like replication of the servers and databases, scaling, sharding, maintaining security, etc are automatically taken care of with a few clicks. . Cloud vendors provide a good set of defaults and out of the box solutions to these common problems. . Abstraction: Easier than Traditional Setup . Cloud vendors make it easier to use the cloud. Things are abstracted and one can choose to learn until what is required. . Most normal developers would not have to deal with specifics of the infrastructure. . Special APIs: Code less . Almost all cloud providers provide special APIs for things like text recognition, image recognition, and even blockchains. . One need not be an expert to use these out of the box solutions. . Conclusion: Cloud is a Win-Win . Cloud provides a lot of consumer surplus. . Cloud is such that the price of owning and maintaining for the individual user than if they would have built a server themselves. . While for the cloud provider, it is also cheap because they provide it at scale. . Not to mentions, they are easier to use and provide the flexibility of choice. .",
            "url": "https://www.ankushchoubey.com/cloud/",
            "relUrl": "/cloud/",
            "date": " • Oct 13, 2020"
        }
        
    
  
    
        ,"post240": {
            "title": "Communication Bottleneck in large organizations",
            "content": ". Productivity increase with regards to extra hires . A smaller company sees an immediate boost in productivity just by the addition of a few extra employees. . As demand increases, the company keeps hiring and increasing its employees. . But after a certain point, the increase is the number of employees does not increase as much as it used to. . Overhead of having many employees . As the number of employees increases, the communication overhead increases. . It becomes harder to align these increased employees to company policies. . As a result, a separate department/role is to develop whose job is to check if employees following guidelines. (More Hiring) . Having a Communication Policy . The amount of message hops it takes to replay information is very high, especially from lower-level employees to a top-level executive. . The time spent in relaying communication is the time that can be spent working on the product. . This is why having a good communication policy is essential. . Communication Policy . The focus should be on reducing as many human middlemen as possible. . To reduce the number of people involved in accessing information . These help employees find the information themselves first. . Proper Documentation | Recorded Lectures | . A simple FAQ/Wiki page is a good starting point. . Focused meeting . Meetings are usually justified regardless of whether the meeting is focused or whether people involved in the meeting are related to it. . Somethings that always make meetings more productive: . Having an Agenda | Timeboxing | Having a limited number of people | . Contacting Policy . Most people don’t need information fast. Rather most expect clarity in 2 things: . Who to contact for what sort of information. | By when are they expected to get a response. | . Faster lanes for getting feedbacks and suggestions . In larger companies, it becomes difficult to find problems on an individual employee level. An employee may have a really good suggestion/idea. This type of feedbacks should reach the right people as quickly as possible. . Having open to all suggestions/feedbacks forms is a kind of faster late to make this possible. .",
            "url": "https://www.ankushchoubey.com/communication_bottleneck/",
            "relUrl": "/communication_bottleneck/",
            "date": " • Oct 10, 2020"
        }
        
    
  
    
        ,"post241": {
            "title": "Give credit where credit is due",
            "content": ". Praised should be distributed well. . There are many types of employees. . Some are bad at work they do. Just bad. | Some who are bad at work they do. But listen to feedback and try to improve themselves. | Some who have been working hard behind the scenes but aren’t popular. | . Usually, behind every popular team, there are faces in that team who aren’t as popular. . Sometimes they choose not to be popular. Or sometimes in cases their work is ignored. They might have been the hardest worker of all but usually due to some or the other human bias people ignore to praise them. . With some employees it is fine. While for others, they start to see opportunities and growth missing. . They become resentful. . Which is not a good thing. No one resentful in a team wants to work towards the same goal. . Flattery . Maybe the education insitutes I had been during younger days were like this. Imagine the topper of your class. He she get’s extra praise and attention from the teacher. His problems are being solved. . Sometimes they even get praise for things they do not do. They get unfair advantage for things they don’t deserve. . While those working hard in the background may not get any attention. They don’t get praises plus they don’t get any special care. They turn resentful. . Some people recieve flattery for their work. Their contribution might be little or none. They haven’t even worked hard and they even know it. But when they recieve such flattery, there are a few ways they’ll take it. .",
            "url": "https://www.ankushchoubey.com/recognition/",
            "relUrl": "/recognition/",
            "date": " • Oct 8, 2020"
        }
        
    
  
    
        ,"post242": {
            "title": "Reading Books",
            "content": "Photo by Road Trip with Raj on Unsplash . Reading is the nourishment that lets you do think in interesting ways. 1 . In some sense, you are downloading dense information into your brain fast (a software update). . And it is fun! More fun than many TV shows after a certain point. . Books are of higher quality because they go through a lot of “processes”. Other mediums do not. Draft-&gt;Editors-&gt;Reviews-&gt;Publisher. . Reading is also an antidote to shortened attention span. . If you can really read, then you can read way faster than you can listen or watch. . Habit . Keeping distractions away while reading helps. . To start, read anything. Even a page better than no page. . Reading slowly is okay. You may finish the book in 3 months. Not a big deal. . Medium . Reading on a phone 2 is great if you can manage to keep distraction beyond. . Reading physical books is ideal. 3 . You can listen to an audiobook as a last resort but it likely won’t be fulfilling and you won’t remember details. 1 . New words . If you don’t know a word in the book, learn it right there and there. If you don’t you are just approximating what the author says. . If you are going to read a series of 📚 then learn each new word. The same word will be used later. . Selecting books to read . Reading from different categories is an easy way to broaden your perspective. . Always be reading at least 2 books, fiction, and non-fiction. . Non-fiction: Makes you more informed and puts things into action. | Fiction: Makes you less boring and counteracts the overthinking created by non-fiction. | . Don’t buy non-fiction books that have just been released. Let the reviews come in. . If the right book is selected, it is worth paying the price. . Reading foundational books like History of something or mathematics rather than diving into the latest trends allows you to broaden your understanding and remember faster 31. . Speed Reading . Reading speed increases naturally as you get into a habit of reading regularly. . Your reading speed is higher when you read a topic you are familiar with. It is slower when you read something new. . Therefore if you are speed reading, it is probably not worth reading that book. 1 . There is nothing wrong with reading slow. Big abstract concepts require time 3. . Reasoning . Don’t agree with everything you read. Authors are humans too. 4 . Put yourself in the shoes of the author and try to reason through his conclusions. . You want to internalize the author’s thinking/mindset so that you can see the problem from his point of view. 1 . Reading books that provide a counter-argument to your thought or to a book you have read is also interesting. . If you don’t understand a certain section or a concept, google/youtube it and clear it. . Memorize . Book notes make it easy to non-only reason but to memorize the gist of the book. . Don’t copy-paste. Write in your own words. It should be your thoughts. | . The narrative makes it easy to remember. Some non-fiction books have a narrative too. . You can choose to read fiction instead of non-fiction for the same topic. . Get interested in big picture first. Get interested about the author. You’ll be interested about the book. . Naval &#8617; &#8617;2 &#8617;3 &#8617;4 &#8617;5 . | Elon Musk on The Importance of Reading Books &#8617; . | How Bill Gates reads books &#8617; &#8617;2 &#8617;3 . | James Clear &#8617; . |",
            "url": "https://www.ankushchoubey.com/read/",
            "relUrl": "/read/",
            "date": " • Sep 26, 2020"
        }
        
    
  
    
        ,"post243": {
            "title": "Who is a leader?",
            "content": ". Photo by Morgan McKnight on Unsplash . Lately, I’ve been watching Simon Sinek and Jocko Willink videos. . Leadership can be thought of in multiple ways. . Not a leader . Uninspired. | Not focused on work. | Focused only on the paycheck. | . Forced to be leader aka The Manager . He/She is a “leader” because of their position in an organization . Their role has nothing to do with their skills, rather they have “years of experience” so it is weird for others to keep them at the bottom position. . Pain to ideas/people around them and always wants things to be their way because “I said so” + Micromanagement . Chooses to be a leader . A person who chooses to be a leader regardless of their position in the organization. . He/She . sees a problem and proposes a solution | takes on responsibilities | delivers on them | disagrees with a process/method/idea when it is needed but provides proper reasoning and is ready to discuss over it if needed | debates and let’s the best idea win | . If someone is stuck, he/she helps them and doesn’t just leave them i.e he/she is a good team member. . Treats everyone the same regardless of their title. . . It is fun to see people’s behavior around you and think about what type of leader they are. .",
            "url": "https://www.ankushchoubey.com/leader/",
            "relUrl": "/leader/",
            "date": " • Sep 26, 2020"
        }
        
    
  
    
        ,"post244": {
            "title": "Just ask for it",
            "content": ". As I get older I realize one thing that most things you want you can just ask for it. . Do you want an opportunity? . Ask the person in charge. . Do you want to get a refund or have a customer complain? . Say it. Don’t hide. . Want a bit of specific advice from someone celebrity figure you admire? . Text/Tweet at them (Keep it short at quick) . Everyone is there to help. . But no will know when to help if you don’t say that you need it. . Companies want to keep their customers happy. Similarly, even people want other people to grow and help them. . This also allows them to ask you for help when they need it. 1 . Photo by Edwin Andrade on Unsplash . Jordan Peterson &#8617; . |",
            "url": "https://www.ankushchoubey.com/ask/",
            "relUrl": "/ask/",
            "date": " • Sep 12, 2020"
        }
        
    
  
    
        ,"post245": {
            "title": "The lifetime of 'Content' is getting smaller",
            "content": ". A few years ago there was a lot of rage for getting onto social media. . The argument was that once you upload something, your content stays on the internet forever. Therefore earning you money/opportunities forever. . A few years ago you could easily see people Monopolize a category just within a few months of uploading. . A few changes happened between 2013 to 2020 (now) that seem to have effected this notion. . Competition and Similar Content . The amount of people uploading and watching “content” has exploded. . If a few years ago the same content would have less competition. But now not just the content has to compete with other similar content but also over factors like freshness. . Reducing attention span . Personalized Recommendation Engines . Bigger companies saw value in the shift in attention towards online sources and exploding data. . Since the amount of data has increased, the recommendation algorithms designed to keep people engage and make advertisers happy are getting more and choosy. . Personalized Search Engines . A few years go personalize results only appeared for feeds, now appear in normal search results too. This means that everyone who searches for something gets different results. . But this also means that you are more likely to target your specific demographic as the algorithm thinks it is the right fit. . These all lead to change in SEO strategy . The basic search engine optimization (SEO) methods like keyword optimization and backlinking no longer work as well as effectively as they used to. These methods were more or less automatic and easy for people to make their websites reach people easily. . The newer methods which work along with are basic SEO strategies are more analog. A person has to decide how to come up with these: . Site-specific strategies like Thumbnail and Timestamp on Youtube, | Creating a ‘brand’ account and promoting | Engaging and trying to retain users with witty and regular posts/stories | . Conclusion . The newer methods of engagement are more work than what they were a few years ago. . At the same time, the result of these efforts is more shorten as the same strategy is applied by every other content generator. . The role of automation in content marketing is getting smaller while that of strategy is getting larger. . Photo by Stephen Phillips - Hostreviews.co.uk on Unsplash .",
            "url": "https://www.ankushchoubey.com/content/",
            "relUrl": "/content/",
            "date": " • Sep 10, 2020"
        }
        
    
  
    
        ,"post246": {
            "title": "Tips for coding on a slow computer",
            "content": ". I usually code on slow computers. These things help me keep sane. . Disable animation and keep open apps to a minimum . Use as much terminal/cmd as possible. . git | npm start | . No GUI software can beat the terminal’s speed. . . Tip: To speed things up create .sh/.bat files so that you can run repeated commands with a click of a button If your backend is pretty stable, run the packaged file. . In my case when I am focused on angular development only, I run the .war file in a separate terminal. . Run apps separately . Instead of using the terminal from VS Code, use a separate application. . If one application crashes at least the other one is loaded. . Optimize your IDEs . You can easily find ways to speed up your IDE. Just google it. . In my case, I have made changes to settings.ini files for STS (A Java IDE). . Photo by Zane Lee on Unsplash .",
            "url": "https://www.ankushchoubey.com/slow_computer/",
            "relUrl": "/slow_computer/",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post247": {
            "title": "Opinions/Events are not black and white.",
            "content": ". Lack of information . Sometimes the decision is just a lack of information at the time. . Most of us would want to make optimal decisions all the time. . But as humans, we have our shortcomings and everyone is trying to do their best with the information they have. . There is always a trade-off. . In every decision you make, there may be points in which you think the decision is right. And there are points where the same decisions are bad. . If you ask people for their opinion over something, each one of them will say a slightly different thing. . Reasoning . The opinion isn’t enough, you got to dig for reasoning. . Reasoning over opinions for many is not developed. . Some choose an opinion because it is popular or because their friends and family have a similar opinion. . Those that have unique reasoning are interesting people. . Knowing their reasoning helps you think from their point of view easier. . Your opinion is probably right but it may be wrong. . Any opinion you have or someone else has is probably right. . There are 6 billion people alive right now. . If you someday create a random belief, you could estimate that at least someone would have the same belief as you. . Therefore, you’re likely never completely wrong. (unless it is an opinion about logic 🙃) . Sharing . You cannot convince everyone. Everyone has a different point of view. But you can try to explain yours. . This is why we have debates and democracy. Systems where people share their opinion as try to come to a consensus. . Respecting other people’s opinions . You may be right. Maybe absolutely right. . But still you are not them. In exactly their life circumstances. . We are impacted a lot my people around us. . Free speech . Trying not to offend over important topics is not useful . If you are talking about something important, then you’ll likely offend someone. . If you are sharing with 10 people, it is easy to not offend someone. But when you are sharing with a 100 or a thousand of 10000, then just by pure randomness you may offend someone. 1 . A good founder listens to everyone then does what he wants to do. 2 . Photo by Clem Onojeghuo on Unsplash . Jordan B Peterson &#8617; . | Naval Ravikant &#8617; . |",
            "url": "https://www.ankushchoubey.com/black_white/",
            "relUrl": "/black_white/",
            "date": " • Sep 8, 2020"
        }
        
    
  
    
        ,"post248": {
            "title": "Probabilities",
            "content": "This article is written at age 23. My views will be more informed in the future. . . . Success can be defined in many ways. This article talks about achievement. . Randomness and Survivorship bias . We often hear people tell stories about why they are “successful” was because they worked hard, something they controlled themselves and ignore the possibility that they were lucky. . Lucky seems bad for many people. But I would argue that the world has always been unfair and some things just happen randomly. . Example: Maybe they were just born in a fortunate time when social media was not made and without much technological innovation someone could build a fortune of a company. Time of birth is a random thing that we don’t have control over. . You’ll always find someone who has it easy . Let’s say you’re trying to lose weight and you don’t know where to start. So you decided to starve is a good path to follow and soon realize that it is not. . Then you spend 4 years trying to follow the path of starvation and lose about 5-7 Kg. And you’re happy about it. . Now someday you hear someone close to you or a friend of friend lose 9 Kg in a month. And he did not take medications or had surgery but a good diet plan which was expertly supervised. . You might have “struggled more” but someone was “lucky” enough to have resources (doctors) that lead to better results in less time. . Probabilities . Luck/Randomness will always be there. . There will always be things outside of one’s control and we cannot do anything about it. . But there are some ways that we can increase the “probability” of luck being on our side. . Work . We may already be “lucky” but not prepared. . Overcoming Obstacle . The obstacle is the way. 1 . Facing an obstacle means you are on the path and the only way forward is to overcome it. . We can overcome obstacles faster by being flexible. Trying new things out. . If a process/method you are following does not work, it will likely not work in the future too. Be flexible and open. 2 3 . Increasing Leverage . These are things you can control and develop . The Not So Unfair Luck 4 . Mindset Being calm and disciplined | . | Education | Network Help people | . | . Multiplying Skills 5 6 . These are skills that apply to multiple areas and are deeply impactful. . Maths | Learning Faster | Communication Writing | Speaking | . | Focus | Programming | . Obstacle is the Way by Ryan Holiday &#8617; . | Samurai to Modern Army in 10 years &#8617; . | If it’s not a hit, switch by Derek Siver &#8617; . | The Unfair Advantage: How You Already Have What It Takes to Succeed by Ash Ali and Hasan Kubba &#8617; . | Naval &#8617; . | Derek Sivers &#8617; . |",
            "url": "https://www.ankushchoubey.com/probabilities/",
            "relUrl": "/probabilities/",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post249": {
            "title": "If it's official, communicate via email",
            "content": ". If you are having a deal or an agreement or a negotiation of some kind. Do it via email. . If you had communication offline or via another medium that is not documented, send a mail stating the minutes of the meeting and agreement. . If necessary ask for a confirmation reply. . Why? . I used to think this is disrespectful as I most of the time I had communication with the person offline but as humans, we all of us forget. . The email is for your future and the receiver’s future self. . In case, if a person or company or even you yourself deny the deal, you have a written “official” mail which cannot be repudiated. . Most people and companies are normal but some are malevolent. You’ll thank your past self for the email. . If you had offline interation . To not look robotic, mention to the person that you’ll be dropping a mail mentioning discussed points and would require confirmation. . I learned this from my managers and my father. . Photo by Onlineprinters on Unsplash .",
            "url": "https://www.ankushchoubey.com/official_email/",
            "relUrl": "/official_email/",
            "date": " • Aug 22, 2020"
        }
        
    
  
    
        ,"post250": {
            "title": "Businesses are for making money",
            "content": ". I often argue on the point of companies should providing value. . But on one level, maybe one of the most important thing is all companies are there to make money. . Providing “Value”: Employee POV . Providing value is often never well defined and there can be many ways to look at it. . Even employees working in a company getting a steady paycheck, raising a family, having health insurance for themselves and their family is a valuable thing. . Not every company is in an industry, geographic location or stage of growth where they can be good at everything. . Painful part . The most painful part is when the company drops its employees. It usually does not happen because the company is evil. But because dropping employees is the lesser evil. . Either you drop employees (and resources) or let the whole boat sink (with everyone in it). . Big world events like Pandemic or recession always remind us how important and valuable money is for companies and individuals. . Counter Argument: Facade Companies . Photo by Morning Brew on Unsplash .",
            "url": "https://www.ankushchoubey.com/for_profit/",
            "relUrl": "/for_profit/",
            "date": " • Aug 20, 2020"
        }
        
    
  
    
        ,"post251": {
            "title": "Opportunity Cost",
            "content": "If I am a lion 🦁 should I be chasing mice 🐁 or should I be chasing a deer 🦌? 1 . Focus — saying no to a dozen good ideas so that you can put your resources on things that matter. 2 . Tim Ferriss &#8617; . | Steve Jobs &#8617; . |",
            "url": "https://www.ankushchoubey.com/opportunity/",
            "relUrl": "/opportunity/",
            "date": " • Aug 19, 2020"
        }
        
    
  
    
        ,"post252": {
            "title": "Don’t try to force a sale on people who are not your user base",
            "content": ". These apply to companies which sell “premium”/high cost products. . Many companies try putting limited time offers making people decide to put money down. . I have fallen victim myself. Multiple times. Especially with gyms and education sites. . I realize they have limited time offers every other day. 😑 I could have waited before jumping to their sales presentation. . Many startup which are in hyper-growth stage do this. . Okay for middlemen . For middlemen companies such as shops and e-commerce sites. It matters less. . They are middlemen, they don’t care about the customers. They care about sales and money 💰. . Not okay when you are selling yourself . But for companies which sell products themselves, they risk one every important factor. . What happens when user does not like your product? . He was half sure about buying your product. | Now he will tell everyone in his connection to not purchase your product. | Plus he’ll also mention to them not to fall for your “sales presentation”. | . I have done so myself multiple times. . Word of Mouth sale is quite underrated. . Photo by Markus Spiske on Unsplash .",
            "url": "https://www.ankushchoubey.com/forced_sale/",
            "relUrl": "/forced_sale/",
            "date": " • Aug 19, 2020"
        }
        
    
  
    
        ,"post253": {
            "title": "Facade companies",
            "content": "Companies that don’t actually care about solving a problem. . They are here only for money, increasing valuation, getting more investors, getting sales by tactics such as selling themselves (coupons), brand, and social media posts. . Then when everything is all set, the founders will exit without hesitation. Not because the problem has been solved but because they didn’t care about solving the problem at all. It was just a facade. . Counter Argument: Businesses are for making money .",
            "url": "https://www.ankushchoubey.com/facade/",
            "relUrl": "/facade/",
            "date": " • Aug 19, 2020"
        }
        
    
  
    
        ,"post254": {
            "title": "Time tracking over programmers is counter-productive",
            "content": ". “Programming” . The job of a programmer is to think and then implement a solution. . It is better to not write for an hour when you don’t have your thoughts organized in your mind than to write for hours and then spend all week trying to fix and fiddle with it. . The process . When starting initially students are thought to write down the algorithm, make flowcharts, etc. and it is understandable that as you get more experience programming you may want to skip that. . Especially if the problem is something you have already worked on. . But don’t implement something without giving it thought. Take time to get your thoughts organized. You are not sitting in an exam. . Why time-tracking is counter-productive? . The reason I say time-tracking is counter-productive is: . Somedays you realize you have written a bunch of code and it works but works like crap but you cannot do better. | Then the next day you come back to it… it’s still ugly. | Some days later you realize that the work you have been doing for the past several days is already done in an Open Source Module. | And you discard whatever you had coded up to that point and start from scratch again. | . Conclusion . Programming requires a lot of “research” and thinking. Things that can be done (can be done better) away from a screen. . Photo by Veri Ivanova on Unsplash .",
            "url": "https://www.ankushchoubey.com/time_tracking/",
            "relUrl": "/time_tracking/",
            "date": " • Aug 18, 2020"
        }
        
    
  
    
        ,"post255": {
            "title": "When you are just starting out, don’t try to imitate the expert.",
            "content": "Imitate after you have a firm base to understand what and why they are doing something. . Experts have a hard time explaining things they have internalized. . Trying to copy them at-least initially will likely lower your confidence and make you wanna skip and go home and sleep. . People on YouTube have a “perfect execution” and they usually don’t show how much work goes behind it. A way to look behind their work is to look at them performing Live or streaming Live. . For programmers, it can be helpful to look at GitHub commits too. . Similar but with a twist: Observe other people in action .",
            "url": "https://www.ankushchoubey.com/imitating_experts/",
            "relUrl": "/imitating_experts/",
            "date": " • Aug 17, 2020"
        }
        
    
  
    
        ,"post256": {
            "title": "Make your code configurable.",
            "content": "In one of the posts, I wrote previously I explain how programming has become configuration. . Once you have made your software that might be part of it that might need change. Most changes are simple such as: . Increasing the font | Changing colors | Somethings that work should work on specific environments or domains | Features such as storage location | . Rather than hard coding everything, make these things configurable. . Something that can be changed with just a click of a button or by changing properties or via Database. . Small things such as these should not take any time. . Also, if there is something that some thing which requires user preference, then give them the option to choose it themselves by making the configuration available to them via UI. . One of the easiest ways to do it is make all constants have default value but be configurable. . For example in Spring Boot you could use @Value with default value. . Bad: . public static final String successMessage = &quot;SUCCESSFUL&quot;; . Good: . @Value(&quot;${success.message:SUCCESSFULL}&quot;) public String successMessage; . Similar: Programming is now Configuring .",
            "url": "https://www.ankushchoubey.com/code_configurable/",
            "relUrl": "/code_configurable/",
            "date": " • Aug 17, 2020"
        }
        
    
  
    
        ,"post257": {
            "title": "Middleman",
            "content": "Middlemen companies provide services from one company to either another company or to consumers. . Examples . Stripe | Car Dealers | Mobile Wallets | Food Delivery Services | Ride-Sharing Apps | Most online e-commerce website | . The Business . The reason middlemen can operate is that the source company is too complex for most normal people or companies to understand. . So they make it convenient for people. . Risk . But this also is risky if the source company can easily provide the facility themself. Then there is no need for a middleman. . Like when Tesla decided to not sell their cars through a dealership. . Middleman companies in a way act as an affiliate. . The source company deals with creating the product. | The middlemen deal with selling the product. | .",
            "url": "https://www.ankushchoubey.com/middlemen/",
            "relUrl": "/middlemen/",
            "date": " • Aug 16, 2020"
        }
        
    
  
    
        ,"post258": {
            "title": "Support shows how much the company really care",
            "content": ". Overlooked but important . It is a part of a company which is I feel is often overlooked. . The customers who come to support actually use your product and they care enough that they are not jumping switch to another app. Instead they are here to get their problem solved. . It’s not just about pushing a product out, getting money, and then doing nothing. Care for your customers. Not just because they are paid for you and that they will likely continue to use your product … but because it a human thing to do. . Make it easy . Make it easy for them to contact you as easily and as fast as possible. . They may want their problem solved quickly: call link | Maybe they don’t like talking: put chat link or support email up. | Respond at least within 24 hours | . On the producers’ side, it also helps to have support costs low by providing FAQs, help guides, and improvements to the product. . Good and Bad Customer Service . Apple &amp; Tesla do wonderful customer service. Even Samsung when they recalled all their exploding Note 10s. . I find banks and telecom companies are bad at customer service. Heck, they even charge fees without much explanation. The reason customers remain is that jumping to another customer is a longer process. They’ll probably jump when an easy transparent option is available (I’ll jump too). . Some companies which I had interaction with and have excellent customer support service: . Apple | Cure.Fit | Waking Up App | Day One App - These guys never disappoint | PepperFry | Urban Ladder | Swiggy | . Most above ideas are probably a result of me watching YC Startup School. . Photo by Berkeley Communications on Unsplash .",
            "url": "https://www.ankushchoubey.com/support/",
            "relUrl": "/support/",
            "date": " • Aug 15, 2020"
        }
        
    
  
    
        ,"post259": {
            "title": "Samurai to Modern Army in 10 years",
            "content": "… if we dig deep in our history and our doctrine, and remember that we are not descended from fearful men … 1 . . . Japan 🇯🇵 was closed to the world for most of history. . They had a history of Samurai and the real encounter they had with outsiders was during Mongol invasion. Whom they had defeated. . They always were and thought of themself as militarily strong. . Forced to upgrade . But in the modern age, they suddenly realized that they were on side of the prey, not predators. . They feared becoming colonized by westerners. . The possibility was very real and they realized they needed to upgrade and upgrade fast. . The Upgrade . In the 10 years that followed, they sent their scholars to all around the world and gathered information about everything good they could find about the world. . Things like education, military, etc, and then added their own Japanese twist to it. . It took Europe around 100 years to upgrade, going through multiple revolutions during the period. . For Japan, there were many missteps along the way but in 10 years, they went from a culture of the swordsman to a modern one and were never colonized. . There are a few lessons that can be taken from this over-simplistic snippet. These can be applied to business and life in general. . Always upgrade ourself to deal with current and future problems | Be flexible enough | Learn by observing others | Drop your ego. Move on with times. | . History cannot be put in such simple terms. . There were a lot of missteps with their way and the way the world was in general. I recommend listening to Hardcore History: Super Nova in the East . Hardcore History is a long podcast. I think the below clip captures the essence of this post. (Go fullscreen!) . This post and its content were inspired by: . One Piece: Wano Arc | Ghosts of Tsushima 2 | Hardcore History: Super Nova in the East (cannot recommend this enough) | . Edward R. Murrow &#8617; . | Cover photo: Ghost of Tsushima: PS4 &#8617; . |",
            "url": "https://www.ankushchoubey.com/samurai/",
            "relUrl": "/samurai/",
            "date": " • Aug 11, 2020"
        }
        
    
  
    
        ,"post260": {
            "title": "There is never enough automation",
            "content": "I see this all the time. . Automating this is enough. . How much automation they are gonna do? . Are they gonna take our jobs? . My view on the topic is automation is never enough. There are still things that can be done to improve. . Jobs will be replaced. Best new technologies remove need and trouble to do things manually. Our jobs as programmers too will someday be replaced by something easy. It is not of question of if. It is a question of when. . A civilization expands by doing things without thinking about them. 1 . Though automation is not enough one could argue on the effectiveness of deciding what to automate. As with anything, a thing that should be eliminated, should not be automated. . I find the below chart to be a useful reminder 2 . . Those who think humans will always be superior to AI as we can “think creatively”, I think underestimate Deep Learning. . The technology had not have matured yet and there is a possibility that a point where we are not the decision-maker. . I side with Mr. Musk on Neuralink: If you can’t fight them. Join them. . . DRAFT . //automation post . programming is having an army of minions that never get tired. . don’t forget you are developers. . write programms for yourself . “Civilization advances by extending the number of important operations which we can perform without thinking of them.” ~ Alfred North Whitehead. Read from the book Deep Work by Cal Newport &#8617; . | xkcd comics: Is It Worth the Time? &#8617; . |",
            "url": "https://www.ankushchoubey.com/automate/",
            "relUrl": "/automate/",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post261": {
            "title": "Copying features and products",
            "content": "While building a product there is a shortcut which many companies take which is they copy features from others. . It helps companies to . Avoid market research They already know who to sell too. | . | Avoid R&amp;D of product They already know the mistakes to avoid. | . | . 1 or more of these conditions make this possible . The original product is from another geographic location | The original product another market. Eg: They serve only premium customers | . | The copying company is so big that they don’t care about copying. Money is all that matters. | They have legal teams ready if something goes wrong. | . | The copying company is so small that the large company would not waste resources dealing with it. | . Copying sometimes is okay . I don’t think it is as bad to copy once or twice. Sometimes customers demand a product to be a certain way. The company has to put down its ego and listen to its customer. . But I do hate companies that survive only on copying features and do not ever innovate or put their thoughts into the product. . Innovative companies set trends. If you are always copying them, you don’t have an advantage. They do. . Customers start to see the company as a clone of the original. . Observations . One’s who usually innovate and make others catch up . Apple | Tesla | Uber | Airbnb | Google | Snapchat | . One’s who catch up some times . Apple increasing the size of their phones. | . Copied because of geographic advantage . Ridesharing services after | . Copies everything . Facebook and its products | Reliance Jio | Xiaomi and other smartphone makers | .",
            "url": "https://www.ankushchoubey.com/copying_products/",
            "relUrl": "/copying_products/",
            "date": " • Aug 5, 2020"
        }
        
    
  
    
        ,"post262": {
            "title": "Good products are built by teams not individuals",
            "content": ". Though it is hard to form a good team, good things are almost always built by teams. . You cannot build it alone. . We have a fixed way of looking at the world. We see one problem from 1 point of view. 10 people can see 10 problems with a different point of view. . And we cannot expect to be right all the time. If we want smart people to be around us, we need to be run by ideas, not hierarchy. 1 And expect the best idea to win. . Plus, it is easier to get work done in cross-functional teams. . Something you may not like is liked by someone else. Your weakness can be covered up by someone’s strength. . I can code the big picture but I miss out on the details. Usually, another team member catches them and corrects them. | I was bad at explaining myself in meetings early in my career. A senior used to back me up. | Similarly, I cover up for specific tasks for other members. | . The advice I would give my past self when I joined work: . Resist the urge to be a solitary wise man. Be a good neighbor instead. 2 . I stumbled upon this thinking about a tweet proposing that every startup should have at least 1 female co-founder. . And thinking about the teams I work and have worked with. 🙂 . Photo by Marvin Meyer on Unsplash . Steve Jobs on Managing People &#8617; . | Ryan Holiday &#8617; . |",
            "url": "https://www.ankushchoubey.com/teams/",
            "relUrl": "/teams/",
            "date": " • Jul 29, 2020"
        }
        
    
  
    
        ,"post263": {
            "title": "Writing process (July 2020 Edition)",
            "content": "Keep going through normal days | Randomly stumble upon something via: Conversation | Book | YouTube | Podcast | Observation | | Keep thinking about it | Wake up at midnight still thinking about it mixed with the creativity of sleepiness &amp; dream. | Either: think about writing a blog, in which case the blog is never written. The idea is lost. | Go back to Step 1. | | just write something and publish. | . | The next day or a few days later, wake up and see an awfully written post. | Fear the reputation damage inflicted by 😑: Wrong grammar | Wrong words | Wrong sentences | Paragraphs not ordered properly | | Fix it. | A few days later, Do a Grammarly pass. | Add sections to make it easy to read and understand | Add references and inspirations. | | A few days later, If someone mentions a point that can be improved upon or is ambiguous, improve it. | Finding and eliminate cliches. | | Get fed up of seeing the same post with no other inspiration in mind. Think why do I even write this blog. | Delete the local setup of the blog and decide not to write anything for at least a month. | | Repeat |",
            "url": "https://www.ankushchoubey.com/writing_process_07_2020/",
            "relUrl": "/writing_process_07_2020/",
            "date": " • Jul 27, 2020"
        }
        
    
  
    
        ,"post264": {
            "title": "Observe other people in action",
            "content": "While doing it yourself is the first step. Observing people is second. . When learning to do anything try to find someone who has already been doing that thing you want to do and observe them in action. . I started learning deep learning and it was very intimidating at start but then I found a YouTube channel where she taught about deep learning and I got to see her developing deep learning projects. She did the same mistakes as me And spent most of the time googling stuff and fixing bugs. I learned more about how things happen in the actual job. I had been fantasizing before. . Similarly, I learn more about programming by watching other people program stop. And by reading other people’s code. . I learn more about how to create an attractive website by learning from smart passive income blog website Reviews which taught me how to set things up. . I learned more about management by watching my seniors and especially my client in a single meeting. . Always be in a position to look 👀 at how others do what you want to do. . It removed a lot of fear, myths, and makes you better by learning from other’s mistakes and methods. . Biographies are also a path. . Similar but with a twist: When you are just starting out, don’t try to imitate the expert. .",
            "url": "https://www.ankushchoubey.com/observe/",
            "relUrl": "/observe/",
            "date": " • Jul 25, 2020"
        }
        
    
  
    
        ,"post265": {
            "title": "If it is a core part of your business, don't outsource, build it yourself.",
            "content": "A lot of companies make the mistake of outsourcing what they are good at or what their core business is. . Some outsource everything . You will see a lot of carmakers just putting their brand over something. Like Suzuki which just puts in a logo on Maruti Ertica which is developed by Toyota. Some even put their brand on cosmetics which has nothing to do with cars. . Or what a lot of Indian smartphone makers did. Micromax and Lava which just bought products from Oppo and put their logo on it. . A few years pass and original manufactures became so good at developing and marketing that they started to sell themself and took over the market. . Some build almost everthing themself . There are companies like Tesla and SpaceX which build everything themself. . They realized that building themself was not just cheaper but they could iterate fast and build better because it was custom made for themself. . As a result, not only they built better products but they develop a lot of Intellectual Assets, IPs, and Patents that their competitors could not replicate. . Tesla builds it’s own software and CPUs for auto-pilot technology which rest are taking help from Google. . SpaceX designs and builds everything on its own. While Boeing buys existing products. . Apple outsources production but still designs everything by itself. While rest rely heavily on Google for phone software and Microsoft for PC software. . Some companies take control back. . Apple is taking back control of its microprocessors because it realized that it can ship better products if it designs the chips themself. . And it is not something that they just decided to do overnight. It must have been planned for years and developed for years. . And still, the rolling out is a 2-year transition giving everyone enough room to adapt. And from what current iPads perform it can be assumed that these new computers will perform better. . Ofcourse you should outsource if … . A large Hollywood studio need not worry about their backend software. It’s not their core business. Their business is making great movies. . A hospital need not build it’s own hospital management software. Either they just buy it or outsource it. . But as discussed above there may be advantages to building it themself 🙃. .",
            "url": "https://www.ankushchoubey.com/build_it_yourself/",
            "relUrl": "/build_it_yourself/",
            "date": " • Jul 24, 2020"
        }
        
    
  
    
        ,"post266": {
            "title": "Just buy it. Don’t build it yourself.",
            "content": "This is the anti-Derek Sivers approach. . If a product already exists, don’t build it yourself from scratch. . I got excited by Rasberry Pi and Arduino boards a couple of years ago. . I bought them all and built: . “Smart” switchboard which I can control from my phone. | A retro raspberry pi gaming setup with an old ps3 controller. | . Building them was a little bit of work. I had to watch a lot of videos and google a lot of things. . I connected Alexa so now I could control lights and fans with just my voice. . Sometimes the problem was just wired and I had the replace them. . It took a month for each but after building it I thought it was done. Complete finally. . Then a few weeks passed. Switch stopped working. The gaming console thing was decent but it stopped working too. . Both took a week each to fix. Finally, now it is complete. . A week later it broke again. Then again after a week. . This was especially inconvenient because my family was using the switch too. . Now raspberry is just lying in storage and one smart switch which family used was removed. . I still had the switch in my room. I just had to fix it. It’s been 2 years. 😂 It is still there. And now I don’t want to fix it. So I am going to finally remove it from my wall. . Why spent time building it yourself when you just purchase it. Especially hardware shit. . Don’t try to develop using plain javascript when Angular or React can do better. . Don’t try to build a gaming computer from scratch when you can just buy a console and be done with it. . Don’t try to “use Linux” where you’ll have to spend a lot of time setting everything perfectly. . Of course, some people do it. But I would argue to only do it if it is your full-time job. Or it is something you have to and want to learn. . Don’t waste your time on problems that have already been solved. .",
            "url": "https://www.ankushchoubey.com/just_buy/",
            "relUrl": "/just_buy/",
            "date": " • Jul 24, 2020"
        }
        
    
  
    
        ,"post267": {
            "title": "Environment Focused: For-Profit vs Non-Profits",
            "content": "Photo by Charlie Deets on Unsplash . Many environments non-profit do not achieve what they set out to do. . They have sub-par performance. | They don’t bring optimal solutions to the table. The solution they declare often involves compromise. | They are part of cancel culture. | They often require donations to survive and which makes them easy to be biassed towards a donor. | . On the other hand, for-profit environment companies survive and have better performance. . For-profit companies offer better and feasible solutions in addition to good jobs. . Some environment focused for-profit companies I really like are: . Tesla: Produces a lot of products related to energy technology. Popularly electric cars. | Impossible Burger: Making plant-based alternative to animal meat without compressing people’s taste and quality | Neuralink: Trying to make human smart so that if AI and human will be able to work together. | .",
            "url": "https://www.ankushchoubey.com/environment/",
            "relUrl": "/environment/",
            "date": " • Jul 18, 2020"
        }
        
    
  
    
        ,"post268": {
            "title": "Ideas",
            "content": ". These apply to side projects and hyper-growth startup Importance . Good ideas are common and meaningless. . Good execution is rare and therefore valuable. . An implemented idea is 10 times better than a repo of un-implemented ideas. . An implemented idea removes need to search for more ideas. . Get started . Rather than trying to find the perfect idea, start small with the one you have and iterate. 1 . Originality . No idea is truly original. Be flexible to adapt to new ones. 2 . Most ‘unique’ ideas fail. Successful once are spinoffs of already present ideas. 3 . Finding . In the case of hyper-growth startups, ideas are counter-intuitive. If it seems sensible it is likely a bad idea. 4 . Most hyper-grown startup ideas don’t look like startup ideas at all. 4 . Trying to find a hyper-growth startup idea is a bad idea. 4 . The way to find better ideas is to explore the world and know your customers. 4 . Think Big 5 . Book: Anything You Work: Start now. No funding needed. &#8617; . | Book: Steal Like an Artist &#8617; . | Book: The Unfair Advantage &#8617; . | Paul Graham: Before the Startup &#8617; &#8617;2 &#8617;3 &#8617;4 . | Book: The Magic of Thinking Big &#8617; . |",
            "url": "https://www.ankushchoubey.com/idea/",
            "relUrl": "/idea/",
            "date": " • Jul 8, 2020"
        }
        
    
  
    
        ,"post269": {
            "title": "Baton Road",
            "content": ". Baton Road 1 is a feeling I had since childhood about how humanity progresses. . Progress is a collective initiative. No one individual changes the world. . There is a generation of them who made improvements that have push everyone forward. . Someone made electricity | Other person did maths | Some person made transistor | Other made Integrated Circuit | People started making better software | Hardware got faster | Internet happened | Smartphone’s happened | Deep Learning is happening | The baton has been passing from generation to generation of doers who were no better than we are. 2 . Currently, the most significant baton holder is Mr Musk. He is pushing a lot of critical areas forward. . The future generations will not have to deal with many of the problems he is solving. . The baton is not limited to technology. Every field connects to every other. Advances in any will improve every. . Every moment happens once. 3 . The next Steve Jobs won’t start a hardware business. | The next Zuckerberg won’t build a social network. | The next Elon Musk won’t set up an electric car company. | The next one will have to deal with a new problem most relevant to that time. | . Someday the 🔥 baton will pass on to our generation. Hopefully, I’ll be ready. . To those who quietly help advance the causes we mutually believe in, knowing advancing the cause is the only reward: thank you . &mdash; Elon Musk (@elonmusk) March 11, 2020 More posts in the series . 1. Probabilities . of &quot;success&quot; 2. Why Software Engineers Should Enter Other Fields. . 3. Research . 4. Sapiens Book Summary . The best book I have read in 2020 5. Decentralization of High Tech . How abstraction, cost and education convert research fields to applied. 6. Shadow Clone of Ideas . 7. Complex Technologies are extension of Simple Ones . 8. Why Framework Development Is Biggest Software Development Baton? . A Comparison between Application/Domain vs Framework Development The title ‘Baton Road’ is inspired by Boruto: Naruto Next Generations Intro 1 &#8617; . | Steve Jobs Secrets of Life &#8617; . | Zero to One by Peter Thiel &#8617; . |",
            "url": "https://www.ankushchoubey.com/baton/",
            "relUrl": "/baton/",
            "date": " • Jul 5, 2020"
        }
        
    
  
    
        ,"post270": {
            "title": "ROI of Fun",
            "content": ". Note: I am not a psychologist. So the upcoming piece is quite unscientific. . Action: Hobbies . Hobbies are weird in the sense that after an initial interest in doing it we start expecting too much from it. . Each next creation becomes a race to be better than the previous one. . Every-time you show something you cooked or something you made… the first reaction from people is… why don’t you open a business?? . No! This is something I do for fun… . There is no real ROI! I don’t want to be famous or make money with this. . Life requires activities that have no other purpose than the joy that activities itself provides.1 . If suddenly there is an expected ROI attached it has a probability of not being fun anymore. Though the result of having an expected ROI to a hobby is that the quality and quantity of output increase a lot. . Hobbies are an active process: The more effort that has been put in the higher is the reward. 1 . Consumption: Books, Media, and Games . One of the things that many consider being a waste of time is consumption. Often quotes float around which says something on the lines of Make your own life so exciting that you don’t need to consume anything else. . On one level this may be true but it is a little too extreme. . Is watching Silicon Valley a waste of time? Maybe. | Did I get a boost of coding confidence ever since starting Silicon Valley? Hell yeah! ROI was higher. . | Was watching One Piece a waste of time? No. I actually enjoyed it. | Did I get my positivity pumped? Definitely. | . Most consumption only impacts the mindset of the consumer and does not result in direct action. The tricky thing is that we don’t know what will get us inspired or changed perspective for the better. If we did knew it already, it would be pretty boring. . Consumption is a passive process: You don’t have to actively work at it. . People . I actually don’t know how to write this without giving my personal anecdotes. So if you are a programmer explore this section in the DOM 😬. . I have been guilty of setting very high standards for people around me and for my behavior towards them too. It is not something I do consciously nor it is something I want to do. The people around me have always been supportive, caring and made me less bored. We are not dealing with creatures of logic. These are people just like me with emotions, ups/downs, discomforts, strengths, and weaknesses. We are social animals made to support each other during the bad and the good. I was and am always available for my friends/family when a problem arose in their life and they need me. But I was never there to share happy moments with them too. Dealing with people is both active and passive: Active: To be there to be for them when a problem arose and they need. Passive: To be there to share their happiness. And since you are someone who took the effort to read this in DOM, I am really grateful. If we have, in some way lost touch just ping :) . There is more to life than increasing its speed. 2 . . Digital Minimalism by Cal Newport &#8617; &#8617;2 . | Tim Ferriss &#8617; . |",
            "url": "https://www.ankushchoubey.com/fun/",
            "relUrl": "/fun/",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post271": {
            "title": "Marketing Money",
            "content": "Word of Mouth . I understand that there are more things in the world then technology products but for a lot of technology products I don’t like ads. . Tesla does it the best. . They make a really really good product which is much better that what is offered by the competition and thus the words spreads by word of mouth. . As the industry will mature I can understand that the gap between your product and the competition is very less. Thus in that state to win the market you essentially have to try everything like Advertisements. . Marketing money . Ever heard of Beats by Dr. Dre. The product kind of sucked before they got bought off by Apple. . Their product money split was something like this: . 40 percent marketing + beautiful cover 60 percent product . The reason for their survival was not that they had a good product. Bose was probably better in every way. . The only reason for their survival was every god damn music video used Beats in their video. Their packaging was too good. . On the other hand Bose was profitable just for their product. . Beats is not at the place it was in it’s hype years now. That is likely because Apple (it’s now parent company) has decided to focus more on product quality. . Over marketing a product while ignoring quality mean you get the initial sales but they as time passes you have to deal with user start disliking you. .",
            "url": "https://www.ankushchoubey.com/marketing-money/",
            "relUrl": "/marketing-money/",
            "date": " • Jun 30, 2020"
        }
        
    
  
    
        ,"post272": {
            "title": "Programming is now Configuring",
            "content": "What we learned when starting out . The programming initially included these: . variables | operators | conditionals | loops | functions | classes | . Along with these were concepts such as Algorithms and Data Structures. All these in effort to make original programs. . What we do . Increasingly I have realized that most of what we do is not creating functionality from scratch. . These are the kind of things I do regularly: . Wanted to add zoom in zoom out on images: OpenSeaDragon module | Wanted to generate PDF on the client-side: jsPDF module | Wanted trailer videos: TheMovieDB API | Idle session timeout alert: ng-idle | Want to talk to a DB: Spring Data JPA | Wanna have a table on a page: I don’t write my HTML tables. I use DevExpress. | Want my website to be installable on Mobile/Desktop: @angular/pwa module | . Programming role for the most part is to configure other’s code/modules/APIs so that it works well along with other modules and our tiny code. . And whatever tiny code that we do write is rarely even unique. For the most part, it is either the same functionality as something built before or copy/pasted from StackOverflow or Github. . Also for a good amount of things, one can easily skip backend coding by using something like Firebase. . Code Generators and Configuration Files . I wanted to contribute to PyTorch so I read their code and understood nothing. . I thought I had enough Python &amp; DL skills but that was not the problem. . The point was they have ATEN: a kind of configuration language that allows them to generate programs in their target language on the Fly. . A topic similar to code generators are configuration files such a .properties or .yaml . I love these. The behavior of the application can be changed entirely using configuration files. For these to be most effective the entire application has to be built with configurability in mind. . 80/20 split . I used to despise DevOps earlier because I never wanted to leave programming behind. After all, a major part of DevOps is configuring tools. But I realize now that ROI is huge. . I still believe that learning the principles are more important than learning a specific technology. . Learning a principle such as Deep Learning means that underlying technological tools such as PyTorch, Tensorflow, or even AutoML matter very little. . These principles (20%) apply to a small by very important parts (80%): . deciding what to do | connecting different modules | debugging | . Similar: Make your code configurable .",
            "url": "https://www.ankushchoubey.com/config/",
            "relUrl": "/config/",
            "date": " • Jun 29, 2020"
        }
        
    
  
    
        ,"post273": {
            "title": "User Interfaces",
            "content": "User Interfaces are such fascinating things. I had my interest peaked after I had to work on responsive CSS (thanks 🔥 Fireship) . AUC: The area under the curve . A bad UI means a product is essentially useless or trying to look useless. . A good UI means a product is at least trying to look useful. . A new feature release is like solving a big problem for a small number of users 📈. . An improvement to UI (especially on OS level) means solving a small problem for a vast number of users 📊. . The area under the curve remains the same 1 that is why it is so useful. . Physical World . This is not specific to UI, this is general to any design including once in the physical world. . Something I had a real wonder at was the lights at the back of vehicles. They are just so simple yet I could not imagine any better alternative. . left-right lights | red lights for brake | . Interfaces . It is quite wonderful to know UI is a field that has not matured. It is something that keeps improving and we have new things being added. . Keyboard ⌨️ → Mouse 🖱 → Touch → Gestures → body motion → Speech → Neuralink 😍 . Trends . Some design trends are definitely weird. . Like Neuromorphism, I don’t know why would someone make UI harder to use and increase their workload at the same time. . Dear Apple, 🥺 why would you do this to Mac OS Big Sur? . But at the same time, this was the same reaction everyone had when Flat Design was introduced and in a few years, people love it. . Same with Cyber Truck 😍 and PS5 design. . Craftmanship . I happen to get an eye for design after getting my first apple product and watching their promotion videos. I was hooked. Jony Ive 2 and Steve Jobs paid such a high concentration to detail that it still is reflected in most Apple physical product designs. . The same is true when Mr. Musk decided not to put headlight buttons for Teslas 3. If it’s dark, it should just come on. . There is so much craftsmanship that goes into a high-quality product. It is so much fun knowing what goes behind building a great product. . Their way of thinking is essentially making technology invisible. . It feels just like Magic 4! It just works! . . Elon Musk On How To Be Most Useful &#8617; . | Apple’s Sir Jony Ive’s top tips for success - CBBC &#8617; . | Book - Elon Musk Tesla, SpaceX, and the Quest for a Fantastic Future By Ashlee Vans &#8617; . | Steve Jobs - Works like Magic &#8617; . |",
            "url": "https://www.ankushchoubey.com/ui/",
            "relUrl": "/ui/",
            "date": " • Jun 23, 2020"
        }
        
    
  
    
        ,"post274": {
            "title": "Collection of Thoughts on Writing",
            "content": ". Photo by Green Chameleon on Unsplash . This is collections of posts/ideas I have come across over the years. . . These only apply to non-fiction writing . Writing is thinking . Writing is learning how to think. Writing is a reflection of your thoughts. | . Medium . The best thing about writing on a computer is that you can edit things later which is the same as editing your thoughts | The best things about writing by hand is no distraction. no pressure. clean slate. clear thinking. | Combine both | . To write better, you don’t have to become a “writer” . Grammar is very small part of writing. The most important thing is having something useful to say. . | The way to have something interesting to say is to go experience the world. . | Narate from our own experience. This keeps things unique and interesting. . | Improve your writing in every opportunity you get . | Prefer using active voice instead of passive to keep your writing more exciting. . | . Use less words . If it can be said in a blogpost, don’t write a book. If it can be said in a tweet, don’t write a blog post. . | One big idea per post . | Delete sentences. Remove all the useless words. . | Forget attributions. It makes you slow. Plus you want it to be your own thoughts. So make those thoughts your own. Don’t care about attributions. . | . Writing helps you to . Form your thoughts better . | Document and share your progress . | . The best time to write is when inspiration strikes. Once the inspiration is lost, it’s hard to write. . Types of Writing . There are different types of writing: . Exploratory Writing: When you are exploring something and you don’t know what that is well. | Persuasive Writing: When you are trying to persuade someone of your argument | Experiential Writing: Describing an experience you have had. | Fact Entry: Kind of like quantified life. a life log. *** | . Question Driven Writing is one of the ways but it isn’t the only way. The main thing is to let your ideas flow. Once it flows and is on paper, you can organize it in different ways. . Writing in a memorable way . You want to write in a way that is easier to remember for everyone. . Ideas have to be simple enough to spread and be executed properly. . Simple Rememberable title. Simple Rememberable subtitles. Simple Remembrance images. . Anyone should be able to understand the gist just glancing through the article. . Ultimate simplicity. . Also remember: Most things in life are simple. Not complicated. . Having clear thoughts make you free . When I have my thought clear, then I feel free. . I feel free when, . I have my thoughts well articulated. | I have progressed on the thing that stresses me. I moved forward despite feeling the stress and hopefully dealt with it calmly. | I make progress on my goals. And hopefully those goals have balls. | .",
            "url": "https://www.ankushchoubey.com/write/",
            "relUrl": "/write/",
            "date": " • May 31, 2020"
        }
        
    
  
    
        ,"post275": {
            "title": "Deciding to learn a {programming} topic",
            "content": ". I am writing this as a reference to my future self and so it is highly biased. May be someone else finds this helpful too. These are some things I found helpful when deciding on a new language or framework or module. . Deciding to learn . I pick something to learn only when the language/framework… . has been around for at-least a few year | is under active development and is likely to stay | has good community support/tools | . I find it easier to learn something by category like: . Frontend: Angular | Backend: Spring Boot (Currently with Java) | Database: SQL (pretty much all SQL are same) | Deep Learning: PyTorch | Containerizing: Docker | Hardware: Ardruino (C++) | Game Development: Yet to be decided | . The benefit of learning by category is that same skills can apply to other categories. . Like: My pandas (python) skills helped me a lot during new SQL problems. . Photo by Markus Winkler on Unsplash . Deciding not to learn . I hate learning “new” languages/framework/technology especially when . it does the exact same thing that I can do now | does not add any new benefit | it’s old/outdated | if I’ll likely never use it | proprietary technology | . So, . no AngularJS after learning Angular. | nothing less than Spring Boot when doing Java. | Typescript &gt; Javascript. | PyTorch is probably enough. Don’t need Tensorflow. | SQL is enough. No need of NoSQL yet. | . Exceptions . There have always existed exceptions and cases where I just needed to learn something. . Old but need it: Had to learn excel to reverse engineering and build same feature in Spring Boot | Learning a good framework: Had learned Django before. After joining worked I learned Spring Boot and realized it much better. | Made life easy: My application UI was crap. Easiest way was to learn CSS myself without using Bootstrap. It was easier than I expected. Thanks Fireship. | For Future: I may learn a little Firebase just to see how fast I can develop applications in it. Hopefully transferring some of that knowledge to my daily coding. | . But most exceptions occur where I either had to do it or see a benefit that is transferrable to what I do. . . I try not to learn something just to add to resume or to list of things that just sound cool (sometimes I do). . I usually spend months deciding. . YouTube videos and written articles have been great help when deciding. .",
            "url": "https://www.ankushchoubey.com/new_tech/",
            "relUrl": "/new_tech/",
            "date": " • May 25, 2020"
        }
        
    
  
    
        ,"post276": {
            "title": "Agile and DevOps",
            "content": "Agile and DevOps are useful or buzz words depending on who you hear it from. . The 2 can be thought of as effectiveness and efficiency respectively. . . DevOps: How to do . DevOps deals with reducing the developer’s headaches by setting up processes and environments (+ mindset) to produce high-quality software. It can be useful to think of DevOps as an infinity loop which only developers deal with. . High-quality software is the once that: . get’s built faster | allows for quicker change | has low/no visible bugs or chances of introducing bugs | . It is important for organizations to deliver new features faster and keep their software up to date. The speed of this software delivery will determine how fast the companies make changes. . . Agile: What to do . A feature can only be useful when it is delivered. . But more importantly it needs to be the right feature. That’s where Agile comes in. . It helps in knowing and understanding requirements quickly and effectively and get user feedback. . Agile involves everyone. It does not matter is someone is technical or not. . . Textbook: What to not do . While Agile and DevOps are considered divine, it can be good to think them of as general principles and not as hard rules to follow. . Doing so is the opposite of what they mean. Don’t become a textbook expert. Textbook people who do Agile or DevOps always suggest doing the opposite of what’s practical or needed. . You might see many versions of both: Scrum/XP - SRE 🤘🏼 but all essentials mean the same thing. It is easier to think of them abstractly. . And for god’s sake, DevOps is not just tools. .",
            "url": "https://www.ankushchoubey.com/agile_devops/",
            "relUrl": "/agile_devops/",
            "date": " • May 21, 2020"
        }
        
    
  
    
        ,"post277": {
            "title": "Clean Code Resources and Tools",
            "content": "Index: Tips on writing Clean Code . Linters . SonarLint is good for most cases. . Python: SonarLint or PyLink . | Java: SonarLint or Sonar Cube . | Typescript: TSLint . | . Domain/Language-specific tips . For Deep Learning/Machine Learning: fastai coding style . | Java: Google Java Style Guide . | Python: pep8 or Google Python Style Guide . | Angular official style guide . | . Natural next steps: . Design patterns: Design patterns for Humans and Java Design Patterns in Stories . | Anti-Patterns . | Falsehoods . | The Clean Code Book . | Cleaner REST APIs: RESTful API Designing guidelines — The best practices . | Microservices and Micro frontend. . | .",
            "url": "https://www.ankushchoubey.com/clean_code_tools/",
            "relUrl": "/clean_code_tools/",
            "date": " • May 11, 2020"
        }
        
    
  
    
        ,"post278": {
            "title": "Math motivation",
            "content": ". Photo by ThisisEngineering RAEng on Unsplash . I have always been interested in 🧮 even after failing twice at math exams during college. . I have been collecting a lot of notes on the topic for the last 6-8 months and recently the number of notes exponentially grew. (damn recommendation systems). Some I came up on my own. . This should be a good time to publish the list and see how things evolve. . . Maths is a language that applies to the real world . It is a human language like English because it helps to talk 💭 with each other. 1 . It is the language of nature. 2 . Perhaps we can think, teach, and learn like it’s natural. . It is the same for everyone . . Maths is everywhere. Even if you don’t notice. . ⏰ 🗺 🥇🥈🥉🎰🎲⚽️🍻 . You have to learn it once and use it everywhere. . Plus you can learn it from anywhere. . . Emphasis on maths from home 🏡3 . People in Spanish class who come from 🏡s where Spanish is spoken are going to be better from day one☝️ . 🧮 is the same. . . Maths is useful and fun . It makes you more popular. . It is cool when others are silently looking for their calculator and you just say the answer. | . Run the numbers! 4 . You can verify a lot of facts by just running the calculating things in your head. | . Maths Is a Playground 5 . if you stop✋🏽 and look 👀. . You can explore the patterns on 🌊 🐚. | Play with tiles and shapes. | Categories objects in bizarre and creative ways. | Do puzzles 🧩. | Do origami. | Study the patterns in music 🎶. | Study the structure of trees🌳s. | 🎨. 🧶. | Create secret codes. | Program 🖥. | . . Math is reasoning not memorizing or speed . It doesn’t matter how you get there if your reasoning is correct. 6 . There is no single right way to solve it. . There is nothing wrong with counting on fingers 🖐🏽 as an aid to doing maths. 7 . It actually indicates an understanding of arithmetic more than if everything were memorized. . Maths is boring when it is taught incompletely 8 . aka we know only a handful of processes . Processes are like cookbook knowledge 👨‍🍳📖 . Maths is a whole toolbox 🧰 of operations that can apply to different situations. . Knowing the processes is important but does not make you good at maths. . Tools of Maths are simple. 8 . ​Number​ (In all their forms) | ​Operations (​Arithmetic; all others are derived from them) | Laws (applies to all numbers) | Commutative | Associative | Distributive | Identity | . If you know these ​you can construct the process on the fly​. . . When learning Maths . Bring your ✍🏽 pen and 📝 paper 9 . Maths becomes hard when you move away from the real 🌎 and abstract it beyond recognition. 1 . Like any problem, you can sleep on numbers. . Go away for a while. Rest. . Are you studying maths for an exam? . Or are you exploring it because it’s fun??? | . There are advantages to each. . Studying for an exam means you likely have a deadline and you will tend to go through the material faster. . The problem here is you are less likely to go deep and may forget 🧠 things as soon as an exam is over. . Exploring for fun means overall you will sustain your learning for longer and be less overwhelmed. . But this also means you will take much longer than need time and then wander off 💭. . Balance is the key. ⚖️ . The best way to study math is to have constant exposure to it. 9 . . . Unformed Thoughts: Math requires . concentration + focus + patience + feedback + testing | . Cultivate a habit of looking at math and make a conscious effort. . Concepts from Clean Code apply to maths to create clean maths. The cleaner your maths is the easier it will be. . Simplify formulas. Most formulas are intuitive and they are not as big when you break them up into their separate formulas. . Know numbers in all their forms. Variables. Functions. . Force yourself to calculate mentally first. Doing maths mentally is very fast and it requires less time. It is a good exercise to do. Plus it is better to have the answer and write the steps down rather than try writing a step-by-step and try to solve it. You know the answer already, you just have to write the reasons for it. . If you fear maths, all the fear you have you’ll feel in the first 30 seconds of encountering the problem. Close your eyes then a deep breath and read it with full concentration without concert for if you’ll be able to solve the problem or not. . Most people won’t use maths beyond basic arithmetic and aptitude tests. But the reason to learn advanced maths is the same reason you learn to write, It makes you a better thinker. You’ll have better reasoning skills, more common knowledge and make better decisions if you do maths. 10 . Programming is Maths. You just have the computer do the work. . The kind of maths you are likely to use in daily life is arithmetic and once asked in aptitude tests. . Learn as you go but study the maths angle early . What is Mathematics? &#8617; &#8617;2 . | Naval’s tweet on Math &#8617; . | You’re Not Bad At Math, You’re Just Lazy &#8617; . | Jordan Peterson - The Cost of Procrastinating &amp; Wasting Half Your Life &#8617; . | Math Dude: Why Is It Important to Study Math? &#8617; . | Richard Feynman talks about Algebra &#8617; . | Twelve Math Myths &#8617; . | Classical Conversation: Why Should You Study Math? &#8617; &#8617;2 . | How to Get Better at Math &#8617; &#8617;2 . | Why Math is Important &#8617; . |",
            "url": "https://www.ankushchoubey.com/math/",
            "relUrl": "/math/",
            "date": " • May 4, 2020"
        }
        
    
  
    
        ,"post279": {
            "title": "Advice for those who want to learn Deep Learning",
            "content": "I do get questions once or twice a month in my friend circle of someone who is thinking of starting to learn Machine Learning or Deep Learning. . ​I am not an expert​. Nor do I have a DL job. But I do know enough that I can work with a DL team and build something over a few months. . Hopefully, this answers all of your questions. . . Don’t learn Machine Learning . You don’t need to know ML before learning DL. . It’s dumb. | It is getting rapidly replaced by DL. Therefore, turning irrelevant. | . Lot of times people build a complex hand made ML solution just to get little bit higher metrics. In the long run a simple DL model be better. . Deep Learning gets easier as more time passes. . Allow your mind to adjust to the counter-intuitiveness. For me, it took months to adjust. . Get comfortable not knowing a lot of stuff. . You might never need to do calculus but hand yourself. We have computers in the 21st century. . Knowing where to use it and what it does is enough. . Material beats the Method. . Learn from the latest courses and use the latest tools. . This is a fast-changing field. 2-year-old stuff is mostly irrelevant. . It is probably good to mix your learning from multiple sources. . Recommended Course: . Top Down Approach: https://www.fast.ai/ | Bottom Up Approach: Andrew Ng’s Coursera Course | . Recommended next read: How not to do Fast.ai (or any ML MOOC) . Learn a framework well . This is useful when you are not following a tutorial. . I learned PyTorch. . Be hands-on from Day One . Learned gradient descent today??? Nice! Open a Jupyter notebook and code the simplest gradient descent you could think of. . Reading/Watching videos matters less. Coding is the skill you are trying to develop. . Don’t get intimidated from people on the internet. . Most people in DL space are genuinely nice. But some you will find just crank out project after project by stealing other people’s code and never giving them credits. . Don’t get intimidated by them. Fame comes and bites them in the ass! . Know that those who are genuinely nice have spent a lot of time working on it. . Jobs . This is a hard one. DL is something I really really loved and I wanted to do it full-time. . But looking at the job market here in Mumbai, India, a lot of companies which say they are doing DL and often just don’t. . Or they do enough to get investors and job candidates. Most don’t ship anything. I can think of none actually. . Finding something difficult?? . For questions or counter related to this post, write them in the comments below. .",
            "url": "https://www.ankushchoubey.com/dl_advice/",
            "relUrl": "/dl_advice/",
            "date": " • May 2, 2020"
        }
        
    
  
    
        ,"post280": {
            "title": "Series  Kaggle Getting Started",
            "content": "Why? . Because Getting Started is: . Easy . | Less intimidating . | Less chance of getting stuck . | . How we will do it? . By: . focusing on the process rather than just getting the output. . | starting with easier problems. . | . Prerequisite . PyTorch: A 60 Minute Blitz, Writing Custom Datasets | . Expectations from this series . Time: 5–6 Hours per challenge or more. . Coding Style: fastai coding style . While coding, no function takes 10 seconds. . | Heavy use of %timeit% . | . Explanation Style: Based on Kaggle Notebook Commits . Notebook Commit 1: Will focus on getting input and output . | Next N-1 Commits: Will add new features/improvements. These will be linked. . | Last Commit: Complete solution . | . This way one can see get a peek behind the finished product. . Abbreviations Used . X = training_data y = training_label ds = dataset dl = dataloader o = optimizer . Index . Digit Recognition | Facial Keypoints Detection - in progress |",
            "url": "https://www.ankushchoubey.com/kaggle_getting_started/",
            "relUrl": "/kaggle_getting_started/",
            "date": " • Mar 30, 2020"
        }
        
    
  
    
        ,"post281": {
            "title": "Digit Recognition",
            "content": ". How to read this? . Skim through the Pre-requisites . | Open each commit notebook then read the explanations. . | Just run each notebook top to bottom. . | Try to understand each line. . | If you find yourself stuck at statements, explore the variable involved. . | Still, stuck?? highlight the explanation and comment. I will get back to your query. . | . Commit Version 2: Getting Input and Generating Submission File . Day 1 . | Score — 0.43 . | Time invested — about an hour . | . My goal for any first commit is always to get input, pass it through a NN and generate a submittable output. . Read the data . train_df = pd.read_csv(&#39;/kaggle/input/digit-recognizer/train.csv&#39;) . Training/testing . I needed a way to separate features and labels. . So the easiest way was to not select a column named ‘label’. . test_df does not contain a label column . train_df.loc[:, train_df.columns != &#39;label&#39;] type(test_df.get(&#39;label&#39;)) == None #false . Dataset . Returns features and labels if ‘train=True’. else it returns just features . class MnistDataset(Dataset): def __init__(self, df, train=True): #convert df to self.X and self.y using above def __len__(self): return self.X.shape[0] def __getitem__(self, i): if self.train: return self.X[i], self.y[i] return self.X[i] . Observation: Even if I don’t explicitly mention Tensor, NumPy is converted to tensor. . Creating DataLoader . bs = 64 ds = MnistDataset(train_df) dl = DataLoader(ds, bs) . Checking if DataLoader returns the right output . images, labels = next(iter(dl)) images.shape, labels.shape . Creating a vanilla Neural Network . I created a dumb NN just so that I can pass data through it and get output in the desired shape. . The details don’t matter much. This will be replaced by a CNN later. . Preparing the training loop . epochs = 10 loss_fn = nn.CrossEntropyLoss() import torch.optim as optim o = optim.Adam(net.parameters()) . Creating the training loop . Here are the 4 steps to create a basic training loop . Loop epoch number of times | for i in range(epochs): ... . Inside the epoch loop, loop through data loader (dl) | for images, labels in dl: ... . Inside the data loader loop, | zero grad optimizer before passing pushing data into NN. . | Take an optimizer step after pushing data through NN. . | . o.zero_grad() ... o.step() . Between optimizer zero_grad and optimizer step, pass data through the NN, compute loss and gradients. | out = net(images.float()) loss = loss_fn(out.float(), labels.long()) loss.backward() . Generating output . A similar step as above has been taken to generate test_dl and the testing loop. . The only difference, . test_dl has ‘train=true’. Dataset will only return features and not labels. . | code to not calculate gradients since we are not training. . | . with torch.no_grad(): ... . The output is in the form of numbers from 0…9. . | Our output is a column (dim=1) array of length 10 with probability. . | The maximum of this array is our output. . | . out.argmax(dim=1) . We store these outputs in an outputs python list. . test_df.shape, sample_df.shape # Out[17]: ((28000, 784), (28000, 2)) . I realized that sample submission and output df have the same length. . | I just need to add ‘Label’ column to the submission data frame and save it in CSV form. . | . sample_df[&#39;Label&#39;] = outputs sample_df.to_csv(&#39;submission.csv&#39;, index=False) . index=False removed the default pandas index when saving . Commit Version 3: Improvements . Changes: Proper Accuracy, Graph, and Data Normalization . Day 4 . | Score — 0.96 . | Time invested — about an hour . | . Proper Accuracy . Accuracy should always be calculated on the validation set. . Creating a separate validation set . val_len = int(len(ds)*0.01) # 0.01 percent of data train_len = len(ds) — val_len # all other are in training from torch.utils.data import random_split train_ds, val_ds = random_split(ds, [train_len, val_len]) . Likewise, 2 data loaders are created. . bs = 64 train_dl = DataLoader(train_ds, bs) val_dl = DataLoader(val_ds, bs) . Changes in the training loop . A separate list called accuracies in created to store the accuracy of an epoch. . ... with torch.no_grad(): accuracy = 0 for images, labels in val_dl: out = net(images.float()) accuracy+=(out.argmax(dim=1) == labels).sum().item() accuracies.append(accuracy/len(val_ds) * 100) . Graph . Since the accuracy of each epoch was stored in a separate accuracies list, creating a graph was easy. . import matplotlib.pyplot as plt plt.plot(range(epochs), accuracies) . Data Normalization . After plotting the graph, I realized accuracy was 43% which is the same as the score of commit 2. . The easiest thing to do was to normalize the data. . Since MNIST images are in the range of 1…250 the easiest thing to do was to divide by 250 which would result in a range of 0…1. . Ideally, the range should be around 0 so an even better approach would be . image = image/250–0.5 . this would result in a range between -0.5…+0.5. . Later we would use torchvision.transforms.Normalize(mean, std, inplace=False) which generates unique normalization value for each dataset . Commit 6: ConvNet, and GPU . Day 6 . | Score — 0.97 . | Time invested — about 2 hours (lots of googling and reading docs) + 1 hours fixes bugs . | . ConvNet . Convolutional Neural Networks are ideal images. . ResNet . ResNet 34 is my goto ConvNet but since MNIST is so easy, I went with ResNet 18. . import torchvision.models as models resnet18 = models.resnet18(pretrained=True) resnet18.fc #print fully connected network . ResNet is designed to output 1000 classes. But our output is from 0…9 aka 10 classes. . lin_in = resnet18.fc.in_features import torch.nn as nn resnet18.fc = nn.Sequential( nn.Linear(lin_in, 10), nn.Softmax(dim=1) ) . Convert Grayscale to RGB image . ResNet expects RGB images. MNIST is grayscale. . img = img.view(3, 28, 28).expand(3, 28, 28)` . This grayscale to the RGB line is added to our Dataset class. . Normalization . When using an existing model, we need to use the same normalization values as that model. The docs mention the normalization value. . import torchvision.transforms as transforms normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) . The init and getitem dataset class have been modified to use this transformation. . Modifications have also been made to test_ds. . GPU . One I started the training loop, I realized it suddenly became too slow. . GPU is needed! . device = torch.device(&#39;cuda:0&#39;) if torch.cuda.is_available() else &#39;cpu&#39; . If the GPU is on, the device will be cuda. . The neural network and the data in training, validation and texting loop have been changed to run on GPU. . net = net.to(device) ... images, labels = images.to(device,dtype=torch.float), labels.to(device) . And since we are on GPU we can increase our batch size from 64 to much higher. . I experimented with a few sizes from 320…640 and kept an eye on GPU utilization and settled for 512. . . I did the same for num_worker which specifies the number of threads to load a batch. This is CPU stuff. . Along with monitoring GPU and CPU usage, I modified training_loop to show the amount of time taken to complete each epoch. . bs = 512 num_workers = 2 train_dl = DataLoader(train_ds, bs, num_workers=num_workers) val_dl = DataLoader(val_ds, bs, num_workers=num_workers) . This resulted in 7 seconds per epoch. . For testing, the batch_size can be much higher since we don’t have to back prop. . Commit 7: Improvement . Day 8 . | Score — 0.97 . | Time invested — about 30 minutes . | . I learned that you don’t need nn.Softmax if you are using nn.CrossEntropyLoss. . nn.CrossEntropyLoss has nn.Softmax built-in and the results of softmax are not used during back-prop. So it can be safely removed. . Now FC is this: . lin_in = resnet18.fc.in_features import torch.nn as nn resnet18.fc = nn.Sequential( nn.Linear(lin_in, 10) ) . . Index: Series - Kaggle Getting Started . Next Post: [] .",
            "url": "https://www.ankushchoubey.com/mnist/",
            "relUrl": "/mnist/",
            "date": " • Mar 30, 2020"
        }
        
    
  
    
        ,"post282": {
            "title": "Kaggle CLI QA: How to download a particular folder",
            "content": "Harshini on Medium asks . Nice Article, . But I got struck while trying to download a particular folder from kaggle competition “state-farm-distracted-driver-detection”. I want to download “img/train/c4” folder in that dataset, But when I’m trying to run the command, it’s giving an error like “404 — Not found”.. . But I am able to download a particular image like this “img/train/c2/img_100029.jpg” . *Is there any command to download a particular folder?? . . Hi Harshini, . Kaggle CLI does not support downloading the entire folder or multiple files at once (except in case of downloading entire competition). Only one file can be downloaded at a time via the CLI. . Here is how I downloaded the entire c4 folder . 1. Created directory if it does not already exist . mkdir -p img/train/c4 . 2. Get the list of all files available in the dataset, filtered the files which were in the c4 folder, picked file name, repeatedly download each file. . kaggle competitions files -c state-farm-distracted-driver-detection | grep c4 | awk ‘{print $1}’ | while read x ; do kaggle competitions download -f $x state-farm-distracted-driver-detection -p img/train/c4 ; done . . — — — — — . I don’t use the command line regularly. These are the sources I looked: . Read values into a shell variable from a pipe . | How to mkdir only if a dir does not already exist? . | How to use a shell command to only show the first column and last column in a text file? . | . kaggle competitions download -h . Hope this helps! Have a good day! . Medium reply .",
            "url": "https://www.ankushchoubey.com/kaggle_download_folder/",
            "relUrl": "/kaggle_download_folder/",
            "date": " • Mar 10, 2020"
        }
        
    
  
    
        ,"post283": {
            "title": "Simple Hacks for increasing website load time",
            "content": "Reduce bundle size . Always use compression: at least gzip . Always compress. The configuration is set in the webserver. . gzip is good enough in most cases in terms of both performance and speed. . My application went from 4 MB to 800 kb. Fewer data faster speed. . Source 1: Enabling gzip Source 2: Verify gzip on Chrome . Make less number of requests . Always cache static content: js, css and static images. . This can be configured in your web server or your application. Just google “ “how to cache in “. . Of course: be sure to not cache dynamic content. . For js and css files, make sure it has a name that is unique if the file is modified. . Example: in angular after creating a --prod build, the filename is in following format &lt;filename&gt;.&lt;md5 checksum&gt;.js. . This ensures that if the content of the file changes, the md5 checksum will change and a new request will be sent but if the file does not change then it will have the same checksum so it can be pulled from the cache. . Always load images lazily . &lt;img loading=‘lazy’ ... /&gt; is so so easy. Images are only fetched when user scrolls near it. #freeSpeedUp https://t.co/nduXUy5GLmAre there any more such tweaks that exist? . &mdash; Ankush (@ankschoubey) January 21, 2020 Advanced tips: Lazy Loading Images and Video . Do it fast . Fetch js and css asynchronously Source . When fetching js add async defer to script tag. This will fetch multiple js files in parallel. . Keep script tag in the header for this. . . Are there more such easy tips? . Please mention them in the comments and I will add the tip to the list and mention your name. .",
            "url": "https://www.ankushchoubey.com/load_time/",
            "relUrl": "/load_time/",
            "date": " • Feb 22, 2020"
        }
        
    
  
    
        ,"post284": {
            "title": "Leave it better than you found it",
            "content": "Code is much more like a work of art/craft that people consider it. . Knowing the benefits and tips for writing good code will take you only so far. It requires a mindset shift. Looking at the code through an artist’s eye. . . Incremental Improvements . If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot. The cleanup doesn’t have to be something big. Change one variable name for the better, break up one function that’s a little too large, eliminate one small bit of duplication, clean up one composite if statement. . Can you imagine working on a project where the code simply got better as time passed? . ~ Rober C. Martin (Author of Clean Code) . Maybe, improve one microservice. | . Tip: Leave TODO as comments for your future self. These could include how you want to improve the code but don’t have time right now to do it. Hopefully your future self will handle it. . Upgrading Fast (get rid of Legacy) . Newer languages and frameworks provide many more features, provide security upgrades and are easier to use. The longer you wait to upgrade, the harder the upgrading becomes. . You will also find that clean code is much easier to upgrade. . Do it one step at a time. . Making a big bang change is never feasible. . Upgrading can come in a variety of sizes. . Simple upgrades such as — Custom SQL executors in code to using an ORM. . Get rid of prepared statements and replace them with Spring Data JPA | . Or they can be a little bigger such as — Going from AngularJs to Angular. . Developers of the code to provide guides and tools to make upgrading frameworks easier . Like: Official guide for upgrading from AngularJS to Angular. . The above guide mentions some things that are worth mentioning here: . Some applications will be easier to upgrade than others, and there are many ways to make it easier for yourself. It is possible to prepare and align AngularJS applications with Angular even before beginning the upgrade process. These preparation steps are all about making the code more decoupled, more maintainable, and better aligned with modern development tools. That means in addition to making the upgrade easier, you will also improve the existing AngularJS applications. . Or a much bigger one like — Going from Java to Kotlin. . Choosing a programming language is a hard process. . Ideally, you would want to choose something which is: . Non-proprietary . | In-expensive or FREE . | Easy to code in . | Flexible enough . | . Java to Kotlin . Enterprises seem to have got stuck with Java 8 (released in 2017) because it is free. The newer versions of Java offer much better and easy to use features but enterprises won’t upgrade. . Kotlin might be a much better choice because: . It is completely interoperable with Java. You can import your Java code and any other built by anyone within Kotlin. . | Spring Boot and Android officially support Kotlin. . | Kotlin is much more modern than Java offering things like default parameters and null checks. . | . A smaller way to check if Kotlin might be right for you is to migrate or create one microservice in/to Kotlin. . Python 2 to Python 3 . The support for Python 2 ended (2019) after 20 years of development. Its code is frozen and won’t even receive security upgrades. Time to upgrade to Python 3. . Code Reviews . . Benefits of Code Review . Code reviews share knowledge . As code reviews expose developers to new ideas and technologies, they write better and better code. . Nobody wants to dive into a critical piece of code they didn’t write–especially during a production emergency. Code reviews share knowledge across the team so that any team member can take up the reins and continue steering the ship. . Code reviews make for better estimates . Any code reviewer is also exposed to the complexity, known issues, and concerns of that area of the code base . Keep in mind, code review is not just a senior team member reviewing a junior team member’s code. Code review should happen across the team in every direction. Knowledge knows no bounds! Yes, code review can help newer engineers, but by no means should it be used solely as a mentoring exercise. . Source: Why code reviews matter (and actually save time!) . The article also mentions ways to make code reviews much more productive. . When done right, code reviews actually save time in the long run. . Share the load . | Review before merging . | Use peer pressure to your advantage . | . Previous: Always know why you are catching an exception . Index: Tips on writing Clean Code .",
            "url": "https://www.ankushchoubey.com/leave_it_better/",
            "relUrl": "/leave_it_better/",
            "date": " • Jan 6, 2020"
        }
        
    
  
    
        ,"post285": {
            "title": "Exception handling",
            "content": "Errors should never pass silently. Unless explicitly silenced. . ~The Zen of Python, by Tim Peters . Create custom exception classes . Your exceptions should say exactly what went wrong. While those provided by programming languages are good, they are too general and are not specific to your codebase. . Oversimplified example: . Bad: Exception(“number is smaller than 0”) . | Better: SpeedException(“Speed should not be smaller than 0”) . | . The reason you want to do this is that you can handle different types of exceptions in different ways and it is much easy to know exactly what went wrong from the logs. . In most programming languages creating exception is easy. Just inherit from the main Exception class which should be enough for most cases. . Custom Exception class also makes your logs easier to read. . Always know why you are catching an exception… . . … or just don’t catch it (throws to the caller) . if you are not going to do anything with the exception don’t catch it just throw it. . Don’t add throw exception in the catch block. Use throws while declaring the function instead. . For Unsupported Operations . In if-else statements or switch cases, it is always good to have a default case which will execute if no other condition is true. . If something is not possible or not supported then: . throw (Java): UnsupportedOperationException . | raise (Python): NotImplementedError . | . . Global exception handling . These allow you to have the same exception handling mechanism in case you have not explicitly handled the exception. . The most basic thing to do here is logging the exception. . Spring (Java): @ControllerAdvice . Previous: Avoid inventing algorithms and data structures . Next: Leave code better than you found it. . Index: Tips on writing Clean Code .",
            "url": "https://www.ankushchoubey.com/exception_handing/",
            "relUrl": "/exception_handing/",
            "date": " • Jan 6, 2020"
        }
        
    
  
    
        ,"post286": {
            "title": "Remove un-necessary code",
            "content": "Declare the local variable as close to where it is used and remove un-necessary once . Local variables declared at some different place makes it harder to read the code. . Example: . Below are the variations of aRandomFunction which does a bunch of operations (skipped by dots) and on completion returns “Hello” along with the date. . . The local variables names and date are declared on top of the functions. . The first usage of the functions are somewhere between the function and the last usage is in the return statement. . . Here name and date variables are moved to where they are first used. . Let’s say after moving we realize that we do not use the variables between the code, we just use it during return. . So we should move it near the return statement: . . Just return it. Don’t store . Continuing from the previous example: . Storing in a variable is un-necessary is it is never used. . Rather than storing “hello” in name and a new date in date, we should just return it. . . Remove commented code . In case you do need to refer to the exact code you can always check it in your version control. . Remove functions and variables which you do not use. . Variable argument lengths . Python: *args, **kwargs (more than just variable-length argument) . Java also has an implementation for variable length arguments but they are not as elegant as Python implementation. Therefore, a list as an argument might be better suited. . . Default Arguments . Python and Typescript both support default function arguments. . While not officially supported in Java, one can work around the builder pattern to get similar functionality. . ![Source: Managing Constructor with many parameters . . Use annotations/decorators . Annotations extend the functionality of your function dynamically and reduce the size of the code dramatically. . Python: Decorators . In python, these are called decorators. . Python 3.7+ also has @ dataclass **annotation which auto-generates constructor, **str and repr. . Relevant Links: . Primer on Python Decorator . | Source: [functools](https://docs.python.org/2/library/functools.html#module-functools) — Higher-order functions and operations on a callable object . | The Ultimate Guide to Data Classes in Python 3.7 . | Method Types in Python OOP: @classmethod, @staticmethod, and Instance Methods . | . Spring Boot (Java) . ![Source: Spring Annotations Cheat Sheet . Java: For JPA . No need to write @Column over your entity’s variables. By default, camelCase is substituted with snake_case. . lookupId =&gt; lookup_id . You can change these using naming strategies. . Java: Map using Mapper. Don’t create your own logic. . There are many mapping frameworks in Java that can make the task of converting one object to another much much easier. This can be especially helpful when you want to convert your @Entity to a DTO object. . Java: Project Lombok to avoid boilerplate . Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java. . Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more. . @Getter and @Setter . | @NonNull . | @ToString . | @EqualsAndHashCode . | @Data . | @Cleanup . | @Synchronized . | @SneakyThrows . | . The good thing is that it is present is SpringInitializer. Just click the Project Lombok option. . With this, the size of your java code will reduce dramatically. . Remove duplicates . Linters will provide you a list of duplicate codes. Shove it into a function/method. . Use existing/inbuilt methods rather than new once . This goes back to not inventing new algorithms. If something is already made, don’t make it again. Reuse it. (Link — Clean Code: Know thy complexities) . Probably a bad example #1 of reuse: . Below is a very complex function. One of them works with List and other with an array but that is the only difference in implementation. . The bad approach is creating the same logic to work with different data structures. . . A better approach is to have one main logic function and convert one data structure to another and then call the main one. . . We can also take advantage of having the same name for both the functions which means less to remember. . . Probably a bad example #2 of reuse: . This is similar to the above. . Here suppose you already have a complex function that works on a list of integers, and now you have to make a similar one to work on a single int. . . Single line boolean evaluation . . Think in terms of Streams . Streams make your code really really tiny and give much better performance. Streams do have a learning curve but are worth it. . (swap in a stream() for parallelStream() and you just went Super Saiyan 3) . Though the implementation of Java streams and having a single line list comprehension in Python are very different, they are similar in terms of style of code. . Create and use base classes . Base classes are an excellent way to avoid duplications. Make them as generic as possible. . Previous: Make database do the heavy lifting . Next: Avoid inventing algorithms and data structures . Index: Tips on writing Clean Code .",
            "url": "https://www.ankushchoubey.com/code_cleanup/",
            "relUrl": "/code_cleanup/",
            "date": " • Jan 4, 2020"
        }
        
    
  
    
        ,"post287": {
            "title": "Avoid inventing algorithms and data structures",
            "content": "If you are inventing new algorithms, you either don’t know the right algorithm or are working on your PhD thesis. . Eliminating as much of this accidental complexity as possible. . Source: Why Your Code Is So Hard to Understand . Keep your implementation as simple as possible . If the implementation is hard to explain, it’s a bad idea. If the implementation is easy to explain, it may be a good idea. . ~ The Zen of Python, by Tim Peters . Knowing the basics of time and space complexity goes a long way. . Going through each is beyond the scope of this. Here is a link if you want to go in-depth: Cracking the Coding Interview YouTube . The concept of List, Sets, and Maps is universal though this particular post is going to look at it through the lens of Java. In the case of Python map is called a dictionary. . Additional Tip: Always use parent interface for the type . Be as general as you can be. . This allows you to swap in any form of implementation of parent interface in a single line. . . When trying to find duplicates . Use Set instead of Lists . Set always contain unique values. . Finding an element in the set is much faster O(1) than compared to a list O(n) . . Java: If you know the size of the list . … if the required maximum capacity of the ArrayList is known, we can get the optimal performance (both average latency and throughput) by specifying the initial capacity to the required capacity. . In doing so, we can get 24% to 34% improvement in average latency and 30% to 50% improvement in throughput. . Source: Performance Evaluation of Java ArrayLists . Always have your algorithmic logic in a separate function . This just makes it much easier to debug. Your function will be doing just one this. . Making it general enough will be even helpful so that you can easily use it. . Example: Separate loop and operation section: Clean Code #1 . Rather than implementing own logic, take 5 minutes to see if your modules already provide the implementation . Example: Sorting in Javascript/Typescript . . . A library in java which you can find is Apache Common Lang 3 which does provide a lot of utilities. . Python has much more abundance. Just google a solution for python and you will probably find a pip package. . Previous: Remove unnecessary code . Next: Always know why you are catching an exception . Index: Tips on writing Clean Code .",
            "url": "https://www.ankushchoubey.com/complexity/",
            "relUrl": "/complexity/",
            "date": " • Dec 25, 2019"
        }
        
    
  
    
        ,"post288": {
            "title": "Avoid creating god classes and long methods",
            "content": "As you gain experience as a developer you start to see repeating patterns that crop up over and over again in your solutions. . When you use chunking (design patterns, algorithms and standard functions) appropriately, it allows you to stop thinking about how the code you write does something and instead think about what it does . Source: Why Your Code Is So Hard to Understand . Classes . One class should do one thing not everything like StatusChanger or StatusManager, not StatusGod . Keep classes small, a 1000 line class is a pain . Methods . Name . Avoid using and in method names like validateAndSave, one method needs to do one thing and one thing well . Don’t Repeat Yourself . There should be one — and preferably only one — obvious way to do it. . ~The Zen of Python, by Tim Peters . Lines of Code . Keep methods small, a 50 line method is a problem. . My rule of thumb is: The method should not be more than the size of my screen. (Source: Jeremy Howard fast.ai) . Passing variables . Keep the instance variables as low. If you are passing 4,5 variables you are probably doing more than one thing . Pass an object instead of multiple methods . Don’t pass the variables that you don’t need. . If creating an object requires multiple steps . Convert it into a factory method . Previous: Leave clues (Naming convention) . Next: Make database do the heavy lifting . Index: Tips on writing Clean Code .",
            "url": "https://www.ankushchoubey.com/god_classes/",
            "relUrl": "/god_classes/",
            "date": " • Dec 25, 2019"
        }
        
    
  
    
        ,"post289": {
            "title": "Make the database do the heavy lifting",
            "content": "Rule of thumb: Avoid filtering loops . SQL/Databases are good at 2 jobs: storing data. filtering data as fast as possible. You’re for loop cannot compete with SQL. . The performance of your program will be much faster if you let SQL manage the filtering of data. Plus it will also result in a smaller line of code. . Try to filter with smaller queries with a smaller number of columns before fetching all the columns. Smaller the data, the faster will be the data transfer. You will find a better example of this in the section of Complex Queries bellow. . Use ORM . For Spring (Java), ideally, use JPA method query things.*** . . _Tips: Use tools to make Entities POJO . youtube: https://www.youtube.com/watch?v=LrbaDRcu3Y0 . For Python, SQLAlchemy is popular and preferred or Django ORM for Django. (I have less experience with this) . Complex queries . Native queries are faster than usual ones but use the sparingly. . In the case of Java, you can also JPA specific things like Specifications or Criteria API. . Honestly, I haven’t tried them I know they exist. I have seen them and found that the code looked really ugly . I do find Django ORM to be easier than Spring JPA (you can pass arguments rather than always create a separate function). . Break down big-bang (complex) queries into multiple simpler queries . note: This might be very controversial and I have not seen this talked about anywhere or used in other people’s code. You are not likely to use this unless you are like me (bad at ORMs). . Many times you have a complex feature like search and you want to filter by multiple parameters. . What usually ends up happening you end up with a custom query generator or Criteria API (Java) or a query which is too long. Especially if this query requires additional features like ordering and pagination. . I think a simpler solution is to break it into smaller queries. I give a simplified example below. . Note that this is a much simpler version of what you would encounter but I think it will make the point. . There are 3 tables: . . . . Suppose you want to find who are male grandparents of children whose name start with ‘A’ . You can go for some complex query like . . . These 33 lines can quickly increase in size when you have too many tables. Multiple shorter queries are always much better than one big bang query. . I’ve seen queries which go beyond 100 lines 😖 . Making changes in such large 100+ line queries is a pain. . (Even when writing the 33 line query above, I introduced bug by not writing join on lines 30 and 31. writing smaller queries helped me debug.) . You could break into something simpler queries like: . . . . . . . . . Then code the method yourself to call these in a certain sequence: . . You will find that even though your line of code has increased, the modularity of code has also increased and these functions can be arranged in any way you like. . . Previous: Avoid creating god classes and long methods . Next: Remove unnecessary code . Index: Tips on writing Clean Code .",
            "url": "https://www.ankushchoubey.com/sql_is_fast/",
            "relUrl": "/sql_is_fast/",
            "date": " • Dec 22, 2019"
        }
        
    
  
    
        ,"post290": {
            "title": "Leave Clues",
            "content": "These apply to name everything: variables, class names, methods, packages, etc. . When you have the semantic model fresh in your mind it’s easy to map your code onto it . It’s not hard to remember that a variable named “x” is the date a record was created and “y” the date it was deleted. . Leave clues that will allow you to rebuild the semantic model when you come back at a later time. . Source: Why your code is so hard to understand . Comments . Comments can lie. The code does not. . Ideally, your code should be so good that you do not require comments. . This might not be true in one case which is when you code something weird and required domain-specific explanation. . When something is non-obvious put a comment. . Like in Machine Learning, a choice of certain parameters or a certain step can be understood better by putting the link to the explanation/research paper in the comment. While reading just the code, it might not be obvious for the reader to understand what to make of it. (Source: Jeremy Howard fast.ai). . Similarly, if you are using an external API, you can mention it in the comments. . Sometimes, you might want to link to a specific piece of code, in that case, you might use the javadoc format . /** * @see String#toLowerCase() convertToLowerCase */ . javadocs are interesting if you want to write good comments. . Intent giving names . Use pronounceable names . Variables should be named so that they make it clear what it contains. . Variable names should always be easy-to-read, be short yet meaningful, mixed case with a lower-case first letter English words. . b)Use plural names for arrays/collections of objects. . c) Constant (static final) variable names should be in all capital letters and separate words in the name with the underscore, i.e., PRIORITY_NORMAL, . Source: java coding-convention and cleancode . . For matrix operations use row columns instead of y and x because in some languages matrix is treated as [y,x] . . Source: Gayle Laakmann McDowell (Cracking the Coding Interview Book) . Abbreviations and short forms . Many people try to optimize for the vertical space of the screen but forget horizontal space. . This is kind of an exception to the above rule: for things that are very very common, short forms are better. (You also type less). . Just don’t short everything to be a single letter. Be small but descriptive. . Also, having a list of abbreviations used in your project readme/documentation can be helpful. . Examples, . repo for repository . | util for utility. . | serv for service . | len for length . | dto for Data Transfer Object (pretty common) . | . Make sure you use the same abbreviations everywhere in your code aka one word per concept in all classes. . (Below examples are for method names) . get/fetch/find . | set/update . | . In case you are trying machine learning, I guess this article is much better suited: Jeremy’s notes on fastai coding style . Magic numbers and strings . Any number or string in your code that isn’t immediately obvious to someone with very little knowledge. . Source: StackOverflow . Better to declare them in a separate constants file. . Constants should be snake_case and CAPITAL. . . In the case of Java, enums can also be used to achieve something similar but they will contain a lot of java boilerplate. . . There are also language-specific naming conventions involved like: . Java and Typescript prefer camelCase . | Python and SQL prefer snake_case . | For Unit test cases . My aim is not so much about reducing the lines of code. Tests are usually small. (In case your tests are huge and complex then you must have written a bad code) . I prefer to keep the end of each method the same. Like: . . I use Mockito so I skip the first line. The start of the function then is with all stub actions. . The last 3 lines are usually similar. . A variable expected: expected value . | A variable actual: calls the function/method . | assertion . | I find that for most tasks it is easier to make changes to expected and actual variables rather than put everything into assertions. The assertion is always clean. . An alternative to the above assertion is to write like below which I find to be messy. . . Previous: Flat is better than nested . Next: Avoid creating god classes and long methods #NotEnoughChunks . Index: Tips on writing Clean Code .",
            "url": "https://www.ankushchoubey.com/naming_conventions/",
            "relUrl": "/naming_conventions/",
            "date": " • Dec 20, 2019"
        }
        
    
  
    
        ,"post291": {
            "title": "Flat is better than nested",
            "content": "This might be the most important tip of all the tips covered which applies mainly to if-else statements. . Nesting clutters your code. . Where does the block end . It becomes hard to find where a particular block ends easily (especially if someone writes 8 or more nests 😖) . Unnecessary horizontal scrolling . Also, you might have to scroll horizontally to see what the complete code is since it does not fit your screen. . Nesting makes your code hard to understand. . While you are reading your nested block, you have to remember what all conditions preceded it. . The below guideline should counter that: . Max indent should be 2, in case of exceptions 3 . Avoid the use of else. . Return/throw when not okay . By returning early you make sure that in each of your functions the last line of your function returns what it is actually supposed to return. This will make your code consistent. . | Also, you would find that you avoid unnecessary nesting (which will calm your eyes 👁 and your linter). Thus, making your code easy to understand. . | . . Bubble vs Gateway . Bad (left): Bubble-Style . Good (right): Gateway-Style . If deep nests exist? Separate loop and operation . Extract the logic to other readable methods or use streams (Java)/lambda or something equivalent in your programming language of choice. . Usually, there is a problem where you have to perform a bunch of operations on an array of objects. . I tend to create at-least** 2 functions** for this: . One that performs an operation on a single object. . | Other calls the first function in a loop. . | In case if something goes wrong, it is easier to debug it since I know what function has what responsibility. . Simplified Example: Link to Code . . You have a bunch of students for which you calculate the average grade. . . In the above BadGrader, you can see than the code of calculating the grades is within the loop. This is bad as we cannot use the same piece of code elsewhere in the program. . . The BetterGrader separates the calculation part from the printing part. . . GoodGrader removes the naive logic that was used to calculate average and replaces it with a much shorter code that makes use of inbuilt functions. . This is an example of chunking which will be explained more in the next post. . Next: Leave clues (Naming convention) . Index: Tips on writing Clean Code . Resource: . Replace Nested Conditional with Guard Clauses | .",
            "url": "https://www.ankushchoubey.com/flat_is_better/",
            "relUrl": "/flat_is_better/",
            "date": " • Dec 20, 2019"
        }
        
    
  
    
        ,"post292": {
            "title": "Clean Code",
            "content": "I’m not a great programmer; I’m just a good programmer with great habits . ~Kent Beck (Creator of Extreme Programming) . I started writing this as a single post but the number of paragraphs much so like any good programmer I decided to release in chunks. . These come from a series of notes I took since I was in college. . The attributions are lose. I did not think about writing a post while taking notes. . I will do by best to find the authors and link to their work when I find them any time in the future. Most of these came for searching for keywords like “clean code {language}”. . Some ideas I found while experimenting on my own. . . Usually building a software looks like this . You start small. But by the time you reach halfway, it becomes chaotic. . . Reading vs Writing Code . While coding we spend more time reading the existing code than writing the code. We can estimate the ratio to be something like 10:1. . Most of the time you are more likely to modify and improve your code than to produce a new functionality. . . For something we spend the most time on, it is very important that we make the process of reading and understanding our code easier for ourselves and other developers. . Why do we write bad code? . Work needed to be done fast . | Tired of project/work . | Requirement changed . | Managers . | WE — Developers . | Work, for now, will clean up later . If we don’t follow good coding guidelines, we risk initial coding speed for long term code quality and productivity. . Usually, once you start on a path you are more likely to continue on the same path. . . What is Clean code? . Constructing the simplest possible code that would solve your problem. . Benefits . Problems become easier to solve since code is modular. . | Less time is wasted on maintenance since lines of code are less. . | Ideas are more clearly communicated. . | Unit Test cases are much smaller and easier to write. . | Making changes is much faster. . | Pleasing to your eyes 👀. . | . More posts in this series . Have better variable and method names for technical layer by copying others • Mar 18, 2023 . One service should serve multiple mediums (REST, Kafka, gRPC, etc) • Mar 10, 2023 . JUnit Template For Tracking Bugs in Unit Tests • Nov 6, 2022 . Mutation Testing • Aug 7, 2022 . Pre-save Data Validation • Aug 6, 2022 . When doing reactive programming, &#39;aim&#39; to have streaming end-to-end • Jul 24, 2022 . Writing better commits with Atomic Commits • Jul 14, 2022 . Writing cleaner logs by Disabling Stack Trace for Expected Response Exceptions • Jun 28, 2022 . Writing cleaner tests with creative variable names • Jun 25, 2022 . Writing better commit with conventional commits • May 17, 2022 . Writing cleaner tests with Test Data Factories • May 3, 2022 . Writing cleaner tests with Fluent Assertions • May 3, 2022 . Debugging Effectively • Apr 19, 2022 . Writing Meaningful Log Messages • Apr 13, 2022 . Writing cleaner tests with method/when/should blocks • Mar 19, 2022 . Enforcing Architecture with Architecture Testing • Mar 16, 2022 . Clean code - Naming convension for design patterns • Mar 12, 2022 . Maintaining Documentation • Jan 25, 2022 . Code Reviews and Pair Programming • Jan 7, 2022 . Making TDD and Testing easier • Dec 24, 2021 . Separate Technical Code From Domain Code in both Frontend and Backend • Sep 23, 2021 . Art of Reducing Lines of Code in Java/Spring Boot • Jun 12, 2021 . Make your code configurable. • Aug 17, 2020 . Clean Code Resources and Tools • May 11, 2020 . Leave it better than you found it • Jan 6, 2020 . Exception handling • Jan 6, 2020 . Remove un-necessary code • Jan 4, 2020 . Avoid inventing algorithms and data structures • Dec 25, 2019 . Avoid creating god classes and long methods • Dec 25, 2019 . Make the database do the heavy lifting • Dec 22, 2019 . Leave Clues • Dec 20, 2019 . Flat is better than nested • Dec 20, 2019 . Clean Code • Dec 19, 2019 .",
            "url": "https://www.ankushchoubey.com/clean_code/",
            "relUrl": "/clean_code/",
            "date": " • Dec 19, 2019"
        }
        
    
  
    
        ,"post293": {
            "title": "10 Google Collab Tips",
            "content": "Collab is my favorite place to do deep learning because: . No setup needed . | Free . | Faster than typical local setup . | It is better than Kaggle and easier than Google Cloud. . | Really good editor features. . | . Similar: Code better in Jupyter Notebook . 1. Always Turn On Experimental Feature . Dynamically typed languages like Python are a pain (for me) because they do not provide good auto-complete. This is the best one I have seen so far. . . 2. ️ Jump to Definition . 3. Use GUI for exploring files and Mounting Google Drive . Deep Learning is intimating enough. . You don’t want to remember everything as code. Use the GUI. . . If a certain file you are looking for you can explore right click and click on copy path. . 4. Creating Custom Snippets . You can add custom snippets by: . Creating a collab notebook with a header followed by a snippet | . Including it in your other notebooks by going to Tools -&gt; Preferences and pasting URL of the custom notebook. | . Search and use your snippet in code snippet section on the left | . 5. Get GPU Info . Type: . !nvidia-smi . If you have GPU mounted you will get this reply. . . In case if you don’t know how to mount GPU: . Click RunTime Menu → Change RunTime→ Hardware Accelerator → Choose GPU . 6. Opening Notebooks from Github with ease . To open a notebook from Github. Go to https://colab.research.google.com switch to the Github tab and enter an organization or URL. . . A much easier way is to use “Open in Colab” Extension for Chrome . After installation, whenever you find a Jupyter notebook in Github, click the icon of the plugin and it will open in Colab. . . 7. Send email when the task is complete . This can be helpful when you want to leave your computer for a long time and want to just get a notification when training is completed. . This is a perfect candidate to apply with Tip #4. . **`import** smtpl`ib `server **=** smtplib**.**SMTP(&#39;smtp.gmail.com&#39;, 587) server**.**starttls() server**.**login(&quot;sender_gmail_here@gmail.com&quot;, &quot;your_password_here&quot;)` `msg **=** &quot;COLAB WORK FINISH ALERT!&quot; server**.**sendmail(&quot;sender_gmail_here@gmail.com&quot;, &quot;receiver_gmail_here@gmail.com&quot;, msg) server**.**quit()` . Source: Colab Tricks by Rohit Midha . 8.️ HyperDash . This one is more of an ML/DL DevOps tips which can work anywhere, even in other Jupyter notebook envs. [**Hyperdash | Machine Learning Monitoring**](https://hyperdash.io/) . $ hyperdash run -n &quot;MNIST&quot; python mnist.py Iter 1280, Loss= 1.576423, Acc= 0.51562 Iter 2560, Loss= 1.450179, Acc= 0.53906 Iter 3840, Loss= 1.160066, Acc= 0.64844 Iter 5120, Loss= 0.898589, Acc= 0.73438 Iter 6400, Loss= 0.685712, Acc= 0.75781 Iter 7680, Loss= 1.085666, Acc= 0.64844 . $ hyperdash run -n &quot;MNIST RNN&quot; python mnist.py Iter 1280, Loss= 1.576423, Accuracy= 0.51562 Iter 2560, Loss= 1.450179, Accuracy= 0.53906 Iter 3840, Loss= 1.160066, Accuracy= 0.64844 Iter 5120, Loss= 0.898589, Accuracy= 0.73438 Iter 6400, Loss= 0.685712, Accuracy= 0.75781 Iter 7680, Loss= 1.085666, Accuracy= 0.64844 . HyperDash allows you to monitor your model training or anything that is printed via your phone. It supports both iOS and Android and is super simple to get setup. . Installation Step: . Install HyperDash on your phone | . Go to your Jupyter notebook and run the below cell | I used GitHub login so I added -github in the end . pip install hyperdash &amp;&amp; hyperdash login — github . Import module | from hyperdash import monitor_cell . Use this magic in the cell you want to monitor. Which for most will be the training loop. | %%monitor_cell “model/experiment name” . In the app, you can see something like this. While I have included this as a tip, it is not something I have used. Because I have never trained for a very long duration. . . As per HyperDash website, it also allows detection of the status of your training and can notify when your training completes, fails, crashes or gets disconnected. . 9. 10. — Random Filler Tips: Dark Mode and Corgi/Kitti Mode . This is kind of a filler tip. (Just because I wanted to round off to 10 tips 😜). . . Go into Tools -&gt; Preferences -&gt; Theme -&gt; Select dark. . . While the dark mode is cool. I prefer using a light theme. . There is also a Corgi and Kitty mode under Miscellaneous which will add animated Corgis and Kitties in the header. . . Other useful tips: . Colab’s New Code Editor . | Colab Tricks by Rohit Midha . | 8 Tips For Google Colab Notebooks To Take Advantage Of Their Free-of-charge 12GB-RAM GPU. . | . Previous: Easy Jupyter Notebook Tips . Next: How to Download Dataset from Kaggle . I respond to all my comments. ありがとう .",
            "url": "https://www.ankushchoubey.com/collab/",
            "relUrl": "/collab/",
            "date": " • Aug 18, 2019"
        }
        
    
  
    
        ,"post294": {
            "title": "How To Download Dataset From Kaggle",
            "content": "2 Sentence Pre-requisite: . Kaggle is a platform for data science where you can find competitions, datasets, and other’s solutions. . | Some Kaggle datasets cannot be downloaded directly and can only be downloaded through Kaggle via it’s CLI. . | The Setup (One-time activity) . 1 — Install Kaggle CLI . To get started to Kaggle CLI you will need Python, open terminal and write . $ pip install kaggle . 2 — API credentials . Once you have Kaggle installed, type kaggle to check it is installed and you will get an output similar to this . . In the above line, you will see the path (highlighted) of where to put your kaggle.json file. . To get kaggle.json file go to: . https://www.kaggle.com/&lt;username&gt;/account . In the API section, click Create New API Token. And copy it the path mentioned in the terminal output. . . Type kaggle once again to check. . . In my case, even after copying it was not working. I had the file in place but it did not have the right permissions so I had to type the exact command they gave me. And it started working. . Downloading Dataset via CLI . You can open kaggle help via . kaggle -h . For getting info on competitions you can type . kaggle competitions download -h . whatever the Kaggle CLI command is, add -h to get help. . Find Data . while you can explore Competitions, Datasets, and kernels via Kaggle, here I am going to only focus on downloading of datasets. . What I do is I explore competitions or datasets via Kaggle website. . Download Entire Dataset . To download the dataset, go to Data *subtab. *In API section you will find the exact command that you can copy to the terminal to download the entire dataset. . . . The syntax is like . kaggle competitions download &lt;competition name&gt; . Download Particular File From Dataset . As you can see, the size of the data is 34 GB which is huge. . So instead of downloading entire dataset, you can select which files to download. . You cannot provide download multiple files with a single command (as of 2019/Aug/10) so you will have to download it one by one using the following command. . kaggle competitions download -f &lt;file-name&gt; &lt;competition-name&gt; . . Extract it and start using it. . I usually (plan to) put up a blog post every Saturday and create a YouTube video about it. My next post is a collection of Google Collab tips which will also include a way to download data from Kaggle into collab. . If there are any other useful tips/link/suggestion you would like to share, please put in the comment section below. . I respond to all my comments. . Thank you for reading so far. Have a good day. .",
            "url": "https://www.ankushchoubey.com/download_kaggle/",
            "relUrl": "/download_kaggle/",
            "date": " • Aug 10, 2019"
        }
        
    
  
    
        ,"post295": {
            "title": "Easy Jupyter Notebook Tips",
            "content": "In case you are not familiar with Jupyter Notebook, I recommend watching the following videos: . youtube: https://youtu.be/2eCHD6f_phE . Use Wild Card Import . import * . In Jupyter Notebook where you want to be able to quickly interactively try stuff out, you don’t want to constantly going back up to the top and importing more stuff. You want to be able to use lots of tab complete and be very experimental, so import * is great. . When you are building stuff in production, you can do the normal PEP8 style proper software engineering practices. . This is a different style of coding. It’s not that there are no rules in data science programming, the rules are different. . ~ Jeremy Howard (Source: FastAI v3 Lesson 1) . Types of Notebooks . It is best to consider 2 types of notebooks for your projects . Lab Notebooks . | Delivery Notebooks . | Lab Notebooks help in trying stuff out without worrying about making things every reproducible. The goal is just to refer back to what was done in the past. . Delivery Notebooks are ‘production’ grade, well documented and reproducible which can be shared with the entire team/client. . For Lab Notebook naming convention can be something like: . date_initialsOfAuthor_actualName.ipynb . Source: IPython Notebook best practices for data science by Jonathan Whitmore (Blog Post) . Split code into multiple cells to get better code-completion . This is a no-brainer but I struggled with this for a long time. . Weakly typed programming languages like Python do not work well with code completions provided by IDEs because the type of value return by a function is defined at run-time. IDEs have a hard time figuring out what the return type is. . . But when running Jupyter Notebook you can avoid this by splitting your code into multiple cells instead of one, running them one by one and then hitting Tab. . . Use %time for measuring the rough speed of cell’s execution . . . This is an ‘always-updated’ blog post. You won’t find all Jupyter Notebooks tips. These are just the once I find the most helper. For a much more comprehensive list check out these links: . Python for Data Science — Getting More out of Jupyter (Video #4) . | 28 Jupyter Notebook Tips, Tricks, and Shortcuts . | . If there are any other useful tips/link/suggestion you would like to share, please put in the comment section below. I respond to all my comments. Thank you for reading so far. Have a good day. . Edit: 01 August 2019: Video Version . youtube: https://youtu.be/wnhHz3eFNMc .",
            "url": "https://www.ankushchoubey.com/jupyter_notebook/",
            "relUrl": "/jupyter_notebook/",
            "date": " • Jul 29, 2019"
        }
        
    
  
    
        ,"post296": {
            "title": "Lessons Learned from my first Deep Learning contest",
            "content": ". My rank is 41 out of 441. (0.97 F1 Score). . Before this, I had only practiced 2 lessons from Fast.ai and watched the first 5 lessons. . After the contest, I saw other participant’s approaches and found that their approach was much clearer and cleaner than mine. . Therefore, I decided to complete Fast.ai’s Deep Learning for Coders. . The contest was a month ago from this writing. I had the time to really sit and figure out what went well and what didn’t. . Approach . Here was my approach which I did in stages: . Step 1: Make models . 1. Make a simple resnet50 model. And make sure input and output submission file are correct. . 2. Improve the model. I found that the images were black and old. But the number of images were less and we cannot use external data so my solution was. . Heavy data augmentation (warping, crops, rotations): lead to 5–7 percent increase in F1 score and accuracy. . | Progressive increase image size. . | I initially started with (50,70) images . | Trained it that then increased it. Trained it again. . | . 3. Training approach. . Freeze the model train for 4 epochs | Unfreeze the model train for 7 epochs | I found unfreezing was getting higher accuracy but only when done more than freeze training. 7 is what I stuck at. | I replicated the kernel and trained resnet18, resnet34, vgg16, vgg19 and densenet121 so that I can ensemble there outputs | Model Making Environment: Kaggle Code at Models directory | . Step 2: Max Ensemble . After I had all the outputs from different models. . I used the output CSVs to make a max ensemble. . (You will see that I have renamed file names to be ‘modelname’.csv in ensemble folder and the output file is ‘simple.csv’) . Ensemble making environment: Local . Code: ankschoubey/AnalyticsVidya_Game_Of_Deep_Learning . Lessons and Mistakes Learned . Code . Environment . I trained on Kaggle Kernel. The only way to get output files was to commit. . | I also did not load existing models because on Kaggle you have to attach it as a dataset and then load. It’s a pain so I did not bother. . | It would have been much easier to train on Google Cloud, Collab or Clouderizer. . | . Should have used discriminative learning rate. . Transfer learning without discriminative learning rate is stupid. | . Refactor code early before replicating the kernel . I replicated kernels so that I can train different models on different kernels and get results faster. . | The problem was that I had introduced a bug which got replicated. Also, making changes was a pain because I had to copy paste things multiple times. . | . Use metrics used in the contest . Kind of dumb to mention this: I did not use the F1 score. Rather relied on accuracy. . Save as many things as I can so that you save time later . Save results . | Save model . | Save data . | . Use Checkpoints . Did forget the idea of checkpoints entirely. | . Useless Model . I made an ensemble which sucked because it only lead to 0.05 percent improvement. . | The reason was I used a lot of mediocre models. . | 1 ResNet 34/50 would have been fine. . | Also did not know about DenseNet very well back then. . | I believe that an ensemble of ResNet and DenseNet would have been wonderful. . | . Data . Look at the data and use good augmentation . I saw some images were grey scale and old. I might have got a higher score if I had taken time | . . Using good data augmentation. . My model was not performing well. 93–94% accuracy was the limit. . I buffed up every transformation. And it started reaching 96+. Warping helped a lot. . . Developer Habits . Start submissions early in the contest. And complete your work at least 3–4 days before the end. | .",
            "url": "https://www.ankushchoubey.com/first_competition/",
            "relUrl": "/first_competition/",
            "date": " • Jun 23, 2019"
        }
        
    
  
    
        ,"post297": {
            "title": "Copying Others vs Being Yourself",
            "content": "People love having role models — I have role models too. They include, Steve Jobs (for changing the world), Tim Ferriss (for becoming healthy, wealthy and wise — 4HB, 4HWW, 4HC), Jony Ive (for beautiful product designs), Narendra Modi (for the power to do good), Warren Buffet (for art of making money), Elon Musk (for becoming Iron Man), Buddha (for Nirvana/inner peace), Marcus Aurelius (for being a good empirer and stoic philosphy), Akira Toriyama (for Dragon Ball)… the list continous. . I wanted to be like these people for reasons mention in the brackets. I would sometime imagine what my roll model(s) would do if they were in my situation. . My mind changed when I heard Tim saying more than once something which went like this — I am no super hero. — I don’t know how it feels to be Elon Musk. But I like being Tim Ferriss. . After putting some brain to use and reading this article I realised — . Everyone is different. And are supposed to be different. . Here different means . — Different Strengths and Weakness . — Different Situations including Birth Year and Country . No roles models of mine had the same story. They all made different choices depending on the situation they were in — without copying anyone else. . The principles they used are helpful. Their story? Not so much. .",
            "url": "https://www.ankushchoubey.com/copying/",
            "relUrl": "/copying/",
            "date": " • Oct 4, 2015"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "",
          "content": "Adventure .",
          "url": "https://www.ankushchoubey.com/philosophy/core-values/adventure",
          "relUrl": "/philosophy/core-values/adventure",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Currently practicing: NeetCode Blind 75 . Insights . For tree problems, recursive DFS is cleanest to implement. | . Problems Solved . 1. Blind 75 Two Sums . Make a map of item and index. Check if target - currentItem exists. 2. Blind 75 - Contains Duplicate . Create a set and put items in one by one while checking if `num` is already there. 3. Blind 75 - Group Anagram . compare the count of letters in each word and put group them in a map 4. Blind 75 - Top K Frequent Elements - IMP . count all numbers. sort. and return top k. Use streams to make it cleaner. or use bucket sort. 5. Blind 75 - Valid Anagrams . check if the length is the same. find the difference in the count of letters in both numbers. since there are only 26 letters, you can count in a single int array of 26. index = char - &#39;a&#39; 6. Blind 75 - Product of Array Except Self . Loop twice.first right to left while multiplying.Then second left to right while multiplying.This can be done in a single array and one extra product variable 7. Blind 75 - Valid Palindrome . Have 2 pointers. One at the start other at the end. Skip if `!Character.isLetterOrDigit` and compare with `Character.toLowerCase` 8. Blind 75 - Valid Parentheses . God-level solution - iterate.If an opening bracket is found, put the closing bracket in a stack.If the closing bracket is found, pop and check for equality. 9. Blind 75 - Best Time To Buy And Sell Stock . Make sure the left pointer is always the lowest yet. Keep checking the difference between left and right. And return max. 10. Blind 75 - Invert Binary Tree . Swap left and right. Then repeat for those nodes. 11. Blind 75 - Linked List Cycle . Have a fast pointer and a slow pointer. fast increases by 2. slow increases by 1. if both become the same then the cycle exists. if fast one reaches end then no cycle exists. 12. Blind 75 - Maximum Depth of Binary Tree . go to each depth, incrementing a depth counter by 1. return max of it. 13. Blind 75 - Merge Two-Sorted Lists . Iterate over both and store minimum one in current; Increment in the list from where minimum came. Once one of the lists is empty, empty the other one. 14. Blind 75 - Reverse LinkedList . Similar to swapping two numbers. Start with prev as null and current and keep swapping next. Return prev because that&#39;s the last value. 15. Blind 75 - Same Tree . 16. Blind 75 - Subtree of Another Tree . Check if root is same as subtree or root.left is same or root.right is same; 17. Blind 75 - Number of 1 Bits . Check if the last bit is 1 by (n&amp;1). Do the right unsigned shift (logical shift &gt;&gt;&gt;). Loop. 18. Blind 75 - Reverse Bits . Get the last bit of value from the original. append to the reverse one. shift reverse one to the left. instead of adding, you can do `or` because after the shift last value will be 0. Imp - iterate 32 times only.",
          "url": "https://www.ankushchoubey.com/algorithm-problem/",
          "relUrl": "/algorithm-problem/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Core Values",
          "content": "Purpose/Mission/Vision . To be most useful and bring a positive high impact for everyone in the world in the most effective and efficient way possible. . Core Values . These 4 core values are my best bet in achieving my purpose. . Clarity 🔭in thinking . Seek, understand, accept and articulate truth. And create a proper vision for yourself. . स्पष्टता . Responsibilityin actions . Living an honest, accountable and strong life ready to face and solve every and any problem. . कर्मयोग . Optimism 🔭 in approach . स्पष्टता . Being the ball of optimistic rationality that drives the world and sets hope for everyone. . Team Workस्पष्टता . Socializing, taking care, being there and living a life for others. (and maybe sometimes becoming humble when other people help us) . The Vehicles . These 4 vehicles help me prioritize, accelerate, minimize and push through my core values. . Inputsस्पष्टता . Removing 80% of things that don&#39;t make sense. To be able to focus on 20% of things that do make sense. . Systemsस्पष्टता . Automating goal progress. . Timeसमय . Managing the most limited non-renewable resource we have. . Adventureस्पष्टता . Stepping outside of your comfort zone to achieve your full potential. .",
          "url": "https://www.ankushchoubey.com/core-values-page/",
          "relUrl": "/core-values-page/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "",
          "content": "Inputs . Part 1: Foundations . Need for Optimizing Inputs in the Modern World | The modern struggle | Hinderance to everythings. The hidden cost of distraction. | Addition by substraction | Part 2: Principles . Traction: With right inputs you get right outputs. Automate push towards your goals. | Vitamin N: Say No! And accept hearing no! 3. | Part 3: Practices . Quit: Social Media | Quit: Pornography | Quit: Sugar and Bread | Add: Exercise | Add: Meditation | Quit: Addictions | Embrace Boredom. . Conclusion |",
          "url": "https://www.ankushchoubey.com/philosophy/core-values/inputs",
          "relUrl": "/philosophy/core-values/inputs",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "",
          "content": "Optimism . Create Happiness . Smile - Muskurao . Share Happiness . Enjoy life. . Identifying emotions. . Pet a cat when you encounter one on the street. . Be grateful inspite your suffering. . gratitude 5 minute journal. . Part 1: Foundations . 1. . Meditation is how you become peaceful all the time | Why we only see what’s bad or what we did bad. Hedonic adaptation. | Time Assets Vs Liabilities . Part 2: Principles . Pleasure leads to unhappiness | Truth leads to peace. | ROI of Fun! | Nature is efficient. | Part 3: Practices . Fullfilling your body. Sleep. | The subtle art of not giving a fuck about stupid things. | Learning to breathe. The art of developing detachment. | Let things be. The art of never hurrying. | Keep messages unread: The subtle art of not giving a fuck about stupid things. . | Conclusion | Photo by Slawek K on Unsplash .",
          "url": "https://www.ankushchoubey.com/philosophy/core-values/peace",
          "relUrl": "/philosophy/core-values/peace",
          "date": ""
      }
      
  

  
      ,"page7": {
          "title": "",
          "content": "Philosophical Resources . I read/consume many resources and I thought this would be a good way to link to up and thus avoid writing blogposts on these topics. . In these resources, try to only consume the parts you need. Let go or parts you don’t need. . Getting rich . 2022 Dec How to Get Rich - YouTube | . | . | . Fun . 2022 Dec What to Watch on Streaming - A Good Movie To Watch | . | . | . ENTP . 2022 Oct ENTPs - 12 Rules for Life - YouTube | Why do ENTPs have a hard time remembering things? - Quora | . | Nov Problems Creative People Have To Face | . | . | . Personality . 2022 Nov Jordan Peterson: The worst thing a creative person can do - YouTube | . | . | . Website . 2022 Nov Publishers: An ad network for your developer project - EthicalAds | . | . | . Language Learning . 2022 Nov | Linggle - Language Reference Search Engines - NLPLab | . | . Balance Alpha Beta Gamma Bullshit with Logic . 2022 Nov Shwetabh Gangwar | . | . | . Quantified Self . 2022 Nov Life Cycle - Track Your Time on the App Store | . | . | . Relationship . Healthy Games Courtney Ryan . 2022 Oct These 4 Factors Can Predict Long-Term Romantic Compatibility - Brit + Co Fight Factor | Grumpy Factor | Ambition Factor | Social Factor | . | 7 Ways to Respond to Make Someone Feel Heard | Matthew Hussey - Respect your relationship | Angelika Koch -Love is an action… feelings fluctuate. Love remains steady. | Anxious Attachment: @candicetamara | You don’t need a relationship | . | Nov Understand the difference between healthy love and unhealthy love | . | . | . Stoicism . EGO 2022 Dec Stop Tweeting, Scrolling and Feeding Your Ego | To Crush Your Ego, You Must Love Learning (and Books) | What’s an ego death? (Jungian psychology) - Jordan Peterson - YouTube | No one gets away with anything | . | . | . | 2022 Dec Whenever you feel like giving up, just remember this!! 1000s have come before you. If someone else can do it, so can you! | . | . | Nov Guilt is not a constructive emotion … thx @ryanholiday for being on the podcast” | How to Always Be in Control of Your Anger - Jocko Willink - YouTube | Chanakya: apne aadhe pakke khane ke bare me maat btao. | Find difficult things to do. So that regular life feels simple. Specially physical things. | . | . | . Songs . One Punch Man FULL ENGLISH OPENING (The Hero - Jam Project) Cover by Jonathan Young - YouTube | . Intelligence . Balance The Pyramid of Life &amp; Mastery: How to Master the 7 Areas of Life | . | General 2022 Oct Joe Rogan on How to Be a Smarter Person - YouTube | Why It’s Important For You to Practice Failure - YouTube | 8 Differences Between Professionals and Amateurs - YouTube | . | . | . | Security 2022 Oct | Navy SEAL Teaches Situational Awareness - Tactical Rifleman - YouTube Be attentive of your surroundings | Cross walk | Reflective Surface | . | Take my Security Test - YouTube | . | . | . Decision Making . General 2022 Oct Untools | . | Nov The more personal responsibility you take on and fullfil. The more incontrol you’ll feel. This will give you strength and power. | The 3 Stages of Failure in Life and Work (And How to Fix Them) | . | . | . | Cognitive Biases 2023 Jan Failing Repeatedly at Life? Avoid this Cognitive Trap. Move the goal post fallacy. | . | . | 2022 Dec Why Smart People Think They’re Stupid [The Dunning-Kruger Effect] - YouTube | How to overcome the Dunning-Kruger effect. - YouTube | Dunning Kruger Effect and Imposter Syndrome - Jocko Podcast Excerpt - YouTube | . | Oct Dunning-Krugger Effect | . | . | . | Logical Fallacies 2022 Oct Book: The Scout Mindset By Julia Galef | . | . | . | . Habits . 2022 Oct “Habits are safer than rules; you don’t have to …”-,%E2%80%9CHabits%20are%20safer%20than%20rules%3B%20you%20don’t%20have,They%20keep%20you.%E2%80%9D) | . | Nov THE CHOICE (Short Animated Movie) - YouTube | 4 Unsexy One-Minute Habits That Save Me 30+ Hours Every Week Time-block your day the night before. | Then, micro-visualize the same schedule in the morning. | When it’s time to work, speak out loud, “5–4–3–2–1: Eat the frog!” Eat the biggest frog in the morning. | And then, start a timer to make sure you stay anchored to the work at hand. | . | . | . | . Psychology . 2022 Dec Tips for Regulating Dopamine with Andrew Huberman | . | Sep HealthyGamerGG: ADHD Health | . | Oct Cause of Victim Mentality - Explained by a Psychiatrist - YouTube | Feelings Wheel | . | . | . Communication . 2022 Dev [8 Communication Hacks I Use To Appear More Senior As a Young Employee | by Katrine Tjoelsen | Nov, 2022 | Better Humans](https://betterhumans.pub/8-communication-hacks-i-use-to-appear-more-senior-as-a-young-employee-9106468bf5aa) | . | . | Sep YouTube Channel: Communication Coach Alex Lyon | . | Oct Hacking Your Speaking Anxiety: How Lessons from Neuroscience Can Help You Communicate Confidently - Stanford Graduate School of Business | . | Nov I’m gonna choose to live my life better in reality! Not online | . | . | . Negotiation . 2022 Oct Negotiation Tips - How to Get Past Ultimatums - YouTube: Get into a choice mindset. Pause the negotiations. Note all choices you have and all the choices the other side has. Now you can come back to negotiation with meaningful questions: what about this… | . | . | . Philosophy . 2022 Sep Knowledge vs Experience | Knowing Versus Understanding - Jordan B Peterson - YouTube | . | Oct Channel: Picking Nuggets - YouTube | कर्म करो और फल की चिंता मत करो - गीता: कर्म करो और फल की चिंता मत करो’। फल की इच्छा रखते हुए भी कोई काम मत करो। जब इच्छित फल की हमें प्राप्ति नहीं होती है तो हमें दुख होता है। अतः सुखी रहना है तो सिर्फ कर्म करो और वह भी निष्काम भाव से। | गीता में कुल सात सौ श्लोक हैं। गीता में ज्ञान को सर्वोच्च स्थान दिया गया है। ज्ञान की प्राप्ति से ही मनुष्य की सभी जिज्ञासाओं का समाधान होता है, इसीलिए गीता को सर्वशास्त्रमयी भी कहा गया है। | . | . | . | . Core Values . Core Values in Teams: . Shared Values are Overrated . Mutual Purpose and Agreed-Upon Methods . Responsibility 2022 Dec WATCH THIS if you feel lost in life. - YouTube | Feeling lost in life? - YouTube | . | Oct If You Have Goals, You Have Responsibility - YouTube | . | . | . | Truth 2022 Oct You will Never Want to Lie Again After Watching This [Sam Harris, Naval Ravikant] - YouTube | How To Decide What Is Best For You and Not Get Influenced By Others Sadhguru - YouTube | . | . | . | Leadership and Team Work 2022 Oct HOW TO: Build trust in relationships: Don’t judge them for not trusting you. Trust them without wishing to get anything back. Until they break your trust. | The Status Game: On Human Life and How to Play It: On Social Position and How We Use it eBook : Storr, Will: Amazon.in: Books | . | . | . | Productive 2022 Dec Work On One Thing At A Time. Here’s Why. - YouTube | . | Oct Priyanka Chopra’s best piece of advice - YouTube : Respect peoples time if you want your time to be respected | . | . | . | . Meditation . 2022 Oct Turning your brain off with Focus training | . | . | . Health . 2022 Dec Sleep Calculator: Ideal Bedtime &amp; Wake Up Times - Sleepytime | . | Nov Chart: Urine Color Chart: What’s Normal and When to See a Doctor | Chart: Mucus color For nose problems take a lot of steam | . | Habits Lowering and Increasing Your Testosterone” | Floor sitting benefits: Is it better than sitting on a chair? - CNN | . | Oct Chart: Types of head-ache | . | . | . Learning . 2022 Oct PDF Book: Scott H Young: Holistic Learning | . | . | . ADHD . 2022 Oct Book Gabor Mate: Scattered Minds | More By Gabor Mate on ADHD | . | . | . Stress . 2022 Oct Book: Gabor Mate: When the Body Says No: The Cost of Hidden Stress | Motivation: Zyzz Inspirational - YouTube | . | . | . Travel . 2022 Oct Kerala: Gods Own Country | You can also through money on Tours and Packages :). Or you can look at the packages and decide things yourself. Like Amazing 6 nights 7 days golden triangle India tour packages | . | Best Places To Visit In India That Feels International | Best Indian Destinations to Visit in 2022 Month by Month Inspiration | Best Time to Visit India - Climate Guide - Audley Travel | . | . | . Job . 2022 Oct The Best Answer to “What’s Your Expected Salary?” - YouTube - Under no circumstances do you know what it&#39;s like to work there. And you don&#39;t know. - What&#39;s the budget? What does the position pay at Digite? - If you give me a range, it&#39;s lower. :) - Compensation is important to me. I want to look at the value of working at your company. What I work on? Who I get to work? Training Opportunities? Other benefits and all the other opportunities. And based on that I&#39;ll be able to give you a much better idea on what I&#39;d be expecting. Right now, it would be uneducated on my part. And/or I&#39;m looking out for the best deal. - You are gonna make a more educated guess. | . | . | .",
          "url": "https://www.ankushchoubey.com/philosphy-resources/",
          "relUrl": "/philosphy-resources/",
          "date": ""
      }
      
  

  
      ,"page8": {
          "title": "Philosophy",
          "content": "The TLDR of all these articles is this: . Be healthy. Health is most important. | Develop and rely on good habits and core values. They provide good default fallbacks. | . All Articles . Truthful Optimistic approach to bouncing back from major loss . Instead of seeing failure as a personal flaw or a permanent setback, see it as an opportunity for growth and improvement. Focus on learning from your mistakes and using them to become better in the future. . You experiences a loss and are thinking about it. . May 6, 2023 . | Remind yourself of your core values at all times. . . May 6, 2023 . | Let other people see your values . . May 6, 2023 . | Let the world do what it wants to do, you follow your core values . . May 6, 2023 . | Stepping aside from the game of “success” and comparison . Why comparison with others is stupid and why the only person you should compare to is who you were yesterday . May 1, 2023 . | Decoding the difference between healthy love and unhealthy attachment, and choosing healthy love. . Love is a selfless emotion that focuses on the well-being of the other person, while attachment is a selfish emotion that centers on our own well-being. It&#39;s essential to catch ourselves when we act out of attachment and try to shift our focus to acting out of love . Apr 28, 2023 . | Why should you be internally disciplined? . Internal discipline is an antifragile source of motivation that gets the job done, eliminates the need for &quot;how&quot; questions, makes you stronger, and allows you to focus on achieving your goals without relying on external systems or motivators. . Apr 22, 2023 . | Karma and Karmafal - An Introduction . Karma is the action we take, while Karmafal is the result of our actions, and by detaching ourselves from the outcome, we can focus on doing our best and live a more empowered life. . Apr 20, 2023 . | The many ways of using Ethos Pathos Logos . Ethos, Pathos and Logos are techniques of persuasion. But are applications of it in making clear decisions and better interpersonal dynamics, especially in high-emotion situations. . Apr 8, 2023 . | 7 Tools To Make Good Love Choices . कर्म करो और फल की चिंता मत करो . you want to neutralize your thoughts and make good long term decisions. . Mar 25, 2023 . | Stating the Truth When It Could Hurt . Why we should use the vocabulary &#39;stating&#39;. And how can we state the truth. . Mar 16, 2023 . | My Core Beliefs from Feb 2023 . The fundamental operating system . Feb 26, 2023 . | My Core Values Summary from Feb 2023 . The fundamental operating system . Feb 12, 2023 . | Nihilism of The Modern Age. And Traditional Roles to the Rescue. . Why traditional roles of men and women are relevant? . Jan 31, 2023 . | How to plan mid-day? . . Jan 26, 2023 . | Desk Setup . . Jan 26, 2023 . | How I use ChatGPT as an AI Assist? . . Jan 26, 2023 . | My Blindspots . . Jan 19, 2023 . | Need for Optimizing Inputs in the Modern World . How Our Needs, Environment, and Choices Shape Our Lives . Jan 14, 2023 . | Why we should strive to tell the truth always? . . Dec 31, 2022 . | Implement Zero Trust in Real Life . Catching lies, liars and protecting yourself . Dec 31, 2022 . | Productive use of time . . Dec 25, 2022 . | Creating Systems To Automate Goal Achievement . . Dec 22, 2022 . | Living a truthful life . . Dec 20, 2022 . | Designing and implementing a Morning and Night Rituals for optimal life . Why morning and night rituals are essential? Why they aren’t replaceable by mid-day activity? And how to plan them optimally for 500x return on investment? . Dec 19, 2022 . | Actually solve the problem. . And escape it. It&#39;s a more empowering path and maybe the only path. . Dec 16, 2022 . | Why do I write? . . Dec 15, 2022 . | Keep messages unread . Subtle art of not giving a fuck about stupid things . Dec 15, 2022 . | Developing better self-awareness with QuantifiedSelf - Observability for personal life. . Why do you need to have personal metrics? And how can they help you make informed decisions and stay on the path? . Dec 4, 2022 . | Core Attributes . Developing better instinctive reactions to unknown situations . Nov 23, 2022 . | Getting out of the house is the way you become a responsible ball of energy. . . Nov 22, 2022 . | You can have good intentions but still do the wrong things. So, keep moving towards good action too. . . Nov 6, 2022 . | Stress is the root cause of all health problem. Fix it. . . Nov 5, 2022 . | Migatteno Gokui . . Nov 5, 2022 . | Core Values V2 . . Oct 30, 2022 . | Deal with health problems by becoming a domain expert in the field so that you can collaborate better with doctors . . Oct 25, 2022 . | We only see what we do badly because the reward of doing work well is just peace. . . Oct 25, 2022 . | Keep Yourself Polished All the Time . . Oct 8, 2022 . | Core Values Overtime - Pointers, Motivations . . Oct 5, 2022 . | Aim to be between Type A and B . . Oct 2, 2022 . | How to take advice that suggests being fake? . . Sep 24, 2022 . | Perfection isn&#39;t an attainable goal. We are always a step closer to it. . Why failing forward is the only way? . Sep 11, 2022 . | Negotiations . . Aug 12, 2022 . | We are all narcissist! . . Aug 12, 2022 . | On Building Trust . . Jul 1, 2022 . | Understanding Boundaries and Why They Are the Key To Better Life . . Jun 28, 2022 . | Strategies to be Calmer . . Jun 28, 2022 . | Reason to aim for social confidence . If you don&#39;t, no one takes you seriously. . Jun 19, 2022 . | Truth and Fidility . . Jun 5, 2022 . | Why memorizing is still relevant? . . May 31, 2022 . | Ways towards Freedom . . May 31, 2022 . | Shadow Clone of Ideas . . May 29, 2022 . | Choosing Images/Diagrams in Essays . . May 13, 2022 . | Question Driven Writing . Improving quality and speed of writing by transferring a well-known software development practice. . May 13, 2022 . | Thinking on Paper . . May 5, 2022 . | Being good at one thing doesn&#39;t automatically make you better at another . . May 2, 2022 . | Strategies on becoming more productive . . Mar 18, 2022 . | Human Intuition while working in Technology . . Mar 18, 2022 . | Strategies on Truth . . Feb 24, 2022 . | Strategies on Team Work . . Feb 24, 2022 . | Ownership . The more personal responsibility you take on and fullfil, the more incontrol you’ll feel. This will give you strength and power. . Feb 24, 2022 . | Articulate Fully . . Jan 29, 2022 . | Personal Budgeting . . Jan 28, 2022 . | Time Assets and Liabilities . . Jan 26, 2022 . | My Core Values . The fundamental operating system . Nov 25, 2021 . | Learning Strategies For Development . . Sep 26, 2021 . | Choosing better values . . Sep 26, 2021 . | Making Internet Less Distracting . Dodge Recommender Systems . Aug 24, 2021 . | Research Fast, Understand the Gist, Apply, Iterate, and Move Forward . . Apr 22, 2021 . | Piano . . Jan 16, 2021 . | Collection of Thoughts on Writing . . May 31, 2020 . | .",
          "url": "https://www.ankushchoubey.com/philosophy/",
          "relUrl": "/philosophy/",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "",
          "content": "I share a collection of valuable resources I come across on my field, which I update regularly. As I explore these resources more, I may also write blog posts on them. The resources will be removed once a related blog post is written. . Resources and Some Notes . Startups . 2022 Dec Slidebean - YouTube Channel | . | . | . Leadership . Hiring 2022 Dec Waiting for the right person is faster than hiring the wrong one. So don’t settle for the best of a mediocre pool. | Watch This: The REAL GENIUS of Steve Jobs (THIS Made Him EXCEPTIONAL!) - YouTube Best people are self manage. What they need is common vision. | Find people who are really excited. | . | Hiring Process at AirBnB - YouTube Check their core values. | Prefer people who already have used products. | “What is a common way yyou are mispercieved?” Makes people authentic | . | Hiring hack: How to better evaluate your candidates - Simon Sinek Hiring decision is like adoption. So do that carefully. Treat it like dating. | Cultural fit &gt; skills. | Protecting the culture you’ve cultivated is more important than acquiring skills. | You don’t appeal to everyone. You let the best candidates for you find you. | . | . | . | . | Company Values 2022 Dec AirBnb 6 Golden Rules via Brian Chesky - YouTube | . | Oct Amazon: The Leadership Principles Explained - YouTube | . | . | . | Work Ethics 2022 Dec Narendra Modi’s working style - YouTube | . | . | . | . Frontend . 2022 Nov How to Add Drag and Drop in React with React Beautiful DnD - YouTube . | You Probably Need BEM CSS in Your Life (Tutorial) | Web Dev Simplified Blog | . | . | Extension and toold 2022 Dec responsively-org/responsively-app: A modified web browser that helps in responsive web development. A web developer’s must have dev-tool. | . | Nov Is This The Best JavaScript Extension? - YouTube | . | . | . | Library 2022 Dec Favorite React Packages - YouTube | Zod: TypeScript-first schema validation with static type inference | . | Nov nock: HTTP server mocking and expectations library for Node.js npm install --save-dev nock | . | Passport.js | . | . | . | Component Libraries 2022 Nov automatisch/automatisch: The open source Zapier alternative. Build workflow automation without spending time and money. | zapier/formatic: :pencil2: A configurable, pluggable forms library for React used on Zapier.com. | DevExtreme Demos: JavaScript UI Widgets by DevExpress | . | . | . | Architecture 2022 Nov microsoft/tsyringe: Lightweight dependency injection container for JavaScript/TypeScript How to Use Environment Files (.env) in Node.js - Tutorial (dotenv) - YouTube | . | . | . | . Security . 2022 Dec Ethical Hacking in 100 Seconds // And why do we need CORS? - YouTube | Cryptography Concepts for Node.js Developers | 7 Security Risks and Hacking Stories for Web Developers Zero-day 0:47 - Zero days to get it fixed. | Vulnerable packages 1:22 | XSS 2:24 | SQL Injection 3:42 | Credential Leaks 4:48 | Principle of Least Privilege 6:11 | DDoS 7:43 | | How I got hacked… 7 times (security tips for web applications) - YouTube | How the Best Hackers Learn Their Craft - YouTube | PhD Security - YouTube | . | Nov Keep all your packages up to date with Dependabot | The GitHub Blog: Security News and Updates | How to mitigate OWASP vulnerabilities while staying in the flow | . | . | . Healthy Developer . 2022 Nov AlgoDaily - Solving the Health Problems of Software Engineers - Introduction | . | . | . Interesting Blogs . Philippe Bourgau’s XP Coaching Blog | Emre Bolat | Honeypot - YouTube: Documentary for developers | The GitHub Blog | . Podcast . 2022 . Oct Around IT In 256 Seconds By Tomasz Nurkiewicz | . | . | . Guest Posts on Other Sites . Request Validation in Spring Webflux – Digite Tech Blog | Error Handling with Custom Responses in Spring Boot – Digite Tech Blog | . Coding Tools and Workflows . 2022 Oct Daily: musicForProgramming(); | Daily: Commitlint Online - lint commit messages online | Daily: Pomodoro Timer Online - Pomofocus | Automation: GitCup | Screen Recorder - Chrome Web Store | . | . | . 10x developer . 2022 Aug The Product-Minded Software Engineer | . | Oct How to Outperform a 10x Developer - by Denilson N. | What’s a high-differential developer - by Hajime Yamasaki Vukelic - Medium | Martin Fowler – Continuous Delivery - YouTube | . | . | . Hard Code Engineering . 2022 Oct Steve Brunton - YouTube | How to Understand Math Intuitively? - YouTube | Math skills you ACTUALLY need - YouTube | . | . | . Domain Knowledge . Oct 2022 How to build domain knowledge - YouTube | Domain Knowledge for Software Engineers | Why Domain Knowledge Is Important In Data Science? | kdeldycke/awesome-falsehood: 😱 Falsehoods Programmers Believe in | . | . System Design . MUST SUBSCRIBE: ByteByteGo Newsletter | The Eight Fallacies of Distributed Computing | Capacity Planning: Sep 2022 Gather requirements first: | Capacity Planning for DevOps | Back of the envelope estimation | . | . | 10 Microservice Best Practices For Your Projects: The 80/20 Way | HTTP Status Codes Decision Diagram - Infographic - Loggly | . Requirement Gathering . Sep 2022 Functional and Non-Functional Requirements | 10 Steps To Successful Requirements Gathering - Phase2 Technology | What Questions Do I Ask During Requirements Elicitation? | @happy @unhappy @help @resilience @security @wip @prioritized @done @reviewed | When doing requirement gathering | Always have questions. Be prepared. The best way to prepare is to have a document ready with all questions and concerns. | . | Only when requirements are approved start working All work until requirements aren’t finished is experimental code. (Spike Code, POC, Hopefully not MVP.) | All of these are just to gather more and clarity requirements and what is possible. | . | . | . Web . 2022 Sep Webhooks | . | Nov HTTP / Webhook API Integrations - Pipedream | RequestBin.com — A modern request bin to collect, inspect and debug HTTP requests and webhooks | REST Hooks | . | . | . Spring Boot and Java . Maven Plugins Mutability Detector: This is important when doing concurrent programming. | . | Spring Boot 2022 Dec jcabi/jcabi-aspects: Collection of AOP/AspectJ Java Aspects | . | Nov Dan Vega - YouTube | Spring Boot Learning - YouTube | 6 WAYS to be a SPRING CODER - YouTube | Spring - Guides | . | Sep Top 10 Most Common Spring Framework Mistakes | Realtime user tracking in Spring Boot | Metrics for your Spring REST API | Spring boot playground: Some interesting helper libraries | JMolecular: Makes it easy to implement Domain Driven Design | . | Oct Spring Boot Best Practices | Building a Framework on top of Spring Boot by Rubén Pahíno - Spring I/O 2022 Sessions - YouTube | . | . | . | . Testing . Ops 2022 Dec Allure TestOps: Software Quality Management Software - Qameta.io | . | . | . | UI 2022 Dec eliasnogueira/selenium-java-lean-test-architecture: Ready to use Lean Test Automation Architecture using Java and Selenium WebDriver to speed up your test automation | healenium/healenium-web: Self-healing library for Selenium Web-based tests | . | . | . | Code 2022 Aug Practical Testing Book: | . | Sep Java Performance Testing | LoadTesting Java Load4j: Has interesting read on SLOs via verifiable tests. | Common Exceptions We Crunched 1 Billion Java Logged Errors - Here’s What Causes 97% of Them - OverOps | The Top 10 Exception Types in Production Java Applications - Based on 1B Events - OverOps | Common Java Exceptions - Baeldung | Most Common Java Exceptions - Rollbar | . | . | Oct More Testable Code with the Hexagonal Architecture | . | Nov How to Get Started with Test Driven Development — A Step by Step Guide | Third party Extensions · junit-team/junit5 Wiki | . | . | . | . Database . 2022 Aug MongoDB Building with Patterns | . | . Devops . Cloud 2022 Nov Top 50+ AWS Services Explained in 10 Minutes - YouTube | How I would learn AWS Cloud (If I could start over) - YouTube | . | . | . | Tools 2022 Dev Deploy automatically in parallel: https://stackoverflow.com/a/56841265 Make sure to use full name:  full project name is folder1/folder2/MyJob. | . | . | Nov Conductor Documentation | . | Sep The Ancestors and Offsprings of DevOps, the Evolving DevOps Tree | . | Aug The 20/80 Rules: The 20% of DevOps skills you will use 80% of the time. | . | . | . | . Architecture . UML and diagrams 2022 Dec Structurizr | . | . | . | Reactive Programming 2022 Aug 22 Learn RxJS operators and Reactive Programming principles | The Reactive Manifesto | Recommended: Java Brains: Project Reactor | . | . | Microservices 2022 Sep Recommended: A pattern language for microservices | . | . | Kubernetes 2022 Sep A visual guide on troubleshooting Kubernetes deployments | . | . | Design Patterns 2022 Nov Small and Simple: Refactor if/elseif/elseif using Strategy Design Pattern | REST API following CLEAN ARCHITECTURE &amp; DDD Tutorial | . | . | . | . Clean Code . 2022 Try not to call your objects DTO: Contains a list of alternative names | Nov CUPID—for joyful coding - Dan North &amp; Associates Ltd | Write Better Commits, Build Better Projects - The GitHub Blog | . | . | . Observability . 2022 | 2022 Aug 22 Graphana Documentation | . | 2022 Sep: Instrumenting Observability: Getting Started and Pro Tips | Difference Between Observability and Monitoring: Monitory means systems metrics. Observability is much deeper. current understanding: logs. | Practical Observability: Do not silence errors | . | Nov Slack System Status: A public view of whether Slack has an outage | Observability Primers: Observability can also be used for SLIs and SLOs | . | . Culture and Collaboration . 2022 Dec Good First Issue: Issues for your first open-source contribution | . | Aug A Software Engineering Culture Test | . | Sep Synchronous Versus Asynchronous Communication Tools | Apple CEO Tim Cook on Collaboration | Communication Skills are Underrated for Software Developers | Think introverted; act extroverted - by Shaziya Tambawala - Designing Atlassian - Sep, 2022 - Medium | In any friendship/relationship/coperation. the most important thing is trust. If you can trust, only then you’ll move forward. This includes and is not limited to the world around you. | You calling Uber in a different country and getting home safely driven by a stranger is all trust based. | . | Most important thing in team work is not running away Running away when problems comes breaks trust. | . | . | Oct English Communication Is The Most Important Skill For Immigrant Engineers | . | Nov Managing Remote Teams — Use Checklists | . | . | Presentation: 2022 Oct: Tool: Mentimeter | . | . | . Agile . 2022 Aug Agile Manifesto | Agile Developer | Getting Started with Agility: Essential Reading | . | Sep YouTube Channel: Development That Pays | Jira templates for user stories, tasks and bugs | The Difference Between The Clever Developer &amp; The Wise Developer | 4 types of experiments in software development | Spring Demo | Initial Project development process | AgilityHealth 3 min Explainer Video - YouTube | Agile Simulation Videos - YouTube | . | Nov The Planning Onion: A Product Management Concept | . | . | . Chaos Engineering . 2022 Sep Chaos Engineering: the history, principles, and practice | PRINCIPLES OF CHAOS ENGINEERING | . | . Integration Apps . 2022 Oct Apache Camel: https://camel.apache.org/ | Groovy DSL: http://docs.groovy-lang.org/docs/latest/html/documentation/core-domain-specific-languages.html | Kotlin DSL: https://medium.com/kotlin-and-kotlin-for-android/kotlin-dsl-coding-a-dsl-6-ee355be81106 | . | . | Nov automatisch/automatisch: The open source Zapier alternative. Build workflow automation without spending time and money. | . | . More Lists . sindresorhus/awesome: 😎 Awesome lists about all kinds of interesting topics . akullpp/awesome-java: A curated list of awesome frameworks, libraries and software for the Java programming language. . More .",
          "url": "https://www.ankushchoubey.com/resources/",
          "relUrl": "/resources/",
          "date": ""
      }
      
  

  
      ,"page10": {
          "title": "",
          "content": "Responsibility . Part 1: Foundations . 1. 2. . With More Responsibility Comes More Power. And with more power comes more responsibility | Part 2: Principles . Fullfill potential: The positive effect of doing hard things | No one gets away with anything. | To escape the problem, actually solve the problem | Start now! Don’t wait.(You can’t wait until forever to get started. Only by starting now you’ll make it easier for your future self. The problems with perfection) | Needs vs Wants. . Nihilism of The Modern Age. And Traditional Roles to the rescue. . makeMistakes . Facing obstacles. And becoming antifragile. . Discipline . Fuck feelings. Be disciplined. . The Do Something Principle (external link) . Part 3: Practices . Start with local problems. (Clean your room: If your room is filthy, your mind is fifthy) | Focus on needs and need to do (duties) rather than wants. | Stop taking on other people’s responsibilities | Be useful and pick the heaviest load you can find. . | Conclusion | Facing the dragon .",
          "url": "https://www.ankushchoubey.com/philosophy/core-values/responsibility",
          "relUrl": "/philosophy/core-values/responsibility",
          "date": ""
      }
      
  

  
      ,"page11": {
          "title": "Hire me!",
          "content": "Hi. I am developer with 4+ experience in Spring Boot Microservices. I am actively seeking an onsite role in Europe, Dubai, Canada, or Australia. . I am committed to delivering high-quality, customer-focused solutions and have a proven track record of success in my previous roles. You can find my resume and a list of recommendations and appreciations from colleagues below. . If you are interested in hiring me, please feel free to contact me at LinkedIn to discuss further. I’ll be excited about the opportunity to bring my skills and experience to your organization and contribute to its success. . Resume . Download Resume linkedin/in/ankushchoubey Appreciations . Sanoj Kumar: Ankush Reported to Sanoj at TCS . Original: LinkedIn Recommendation Section . It’s rare that you come across standout talent like Ankush. I had the pleasure of working with Ankush for almost two years in a very highly visible and complex application. . I really appreciate energy, enthusiasm, pro-activeness which Ankush brings in the team. He always try to look a modern way/tool/framework to solve the problem. You can trust him with any complex problem and he will come with multiple approaches to solve the problem. . His approach to make reusable components, write cleaner code and finding ways to remove boilerplate code is really fantastic. . He is an amazing asset for any team and company. I wish him all the very best for his future assignments. . Soumya Biswas: Ankush Reported to Soumya at TCS . Original: Appreciation and Recognition PDF . Ankush has been exceptional throughout the Labor Cost Portal Project , understanding the macro and documenting all the key items and making sure all key aspects are covered in the new application logic. He is always open to take challenges and solves production issues in small span of time. He effectively communicates the changes to BRM. . Umang Budhwar: Ankush and Umang worked in the same team at TCS . Original: LinkedIn Recommendation Section . I had the pleasure of working with Ankush on a project where we utilized Java, Spring Boot, and Angular. Ankush was a quick learner and showed a great curiosity to understand the reasons behind things, which made him a valuable member of the team. His dedication and ability to learn new technologies quickly made a positive impact on the project. I would highly recommend Ankush as a skilled and motivated developer who is always eager to take on new challenges and deliver results. . Rituparna Ghosh: BRM at TCS . Original: Appreciation and Recognition PDF . Hi Ankush,Appreciate your work done for CSF Forms project! The pieces you worked here were critical and you delivered them well . Keep up the good work.Thanks,Ritu . Priya Jayachandan: Ankush Reported to Priya at TCS . Original: LinkedIn Recommendation Section . Ankush is a highly enthusiastic, energetic and a fast learner.He has the capability to quickly grasp the necessary domain, technology and process knowledge to deliver the right product at the right time.He volunteers for many of the account level initiatives and brings out of the box ideas for better execution. . Deepa Mandal: Ankush Reported to Priya at TCS . Original: LinkedIn Recommendation Section . Ankush is very hard working and go-to person for technical stuffs. A very techno savvy person and a good coder indeed! He always come up with good solution. I had very good experience working with him past couple years !! .",
          "url": "https://www.ankushchoubey.com/resume",
          "relUrl": "/resume",
          "date": ""
      }
      
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "{% include postsOfTag.html tag=’summary’ %} .",
          "url": "https://www.ankushchoubey.com/summaries/",
          "relUrl": "/summaries/",
          "date": ""
      }
      
  

  
      ,"page16": {
          "title": "",
          "content": "Systems . Part 1: Foundations . 1. . Systems O(log n) over Bruteforce O(n^2) | Compounding effect of 1% better | Machine that makes improvements. . Knowledge repository. . Lean methodology. Kanban. . How to organize anything. (turn chaos into order) . System of people. . Part 2: Principles . Be methodical in everything. | Automation in the modern world | Be consistent. | Take data-driven decisions | Part 3: Practices . Post operation debrif 2. . | Conclusion . |",
          "url": "https://www.ankushchoubey.com/philosophy/core-values/systems",
          "relUrl": "/philosophy/core-values/systems",
          "date": ""
      }
      
  

  
      ,"page17": {
          "title": "",
          "content": "Team Work . Part 1: Foundations . 1. 2. . Personalities | Part 2: Principles . We are all narcissists. | Learning to care | Random acts of kindness | Quit Sugar and Bread | Keep your weapons sheeth . Boundaries . Gift of attention. Gift of empathy. Gift of truth. . Part 3: Practices . Learning to care. Guide rather than taunt | Being kind and random acts of kindness. | Be the person everyone calls. Be useful. | Ask for help. People ae more caring that you realize. | Implement Zero Trust . | Conclusion | space out so that people have time to adjust #changeManagement . Love . The 7 Tools To Making Better Love Decisions . | Choose love over Attachment. What’s the difference between love and attachment? . | Love people and use things. Because the opposite never works. . Love is non-transactional. . Love is not special. . Listen: A lot of your life is not just fixing problems. It’s being there with other people. .",
          "url": "https://www.ankushchoubey.com/philosophy/core-values/team-work",
          "relUrl": "/philosophy/core-values/team-work",
          "date": ""
      }
      
  

  
      ,"page18": {
          "title": "",
          "content": "Time . Avoiding procrastination . Opportunity Cost . Part 1: Foundations . 1. . Finiteness of Time 3. | Part 2: Principles . 1. 2. 3. . Part 3: Practices . 1. 2. 3. 4. . Conclusion |",
          "url": "https://www.ankushchoubey.com/philosophy/core-values/time",
          "relUrl": "/philosophy/core-values/time",
          "date": ""
      }
      
  

  
      ,"page19": {
          "title": "",
          "content": "Clarity 🔭 . Part 1: Foundations . What does clarity mean? And why is it the first core-value? | Why is clarity relevant? | Why and how clarity coincides with truth and vision? | What is truth? What is perspective? How multiple truths can co-exist? | Why we should strive to tell the truth always? | Mental Models and Framework Thinking . Ethos Pathos Logos | Part 2: Principles . Truth and good are tied. | You are likely wrong. | The more you can look at the past and your current map. The more you’ll be able to see the future. | Part 3: Practices . Structuring your thoughts. Using mental models for truth and core values for vision. . | Spotting and navigating cognitive biases. | Spotting and navigating logical fallacies. . | Implement Zero Trust in Real Life: Catching lies, liars and protecting yourself . | Tell the truth. Or atleast not lie. | Learning to share your thoughts with others. (Intimate conversations) Why communication leads to better thinking. | Developing Self Awareness | Developing Vision . A man who thinks in decades is dangerous | Part 4: Nuances . Is it truth? Or is it panic? |",
          "url": "https://www.ankushchoubey.com/philosophy/core-values/truth",
          "relUrl": "/philosophy/core-values/truth",
          "date": ""
      }
      
  

  
      ,"page20": {
          "title": "",
          "content": "{%- if page.title -%} {{ page.title }} . {%- endif -%} {{ content | markdownify }} {% if site.paginate %} {% assign rawposts = paginator.posts %} {% else %} {% assign rawposts = site.posts %} {% endif %} {% assign posts = &#39;&#39;|split:&#39;&#39; %} {% for post in rawposts %} {% if post.hide != true %} {% if post.categories contains &quot;non-technical&quot; %} {% assign posts = posts|push:post%} {% elsif post.categories contains &quot;algorithm-problems&quot; %} {% else %} {% endif %} {% endif %} {% endfor %} {% assign grouped_posts = posts | group_by: &quot;sticky_rank&quot; | sort: &quot;name&quot;, &quot;last&quot; %} {% assign sticky_posts = &#39;&#39;|split:&#39;&#39; %} {% assign non_sticky_posts = &#39;&#39; | split:&#39;&#39; %} {% for gp in grouped_posts %} {%- if gp.name == &quot;&quot; -%} {% assign non_sticky_posts = gp.items | sort: &quot;last_modified_at&quot; | reverse %} {%- else %} {% assign sticky_posts = sticky_posts | concat: gp.items %} {%- endif -%} {% endfor %} {% assign sticky_posts = sticky_posts | sort: &quot;sticky_rank&quot;, &quot;last&quot; %} {% assign posts = sticky_posts | concat: non_sticky_posts %} {%- if posts.size &gt; 0 -%} {%- if page.list_title -%} {{ page.list_title }} . {%- endif -%} {%- assign date_format = site.minima.date_format | default: &quot;%b %-d, %Y&quot; -%} {%- for post in posts -%} {%- if site.show_image -%} {%- include custom_post_list_image_card.html -%} {% else %} {%- include post_list.html -%} {%- endif -%} | {%- endfor -%} . {% if site.paginate and site.posts.size &gt; site.paginate %} {%- if paginator.previous_page %} {{ paginator.previous_page }} | {%- else %} • | {%- endif %} {{ paginator.page }} | {%- if paginator.next_page %} {{ paginator.next_page }} | {%- else %} • | {%- endif %} . {%- endif %} {%- endif -%}",
          "url": "https://www.ankushchoubey.com/underground/",
          "relUrl": "/underground/",
          "date": ""
      }
      
  

  
  

  
  

  
      ,"page23": {
          "title": "",
          "content": "{} .",
          "url": "https://www.ankushchoubey.com/redirects.json",
          "relUrl": "/redirects.json",
          "date": ""
      }
      
  

  
  

  
      ,"page25": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.ankushchoubey.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

  
  

}