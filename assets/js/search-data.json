{
  
    
        "post0": {
            "title": "The Personal MBA",
            "content": ". I had been thinking and writing a lot of article but the amount of time it was taking me was huge. . So, this book eliminates 80% of my future blog posts. . I realized that it would be better that starts with general ideas which I could later look deeply into. . There are total 271 concepts. . It took me 3 months to read the book. I think it will take next 3 months to summarize. . Book Summary . Introduction . Businesses are opened by ordinary people like us. You don’t need to fixate of getting a business angst, certification or imposter syndrome. . You Don’t Need To Know It All . Principles are less. Methods are too many. The one who knows principles can choose his own methods. . You do not need to learn everything. You only need to know a small set of business concepts to make good decisions. . No Experience Necessary . Questions, Not Answers . Education is the answer to all questions not just one. If you know how to ask the right question, you’ll find answers to your problems faster. . Mental Models, not Methods . Business . Value Creation . Marketing . Marketing is about finding the right prospespects, keeping their attention and make them interested in what you have to offer. Every business needs to do it because no matter how good your product is, you won’t have profit until your customers can find you. . Direct-Marketing sometimes reduces the lines between itself and sales because it reduces amount of time to close the deal. . But overall, Marketing and Sales are completely different activities. Marketing is about keeping attention. Sales is about closing the deal. . Attention . The number 1 rule of marketing is that attention is limited and every other company is trying to grab attention. . People are only interested in things they like and the things that are important to them. Therefore high quality attention is important. And high quality attention must be earned. . At the same time, the aim is not be popular. The aim is to increase profits. So if you can get yourself on TV, you’ll be popular but you’ll waste a lot of time not finding the right customer. . Receptivity . People ignore what they don’t care about. . Receptiveless is how open a person is to your message. There are three parts to this: message, timing and medium . Message: The person should be interested in the message you are offering. Timing: The person should recieve the message at the right time. Medium: The person should recieve message from the right medium. Example: A personlized message will likely be more effective than same commercial message to every person. . From a business perspective, you want your customers to be as receptive as possible. . Remarkability . Remarkability is being enough different to pique the interest of your customers. Being remarkable voiletes customer’s usual expectations and grabs their attention for free. . High remarkability generated word of mouth. Advertisement is what is done when you are not remarkable (or not remarkable enough). . Probable Purchaser . Preoccupation . Sales . Value Delivery . Finance . People . The Human Mind . Working With Yourself . Working With Others . Systems . Understanding Systems . Analyzing Systems . Improving Systems .",
            "url": "www.ankushchoubey.com/mba/",
            "relUrl": "/mba/",
            "date": " • Mar 16, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "User Experience",
            "content": ". Photo by Alvaro Reyes on Unsplash . I started learning about UX a few months ago. This post summarizes things I have learned far. . User Experience . User Experience (UX) is about making a product or service in a way that is useful, easy and delightful for end users. . UX is something that has to be actively worked on. It won’t happen automatically. . Because if UX is not good, . User will get frustrated using the product | User will not find the product attractive to use. | . And therefore they won’t use your product. . Sympathize with the user. . The way to understand what the users want is by sympathizing with the struggles that user’s face. . Test fast . The earlier you can get feedback from the user, the shorter your product development cycle will be. . The user can only know what he/she likes when he/she can experience the product. But since product development takes resources, prototyping helps to make the process faster. . The fastest way to do it is to create paper prototypes. Paper is inexpensive, quick and has zero learning curve. . You can prototype not just User Interface but also physical products. . Once the paper prototype is created, you can increase the fidelity of the prototypes. . If a picture can say a thousand words, a prototype can save a thousand meetings. . It’s best to involve the end-users as much as possible in the design process. . The prototype also helps engineers to build exactly what the end-users want and reduces overall development time. . UI is part of UX, not the other way around. . UX includes more than the User Interface. It includes every interaction the user has with the product or the company. . UX is concerned with how the user feels when using the product and not just how it looks. . Such things can include reducing the number of steps needed to perform a task. . A Checklist for “beauty” of User Interface . As a developer how can I become a better designer. Source: “As a developer how can I become a better designer?” ANSWERED! .",
            "url": "www.ankushchoubey.com/ux/",
            "relUrl": "/ux/",
            "date": " • Mar 10, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Testing",
            "content": ". Photo by Mykenzie Johnson on Unsplash . Thinking . You should not make assumptions. Always test. . Productivity . Testing makes it certain that you are moving in the right direction. . Test small, test often, and test fast. . Code . Keep your test coverage 100%. A good way to do that is that every line of commit should have test coverage 100%. . Test isolated pieces (Unit Test) before testing with other components (Integration Test). . TDD is 50% more efficient in the long term. . Testing is insurance. It may not find anything but when it does it saved big time. . The cleaner your code, the cleaner the tests. . Writing unit tests first only works well when you know exactly what you want to write. If you are experimenting. It may be useless. . Medical Field . The more you test, the more data points you have. The easy it will be to isolate the infected and avoid disease spread. . Maths . You never accept the alternative hypothesis. You always reject it. You would almost never know if a hypothesis is 100% current. Unless it is a logical statement. . To test, you can plug the numbers right in and see if the equation holds true. . Learning . If you are learning, you can only know if you have learned right by testing yourself. .",
            "url": "www.ankushchoubey.com/testing/",
            "relUrl": "/testing/",
            "date": " • Feb 28, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "How to recover from injuries faster",
            "content": "To recover from physical injuries faster like tightness and muscle soreness, your blood should be flowing well. . There are someways to do it and all of them are important to do and lead to similar level of benifits: . Massage . It does not have to have a lot of pressure. It can be as soft as possible. Even little bit will help. . If you cannot directly massage the area in pain, massage the area around it. This will atleast let blood flow near the effected area. . Cold Exposure . Take cold showers. Atleast 90 seconds. And don’t be afraid of the cold and start taking heavy breaths. Be calm, take deep breaths. . Your’s body will start pumping blood faster to keep your body warm. . Do atleast 30 seconds on the area that is directly effected. . Move and Exercise . Problems multiply when you don’t move the part. Your body does not fully know how to recover a part until you show it how you use it. . So move as much as you can. It’s okay if you can only do quater motion. Do it before it starts paining. . if you cannot move the specific body part because it is too painful. Move other parts, keep blood flowing well. . Rest Enough but not too much. . Rest enough. You want to increase the probability that you’ll work the next day. .",
            "url": "www.ankushchoubey.com/time-think/",
            "relUrl": "/time-think/",
            "date": " • Feb 23, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Ethical Capitalism",
            "content": ". Photo by billow926 on Unsplash . Capitalism is Pure Genius . Capitalism involves pushing oneself to help others. . Entrepreneurs find a problem, solve it, and earn money as a reward. . In capitalism terms, money is proof that you are adding value to the world. 1 . Those who don’t own a business, help others by becoming an employee, thus adding value. . The Path To High Impact Is Through Capitalism . It is efficient to adapt ourselves to the world than to do the opposite. Money is a form of trust. . You’re going to need money to have the effect of any kind and at any stage. Being a capitalist (employee or entrepreneur), providing value, and being compensated with cash is the best way to do it. . Capitalism + Ethics . Capitalism is not perfect. If not kept in check, it can turn evil (Example: East India Company) and provide no value. . Ethics is not intrinsic to capitalism. And it probably never be as it is hard to map out. A combination of the two leads to more results than one or the other. . Ethics enables you to play long-term games, be trustworthy and win social trust. . The mix of the two is probably why companies like Apple and Tata Group are so successful and trusted for so long. They provide high value while not compromising on ethics. . It seems better to think in terms of adding value than to think in terms of money. . Naval Ravikant &#8617; . |",
            "url": "www.ankushchoubey.com/ethical-capitalism/",
            "relUrl": "/ethical-capitalism/",
            "date": " • Feb 18, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "The Path / Ethics",
            "content": "Photo by Jake Blucker on Unsplash . The Path . The path is trying to be the best version of yourself. . Why . If you are not the best you can be, you create or neglect problems. These problems accumulate and will make you suffer. And it’s not just you who will suffer. It will engulf all the people around you. . Therefore, it’s an ethical crime to be weak1 and not be the best version of yourself. . Consistency . dThe reason to be consistent is that you experience compount effect. Small changes overtime can significantly change things. . Look at yourself from 5 years ago. Any habit that was small would have been really small for the first 2 years. then suddently it started growing significantly. . Things that at first don’t seem significant become significant when you compound them over a few years. . So if you are cleaning your room, planning the day, meditating, etc. You are on the path! Their is light at the end of the tunnel. . Staying on the Path . Sacrifice . You have to give up who you are to be who you want to be. . The boy shall die and the man will live. 2 . The Dark Side . The dark side is the easy path. It’s a path devoid of responsibility. Blame, complain and general disinterest is forms of the dark side. . Humility . One is tempted to go to the dark side when he/she is not humble. . if not one overestimated himself. . One should try fixing problems around him starting from the smallest. Smallest problems like making your bed make a man humble. . Taking on the burden . There is a difference between being handed something and taking it on voluntarily. . One should take on the burden voluntarily because what is neglected is rushes in when things go bad. 1 . Default Aggresive . Be the one who does things. Who solves the problems. Not the one who just reacts to the the situations. . Are you on the path? . Fast, lift, sprint, stretch, and meditate. . Build, sell, write, create, invest, and own. . Read, reflect, love, seek truth, and ignore society. . Make these habits. Say no to everything else. . Avoid debt, jail, addiction, disgrace, shortcuts, and media. . Relax. Victory is assured. 3 . How do you know if you are on the path? . Foundations are build and maintained | You are optimally between order and chaos | You are default aggressive. You fix problems before they occur. | You can choose the short term pleasure, but you choose not to. in favor of long term. | You always tell the truth. And are not afraid of the consiquences/ | Your productivity level is high. | You are always calm. | . Jordan Peterson &#8617; &#8617;2 . | Game of Thrones &#8617; . | Naval Ravikant &#8617; . |",
            "url": "www.ankushchoubey.com/path/",
            "relUrl": "/path/",
            "date": " • Feb 4, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Employee Ethics",
            "content": ". Photo by Shridhar Gupta on Unsplash . In previous posts, I discussed the reasons to be ethical and how it related to businesses. For employees, ethics can be summarised with the Principal-Agent Problem. . Principal-Agent Problem 1 . The Principal wants agents to act like in the best interest of the agent. | The agent who does act like Principal get rewarded. | . Organization Structure . Organization need to foster an environment for employees to be more ethical. Though there are some things the sole hand of employee. . The Ethics . Not accepting bribes and not stealing. | Not engaging in office politics and maintaining good company culture. | Focusing on efficiency and conflict resolution. This means working together to find a solution. | . | Take on accountability and responsibility | Getting work done | If you don’t feel like part of the company, move on. | . Naval Ravikant &#8617; . |",
            "url": "www.ankushchoubey.com/employee-ethics/",
            "relUrl": "/employee-ethics/",
            "date": " • Jan 23, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Open Source Software (OSS)",
            "content": ". Photo by Richy Great on Unsplash . The more I think about open source, the more confusing things get. In some sense, Open Source projects are pretty similar to Non-Profits. . Impact of OSS . The overall impact of OSS has been high. If there was no OSS, we would either have to buy everything or build everything from scratch every time. . Most of the libraries I use daily are open source. . Types . Most OSS are libraries for developers to use. . Some exceptions are Signal, VLC and Chrome. . Why companies make their project open source? . Recognition . Companies, especially smaller ones, gain a lot of recognition by being developing open-source software. An example of this is BaseCamp which built Ruby on Rails. . Market Capture . Enterprises and even smaller companies prefer free open source software over the paid ones if it gets their work done faster. . Hiring . Open-source software help companies find and recruit good talent. Though it is likely not the main reason for making open-source software. . Revenue . Most companies don’t depend on their open-source software for profit. . The once which do usually rely on: . Donations | Provide additional proprietary features at Premium. Like: Cloud Support. | Problems with open source . Not all OS projects are equal. Some projects are better maintained than others. . Sustainability . The revenue does not seem sustainable. The companies which only focus on open source products either require a lot of Donation (like Ubuntu) or have to pivot heavily to be sustainable (like RedHat recently) . Deception and Priorities . OSS often doesn’t openly admit to having bugs. If a developer knows of bugs in the OSS they can choose not to use the product. But usually, developers get to realize the bugs themself after a few months of using the products. . Critical bugs may be ignored as open-source projects have their own set of priorities. Sometimes the prioritize the number of issues fixed over addressing critical once. There is low/no accountability 1 since it is free. . Paid products provide priority support for paid customers, thus resolving issues faster. . When choosing an open-source project, check GitHub issues first. 1 . Also, open-source projects do get abandoned which does not happen with paid products. . Flutter EXPOSED: Extreme JANKY animations. “A nightmare framework” &#8617; &#8617;2 . |",
            "url": "www.ankushchoubey.com/open-source/",
            "relUrl": "/open-source/",
            "date": " • Jan 22, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Business Ethics",
            "content": ". Photo by Charles Forerunner on Unsplash . In the previous post, I discussed the reasons to be ethical. In short, ethics provides leverage. This post addresses points specific to businesses. . Competition and Revenues . Most profitable companies create a monopoly. 1 . Example: Google, Facebook, Amazon | . Monopolies are bad for innovation long term. Competition is good for innovation. . Often publically traded companies listening to shareholders focus on short term gains while neglecting ethics. . Example: Slave Trading Companies during the Colonial Era. 2 | Recent Example: Facebook is known for copying features from smaller competitors then purchasing them | Amazon is known for bankrupting competitors by: Investing in companies then launching their copy of cheaper product under Amazon brand 3. | Forcing business to be sold to Amazon by selling the same product at a massive loss and waiting for a competitor to go bankrupt before restoring price. 3 | . | . | . Some companies choose to stay private, avoiding being influenced by shareholders. . Example: SpaceX | . If your business is no longer needed, pivot and move to something else. . Customer . Your goal as a company is to help your customers. 4 . If you cheat, you’ll create a bad word of mouth about your brand. Word of mouth is the most powerful marketing strategy. . Be the kind of business whose customer wants you to succeed. 5 . Protect customer data by providing 100% encryption. Even you should not be able to read it. . Employee . The more you take care of your employees. The more employees take care of you. 5 . Companies should run on ideas, not hierarchy. You have to let the best ideas win. Which means that people at Leadership position should listen to their employees and sort out solutions. 6 . Peter Thiel &#8617; . | Sapiens by Yuval Noah Harari &#8617; . | The Amazon monopoly and the problem with Jeff Bezos’ business model &#8617; &#8617;2 . | Mark Cuban &#8617; . | Simon Sinek &#8617; &#8617;2 . | Steve Jobs &#8617; . |",
            "url": "www.ankushchoubey.com/business-ethics/",
            "relUrl": "/business-ethics/",
            "date": " • Jan 21, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Piano",
            "content": "Photo by Dolo Iglesias on Unsplash . In some sense, the Piano is just a speaker that is manual and more satisfying. . Learn sheet music . You don’t need to memorize songs if you can read sheet music. . It’s much faster to progress in the long run. . It is joyful to open any random song and play it without having to watch a YouTube tutorial for each song. . The more sheet music you see, the easier it is to read. . Practice . Every new technique (like chords, scales) learned will make you a better pianist. Thou should not skip anything. . Isolate parts of pieces to practice better. . Practice regularly. 10-15 minutes daily is better than an hour once a week. . Initially learning a piece, play slowly. Increase speed gradually. Once you are at the desired pace, always play at that pace. Not fast. Not slow. . If you suck as a new technique, continue practising it in the upcoming days. You’ll get it in 15 days. . Learn techniques from many sources. . Being Calm . You’ll make mistakes if you are not calm. So always keep calm and check your breath. . Banging your fingers is a sure way to suffer. Stiff hands will become loose as you practice more. . Get proper tools . Get a proper stand and seat. You’ll find you play instantly 50% better. . Humility . If you think you play well, you’ll likely cry seeing Kids on YouTube play better than you. . Learning Piano is a rabbit hole. You might probably not learn everything. . How I am learning? . SimplyPiano App. | YouTube Tutorial for Piano Techniques. | Alfred’s Adult Guide for Piano | .",
            "url": "www.ankushchoubey.com/piano/",
            "relUrl": "/piano/",
            "date": " • Jan 16, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Why Ethics?",
            "content": ". Photo by Tyler Quiring on Unsplash . I have been wondering over this lately. I don’t have concrete thoughts formed yet. . Ethics extends from personal to even business decisions (like data privacy). . Ethics . Ethics is hard to define. Objectively, it is a myth, a shared myth 1. . For the sake of this post, let’s reduce ethics to: . Not doing wrong things that you know are wrong. | . Not being corrupt . One should be ethical so that once’s mind isn’t corrupt when facing life’s challenges 2. . So that once can act sane and not make things worse. . Reducing decision fatigue . A side effect of being ethical is that you’ll have fewer decisions to make. You can instantly eliminate un-ethical once. . The price you pay not being ethical . Your habits and actions are proofs to yourself of the kind of person you are. 3 . If you take the same behaviour and stretch it to a lifetime, you will likely be in a very different place to where you are. . The direction of things is more important than the speed at which you achieve them because you could end up in a very different place. . Long Term Greedy 4 . Being ethical is being greedy long term. . The hallmark of any compounding process is short term pain for long term reward. . For example: If people know you are ethical, they trust you more. They’ll be more likely to do deals through you. 4 . Example 2: If you are ethical, you are surrounded by ethical people. 4 . Being ethical includes a lot of short term pain for a future reward. . Having nothing to hide. 4 2 . Being ethical allows you to tell the truth almost always and not be afraid of the consequences. . Node in a network . Your actions and decisions are more than yours. They are a ripple in a network 2. . If you can affect 1000 people positively, they might do that same to other people. Positive things branch out like a tree. . Meaning . Ethics provide life more meaning. . A meaningful life is more exciting and fulfilling. . Rights and Responsibilities . Rights and responsibilties is how you create trust and have a fare trade. . If you want rights, you have to take responsibilities. 2 . Ethics is something you practice and not just something you learn 4 . Sapiens by Yuval Harari &#8617; . | Jordan Peterson &#8617; &#8617;2 &#8617;3 &#8617;4 . | Atomic Habits &#8617; . | Naval Ravikant &#8617; &#8617;2 &#8617;3 &#8617;4 &#8617;5 . |",
            "url": "www.ankushchoubey.com/why_ethics/",
            "relUrl": "/why_ethics/",
            "date": " • Jan 14, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "Sapiens Book Summary",
            "content": ". Why this summary . The book took around two months to complete. I am a slow reader. I am trying to write this as a way to better process what I understood. . This summary may spoil your reading experience if you have not read the book yourself. . The order of points is random. . The book . The book is a brief history. It transitions fast and beautifully from one topic to another. . It also presents arguments and counter-arguments in a way that tries to explain the whole thing from maximum points of view. This kind of writing and thinking is something I aspire. . Lessons . Cousins . We had a lot of cousin humans. Once upon a time, Around six species of humans roamed the earth at the once. | We are not unique. 3 billion years ago our universe was born. It will stay for billions. We are not even the human species that has survived the longest (as of yet). | There are countless species. We are just specie that got lucky thanks to our intellect and imagined realities. | Imagined Realities . History is random. There are cause and effect to certain events but there is no reason why history could not have turned in some other way. | Religion is a recent thing. (10,000 years ago). | The way we interact and work together with stranger and form groups larger than 150 is by imaging things. | Societal constructs like nation, company, ethics, etc are imagined realities shared by billions. It’s so strong that we act according to them in the real world. | There is no justice in history. Even a human right is an imagined construct. There is nothing in biology that suggest it to be a truth. These constructs do help keep people sane. | Destroyer of Species . Huntergathers were healthier than us but they did not live for that long. | There is no going back once the Agriculture Revolution started. Why would someone want to go back to hunting? | We are Thanos for other species. Our species has captured and killed and effected almost all animals on earth. | We don’t look at animals with the same view as we look at other humans. We abolished human slavery but are okay with animal slavery. | Capitalism . Science is largely a product of Capitalism and politics. | Capitalism allowed us to progress fast. | Capitalist if not checked can do anything for money. Slave trading companies were listed in the London Stock Exchange. This seems kind of similar to current privacy breaching companies or how we farm animals. | The stock investor would not care what happens in the company. he is just interacted in making a return. | Government and legal checks are necessary to keep Capitalists in check. | Accepting Ignorance . The scientific revolution was a result of Europeans accepting that they are ignorant. That they don’t know things. | The reason the Scientific revolution took place in Europe instead of India or China (even if Asia controlled 80% of world GDP) is because of social constructs. | Asians did not accept their ignorance and did not venture out to find answers to things they did not know. | New material discovered increase progress rapidly. | Unification . The 3 things that brought humankind together; Empired, Religion, Money. | Money crossed lines which religion could not. Everybody loves money. | There have been many types of money and does not include just a coin. | We are all influenced by European culture. No country has an original culture. It’s a mix. | Math . Maths allowed us to predict the future. | Time and timetable tracking is recent. Though it is very efficient. | Buddhism . Western liberals mix their view with the Buddhist view. | The Buddhist view is not that the happiness in individual and it must be protected. | The main part is the internal states are fleeting and they change every moment. There is no point in chasing after it. | Credit . Banks and the whole financial system are built on credit. They provide more money than they have hoped for a future return. This is a large contributor to human progress. . Lone Individual . Individual needs are now satisfied by state and organizations instead of family and community. . If you want money, you can take a loan. | if you want an education you go to school. | if you are unemployed there are un-employment schemes. | if you are old, there are retirement schemes. | . Transendance . Humans have transcended genetic boundaries. . We learn faster and adapt quicker. Unlike other animals whose genes dictate what they do. | We have created medicines and technologies that far exceed and extend our natural limitations. | . Communication . A band of good communication sapiens of 500 could beat Neanderthals with a pack of 5 times more. | Gossip is natural to us. Gossip conveys important information like who to avoid, what to do, what not to do, etc which helps us be safe. | Peace in our time . Humans have been safer than ever. And we seem to be moving towards more peace. | Compared to history, the decolonization of colonies has been relatively peaceful. Everyone seems to be tired of war. | Nature . Biology is always changing. It is never constant or fixed. If you go by this line of thinking, more than human 2 genders are possible and biology won’t have any problem with it. .",
            "url": "www.ankushchoubey.com/sapiens/",
            "relUrl": "/sapiens/",
            "date": " • Dec 29, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "A replicable Development Environment with Docker + VS Code",
            "content": "The pain . The most discouraging part of software development is setting up a local development environment. Coding is relatively easy. . Typically it takes me over a day of effort for setting up all tools. . Also typically software updates sometimes break a setup and lead to more changes. . Docker . Having a development environment in Docker means that it is replicable. You can switch machines or share the environment with team easily. . This method works with non-GUI setup. A solution for GUI is Vagrant. I did not use it because I use only 2 GUI tools, VS Code and Chrome. . Initially, I tried creating the Container without using extensions. It was painful. Remote - Container for VS Code extension makes it simple. . Guide .",
            "url": "www.ankushchoubey.com/development_environment_docker/",
            "relUrl": "/development_environment_docker/",
            "date": " • Dec 25, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "Developer Productivity",
            "content": ". Photo by MORAN on Unsplash . These are things that affect improves developer productivity significantly: . Hardware . A Fast Computer | Bigger Display | Multiple Monitors You can preview the application on one screen and keep the IDE or DB open on the next. | . | Software . A Good IDE | Plugins to automate things | A modern programming language | Dev Himself . Typing without looking at the keyboard | Initially: Use GUI tools instead of command | Later: Skip both GUI and Manual Command Line: Creating tiny scripts (.bat/.sh) to automate repeated actions. | Understanding the requirement properly. | Prototyping the User Interface to avoid confusion. Paper prototyping is enough for many cases. | Thinking and having the thoughts organized before writing the code instead of thinking while coding. | Knowing if the algorithm needed is common that an open-source solution is readily available. | Googling the right thing while debugging. | Not over-engineering. Example: Don’t use microservices if your application isn’t big. 1 | Keeping code clean | Single tasking | The Problem With Microservices &#8617; . |",
            "url": "www.ankushchoubey.com/dev_productivity/",
            "relUrl": "/dev_productivity/",
            "date": " • Dec 22, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "How I learned basics of programming.",
            "content": "The following is a beginner-focused essay. . I was a dumb programmer for the most part. I knew syntax and understood solutions to problems but could not solve them myself. . The speed of my progress was slow because there was no need for me to code well. My academic assignments were relatively easy. . Syntax . For my first programming language (C), I watched YouTube while writing all syntaxes by hand. The video taught me the importance of indentations. . Algorithm and Competitions . I had to prepare for a job interview and coding competitions. So I started practising on HackerRank. . Book: Think Like A Programmer . I knew syntax pretty well but could not write code myself. I always needed a tutorial. . I came across a YouTube series and book of the same name: Think Like A Programmer. . I watched all the videos, read books and tried applying them. I was not good initially thought I had learned some ways to estimate what end program would look. . My thoughts were getting structured. . Book: Automate the Boring Stuff with Python . I knew beginner level Java. I wanted to automate some parts of my computer but found it very difficult to do. . I had learned the syntax of Ruby. Ruby was huge at that time. . I have hesitated to learn Python. I did not want to revisit the same things with different syntax. But the Automate The Boring Stuff book was compelling. . I started reading the book and would often read and try out cheatsheets. I even had cheat sheets printed out. . Python reduced the complexity of development. I was able to focus less on syntax and more on what the code does. . Book: Cracking the Coding Interview . I was getting better. This book improved it further. . I did not solve all the problems. I had read through the theory. . Practicing . I build all my academic projects myself without asking for help. That helped me a lot. . I was trying to build things for myself. Like . a python script that would automatically empty desktop. | A python selenium script that would log in to Facebook and wish Happy Birthday to people. | A script to download Anime. | . It took around four years. I wasted the first three years and got focused on the last one. .",
            "url": "www.ankushchoubey.com/learn_programming/",
            "relUrl": "/learn_programming/",
            "date": " • Dec 21, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "Research",
            "content": ". Plateau of progress . There are many fields where the reward of discovering new things are a long time before there is implementation. (Like pure maths, theoretical physics, etc.) . During the colonial era, Europeans gained a significant advantage over other civilizations. One reason was their willingness to accept things that they don’t know and to find ways to understand the world better. 1 . The question of scientific progress was as important as anything political. . Though today we live in an era were a lot of scientific progress is made. The increase is because a large number of people are working on the problem. Even if the problems they are trying to solve are trivial (like social media). . The amount of effort required to research in the pre-colonial and colonial era was far greater. This should increase productivity and it does in some sense. But it has lead to a reduction of effort on the human part and therefore the result is the same. . Research . Research gets an entitlement. People think it is hard. . It’s likely how people define it. You just have to work at something. And if you work on it you may discover things that you don’t even know are new. . The reason research gets a bad entitlement of because of ready-made solutions and the things that are already been discovered/made. . We miss the point that all the polished discoveries we see today had humble beginnings. . I would argue that if the discovery you made or a solution you made even is it already exist and you didn’t know about it is still an act of research. You may even find some improvements. . The act of research does not have to be big. . Ready-made solutions - Globalisation . Globalisation has allowed us to take fruits of someone else’s research. . As of 2020, China and the USA dominate technology. We Indians (and many from other countries) are more of a witness to this domination. . There are also different issues to solve. The social issues in India and different than those in developed nations. And therefore globalisation has a faster positive impact compared to research activities. . Sapiens by Yuval Harari &#8617; . |",
            "url": "www.ankushchoubey.com/research/",
            "relUrl": "/research/",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "Hurrying does not help.",
            "content": "Hurring is similar to stock market investing. . If you rush, you make a profit some times and you losses some times. In the end, you are in the same place. . Watching YouTube videos at 2x speed won’t help. Especially if it is a field you are not familiar with. . If you write super fast, you’ll not be able to understand what you wrote. . If you read too fast, you won’t have enough comprehension. . If you push yourself to work, you’ll burn out. . There is a point before you rush called the minimum effective dose (MED) 1. . If you go beyond MED the speed will fast but progress will be slow. If you go below MED the speed will be slow and progress will be slow. . If you are the MED, your speed will be optimum and progress will be optimum. The tricky thing is MED for any task changes in moments. . No rush. No pause. 2 . 4 Hour Body &#8617; . | Tim Ferriss &#8617; . |",
            "url": "www.ankushchoubey.com/hurrying/",
            "relUrl": "/hurrying/",
            "date": " • Dec 17, 2020"
        }
        
    
  
    
        ,"post17": {
            "title": "Why Software Engineers Should Enter Other Fields.",
            "content": "Software Engineers . Software Engineers solve problems by building solutions. . We keep iterating on the solutions, make it better and eventually replace the solution with something completely different. . We have efficient processes for managing projects and handling productivity. Even if a deadline is near, the solution is shipped. . Software developers ability to get so much done is because of the nature of software and focus on efficiency. . What problem to solve . A non-technical person does not know the problem that can be solved using technology. . A technical person does not know what problems to solve. The result is that time is solved solving problems on trivial issues like social media instead of more important fields. . How other fields can benefit . Some fields have slow progress rate. There is a long delay in medical research getting to production (Approx 20 year 1). There hasn’t been much innovation in the field even in engineering fields like Civil engineer or biotechnology. . The reason is likely because these fields require physical products and take longer to build and test. A technology solution can help speed up some of their processes. . Graphics Modelling and Simulations to speed to testing | Data Organization and Retrieval Systems to make sure the right information is accessed. | Deep Learning Models to help search for replacing overdependence of specialized hardware. | Automation of manual tasks | . The best way to ensure these fields get benefits of innovations in computer technology is to work closely with experts in the field or to get into it ourselves. . Photo by National Cancer Institute on Unsplash . Tim Ferriss - 4 Hour Body &#8617; . |",
            "url": "www.ankushchoubey.com/engineer/",
            "relUrl": "/engineer/",
            "date": " • Dec 13, 2020"
        }
        
    
  
    
        ,"post18": {
            "title": "Eventually Perfect Feature",
            "content": ". Photo by Stephen Phillips - Hostreviews.co.uk on Unsplash . There are two approaches to building a new feature to existing software. . Approach 1: Ship with all sub-features on the first release . This approach works well when the feature is small or needs to be secret to gain a competitive advantage. . Approach 2: Ship with minimum sub-features. Then iterate. . This approach works better because most software features never get used. . Unless you are a FANG company or even if you are, you should save your resources to focus on the area that matters most. Which you only understand after the feature is in the wild for a while. . If the feature is secret, allowing beta of minimum required feature is helpful. .",
            "url": "www.ankushchoubey.com/eventually_perfect/",
            "relUrl": "/eventually_perfect/",
            "date": " • Dec 8, 2020"
        }
        
    
  
    
        ,"post19": {
            "title": "Write Tests after Cleaning Code.",
            "content": "Quality of code determines the quality of the test. . An unclean code will lead to an unclean test. . Hence, the tests will be as hard to understand and modify as the code. . If one decides to improve code quality, then all of the tests to be refactored too. . Overall the workload will be about thrice more work than it needs to be. . A better alternative is to write code, clean it, and write tests. .",
            "url": "www.ankushchoubey.com/writing_test/",
            "relUrl": "/writing_test/",
            "date": " • Nov 20, 2020"
        }
        
    
  
    
        ,"post20": {
            "title": "Plan quickly. Move fast. Break things.",
            "content": ". Photo by Chase Clark on Unsplash . I have made this mistake a lot. . I spent too much time planning and too much time deciding the perfect strategy which often took months to come up and then either never implemented it. . Later I found out that the hard way was much shorter and would often take me just a few hours or at max a week. . There is an analogy in programming which says that a programmer will spend six hours automating something that takes six minutes. . If something is repeated so every frequently then the six minutes saving in time is justified. . But for most things, it is better to move on fast and break things. .",
            "url": "www.ankushchoubey.com/move/",
            "relUrl": "/move/",
            "date": " • Nov 3, 2020"
        }
        
    
  
    
        ,"post21": {
            "title": "Age is not a perfect measure of experience",
            "content": ". Photo by Paige Cody on Unsplash . Kids learn too . Some kids learn hard skills like playing the piano at a very young age. They often get labelled as a child prodigy. . This categorization assumes that the child is born with talents and ignores the fact that he/she has to spend years learning the skill. . Most child piano prodigies start at age 4, by the time they are age 10 they already have 6 years of Piano experience. No doubt they have skills. . People who learn faster . On the other hand, some people put in more effort to learn to skills properly. . They either grasp the ideas or maybe had better learning resources. . Either way, they learned skill with no formal learning/training would take years. . Argument . Most corporate environments favour “years of experience spent at work” at a primary factor for determining salary and projects. . This ignores the ability of the person to get the job done. .",
            "url": "www.ankushchoubey.com/age/",
            "relUrl": "/age/",
            "date": " • Nov 3, 2020"
        }
        
    
  
    
        ,"post22": {
            "title": "First Hackathon",
            "content": ". Photo by Roman Synkevych on Unsplash . I always wanted to participate in one but I was afraid that my skills are not enough. . But after working as a programmer for the last two years, I realized that almost everyone starts with no skill and figure out a solution eventually. . So my goal for joining was to learn as much as I can. I knew I could do at least something even if not at a level I would expect. . These are some lessons I learned . Goal is not working software . The goal for the organizers was not complete working software. The goal was to see how the problem can be tackled from different points of view. . Team . Our team could have been better organized. We almost wasted 2 weeks out of 5. In the second week, I tried taking up leadership, arranging meetings, and talking to people. But the by 3rd week my “leadership” declined. . The reason for the decline was that I was managing another full-time project. . Support . The organizers were supportive. Plus we had access to AWS Experts. So we could ask them questions on specific issues we were facing with AWS. . Experimentation . Many teams played it safe. They stuck to what they already knew. . We experimented. We tried things we did not know before. Though we did not win the challenge, this experimentation increased our learning and the likeliness that we’ll be better prepared for the next one. .",
            "url": "www.ankushchoubey.com/first_hackathon/",
            "relUrl": "/first_hackathon/",
            "date": " • Oct 30, 2020"
        }
        
    
  
    
        ,"post23": {
            "title": "Software project never ends",
            "content": "Building software is having no fixed deadline. Below are some reasons why. . Software vs Physical Products . Software products are hard to wrap the head around when compared to physical products. . A physical product occupies physical space which of course software does not. . Once a physical product is made, unless it is designed for modification, it cannot be modified. . The software can be modified and improved at any time. . There is always something to do . When you look for problems to solve, you’re sure to find something. . Optimize code. | Clean code up and make ready for the future. | Fix bugs. | . And it can be hard at times to stop. . Over Engineering . Something can be built easily but we spend a lot of time deciding what the future thing might be and then we over-engineer. . I have been guilty too. . The reason to stop. . It is said that in any software product around 70% of features are not used. . Many software themselves are not used. . Time spent fixing this trivial non-existent problem can be spent fixing some other big problems. . Human Intuitions and Definition of Done . Humans can find ways to improve everything. Our judgment is not objective. We need something objective. . Having a strong definition of done can help be objective. .",
            "url": "www.ankushchoubey.com/software_end/",
            "relUrl": "/software_end/",
            "date": " • Oct 23, 2020"
        }
        
    
  
    
        ,"post24": {
            "title": "Office is just school for adults",
            "content": "For many, working 9-5 often is considered non-ideal. Instead, wishing to work for themselves or not to work at all. . Some benefits of working at an office that are hard to replicate otherwise are: . Social Circle . We tend to keep office friendships shallow. . But in a lifetime, we make more friends at the office than from school and college combined. . These include people from many different backgrounds and age groups. . Learning opportunities . Higher-ups in the office want people to take up more responsibility. . A win-win is when there is something you want to do or learn that can help solve a business problem. . All you have to do is ask! . Unlike school, you can pick and choose a lot of things. . Experimentation . Office also provides opportunities to experiment. Try new things out. . Of course, these things are planned within a team and for the benefit of all. . Example: Proposing a new product idea. . Hierarchy . Schools have a hierarchy of authority organized by age: Teachers over the students. . Most offices resist age-wise authority. They tend to favor ideas and a person’s past deliveries. . Time . Unstructured time is hard to manage. . The office provides a well-balanced structure for most. . Meaning . Work provides meaning. . There is nothing that gives more satisfaction than knowing that customers like your product. .",
            "url": "www.ankushchoubey.com/the_office/",
            "relUrl": "/the_office/",
            "date": " • Oct 21, 2020"
        }
        
    
  
    
        ,"post25": {
            "title": "Empowerment/Enabling",
            "content": "The answers by themselves are not that important. . The process for finding the answer is more important so that they can replicate the process later. . Over-dependence is a bottleneck. Always providing ready-made solutions seems to turn people weak and dependent. . And it is your responsibility 1 to make them capable of themselves finding the answers and making informed decisions. . So, everyone is free to work on problems that truly matter to them. The once that only they can solve. Allowing people to work in parallel. . Great companies are structured such that the star entrepreneur/performer can leave the company at any moment. The company will still run just fine. . Extreme Ownership by Jocko Willink &#8617; . |",
            "url": "www.ankushchoubey.com/giving_help/",
            "relUrl": "/giving_help/",
            "date": " • Oct 20, 2020"
        }
        
    
  
    
        ,"post26": {
            "title": "Definitions",
            "content": "There are many terms that are not hardcore logic. . These terms get biased by people’s past and their current thought processes. . You can think of these as levels but it’s always hierarchical. . For instance . Rich for someone is being able to afford a house. | Rich for someone else is being a billionaire. | . The questions like “How to be rich?” are very different for both of those paths. . Likewise, Happiness can mean just having basic needs fulfilled or can mean pure excitement. . Some other things than getting defined vaguely are . Success | Love | Modernity | Secularism | Suffering | Good/Bad | . Good Communicators . I have noticed a quality of good communicators when they explain a term . They listen. | Then try to understand exactly what the person is trying to say. They’ll ask questions if they have not understood properly. | If they have to convey, they convey the exact information at the level that the person can understand. | . One of the ways they do it is by using the right vocabulary words while keeping things understandable. .",
            "url": "www.ankushchoubey.com/definition/",
            "relUrl": "/definition/",
            "date": " • Oct 18, 2020"
        }
        
    
  
    
        ,"post27": {
            "title": "Who is your audience?",
            "content": "Photo by Wan San Yip on Unsplash . I once was a participant in the Dance group at my school. . We were performing on Children’s Day. . We started our performance with LMFAO Party Rock Anthem (English). It was a tough dance which we had practised many times. We had also casually added Chamak Chalo (Hindi) to increase our performance length. . When LMFAO ended, we were all tired but there was no applause or appreciation from the audience. . Then a tune rang and everyone started cheering. Chamak Chalo was starting and the audience went bonkers. . The students at the school listened to Hindi songs. We were forcing English songs on a different demographic. . Now when “performing”, I try to keep this in mind. . I recently had an opportunity to play the Piano at an office event. I had decided to play classical as that would best show my skills. But my audience had probably never given much thought to Vivaldi or Beethoven. So I picked Perfect by Ed Sheeran. It was an easy song. But the audience loved more than I had expected. .",
            "url": "www.ankushchoubey.com/audience/",
            "relUrl": "/audience/",
            "date": " • Oct 16, 2020"
        }
        
    
  
    
        ,"post28": {
            "title": "Correlation between Deep Learning Concepts and Philosophy",
            "content": "DL = Deep Learning . NN = Neural Network . P = Phisolophy . Gradient descent . DL: Optimization algorithm used for training NN. . P: You can reach the place you want one step, in the right direction, at a time. . Keep weights small . DL: Helps NN learn new data faster . P: Keep your identity small so that you can adjust easily. . Local and Global Minima . DL: Local Minima means your NN has learned something but it is not optimal. We always aim for Global Minima. . P: Your views and opinions are not perfect. They are probably just your perspective. . Randomize Weights . DL: Helps you explore the landscape and avoids getting stuck in local minima. . P: Put yourself in random situations to learn from it. . Exponentially Weighted Average . DL: A type of average where more weightage is given to past numbers than latest number. . P: Do you change your path completely if one outcome goes wrong? What about the last n outcomes that were right. . Metrics . DL: Used to check how well a NN has trained. Further training will be adjusted accordingly. . P: Use metrics to see what’s working and not working. Adjust plans accordingly. . Test Data and Testing . DL: Tests NN on unseen data. . P: Test assumption/beliefs to see if they are true or not . Overfitting . DL: NN memorized only certain things completely and cannot variations of unseen things. . P: What you don’t yet know is more important that what you already know. .",
            "url": "www.ankushchoubey.com/dl_lessons/",
            "relUrl": "/dl_lessons/",
            "date": " • Oct 14, 2020"
        }
        
    
  
    
        ,"post29": {
            "title": "Cloud is Worth the Hype",
            "content": ". Photo by Taylor Vick on Unsplash . Cloud has recently excited me more than anything else in the world. Consider this a fanboy rant. . Earlier, I was avoiding the cloud because it seemed very hard. But like every computer science buzzword, it is much much easier than expected. . Recently I started learning AWS. These are a few things that have changed my mind. . Cost: Pay only for what you use . Cloud is anyway cheaper than building and maintaining your server. . The cost can be optimized further by setting up things properly. . Cost is impacted by decisions such as: . Pay per minute | Different cost for different configuration | Pay per GB of data stored | . And cloud vendors themselves provide options and encourage customers to optimize their usage to reduce cost. . Rapid Availability . Resources are available to you the instant you want them and in the location, you want them at. . If I were to start a Deep Learning project, on my local machine, it would take a full workday to just set things upright. Plus, you’ll have to deal with upgrades and maintenance yourself. . The same thing I wanted to do on AWS, it took just 3 minutes. . Special Hardware . In fields like Machine Learning, you need high computation and specialized hardware. . A cloud provider can provide it instantly. . Similarly, Quantum Programming is a new field for programmers that were not available to most developers. But cloud providers are providing infrastructure for this new field. . Choice: “We’ll provide infrastructure. Your code!” . Traditionally, if you buy hardware and it is not used, you cannot do much other than selling the hardware to reclaim the cost. . Cloud solves this problem by allowing users to change their underlying infrastructure at any moment. . Maintainance: “We’ll provide support. You code!” . Small things like replication of the servers and databases, scaling, sharding, maintaining security, etc are automatically taken care of with a few clicks. . Cloud vendors provide a good set of defaults and out of the box solutions to these common problems. . Abstraction: Easier than Traditional Setup . Cloud vendors make it easier to use the cloud. Things are abstracted and one can choose to learn until what is required. . Most normal developers would not have to deal with specifics of the infrastructure. . Special APIs: Code less . Almost all cloud providers provide special APIs for things like text recognition, image recognition, and even blockchains. . One need not be an expert to use these out of the box solutions. . Conclusion: Cloud is a Win-Win . Cloud provides a lot of consumer surplus. . Cloud is such that the price of owning and maintaining for the individual user than if they would have built a server themselves. . While for the cloud provider, it is also cheap because they provide it at scale. . Not to mentions, they are easier to use and provide the flexibility of choice. .",
            "url": "www.ankushchoubey.com/cloud/",
            "relUrl": "/cloud/",
            "date": " • Oct 13, 2020"
        }
        
    
  
    
        ,"post30": {
            "title": "Communication Bottleneck in large organizations",
            "content": ". Productivity increase with regards to extra hires . A smaller company sees an immediate boost in productivity just by the addition of a few extra employees. . As demand increases, the company keeps hiring and increasing its employees. . But after a certain point, the increase is the number of employees does not increase as much as it used to. . Overhead of having many employees . As the number of employees increases, the communication overhead increases. . It becomes harder to align these increased employees to company policies. . As a result, a separate department/role is to develop whose job is to check if employees following guidelines. (More Hiring) . Having a Communication Policy . The amount of message hops it takes to replay information is very high, especially from lower-level employees to a top-level executive. . The time spent in relaying communication is the time that can be spent working on the product. . This is why having a good communication policy is essential. . Communication Policy . The focus should be on reducing as many human middlemen as possible. . To reduce the number of people involved in accessing information . These help employees find the information themselves first. . Proper Documentation | Recorded Lectures | . A simple FAQ/Wiki page is a good starting point. . Focused meeting . Meetings are usually justified regardless of whether the meeting is focused or whether people involved in the meeting are related to it. . Somethings that always make meetings more productive: . Having an Agenda | Timeboxing | Having a limited number of people | . Contacting Policy . Most people don’t need information fast. Rather most expect clarity in 2 things: . Who to contact for what sort of information. | By when are they expected to get a response. | . Faster lanes for getting feedbacks and suggestions . In larger companies, it becomes difficult to find problems on an individual employee level. An employee may have a really good suggestion/idea. This type of feedbacks should reach the right people as quickly as possible. . Having open to all suggestions/feedbacks forms is a kind of faster late to make this possible. .",
            "url": "www.ankushchoubey.com/communication_bottleneck/",
            "relUrl": "/communication_bottleneck/",
            "date": " • Oct 10, 2020"
        }
        
    
  
    
        ,"post31": {
            "title": "Give credit where credit is due",
            "content": ". Praised should be distributed well. . There are many types of employees. . Some are bad at work they do. Just bad. | Some who are bad at work they do. But listen to feedback and try to improve themselves. | Some who have been working hard behind the scenes but aren’t popular. | . Usually, behind every popular team, there are faces in that team who aren’t as popular. . Sometimes they choose not to be popular. Or sometimes in cases their work is ignored. They might have been the hardest worker of all but usually due to some or the other human bias people ignore to praise them. . With some employees it is fine. While for others, they start to see opportunities and growth missing. . They become resentful. . Which is not a good thing. No one resentful in a team wants to work towards the same goal. . Flattery . Maybe the education insitutes I had been during younger days were like this. Imagine the topper of your class. He she get’s extra praise and attention from the teacher. His problems are being solved. . Sometimes they even get praise for things they do not do. They get unfair advantage for things they don’t deserve. . While those working hard in the background may not get any attention. They don’t get praises plus they don’t get any special care. They turn resentful. . Some people recieve flattery for their work. Their contribution might be little or none. They haven’t even worked hard and they even know it. But when they recieve such flattery, there are a few ways they’ll take it. .",
            "url": "www.ankushchoubey.com/recognition/",
            "relUrl": "/recognition/",
            "date": " • Oct 8, 2020"
        }
        
    
  
    
        ,"post32": {
            "title": "Reading Books",
            "content": "Photo by Road Trip with Raj on Unsplash . Reading is the nourishment that lets you do think in interesting ways. 1 . In some sense, you are downloading dense information into your brain fast. . And it is fun! More fun than many TV shows after a certain point. . Books are of higher quality because they go through a lot of “processes”. Other mediums do not. Draft-&gt;Editors-&gt;Reviews-&gt;Publisher. . Habit . Keeping distractions away while reading helps. . To start, read anything. Even a page better than no page. . Reading slowly is okay. You may finish the book in 3 months. Not a big deal. . Medium . Reading on a phone 2 is great if you can manage keeping distraction beyond. . Reading physical books is ideal. 3 . You can listen to an audiobook as a last resort but it likely won’t be fulfilling and you won’t remember details. 1 . New words . If you don’t know a word in the book, learn it right there and there. If you don’t you are just approximating what the author says. . If you are going to read a series of 📚 then learn each new word. The same word will be used later. . Selecting books to read . Reading from different categories is an easy way to broaden your perspective. . Always be reading at least 2 books, fiction, and non-fiction. . Non-fiction: Make your more informed and put things into action. | Fiction: Makes you less boring and counteracts the overthinking created by non-fiction. | . Don’t buy non-fiction books that have just been released. Let the reviews come in. . If the right book is selected, it is worth paying the price. . Reading foundational books like History of something or mathematics rather than diving into the latest trends allows you to broaden your understanding and remember faster 31. . Speed Reading . Reading speed increases naturally as you get into a habit of reading regularly. . Your reading speed is higher when you read a topic you are familiar with. It is slower when you read something new. . Therefore if you are speed reading, it is probably not worth reading that book. 1 . There is nothing wrong with reading slow. Big abstract concepts require time 3. . Reasoning . Don’t agree with everything you read. Authors are humans too. 4 . Put yourself in the shoes of the author and try to reason through his conclusions. . You want to internalize the author’s thinking so that you can see the problem from his point of view. 1 . Reading books which provide a counter-argument to your thought or to a book you have read is also interesting. . If you don’t understand a certain section or a concept, google/youtube it and clear it. . Memorize . Book notes make it easy to non-only reason but to memorize the gist of the book. . Don’t copy-paste. Write in your own words. It should be your thoughts. | . The narrative makes it easy to remember. Some non-fiction book have narrative too. . You can choose to read fiction instead of non-fiction for the same topic. . Naval &#8617; &#8617;2 &#8617;3 &#8617;4 &#8617;5 . | Elon Musk on The Importance of Reading Books &#8617; . | How Bill Gates reads books &#8617; &#8617;2 &#8617;3 . | James Clear &#8617; . |",
            "url": "www.ankushchoubey.com/read/",
            "relUrl": "/read/",
            "date": " • Sep 26, 2020"
        }
        
    
  
    
        ,"post33": {
            "title": "Who is a leader?",
            "content": ". Photo by Morgan McKnight on Unsplash . Lately, I’ve been watching Simon Sinek and Jocko Willink videos. . Leadership can be thought of in multiple ways. . Not a leader . Uninspired. | Not focused on work. | Focused only on the paycheck. | . Forced to be leader aka The Manager . He/She is a “leader” because of their position in an organization . Their role has nothing to do with their skills, rather they have “years of experience” so it is weird for others to keep them at the bottom position. . Pain to ideas/people around them and always wants things to be their way because “I said so” + Micromanagement . Chooses to be a leader . A person who chooses to be a leader regardless of their position in the organization. . He/She . sees a problem and proposes a solution | takes on responsibilities | delivers on them | disagrees with a process/method/idea when it is needed but provides proper reasoning and is ready to discuss over it if needed | debates and let’s the best idea win | . If someone is stuck, he/she helps them and doesn’t just leave them i.e he/she is a good team member. . Treats everyone the same regardless of their title. . . It is fun to see people’s behavior around you and think about what type of leader they are. .",
            "url": "www.ankushchoubey.com/leader/",
            "relUrl": "/leader/",
            "date": " • Sep 26, 2020"
        }
        
    
  
    
        ,"post34": {
            "title": "Just ask for it",
            "content": ". As I get older I realize one thing that most things you want you can just ask for it. . Do you want an opportunity? . Ask the person in charge. . Do you want to get a refund or have a customer complain? . Say it. Don’t hide. . Want a bit of specific advice from someone celebrity figure you admire? . Text/Tweet at them (Keep it short at quick) . Everyone is there to help. . But no will know when to help if you don’t say that you need it. . Companies want to keep their customers happy. Similarly, even people want other people to grow and help them. . This also allows them to ask you for help when they need it. 1 . Photo by Edwin Andrade on Unsplash . Jordan Peterson &#8617; . |",
            "url": "www.ankushchoubey.com/ask/",
            "relUrl": "/ask/",
            "date": " • Sep 12, 2020"
        }
        
    
  
    
        ,"post35": {
            "title": "The lifetime of 'Content' is getting smaller",
            "content": ". A few years ago there was a lot of rage for getting onto social media. . The argument was that once you upload something, your content stays on the internet forever. Therefore earning you money/opportunities forever. . A few years ago you could easily see people Monopolize a category just within a few months of uploading. . A few changes happened between 2013 to 2020 (now) that seem to have effected this notion. . Competition and Similar Content . The amount of people uploading and watching “content” has exploded. . If a few years ago the same content would have less competition. But now not just the content has to compete with other similar content but also over factors like freshness. . Reducing attention span . Personalized Recommendation Engines . Bigger companies saw value in the shift in attention towards online sources and exploding data. . Since the amount of data has increased, the recommendation algorithms designed to keep people engage and make advertisers happy are getting more and choosy. . Personalized Search Engines . A few years go personalize results only appeared for feeds, now appear in normal search results too. This means that everyone who searches for something gets different results. . But this also means that you are more likely to target your specific demographic as the algorithm thinks it is the right fit. . These all lead to change in SEO strategy . The basic search engine optimization (SEO) methods like keyword optimization and backlinking no longer work as well as effectively as they used to. These methods were more or less automatic and easy for people to make their websites reach people easily. . The newer methods which work along with are basic SEO strategies are more analog. A person has to decide how to come up with these: . Site-specific strategies like Thumbnail and Timestamp on Youtube, | Creating a ‘brand’ account and promoting | Engaging and trying to retain users with witty and regular posts/stories | . Conclusion . The newer methods of engagement are more work than what they were a few years ago. . At the same time, the result of these efforts is more shorten as the same strategy is applied by every other content generator. . The role of automation in content marketing is getting smaller while that of strategy is getting larger. . Photo by Stephen Phillips - Hostreviews.co.uk on Unsplash .",
            "url": "www.ankushchoubey.com/content/",
            "relUrl": "/content/",
            "date": " • Sep 10, 2020"
        }
        
    
  
    
        ,"post36": {
            "title": "Tips for coding on a slow computer",
            "content": ". I usually code on slow computers. These things help me keep sane. . Disable animation and keep open apps to a minimum . Use as much terminal/cmd as possible. . git | npm start | . No GUI software can beat the terminal’s speed. . . Tip: To speed things up create .sh/.bat files so that you can run repeated commands with a click of a button If your backend is pretty stable, run the packaged file. . In my case when I am focused on angular development only, I run the .war file in a separate terminal. . Run apps separately . Instead of using the terminal from VS Code, use a separate application. . If one application crashes at least the other one is loaded. . Optimize your IDEs . You can easily find ways to speed up your IDE. Just google it. . In my case, I have made changes to settings.ini files for STS (A Java IDE). . Photo by Zane Lee on Unsplash .",
            "url": "www.ankushchoubey.com/slow_computer/",
            "relUrl": "/slow_computer/",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post37": {
            "title": "Opinions/Events are not black and white.",
            "content": ". Lack of information . Sometimes the decision is just a lack of information at the time. . Most of us would want to make optimal decisions all the time. . But as humans, we have our shortcomings and everyone is trying to do their best with the information they have. . There is always a trade-off. . In every decision you make, there may be points in which you think the decision is right. And there are points where the same decisions are bad. . If you ask people for their opinion over something, each one of them will say a slightly different thing. . Reasoning . The opinion isn’t enough, you got to dig for reasoning. . Reasoning over opinions for many is not developed. . Some choose an opinion because it is popular or because their friends and family have a similar opinion. . Those that have unique reasoning are interesting people. . Knowing their reasoning helps you think from their point of view easier. . Your opinion is probably right but it may be wrong. . Any opinion you have or someone else has is probably right. . There are 6 billion people alive right now. . If you someday create a random belief, you could estimate that at least someone would have the same belief as you. . Therefore, you’re likely never completely wrong. (unless it is an opinion about logic 🙃) . Sharing . You cannot convince everyone. Everyone has a different point of view. But you can try to explain yours. . This is why we have debates and democracy. Systems where people share their opinion as try to come to a consensus. . Respecting other people’s opinions . You may be right. Maybe absolutely right. . But still you are not them. In exactly their life circumstances. . We are impacted a lot my people around us. . Free speech . Trying not to offend over important topics is not useful . If you are talking about something important, then you’ll likely offend someone. . If you are sharing with 10 people, it is easy to not offend someone. But when you are sharing with a 100 or a thousand of 10000, then just by pure randomness you may offend someone. 1 . A good founder listens to everyone then does what he wants to do. 2 . Photo by Clem Onojeghuo on Unsplash . Jordan B Peterson &#8617; . | Naval Ravikant &#8617; . |",
            "url": "www.ankushchoubey.com/black_white/",
            "relUrl": "/black_white/",
            "date": " • Sep 8, 2020"
        }
        
    
  
    
        ,"post38": {
            "title": "Probabilities",
            "content": "This article is written at age 23. My views will be more informed in the future. . . . Success can be defined in many ways. This article talks about achievement. . Randomness and Survivorship bias . We often hear people tell stories about why they are “successful” was because they worked hard, something they controlled themselves and ignore the possibility that they were lucky. . Lucky seems bad for many people. But I would argue that the world has always been unfair and some things just happen randomly. . Example: Maybe they were just born in a fortunate time when social media was not made and without much technological innovation someone could build a fortune of a company. Time of birth is a random thing that we don’t have control over. . You’ll always find someone who has it easy . Let’s say you’re trying to lose weight and you don’t know where to start. So you decided to starve is a good path to follow and soon realize that it is not. . Then you spend 4 years trying to follow the path of starvation and lose about 5-7 Kg. And you’re happy about it. . Now someday you hear someone close to you or a friend of friend lose 9 Kg in a month. And he did not take medications or had surgery but a good diet plan which was expertly supervised. . You might have “struggled more” but someone was “lucky” enough to have resources (doctors) that lead to better results in less time. . Probabilities . Luck/Randomness will always be there. . There will always be things outside of one’s control and we cannot do anything about it. . But there are some ways that we can increase the “probability” of luck being on our side. . Work . We may already be “lucky” but not prepared. . Overcoming Obstacle . The obstacle is the way. 1 . Facing an obstacle means you are on the path and the only way forward is to overcome it. . We can overcome obstacles faster by being flexible. Trying new things out. . If a process/method you are following does not work, it will likely not work in the future too. Be flexible and open. 2 3 . Increasing Leverage . These are things you can control and develop . The Not So Unfair Luck 4 . Mindset Being calm and disciplined | . | Education | Network Help people | . | . Multiplying Skills 5 6 . These are skills that apply to multiple areas and are deeply impactful. . Maths | Learning Faster | Communication Writing | Speaking | . | Focus | Programming | . Obstacle is the Way by Ryan Holiday &#8617; . | Samurai to Modern Army in 10 years &#8617; . | If it’s not a hit, switch by Derek Siver &#8617; . | The Unfair Advantage: How You Already Have What It Takes to Succeed by Ash Ali and Hasan Kubba &#8617; . | Naval &#8617; . | Derek Sivers &#8617; . |",
            "url": "www.ankushchoubey.com/probabilities/",
            "relUrl": "/probabilities/",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post39": {
            "title": "If it's official, communicate via email",
            "content": ". If you are having a deal or an agreement or a negotiation of some kind. Do it via email. . If you had communication offline or via another medium that is not documented, send a mail stating the minutes of the meeting and agreement. . If necessary ask for a confirmation reply. . Why? . I used to think this is disrespectful as I most of the time I had communication with the person offline but as humans, we all of us forget. . The email is for your future and the receiver’s future self. . In case, if a person or company or even you yourself deny the deal, you have a written “official” mail which cannot be repudiated. . Most people and companies are normal but some are malevolent. You’ll thank your past self for the email. . If you had offline interation . To not look robotic, mention to the person that you’ll be dropping a mail mentioning discussed points and would require confirmation. . I learned this from my managers and my father. . Photo by Onlineprinters on Unsplash .",
            "url": "www.ankushchoubey.com/official_email/",
            "relUrl": "/official_email/",
            "date": " • Aug 22, 2020"
        }
        
    
  
    
        ,"post40": {
            "title": "Businesses are for making money",
            "content": ". I often argue on the point of companies should providing value. . But on one level, maybe one of the most important thing is all companies are there to make money. . Providing “Value”: Employee POV . Providing value is often never well defined and there can be many ways to look at it. . Even employees working in a company getting a steady paycheck, raising a family, having health insurance for themselves and their family is a valuable thing. . Not every company is in an industry, geographic location or stage of growth where they can be good at everything. . Painful part . The most painful part is when the company drops its employees. It usually does not happen because the company is evil. But because dropping employees is the lesser evil. . Either you drop employees (and resources) or let the whole boat sink (with everyone in it). . Big world events like Pandemic or recession always remind us how important and valuable money is for companies and individuals. . Counter Argument: Facade Companies . Photo by Morning Brew on Unsplash .",
            "url": "www.ankushchoubey.com/for_profit/",
            "relUrl": "/for_profit/",
            "date": " • Aug 20, 2020"
        }
        
    
  
    
        ,"post41": {
            "title": "Opportunity Cost",
            "content": "If I am a lion 🦁 should I be chasing mice 🐁 or should I be chasing a deer 🦌? 1 . Focus — saying no to a dozen good ideas so that you can put your resources on things that matter. 2 . Tim Ferriss &#8617; . | Steve Jobs &#8617; . |",
            "url": "www.ankushchoubey.com/opportunity/",
            "relUrl": "/opportunity/",
            "date": " • Aug 19, 2020"
        }
        
    
  
    
        ,"post42": {
            "title": "Don’t try to force a sale on people who are not your user base",
            "content": ". These apply to companies which sell “premium”/high cost products. . Many companies try putting limited time offers making people decide to put money down. . I have fallen victim myself. Multiple times. Especially with gyms and education sites. . I realize they have limited time offers every other day. 😑 I could have waited before jumping to their sales presentation. . Many startup which are in hyper-growth stage do this. . Okay for middlemen . For middlemen companies such as shops and e-commerce sites. It matters less. . They are middlemen, they don’t care about the customers. They care about sales and money 💰. . Not okay when you are selling yourself . But for companies which sell products themselves, they risk one every important factor. . What happens when user does not like your product? . He was half sure about buying your product. | Now he will tell everyone in his connection to not purchase your product. | Plus he’ll also mention to them not to fall for your “sales presentation”. | . I have done so myself multiple times. . Word of Mouth sale is quite underrated. . Photo by Markus Spiske on Unsplash .",
            "url": "www.ankushchoubey.com/forced_sale/",
            "relUrl": "/forced_sale/",
            "date": " • Aug 19, 2020"
        }
        
    
  
    
        ,"post43": {
            "title": "Facade companies",
            "content": "Companies that don’t actually care about solving a problem. . They are here only for money, increasing valuation, getting more investors, getting sales by tactics such as selling themselves (coupons), brand, and social media posts. . Then when everything is all set, the founders will exit without hesitation. Not because the problem has been solved but because they didn’t care about solving the problem at all. It was just a facade. . Counter Argument: Businesses are for making money .",
            "url": "www.ankushchoubey.com/facade/",
            "relUrl": "/facade/",
            "date": " • Aug 19, 2020"
        }
        
    
  
    
        ,"post44": {
            "title": "Time tracking over programmers is counter-productive",
            "content": ". “Programming” . The job of a programmer is to think and then implement a solution. . It is better to not write for an hour when you don’t have your thoughts organized in your mind than to write for hours and then spend all week trying to fix and fiddle with it. . The process . When starting initially students are thought to write down the algorithm, make flowcharts, etc. and it is understandable that as you get more experience programming you may want to skip that. . Especially if the problem is something you have already worked on. . But don’t implement something without giving it thought. Take time to get your thoughts organized. You are not sitting in an exam. . Why time-tracking is counter-productive? . The reason I say time-tracking is counter-productive is: . Somedays you realize you have written a bunch of code and it works but works like crap but you cannot do better. | Then the next day you come back to it… it’s still ugly. | Some days later you realize that the work you have been doing for the past several days is already done in an Open Source Module. | And you discard whatever you had coded up to that point and start from scratch again. | . Conclusion . Programming requires a lot of “research” and thinking. Things that can be done (can be done better) away from a screen. . Photo by Veri Ivanova on Unsplash .",
            "url": "www.ankushchoubey.com/time_tracking/",
            "relUrl": "/time_tracking/",
            "date": " • Aug 18, 2020"
        }
        
    
  
    
        ,"post45": {
            "title": "Make your code configurable.",
            "content": "In one of the posts, I wrote previously I explain how programming has become configuration. . Once you have made your software that might be part of it that might need change. Most changes are simple such as: . Increasing the font | Changing colors | Somethings that work should work on specific environments or domains | Features such as storage location | . Rather than hard coding everything, make these things configurable. . Something that can be changed with just a click of a button or by changing properties or via Database. . Small things such as these should not take any time. . Also, if there is something that some thing which requires user preference, then give them the option to choose it themselves by making the configuration available to them via UI. . Similar: Programming is now Configuring .",
            "url": "www.ankushchoubey.com/code_configurable/",
            "relUrl": "/code_configurable/",
            "date": " • Aug 17, 2020"
        }
        
    
  
    
        ,"post46": {
            "title": "When you are just starting out, don’t try to imitate the expert.",
            "content": "Imitate after you have a firm base to understand what and why they are doing something. . Experts have a hard time explaining things they have internalized. . Trying to copy them at-least initially will likely lower your confidence and make you wanna skip and go home and sleep. . People on YouTube have a “perfect execution” and they usually don’t show how much work goes behind it. A way to look behind their work is to look at them performing Live or streaming Live. . For programmers, it can be helpful to look at GitHub commits too. . Similar but with a twist: Observe other people in action .",
            "url": "www.ankushchoubey.com/imitating_experts/",
            "relUrl": "/imitating_experts/",
            "date": " • Aug 17, 2020"
        }
        
    
  
    
        ,"post47": {
            "title": "Middleman",
            "content": "Middlemen companies provide services from one company to either another company or to consumers. . Examples . Stripe | Car Dealers | Mobile Wallets | Food Delivery Services | Ride-Sharing Apps | Most online e-commerce website | . The Business . The reason middlemen can operate is that the source company is too complex for most normal people or companies to understand. . So they make it convenient for people. . Risk . But this also is risky if the source company can easily provide the facility themself. Then there is no need for a middleman. . Like when Tesla decided to not sell their cars through a dealership. . Middleman companies in a way act as an affiliate. . The source company deals with creating the product. | The middlemen deal with selling the product. | .",
            "url": "www.ankushchoubey.com/middlemen/",
            "relUrl": "/middlemen/",
            "date": " • Aug 16, 2020"
        }
        
    
  
    
        ,"post48": {
            "title": "Support shows how much the company really care",
            "content": ". Overlooked but important . It is a part of a company which is I feel is often overlooked. . The customers who come to support actually use your product and they care enough that they are not jumping switch to another app. Instead they are here to get their problem solved. . It’s not just about pushing a product out, getting money, and then doing nothing. Care for your customers. Not just because they are paid for you and that they will likely continue to use your product … but because it a human thing to do. . Make it easy . Make it easy for them to contact you as easily and as fast as possible. . They may want their problem solved quickly: call link | Maybe they don’t like talking: put chat link or support email up. | Respond at least within 24 hours | . On the producers’ side, it also helps to have support costs low by providing FAQs, help guides, and improvements to the product. . Good and Bad Customer Service . Apple &amp; Tesla do wonderful customer service. Even Samsung when they recalled all their exploding Note 10s. . I find banks and telecom companies are bad at customer service. Heck, they even charge fees without much explanation. The reason customers remain is that jumping to another customer is a longer process. They’ll probably jump when an easy transparent option is available (I’ll jump too). . Some companies which I had interaction with and have excellent customer support service: . Apple | Cure.Fit | Waking Up App | Day One App - These guys never disappoint | PepperFry | Urban Ladder | Swiggy | . Most above ideas are probably a result of me watching YC Startup School. . Photo by Berkeley Communications on Unsplash .",
            "url": "www.ankushchoubey.com/support/",
            "relUrl": "/support/",
            "date": " • Aug 15, 2020"
        }
        
    
  
    
        ,"post49": {
            "title": "Samurai to Modern Army in 10 years",
            "content": "… if we dig deep in our history and our doctrine, and remember that we are not descended from fearful men … 1 . . . Japan 🇯🇵 was closed to the world for most of history. . They had a history of Samurai and the real encounter they had with outsiders was during Mongol invasion. Whom they had defeated. . They always were and thought of themself as militarily strong. . Forced to upgrade . But in the modern age, they suddenly realized that they were on side of the prey, not predators. . They feared becoming colonized by westerners. . The possibility was very real and they realized they needed to upgrade and upgrade fast. . The Upgrade . In the 10 years that followed, they sent their scholars to all around the world and gathered information about everything good they could find about the world. . Things like education, military, etc, and then added their own Japanese twist to it. . It took Europe around 100 years to upgrade, going through multiple revolutions during the period. . For Japan, there were many missteps along the way but in 10 years, they went from a culture of the swordsman to a modern one and were never colonized. . There are a few lessons that can be taken from this over-simplistic snippet. These can be applied to business and life in general. . Always upgrade ourself to deal with current and future problems | Be flexible enough | Learn by observing others | Drop your ego. Move on with times. | . History cannot be put in such simple terms. . There were a lot of missteps with their way and the way the world was in general. I recommend listening to Hardcore History: Super Nova in the East . Hardcore History is a long podcast. I think the below clip captures the essence of this post. (Go fullscreen!) . This post and its content were inspired by: . One Piece: Wano Arc | Ghosts of Tsushima 2 | Hardcore History: Super Nova in the East (cannot recommend this enough) | . Edward R. Murrow &#8617; . | Cover photo: Ghost of Tsushima: PS4 &#8617; . |",
            "url": "www.ankushchoubey.com/samurai/",
            "relUrl": "/samurai/",
            "date": " • Aug 11, 2020"
        }
        
    
  
    
        ,"post50": {
            "title": "There is never enough automation",
            "content": "I see this all the time. . Automating this is enough. . How much automation they are gonna do? . Are they gonna take our jobs? . My view on the topic is automation is never enough. There are still things that can be done to improve. . Jobs will be replaced. Best new technologies remove need and trouble to do things manually. Our jobs as programmers too will someday be replaced by something easy. It is not of question of if. It is a question of when. . A civilization expands by doing things without thinking about them. 1 . Though automation is not enough one could argue on the effectiveness of deciding what to automate. As with anything, a thing that should be eliminated, should not be automated. . I find the below chart to be a useful reminder 2 . . Those who think humans will always be superior to AI as we can “think creatively”, I think underestimate Deep Learning. . The technology had not have matured yet and there is a possibility that a point where we are not the decision-maker. . I side with Mr. Musk on Neuralink: If you can’t fight them. Join them. . “Civilization advances by extending the number of important operations which we can perform without thinking of them.” ~ Alfred North Whitehead. Read from the book Deep Work by Cal Newport &#8617; . | xkcd comics: Is It Worth the Time? &#8617; . |",
            "url": "www.ankushchoubey.com/automate/",
            "relUrl": "/automate/",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post51": {
            "title": "Copying features and products",
            "content": "While building a product there is a shortcut which many companies take which is they copy features from others. . It helps companies to . Avoid market research They already know who to sell too. | . | Avoid R&amp;D of product They already know the mistakes to avoid. | . | . 1 or more of these conditions make this possible . The original product is from another geographic location | The original product another market. Eg: They serve only premium customers | . | The copying company is so big that they don’t care about copying. Money is all that matters. | They have legal teams ready if something goes wrong. | . | The copying company is so small that the large company would not waste resources dealing with it. | . Copying sometimes is okay . I don’t think it is as bad to copy once or twice. Sometimes customers demand a product to be a certain way. The company has to put down its ego and listen to its customer. . But I do hate companies that survive only on copying features and do not ever innovate or put their thoughts into the product. . Innovative companies set trends. If you are always copying them, you don’t have an advantage. They do. . Customers start to see the company as a clone of the original. . Observations . One’s who usually innovate and make others catch up . Apple | Tesla | Uber | Airbnb | Google | Snapchat | . One’s who catch up some times . Apple increasing the size of their phones. | . Copied because of geographic advantage . Ridesharing services after | . Copies everything . Facebook and its products | Reliance Jio | Xiaomi and other smartphone makers | .",
            "url": "www.ankushchoubey.com/copying_products/",
            "relUrl": "/copying_products/",
            "date": " • Aug 5, 2020"
        }
        
    
  
    
        ,"post52": {
            "title": "Good products are built by teams not individuals",
            "content": ". Though it is hard to form a good team, good things are almost always built by teams. . You cannot build it alone. . We have a fixed way of looking at the world. We see one problem from 1 point of view. 10 people can see 10 problems with a different point of view. . And we cannot expect to be right all the time. If we want smart people to be around us, we need to be run by ideas, not hierarchy. 1 And expect the best idea to win. . Plus, it is easier to get work done in cross-functional teams. . Something you may not like is liked by someone else. Your weakness can be covered up by someone’s strength. . I can code the big picture but I miss out on the details. Usually, another team member catches them and corrects them. | I was bad at explaining myself in meetings early in my career. A senior used to back me up. | Similarly, I cover up for specific tasks for other members. | . The advice I would give my past self when I joined work: . Resist the urge to be a solitary wise man. Be a good neighbor instead. 2 . I stumbled upon this thinking about a tweet proposing that every startup should have at least 1 female co-founder. . And thinking about the teams I work and have worked with. 🙂 . Photo by Marvin Meyer on Unsplash . Steve Jobs on Managing People &#8617; . | Ryan Holiday &#8617; . |",
            "url": "www.ankushchoubey.com/teams/",
            "relUrl": "/teams/",
            "date": " • Jul 29, 2020"
        }
        
    
  
    
        ,"post53": {
            "title": "Writing process (July 2020 Edition)",
            "content": "Keep going through normal days | Randomly stumble upon something via: Conversation | Book | YouTube | Podcast | Observation | | Keep thinking about it | Wake up at midnight still thinking about it mixed with the creativity of sleepiness &amp; dream. | Either: think about writing a blog, in which case the blog is never written. The idea is lost. | Go back to Step 1. | | just write something and publish. | . | The next day or a few days later, wake up and see an awfully written post. | Fear the reputation damage inflicted by 😑: Wrong grammar | Wrong words | Wrong sentences | Paragraphs not ordered properly | | Fix it. | A few days later, Do a Grammarly pass. | Add sections to make it easy to read and understand | Add references and inspirations. | | A few days later, If someone mentions a point that can be improved upon or is ambiguous, improve it. | Finding and eliminate cliches. | | Get fed up of seeing the same post with no other inspiration in mind. Think why do I even write this blog. | Delete the local setup of the blog and decide not to write anything for at least a month. | | Repeat |",
            "url": "www.ankushchoubey.com/writing_process_07_2020/",
            "relUrl": "/writing_process_07_2020/",
            "date": " • Jul 27, 2020"
        }
        
    
  
    
        ,"post54": {
            "title": "Observe other people in action",
            "content": "While doing it yourself is the first step. Observing people is second. . When learning to do anything try to find someone who has already been doing that thing you want to do and observe them in action. . I started learning deep learning and it was very intimidating at start but then I found a YouTube channel where she taught about deep learning and I got to see her developing deep learning projects. She did the same mistakes as me And spent most of the time googling stuff and fixing bugs. I learned more about how things happen in the actual job. I had been fantasizing before. . Similarly, I learn more about programming by watching other people program stop. And by reading other people’s code. . I learn more about how to create an attractive website by learning from smart passive income blog website Reviews which taught me how to set things up. . I learned more about management by watching my seniors and especially my client in a single meeting. . Always be in a position to look 👀 at how others do what you want to do. . It removed a lot of fear, myths, and makes you better by learning from other’s mistakes and methods. . Biographies are also a path. . Similar but with a twist: When you are just starting out, don’t try to imitate the expert. .",
            "url": "www.ankushchoubey.com/observe/",
            "relUrl": "/observe/",
            "date": " • Jul 25, 2020"
        }
        
    
  
    
        ,"post55": {
            "title": "If it is a core part of your business, don't outsource, build it yourself.",
            "content": "A lot of companies make the mistake of outsourcing what they are good at or what their core business is. . Some outsource everything . You will see a lot of carmakers just putting their brand over something. Like Suzuki which just puts in a logo on Maruti Ertica which is developed by Toyota. Some even put their brand on cosmetics which has nothing to do with cars. . Or what a lot of Indian smartphone makers did. Micromax and Lava which just bought products from Oppo and put their logo on it. . A few years pass and original manufactures became so good at developing and marketing that they started to sell themself and took over the market. . Some build almost everthing themself . There are companies like Tesla and SpaceX which build everything themself. . They realized that building themself was not just cheaper but they could iterate fast and build better because it was custom made for themself. . As a result, not only they built better products but they develop a lot of Intellectual Assets, IPs, and Patents that their competitors could not replicate. . Tesla builds it’s own software and CPUs for auto-pilot technology which rest are taking help from Google. . SpaceX designs and builds everything on its own. While Boeing buys existing products. . Apple outsources production but still designs everything by itself. While rest rely heavily on Google for phone software and Microsoft for PC software. . Some companies take control back. . Apple is taking back control of its microprocessors because it realized that it can ship better products if it designs the chips themself. . And it is not something that they just decided to do overnight. It must have been planned for years and developed for years. . And still, the rolling out is a 2-year transition giving everyone enough room to adapt. And from what current iPads perform it can be assumed that these new computers will perform better. . Ofcourse you should outsource if … . A large Hollywood studio need not worry about their backend software. It’s not their core business. Their business is making great movies. . A hospital need not build it’s own hospital management software. Either they just buy it or outsource it. . But as discussed above there may be advantages to building it themself 🙃. .",
            "url": "www.ankushchoubey.com/build_it_yourself/",
            "relUrl": "/build_it_yourself/",
            "date": " • Jul 24, 2020"
        }
        
    
  
    
        ,"post56": {
            "title": "Just buy it. Don’t build it yourself.",
            "content": "This is the anti-Derek Sivers approach. . If a product already exists, don’t build it yourself from scratch. . I got excited by Rasberry Pi and Arduino boards a couple of years ago. . I bought them all and built: . “Smart” switchboard which I can control from my phone. | A retro raspberry pi gaming setup with an old ps3 controller. | . Building them was a little bit of work. I had to watch a lot of videos and google a lot of things. . I connected Alexa so now I could control lights and fans with just my voice. . Sometimes the problem was just wired and I had the replace them. . It took a month for each but after building it I thought it was done. Complete finally. . Then a few weeks passed. Switch stopped working. The gaming console thing was decent but it stopped working too. . Both took a week each to fix. Finally, now it is complete. . A week later it broke again. Then again after a week. . This was especially inconvenient because my family was using the switch too. . Now raspberry is just lying in storage and one smart switch which family used was removed. . I still had the switch in my room. I just had to fix it. It’s been 2 years. 😂 It is still there. And now I don’t want to fix it. So I am going to finally remove it from my wall. . Why spent time building it yourself when you just purchase it. Especially hardware shit. . Don’t try to develop using plain javascript when Angular or React can do better. . Don’t try to build a gaming computer from scratch when you can just buy a console and be done with it. . Don’t try to “use Linux” where you’ll have to spend a lot of time setting everything perfectly. . Of course, some people do it. But I would argue to only do it if it is your full-time job. Or it is something you have to and want to learn. . Don’t waste your time on problems that have already been solved. .",
            "url": "www.ankushchoubey.com/just_buy/",
            "relUrl": "/just_buy/",
            "date": " • Jul 24, 2020"
        }
        
    
  
    
        ,"post57": {
            "title": "Environment Focused: For-Profit vs Non-Profits",
            "content": "Photo by Charlie Deets on Unsplash . Many environments non-profit do not achieve what they set out to do. . They have sub-par performance. | They don’t bring optimal solutions to the table. The solution they declare often involves compromise. | They are part of cancel culture. | They often require donations to survive and which makes them easy to be biassed towards a donor. | . On the other hand, for-profit environment companies survive and have better performance. . For-profit companies offer better and feasible solutions in addition to good jobs. . Some environment focused for-profit companies I really like are: . Tesla: Produces a lot of products related to energy technology. Popularly electric cars. | Impossible Burger: Making plant-based alternative to animal meat without compressing people’s taste and quality | Neuralink: Trying to make human smart so that if AI and human will be able to work together. | .",
            "url": "www.ankushchoubey.com/environment/",
            "relUrl": "/environment/",
            "date": " • Jul 18, 2020"
        }
        
    
  
    
        ,"post58": {
            "title": "Ideas",
            "content": ". These apply to side projects and hyper-growth startup Importance . Good ideas are common and meaningless. . Good execution is rare and therefore valuable. . Originality . No idea is truly original. Be flexible to adapt to new ones. 1 . Most ‘unique’ ideas fail. Successful once are spinoffs of already present ideas. 2 . Finding . In the case of hyper-growth startups, ideas are counter-intuitive. If it seems sensible it is likely a bad idea. 3 . Most hyper-grown startup ideas don’t look like startup ideas at all. 3 . Trying to find a hyper-growth startup idea is a bad idea. 3 . The way to find better ideas is to explore the world and know your customers. 3 . Think Big 4 . Get started . Rather than trying to find the perfect idea, start small with the one you have and iterate. 5 . Book: Steal Like an Artist &#8617; . | Book: The Unfair Advantage &#8617; . | Paul Graham: Before the Startup &#8617; &#8617;2 &#8617;3 &#8617;4 . | Book: The Magic of Thinking Big &#8617; . | Book: Anything You Work: Start now. No funding needed. &#8617; . |",
            "url": "www.ankushchoubey.com/idea/",
            "relUrl": "/idea/",
            "date": " • Jul 8, 2020"
        }
        
    
  
    
        ,"post59": {
            "title": "Baton Road",
            "content": ". Baton Road 1 is a feeling I had since childhood about how humanity progresses. . Progress is a collective initiative. No one individual changes the world. . There is a generation of them who made improvements that have push everyone forward. . Someone made electricity | Other person did maths | Some person made transistor | Other made Integrated Circuit | People started making better software | Hardware got faster | Internet happened | Smartphone’s happened | Deep Learning is happening | The baton has been passing from generation to generation of doers who were no better than we are. 2 . Currently, the most significant baton holder is Mr Musk. He is pushing a lot of critical areas forward. . The future generations will not have to deal with many of the problems he is solving. . The baton is not limited to technology. Every field connects to every other. Advances in any will improve every. . Every moment happens once. 3 . The next Steve Jobs won’t start a hardware business. | The next Zuckerberg won’t build a social network. | The next Elon Musk won’t set up an electric car company. | The next one will have to deal with a new problem most relevant to that time. | . Someday the 🔥 baton will pass on to our generation. Hopefully, I’ll be ready. . To those who quietly help advance the causes we mutually believe in, knowing advancing the cause is the only reward: thank you . &mdash; Elon Musk (@elonmusk) March 11, 2020 Footnotes . The title ‘Baton Road’ is inspired by Boruto: Naruto Next Generations Intro 1 &#8617; . | Steve Jobs Secrets of Life &#8617; . | Zero to One by Peter Thiel &#8617; . |",
            "url": "www.ankushchoubey.com/baton/",
            "relUrl": "/baton/",
            "date": " • Jul 5, 2020"
        }
        
    
  
    
        ,"post60": {
            "title": "ROI of Fun",
            "content": ". Note: I am not a psychologist. So the upcoming piece is quite unscientific. . Action: Hobbies . Hobbies are weird in the sense that after an initial interest in doing it we start expecting too much from it. . Each next creation becomes a race to be better than the previous one. . Every-time you show something you cooked or something you made… the first reaction from people is… why don’t you open a business?? . No! This is something I do for fun… . There is no real ROI! I don’t want to be famous or make money with this. . Life requires activities that have no other purpose than the joy that activities itself provides.1 . If suddenly there is an expected ROI attached it has a probability of not being fun anymore. Though the result of having an expected ROI to a hobby is that the quality and quantity of output increase a lot. . Hobbies are an active process: The more effort that has been put in the higher is the reward. 1 . Consumption: Books, Media, and Games . One of the things that many consider being a waste of time is consumption. Often quotes float around which says something on the lines of Make your own life so exciting that you don’t need to consume anything else. . On one level this may be true but it is a little too extreme. . Is watching Silicon Valley a waste of time? Maybe. | Did I get a boost of coding confidence ever since starting Silicon Valley? Hell yeah! ROI was higher. . | Was watching One Piece a waste of time? No. I actually enjoyed it. | Did I get my positivity pumped? Definitely. | . Most consumption only impacts the mindset of the consumer and does not result in direct action. The tricky thing is that we don’t know what will get us inspired or changed perspective for the better. If we did knew it already, it would be pretty boring. . Consumption is a passive process: You don’t have to actively work at it. . People . I actually don’t know how to write this without giving my personal anecdotes. So if you are a programmer explore this section in the DOM 😬. . I have been guilty of setting very high standards for people around me and for my behavior towards them too. It is not something I do consciously nor it is something I want to do. The people around me have always been supportive, caring and made me less bored. We are not dealing with creatures of logic. These are people just like me with emotions, ups/downs, discomforts, strengths, and weaknesses. We are social animals made to support each other during the bad and the good. I was and am always available for my friends/family when a problem arose in their life and they need me. But I was never there to share happy moments with them too. Dealing with people is both active and passive: Active: To be there to be for them when a problem arose and they need. Passive: To be there to share their happiness. And since you are someone who took the effort to read this in DOM, I am really grateful. If we have, in some way lost touch just ping :) . There is more to life than increasing its speed. 2 . . Digital Minimalism by Cal Newport &#8617; &#8617;2 . | Tim Ferriss &#8617; . |",
            "url": "www.ankushchoubey.com/fun/",
            "relUrl": "/fun/",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post61": {
            "title": "Marketing Money",
            "content": "Word of Mouth . I understand that there are more things in the world then technology products but for a lot of technology products I don’t like ads. . Tesla does it the best. . They make a really really good product which is much better that what is offered by the competition and thus the words spreads by word of mouth. . As the industry will mature I can understand that the gap between your product and the competition is very less. Thus in that state to win the market you essentially have to try everything like Advertisements. . Marketing money . Ever heard of Beats by Dr. Dre. The product kind of sucked before they got bought off by Apple. . Their product money split was something like this: . 40 percent marketing + beautiful cover 60 percent product . The reason for their survival was not that they had a good product. Bose was probably better in every way. . The only reason for their survival was every god damn music video used Beats in their video. Their packaging was too good. . On the other hand Bose was profitable just for their product. . Beats is not at the place it was in it’s hype years now. That is likely because Apple (it’s now parent company) has decided to focus more on product quality. . Over marketing a product while ignoring quality mean you get the initial sales but they as time passes you have to deal with user start disliking you. .",
            "url": "www.ankushchoubey.com/marketing-money/",
            "relUrl": "/marketing-money/",
            "date": " • Jun 30, 2020"
        }
        
    
  
    
        ,"post62": {
            "title": "Programming is now Configuring",
            "content": "What we learned when starting out . The programming initially included these: . variables | operators | conditionals | loops | functions | classes | . Along with these were concepts such as Algorithms and Data Structures. All these in effort to make original programs. . What we do . Increasingly I have realized that most of what we do is not creating functionality from scratch. . These are the kind of things I do regularly: . Wanted to add zoom in zoom out on images: OpenSeaDragon module | Wanted to generate PDF on the client-side: jsPDF module | Wanted trailer videos: TheMovieDB API | Idle session timeout alert: ng-idle | Want to talk to a DB: Spring Data JPA | Wanna have a table on a page: I don’t write my HTML tables. I use DevExpress. | Want my website to be installable on Mobile/Desktop: @angular/pwa module | . Programming role for the most part is to configure other’s code/modules/APIs so that it works well along with other modules and our tiny code. . And whatever tiny code that we do write is rarely even unique. For the most part, it is either the same functionality as something built before or copy/pasted from StackOverflow or Github. . Also for a good amount of things, one can easily skip backend coding by using something like Firebase. . Code Generators and Configuration Files . I wanted to contribute to PyTorch so I read their code and understood nothing. . I thought I had enough Python &amp; DL skills but that was not the problem. . The point was they have ATEN: a kind of configuration language that allows them to generate programs in their target language on the Fly. . A topic similar to code generators are configuration files such a .properties or .yaml . I love these. The behavior of the application can be changed entirely using configuration files. For these to be most effective the entire application has to be built with configurability in mind. . 80/20 split . I used to despise DevOps earlier because I never wanted to leave programming behind. After all, a major part of DevOps is configuring tools. But I realize now that ROI is huge. . I still believe that learning the principles are more important than learning a specific technology. . Learning a principle such as Deep Learning means that underlying technological tools such as PyTorch, Tensorflow, or even AutoML matter very little. . These principles (20%) apply to a small by very important parts (80%): . deciding what to do | connecting different modules | debugging | . Similar: Make your code configurable .",
            "url": "www.ankushchoubey.com/config/",
            "relUrl": "/config/",
            "date": " • Jun 29, 2020"
        }
        
    
  
    
        ,"post63": {
            "title": "User Interfaces",
            "content": "User Interfaces are such fascinating things. I had my interest peaked after I had to work on responsive CSS (thanks 🔥 Fireship) . AUC: The area under the curve . A bad UI means a product is essentially useless or trying to look useless. . A good UI means a product is at least trying to look useful. . A new feature release is like solving a big problem for a small number of users 📈. . An improvement to UI (especially on OS level) means solving a small problem for a vast number of users 📊. . The area under the curve remains the same 1 that is why it is so useful. . Physical World . This is not specific to UI, this is general to any design including once in the physical world. . Something I had a real wonder at was the lights at the back of vehicles. They are just so simple yet I could not imagine any better alternative. . left-right lights | red lights for brake | . Interfaces . It is quite wonderful to know UI is a field that has not matured. It is something that keeps improving and we have new things being added. . Keyboard ⌨️ → Mouse 🖱 → Touch → Gestures → body motion → Speech → Neuralink 😍 . Trends . Some design trends are definitely weird. . Like Neuromorphism, I don’t know why would someone make UI harder to use and increase their workload at the same time. . Dear Apple, 🥺 why would you do this to Mac OS Big Sur? . But at the same time, this was the same reaction everyone had when Flat Design was introduced and in a few years, people love it. . Same with Cyber Truck 😍 and PS5 design. . Craftmanship . I happen to get an eye for design after getting my first apple product and watching their promotion videos. I was hooked. Jony Ive 2 and Steve Jobs paid such a high concentration to detail that it still is reflected in most Apple physical product designs. . The same is true when Mr. Musk decided not to put headlight buttons for Teslas 3. If it’s dark, it should just come on. . There is so much craftsmanship that goes into a high-quality product. It is so much fun knowing what goes behind building a great product. . Their way of thinking is essentially making technology invisible. . It feels just like Magic 4! It just works! . . Elon Musk On How To Be Most Useful &#8617; . | Apple’s Sir Jony Ive’s top tips for success - CBBC &#8617; . | Book - Elon Musk Tesla, SpaceX, and the Quest for a Fantastic Future By Ashlee Vans &#8617; . | Steve Jobs - Works like Magic &#8617; . |",
            "url": "www.ankushchoubey.com/ui/",
            "relUrl": "/ui/",
            "date": " • Jun 23, 2020"
        }
        
    
  
    
        ,"post64": {
            "title": "Writing motivation",
            "content": ". Photo by Green Chameleon on Unsplash . This is collections of posts/ideas I have come across over the years. . . These only apply to non-fiction writing . Writing is thinking . Writing is learning how to think. Writing is a reflection of your thoughts. | . To write better, you don’t have to become a “writer” . Grammar is very small part of writing. The most important thing is having something useful to say. . | The way to have something interesting to say is to go experience the world. . | Improve your writing in every opportunity you get . | . Use less words . If it can be said in a blogpost, don’t write a book. If it can be said in a tweet, don’t write a blog post. . | One big idea per post . | Don’t quote make it yours and say it yourself. . | . Writing helps you to . Form your thoughts better . | Document and share your progress . | .",
            "url": "www.ankushchoubey.com/write/",
            "relUrl": "/write/",
            "date": " • May 31, 2020"
        }
        
    
  
    
        ,"post65": {
            "title": "Deciding to learn a {programming} topic",
            "content": ". I am writing this as a reference to my future self and so it is highly biased. May be someone else finds this helpful too. These are some things I found helpful when deciding on a new language or framework or module. . Deciding to learn . I pick something to learn only when the language/framework… . has been around for at-least a few year | is under active development and is likely to stay | has good community support/tools | . I find it easier to learn something by category like: . Frontend: Angular | Backend: Spring Boot (Currently with Java) | Database: SQL (pretty much all SQL are same) | Deep Learning: PyTorch | Containerizing: Docker | Hardware: Ardruino (C++) | Game Development: Yet to be decided | . The benefit of learning by category is that same skills can apply to other categories. . Like: My pandas (python) skills helped me a lot during new SQL problems. . Photo by Markus Winkler on Unsplash . Deciding not to learn . I hate learning “new” languages/framework/technology especially when . it does the exact same thing that I can do now | does not add any new benefit | it’s old/outdated | if I’ll likely never use it | proprietary technology | . So, . no AngularJS after learning Angular. | nothing less than Spring Boot when doing Java. | Typescript &gt; Javascript. | PyTorch is probably enough. Don’t need Tensorflow. | SQL is enough. No need of NoSQL yet. | . Exceptions . There have always existed exceptions and cases where I just needed to learn something. . Old but need it: Had to learn excel to reverse engineering and build same feature in Spring Boot | Learning a good framework: Had learned Django before. After joining worked I learned Spring Boot and realized it much better. | Made life easy: My application UI was crap. Easiest way was to learn CSS myself without using Bootstrap. It was easier than I expected. Thanks Fireship. | For Future: I may learn a little Firebase just to see how fast I can develop applications in it. Hopefully transferring some of that knowledge to my daily coding. | . But most exceptions occur where I either had to do it or see a benefit that is transferrable to what I do. . . I try not to learn something just to add to resume or to list of things that just sound cool (sometimes I do). . I usually spend months deciding. . YouTube videos and written articles have been great help when deciding. .",
            "url": "www.ankushchoubey.com/new_tech/",
            "relUrl": "/new_tech/",
            "date": " • May 25, 2020"
        }
        
    
  
    
        ,"post66": {
            "title": "Agile and DevOps",
            "content": "Agile and DevOps are useful or buzz words depending on who you hear it from. . The 2 can be thought of as effectiveness and efficiency respectively. . . DevOps: How to do. . DevOps deals with reducing the developer’s headaches by setting up processes and environments (+ mindset) to produce high-quality software. It can be useful to think of DevOps as an infinity loop which only developers deal with. . High-quality software is the once that: . get’s built faster | allows for quicker change | has low/no visible bugs or chances of introducing bugs | . It is important for organizations to deliver new features faster and keep their software up to date. The speed of this software delivery will determine how fast the companies make changes. . . Agile: What to do. . A feature can only be useful when it is delivered. . But more importantly it needs to be the right feature. That’s where Agile comes in. . It helps in knowing and understanding requirements quickly and effectively and get user feedback. . Agile involves everyone. It does not matter is someone is technical or not. . . Textbook: What to not do. . While Agile and DevOps are considered divine, it can be good to think them of as general principles and not as hard rules to follow. . Doing so is the opposite of what they mean. Don’t become a textbook expert. Textbook people who do Agile or DevOps always suggest doing the opposite of what’s practical or needed. . You might see many versions of both: Scrum/XP - SRE 🤘🏼 but all essentials mean the same thing. It is easier to think of them abstractly. . And for god’s sake, DevOps is not just tools. .",
            "url": "www.ankushchoubey.com/agile_devops/",
            "relUrl": "/agile_devops/",
            "date": " • May 21, 2020"
        }
        
    
  
    
        ,"post67": {
            "title": "Clean Code Resources and Tools",
            "content": "Index: Tips on writing Clean Code . Linters . SonarLint is good for most cases. . Python: SonarLint or PyLink . | Java: SonarLint or Sonar Cube . | Typescript: TSLint . | . Domain/Language-specific tips . For Deep Learning/Machine Learning: fastai coding style . | Java: Google Java Style Guide . | Python: pep8 or Google Python Style Guide . | Angular official style guide . | . Natural next steps: . Design patterns: Design patterns for Humans and Java Design Patterns in Stories . | Anti-Patterns . | Falsehoods . | The Clean Code Book . | Cleaner REST APIs: RESTful API Designing guidelines — The best practices . | Microservices and Micro frontend. . | .",
            "url": "www.ankushchoubey.com/clean_code_tools/",
            "relUrl": "/clean_code_tools/",
            "date": " • May 11, 2020"
        }
        
    
  
    
        ,"post68": {
            "title": "Math motivation",
            "content": ". Photo by ThisisEngineering RAEng on Unsplash . I have always been interested in 🧮 even after failing twice at math exams during college. . I have been collecting a lot of notes on the topic since the last 6-8 months and recently the number of notes exponentially grew. (damn recommendation systems). Some I came up on my own. . This should be a good time to publish the list and see how things evolve. . . Maths is a language that applies to the real world . It is a human language like English because it helps to talk 💭 with each other. 1 . It is the language of nature. 2 . Perhaps we can think, teach, and learn like it’s natural. . It is the same for everyone . . Maths is everywhere. Even if you don’t notice. . ⏰ 🗺 🥇🥈🥉🎰🎲⚽️🍻 . You have to learn it once and use it everywhere. . Plus you can learn it from anywhere. . . Emphasis on maths from home 🏡3 . People in Spanish class who come from 🏡s where Spanish is spoken are going to be better from day one☝️ . 🧮 is the same. . . Maths is useful and fun . It makes you more popular. . It is cool when others are silently looking for their calculator and you just say the answer. | . Run the numbers! 4 . You can verify a lot of facts by just running the calculating things in your head. | . Maths Is a Playground 5 . if you stop✋🏽 and look 👀. . You can explore the patterns on 🌊 🐚. | Play with tiles and shapes. | Categories objects in bizarre and creative ways. | Do puzzles 🧩. | Do origami. | Study the patterns in music 🎶. | Study the structure of trees🌳s. | 🎨. 🧶. | Create secret codes. | Program 🖥. | . . Math is reasoning not memorizing or speed . It doesn’t matter how you get there if your reasoning is correct. 6 . There is no single right way to solve it. . There is nothing wrong with counting on fingets 🖐🏽 as an aid to doing maths. 7 . It actually indicates an understanding of arithmetic more than if everything were memorized. . Maths is boring when it is taught incompletely 8 . aka we know only a handful of processes . Processes are like cookbook knowledge 👨‍🍳📖 . Maths is a whole tool box 🧰 of operations that can apply to different situations. . Knowing the processes is important but does not make you good at maths. . Tools of Maths are simple. 8 . ​Number​ (In all their forms) | ​Operations (​Arithmetic; all others are derived from them) | Laws (applies to all numbers) | Commutative | Associative | Distributive | Identity | . If you know these ​you can construct the process on the fly​. . . When learning Maths . Bring your ✍🏽 pen and 📝 paper 9 . Maths becomes hard when you move away from the real 🌎 and abstract it beyond recognition. 1 . Like any problem, you can sleep on numbers. . Go away for a while. Rest. . Are you studying maths for an exam? . Or are you exploring it because it’s fun??? | . There are advantages to each. . Studying for an exam means you likely have a deadline and you will tent to go through the material faster. . The problem here is you are less likely to go deep and may forget 🧠 things as soon as an exam is over. . Exploring for fun means overall you will sustain your learning for longer and be less overwhelmed. . But this also means you will take much longer than need time and then wander off 💭. . Balance is the key. ⚖️ . The best way to study math is to have constant exposure to it. 9 . . . Unformed Thoughts: Math requires . concentration + focus + patience + feedback + testing | . Cultivate habit of looking at math and make concious effort. . Concepts from Clean Code apply to maths to create clean maths. THe cleaner your maths is the easier it will be. . Simplify formulas. Most formulas are intitive and they are not as big when you break it up into their separate formulas. . Know numbers in all it’s forms. Vairbales. Functions. . Force yourself to calculate mentally first. Doing maths mentally is very fast and it requires less time. It is a good exercise to do. Plus it is better to have the answer and write the steps down rather than try writing step my step and try to solve it. You know the answer already, you just have to write the reasons for it. . If you fear maths, all the fear you have you’ll feel in the first 30 seconds of encountarinng the problem. Close your eyes then a deep breath and read it with full concertration without concert for if you’ll be able to solve the problem or not. . Most people won’t use maths beyond basic arithmetic. But the reason to learn advance maths is the same reason you learn to write, It makes you a better thinker. You’ll have better reasoning skills, more common knowledge and make better decisions if you do maths. 10 . Programming is Maths. You just have the computer do the work. . What is Mathematics? &#8617; &#8617;2 . | Naval’s tweet on Math &#8617; . | You’re Not Bad At Math, You’re Just Lazy &#8617; . | Jordan Peterson - The Cost of Procrastinating &amp; Wasting Half Your Life &#8617; . | Math Dude: Why Is It Important to Study Math? &#8617; . | Richard Feynman talks about Algebra &#8617; . | Twelve Math Myths &#8617; . | Classical Conversation: Why Should You Study Math? &#8617; &#8617;2 . | How to Get Better at Math &#8617; &#8617;2 . | Why Math is Important &#8617; . |",
            "url": "www.ankushchoubey.com/math/",
            "relUrl": "/math/",
            "date": " • May 4, 2020"
        }
        
    
  
    
        ,"post69": {
            "title": "Advice for those who want to learn Deep Learning",
            "content": "I do get questions once or twice a month in my friend circle of someone who is thinking of starting to learn Machine Learning or Deep Learning. . ​I am not an expert​. Nor do I have a DL job. But I do know enough that I can work with a DL team and build something over a few months. . Hopefully, this answers all of your questions. . . Don’t learn Machine Learning . You don’t need to know ML before learning DL. . It’s dumb. | It is getting rapidly replaced by DL. Therefore, turning irrelevant. | . Lot of times people build a complex hand made ML solution just to get little bit higher metrics. In the long run a simple DL model be better. . Deep Learning gets easier as more time passes. . Allow your mind to adjust to the counter-intuitiveness. For me, it took months to adjust. . Get comfortable not knowing a lot of stuff. . You might never need to do calculus but hand yourself. We have computers in the 21st century. . Knowing where to use it and what it does is enough. . Material beats the Method. . Learn from the latest courses and use the latest tools. . This is a fast-changing field. 2-year-old stuff is mostly irrelevant. . It is probably good to mix your learning from multiple sources. . Recommended Course: . Top Down Approach: https://www.fast.ai/ | Bottom Up Approach: Andrew Ng’s Coursera Course | . Recommended next read: How not to do Fast.ai (or any ML MOOC) . Learn a framework well . This is useful when you are not following a tutorial. . I learned PyTorch. . Be hands-on from Day One . Learned gradient descent today??? Nice! Open a Jupyter notebook and code the simplest gradient descent you could think of. . Reading/Watching videos matters less. Coding is the skill you are trying to develop. . Don’t get intimidated from people on the internet. . Most people in DL space are genuinely nice. But some you will find just crank out project after project by stealing other people’s code and never giving them credits. . Don’t get intimidated by them. Fame comes and bites them in the ass! . Know that those who are genuinely nice have spent a lot of time working on it. . Jobs . This is a hard one. DL is something I really really loved and I wanted to do it full-time. . But looking at the job market here in Mumbai, India, a lot of companies which say they are doing DL and often just don’t. . Or they do enough to get investors and job candidates. Most don’t ship anything. I can think of none actually. . Finding something difficult?? . Shoot me an email at ankushchoubey@outlook.com 😁 . For questions or counter related to this post, write them in the comments below. .",
            "url": "www.ankushchoubey.com/dl_advice/",
            "relUrl": "/dl_advice/",
            "date": " • May 2, 2020"
        }
        
    
  
    
        ,"post70": {
            "title": "Series  Kaggle Getting Started",
            "content": "Why? . Because Getting Started is: . Easy . | Less intimidating . | Less chance of getting stuck . | . How we will do it? . By: . focusing on the process rather than just getting the output. . | starting with easier problems. . | . Prerequisite . PyTorch: A 60 Minute Blitz, Writing Custom Datasets | . Expectations from this series . Time: 5–6 Hours per challenge or more. . Coding Style: fastai coding style . While coding, no function takes 10 seconds. . | Heavy use of %timeit% . | . Explanation Style: Based on Kaggle Notebook Commits . Notebook Commit 1: Will focus on getting input and output . | Next N-1 Commits: Will add new features/improvements. These will be linked. . | Last Commit: Complete solution . | . This way one can see get a peek behind the finished product. . Abbreviations Used . X = training_data y = training_label ds = dataset dl = dataloader o = optimizer . Index . Digit Recognition | Facial Keypoints Detection - in progress |",
            "url": "www.ankushchoubey.com/kaggle_getting_started/",
            "relUrl": "/kaggle_getting_started/",
            "date": " • Mar 30, 2020"
        }
        
    
  
    
        ,"post71": {
            "title": "Digit Recognition",
            "content": ". How to read this? . Skim through the Pre-requisites . | Open each commit notebook then read the explanations. . | Just run each notebook top to bottom. . | Try to understand each line. . | If you find yourself stuck at statements, explore the variable involved. . | Still, stuck?? highlight the explanation and comment. I will get back to your query. . | . Commit Version 2: Getting Input and Generating Submission File . Day 1 . | Score — 0.43 . | Time invested — about an hour . | . My goal for any first commit is always to get input, pass it through a NN and generate a submittable output. . Read the data . train_df = pd.read_csv(&#39;/kaggle/input/digit-recognizer/train.csv&#39;) . Training/testing . I needed a way to separate features and labels. . So the easiest way was to not select a column named ‘label’. . test_df does not contain a label column . train_df.loc[:, train_df.columns != &#39;label&#39;] type(test_df.get(&#39;label&#39;)) == None #false . Dataset . Returns features and labels if ‘train=True’. else it returns just features . class MnistDataset(Dataset): def __init__(self, df, train=True): #convert df to self.X and self.y using above def __len__(self): return self.X.shape[0] def __getitem__(self, i): if self.train: return self.X[i], self.y[i] return self.X[i] . Observation: Even if I don’t explicitly mention Tensor, NumPy is converted to tensor. . Creating DataLoader . bs = 64 ds = MnistDataset(train_df) dl = DataLoader(ds, bs) . Checking if DataLoader returns the right output . images, labels = next(iter(dl)) images.shape, labels.shape . Creating a vanilla Neural Network . I created a dumb NN just so that I can pass data through it and get output in the desired shape. . The details don’t matter much. This will be replaced by a CNN later. . Preparing the training loop . epochs = 10 loss_fn = nn.CrossEntropyLoss() import torch.optim as optim o = optim.Adam(net.parameters()) . Creating the training loop . Here are the 4 steps to create a basic training loop . Loop epoch number of times | for i in range(epochs): ... . Inside the epoch loop, loop through data loader (dl) | for images, labels in dl: ... . Inside the data loader loop, | zero grad optimizer before passing pushing data into NN. . | Take an optimizer step after pushing data through NN. . | . o.zero_grad() ... o.step() . Between optimizer zero_grad and optimizer step, pass data through the NN, compute loss and gradients. | out = net(images.float()) loss = loss_fn(out.float(), labels.long()) loss.backward() . Generating output . A similar step as above has been taken to generate test_dl and the testing loop. . The only difference, . test_dl has ‘train=true’. Dataset will only return features and not labels. . | code to not calculate gradients since we are not training. . | . with torch.no_grad(): ... . The output is in the form of numbers from 0…9. . | Our output is a column (dim=1) array of length 10 with probability. . | The maximum of this array is our output. . | . out.argmax(dim=1) . We store these outputs in an outputs python list. . test_df.shape, sample_df.shape # Out[17]: ((28000, 784), (28000, 2)) . I realized that sample submission and output df have the same length. . | I just need to add ‘Label’ column to the submission data frame and save it in CSV form. . | . sample_df[&#39;Label&#39;] = outputs sample_df.to_csv(&#39;submission.csv&#39;, index=False) . index=False removed the default pandas index when saving . Commit Version 3: Improvements . Changes: Proper Accuracy, Graph, and Data Normalization . Day 4 . | Score — 0.96 . | Time invested — about an hour . | . Proper Accuracy . Accuracy should always be calculated on the validation set. . Creating a separate validation set . val_len = int(len(ds)*0.01) # 0.01 percent of data train_len = len(ds) — val_len # all other are in training from torch.utils.data import random_split train_ds, val_ds = random_split(ds, [train_len, val_len]) . Likewise, 2 data loaders are created. . bs = 64 train_dl = DataLoader(train_ds, bs) val_dl = DataLoader(val_ds, bs) . Changes in the training loop . A separate list called accuracies in created to store the accuracy of an epoch. . ... with torch.no_grad(): accuracy = 0 for images, labels in val_dl: out = net(images.float()) accuracy+=(out.argmax(dim=1) == labels).sum().item() accuracies.append(accuracy/len(val_ds) * 100) . Graph . Since the accuracy of each epoch was stored in a separate accuracies list, creating a graph was easy. . import matplotlib.pyplot as plt plt.plot(range(epochs), accuracies) . Data Normalization . After plotting the graph, I realized accuracy was 43% which is the same as the score of commit 2. . The easiest thing to do was to normalize the data. . Since MNIST images are in the range of 1…250 the easiest thing to do was to divide by 250 which would result in a range of 0…1. . Ideally, the range should be around 0 so an even better approach would be . image = image/250–0.5 . this would result in a range between -0.5…+0.5. . Later we would use torchvision.transforms.Normalize(mean, std, inplace=False) which generates unique normalization value for each dataset . Commit 6: ConvNet, and GPU . Day 6 . | Score — 0.97 . | Time invested — about 2 hours (lots of googling and reading docs) + 1 hours fixes bugs . | . ConvNet . Convolutional Neural Networks are ideal images. . ResNet . ResNet 34 is my goto ConvNet but since MNIST is so easy, I went with ResNet 18. . import torchvision.models as models resnet18 = models.resnet18(pretrained=True) resnet18.fc #print fully connected network . ResNet is designed to output 1000 classes. But our output is from 0…9 aka 10 classes. . lin_in = resnet18.fc.in_features import torch.nn as nn resnet18.fc = nn.Sequential( nn.Linear(lin_in, 10), nn.Softmax(dim=1) ) . Convert Grayscale to RGB image . ResNet expects RGB images. MNIST is grayscale. . img = img.view(3, 28, 28).expand(3, 28, 28)` . This grayscale to the RGB line is added to our Dataset class. . Normalization . When using an existing model, we need to use the same normalization values as that model. The docs mention the normalization value. . import torchvision.transforms as transforms normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) . The init and getitem dataset class have been modified to use this transformation. . Modifications have also been made to test_ds. . GPU . One I started the training loop, I realized it suddenly became too slow. . GPU is needed! . device = torch.device(&#39;cuda:0&#39;) if torch.cuda.is_available() else &#39;cpu&#39; . If the GPU is on, the device will be cuda. . The neural network and the data in training, validation and texting loop have been changed to run on GPU. . net = net.to(device) ... images, labels = images.to(device,dtype=torch.float), labels.to(device) . And since we are on GPU we can increase our batch size from 64 to much higher. . I experimented with a few sizes from 320…640 and kept an eye on GPU utilization and settled for 512. . . I did the same for num_worker which specifies the number of threads to load a batch. This is CPU stuff. . Along with monitoring GPU and CPU usage, I modified training_loop to show the amount of time taken to complete each epoch. . bs = 512 num_workers = 2 train_dl = DataLoader(train_ds, bs, num_workers=num_workers) val_dl = DataLoader(val_ds, bs, num_workers=num_workers) . This resulted in 7 seconds per epoch. . For testing, the batch_size can be much higher since we don’t have to back prop. . Commit 7: Improvement . Day 8 . | Score — 0.97 . | Time invested — about 30 minutes . | . I learned that you don’t need nn.Softmax if you are using nn.CrossEntropyLoss. . nn.CrossEntropyLoss has nn.Softmax built-in and the results of softmax are not used during back-prop. So it can be safely removed. . Now FC is this: . lin_in = resnet18.fc.in_features import torch.nn as nn resnet18.fc = nn.Sequential( nn.Linear(lin_in, 10) ) . . Index: Series - Kaggle Getting Started . Next Post: [] .",
            "url": "www.ankushchoubey.com/mnist/",
            "relUrl": "/mnist/",
            "date": " • Mar 30, 2020"
        }
        
    
  
    
        ,"post72": {
            "title": "Kaggle CLI QA: How to download a particular folder",
            "content": "Harshini on Medium asks . Nice Article, . But I got struck while trying to download a particular folder from kaggle competition “state-farm-distracted-driver-detection”. I want to download “img/train/c4” folder in that dataset, But when I’m trying to run the command, it’s giving an error like “404 — Not found”.. . But I am able to download a particular image like this “img/train/c2/img_100029.jpg” . *Is there any command to download a particular folder?? . . Hi Harshini, . Kaggle CLI does not support downloading the entire folder or multiple files at once (except in case of downloading entire competition). Only one file can be downloaded at a time via the CLI. . Here is how I downloaded the entire c4 folder . 1. Created directory if it does not already exist . mkdir -p img/train/c4 . 2. Get the list of all files available in the dataset, filtered the files which were in the c4 folder, picked file name, repeatedly download each file. . kaggle competitions files -c state-farm-distracted-driver-detection | grep c4 | awk ‘{print $1}’ | while read x ; do kaggle competitions download -f $x state-farm-distracted-driver-detection -p img/train/c4 ; done . . — — — — — . I don’t use the command line regularly. These are the sources I looked: . Read values into a shell variable from a pipe . | How to mkdir only if a dir does not already exist? . | How to use a shell command to only show the first column and last column in a text file? . | . kaggle competitions download -h . Hope this helps! Have a good day! . Medium reply .",
            "url": "www.ankushchoubey.com/kaggle_download_folder/",
            "relUrl": "/kaggle_download_folder/",
            "date": " • Mar 10, 2020"
        }
        
    
  
    
        ,"post73": {
            "title": "Simple Hacks for increasing website load time",
            "content": "Reduce bundle size . Always use compression: at least gzip . Always compress. The configuration is set in the webserver. . gzip is good enough in most cases in terms of both performance and speed. . My application went from 4 MB to 800 kb. Fewer data faster speed. . Source 1: Enabling gzip Source 2: Verify gzip on Chrome . Make less number of requests . Always cache static content: js, css and static images. . This can be configured in your web server or your application. Just google “ “how to cache in “. . Of course: be sure to not cache dynamic content. . For js and css files, make sure it has a name that is unique if the file is modified. . Example: in angular after creating a --prod build, the filename is in following format &lt;filename&gt;.&lt;md5 checksum&gt;.js. . This ensures that if the content of the file changes, the md5 checksum will change and a new request will be sent but if the file does not change then it will have the same checksum so it can be pulled from the cache. . Always load images lazily . &lt;img loading=‘lazy’ ... /&gt; is so so easy. Images are only fetched when user scrolls near it. #freeSpeedUp https://t.co/nduXUy5GLmAre there any more such tweaks that exist? . &mdash; Ankush (@ankschoubey) January 21, 2020 Advanced tips: Lazy Loading Images and Video . Do it fast . Fetch js and css asynchronously Source . When fetching js add async defer to script tag. This will fetch multiple js files in parallel. . Keep script tag in the header for this. . . Are there more such easy tips? . Please mention them in the comments and I will add the tip to the list and mention your name. .",
            "url": "www.ankushchoubey.com/load_time/",
            "relUrl": "/load_time/",
            "date": " • Feb 22, 2020"
        }
        
    
  
    
        ,"post74": {
            "title": "Leave it better than you found it",
            "content": "Code is much more like a work of art/craft that people consider it. . Knowing the benefits and tips for writing good code will take you only so far. It requires a mindset shift. Looking at the code through an artist’s eye. . . Incremental Improvements . If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot. The cleanup doesn’t have to be something big. Change one variable name for the better, break up one function that’s a little too large, eliminate one small bit of duplication, clean up one composite if statement. . Can you imagine working on a project where the code simply got better as time passed? . ~ Rober C. Martin (Author of Clean Code) . Maybe, improve one microservice. | . Tip: Leave TODO as comments for your future self. These could include how you want to improve the code but don’t have time right now to do it. Hopefully your future self will handle it. . Upgrading Fast (get rid of Legacy) . Newer languages and frameworks provide many more features, provide security upgrades and are easier to use. The longer you wait to upgrade, the harder the upgrading becomes. . You will also find that clean code is much easier to upgrade. . Do it one step at a time. . Making a big bang change is never feasible. . Upgrading can come in a variety of sizes. . Simple upgrades such as — Custom SQL executors in code to using an ORM. . Get rid of prepared statements and replace them with Spring Data JPA | . Or they can be a little bigger such as — Going from AngularJs to Angular. . Developers of the code to provide guides and tools to make upgrading frameworks easier . Like: Official guide for upgrading from AngularJS to Angular. . The above guide mentions some things that are worth mentioning here: . Some applications will be easier to upgrade than others, and there are many ways to make it easier for yourself. It is possible to prepare and align AngularJS applications with Angular even before beginning the upgrade process. These preparation steps are all about making the code more decoupled, more maintainable, and better aligned with modern development tools. That means in addition to making the upgrade easier, you will also improve the existing AngularJS applications. . Or a much bigger one like — Going from Java to Kotlin. . Choosing a programming language is a hard process. . Ideally, you would want to choose something which is: . Non-proprietary . | In-expensive or FREE . | Easy to code in . | Flexible enough . | . Java to Kotlin . Enterprises seem to have got stuck with Java 8 (released in 2017) because it is free. The newer versions of Java offer much better and easy to use features but enterprises won’t upgrade. . Kotlin might be a much better choice because: . It is completely interoperable with Java. You can import your Java code and any other built by anyone within Kotlin. . | Spring Boot and Android officially support Kotlin. . | Kotlin is much more modern than Java offering things like default parameters and null checks. . | . A smaller way to check if Kotlin might be right for you is to migrate or create one microservice in/to Kotlin. . Python 2 to Python 3 . The support for Python 2 ended (2019) after 20 years of development. Its code is frozen and won’t even receive security upgrades. Time to upgrade to Python 3. . Code Reviews . . Benefits of Code Review . Code reviews share knowledge . As code reviews expose developers to new ideas and technologies, they write better and better code. . Nobody wants to dive into a critical piece of code they didn’t write–especially during a production emergency. Code reviews share knowledge across the team so that any team member can take up the reins and continue steering the ship. . Code reviews make for better estimates . Any code reviewer is also exposed to the complexity, known issues, and concerns of that area of the code base . Keep in mind, code review is not just a senior team member reviewing a junior team member’s code. Code review should happen across the team in every direction. Knowledge knows no bounds! Yes, code review can help newer engineers, but by no means should it be used solely as a mentoring exercise. . Source: Why code reviews matter (and actually save time!) . The article also mentions ways to make code reviews much more productive. . When done right, code reviews actually save time in the long run. . Share the load . | Review before merging . | Use peer pressure to your advantage . | . Previous: Always know why you are catching an exception . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/leave_it_better/",
            "relUrl": "/leave_it_better/",
            "date": " • Jan 6, 2020"
        }
        
    
  
    
        ,"post75": {
            "title": "Exception handling",
            "content": "Errors should never pass silently. Unless explicitly silenced. . ~The Zen of Python, by Tim Peters . Create custom exception classes . Your exceptions should say exactly what went wrong. While those provided by programming languages are good, they are too general and are not specific to your codebase. . Oversimplified example: . Bad: Exception(“number is smaller than 0”) . | Better: SpeedException(“Speed should not be smaller than 0”) . | . The reason you want to do this is that you can handle different types of exceptions in different ways and it is much easy to know exactly what went wrong from the logs. . In most programming languages creating exception is easy. Just inherit from the main Exception class which should be enough for most cases. . Custom Exception class also makes your logs easier to read. . Always know why you are catching an exception… . . … or just don’t catch it (throws to the caller) . if you are not going to do anything with the exception don’t catch it just throw it. . Don’t add throw exception in the catch block. Use throws while declaring the function instead. . For Unsupported Operations . In if-else statements or switch cases, it is always good to have a default case which will execute if no other condition is true. . If something is not possible or not supported then: . throw (Java): UnsupportedOperationException . | raise (Python): NotImplementedError . | . . Global exception handling . These allow you to have the same exception handling mechanism in case you have not explicitly handled the exception. . The most basic thing to do here is logging the exception. . Spring (Java): @ControllerAdvice . Previous: Avoid inventing algorithms and data structures . Next: Leave code better than you found it. . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/exception_handing/",
            "relUrl": "/exception_handing/",
            "date": " • Jan 6, 2020"
        }
        
    
  
    
        ,"post76": {
            "title": "Remove un-necessary code",
            "content": "Declare the local variable as close to where it is used and remove un-necessary once . Local variables declared at some different place makes it harder to read the code. . Example: . Below are the variations of aRandomFunction which does a bunch of operations (skipped by dots) and on completion returns “Hello” along with the date. . . The local variables names and date are declared on top of the functions. . The first usage of the functions are somewhere between the function and the last usage is in the return statement. . . Here name and date variables are moved to where they are first used. . Let’s say after moving we realize that we do not use the variables between the code, we just use it during return. . So we should move it near the return statement: . . Just return it. Don’t store . Continuing from the previous example: . Storing in a variable is un-necessary is it is never used. . Rather than storing “hello” in name and a new date in date, we should just return it. . . Remove commented code . In case you do need to refer to the exact code you can always check it in your version control. . Remove functions and variables which you do not use. . Variable argument lengths . Python: *args, **kwargs (more than just variable-length argument) . Java also has an implementation for variable length arguments but they are not as elegant as Python implementation. Therefore, a list as an argument might be better suited. . . Default Arguments . Python and Typescript both support default function arguments. . While not officially supported in Java, one can work around the builder pattern to get similar functionality. . ![Source: Managing Constructor with many parameters . . Use annotations/decorators . Annotations extend the functionality of your function dynamically and reduce the size of the code dramatically. . Python: Decorators . In python, these are called decorators. . Python 3.7+ also has @ dataclass **annotation which auto-generates constructor, **str and repr. . Relevant Links: . Primer on Python Decorator . | Source: [functools](https://docs.python.org/2/library/functools.html#module-functools) — Higher-order functions and operations on a callable object . | The Ultimate Guide to Data Classes in Python 3.7 . | Method Types in Python OOP: @classmethod, @staticmethod, and Instance Methods . | . Spring Boot (Java) . ![Source: Spring Annotations Cheat Sheet . Java: For JPA . No need to write @Column over your entity’s variables. By default, camelCase is substituted with snake_case. . lookupId =&gt; lookup_id . You can change these using naming strategies. . Java: Map using Mapper. Don’t create your own logic. . There are many mapping frameworks in Java that can make the task of converting one object to another much much easier. This can be especially helpful when you want to convert your @Entity to a DTO object. . Java: Project Lombok to avoid boilerplate . Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java. . Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more. . @Getter and @Setter . | @NonNull . | @ToString . | @EqualsAndHashCode . | @Data . | @Cleanup . | @Synchronized . | @SneakyThrows . | . The good thing is that it is present is SpringInitializer. Just click the Project Lombok option. . With this, the size of your java code will reduce dramatically. . Remove duplicates . Linters will provide you a list of duplicate codes. Shove it into a function/method. . Use existing/inbuilt methods rather than new once . This goes back to not inventing new algorithms. If something is already made, don’t make it again. Reuse it. (Link — Clean Code: Know thy complexities) . Probably a bad example #1 of reuse: . Below is a very complex function. One of them works with List and other with an array but that is the only difference in implementation. . The bad approach is creating the same logic to work with different data structures. . . A better approach is to have one main logic function and convert one data structure to another and then call the main one. . . We can also take advantage of having the same name for both the functions which means less to remember. . . Probably a bad example #2 of reuse: . This is similar to the above. . Here suppose you already have a complex function that works on a list of integers, and now you have to make a similar one to work on a single int. . . Single line boolean evaluation . . Think in terms of Streams . Streams make your code really really tiny and give much better performance. Streams do have a learning curve but are worth it. . (swap in a stream() for parallelStream() and you just went Super Saiyan 3) . Though the implementation of Java streams and having a single line list comprehension in Python are very different, they are similar in terms of style of code. . Create and use base classes . Base classes are an excellent way to avoid duplications. Make them as generic as possible. . Previous: Make database do the heavy lifting . Next: Avoid inventing algorithms and data structures . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/code_cleanup/",
            "relUrl": "/code_cleanup/",
            "date": " • Jan 4, 2020"
        }
        
    
  
    
        ,"post77": {
            "title": "Avoid inventing algorithms and data structures",
            "content": "If you are inventing new algorithms, you either don’t know the right algorithm or are working on your PhD thesis. . Eliminating as much of this accidental complexity as possible. . Source: Why Your Code Is So Hard to Understand . Keep your implementation as simple as possible . If the implementation is hard to explain, it’s a bad idea. If the implementation is easy to explain, it may be a good idea. . ~ The Zen of Python, by Tim Peters . Knowing the basics of time and space complexity goes a long way. . Going through each is beyond the scope of this. Here is a link if you want to go in-depth: Cracking the Coding Interview YouTube . The concept of List, Sets, and Maps is universal though this particular post is going to look at it through the lens of Java. In the case of Python map is called a dictionary. . Additional Tip: Always use parent interface for the type . Be as general as you can be. . This allows you to swap in any form of implementation of parent interface in a single line. . . When trying to find duplicates . Use Set instead of Lists . Set always contain unique values. . Finding an element in the set is much faster O(1) than compared to a list O(n) . . Java: If you know the size of the list . … if the required maximum capacity of the ArrayList is known, we can get the optimal performance (both average latency and throughput) by specifying the initial capacity to the required capacity. . In doing so, we can get 24% to 34% improvement in average latency and 30% to 50% improvement in throughput. . Source: Performance Evaluation of Java ArrayLists . Always have your algorithmic logic in a separate function . This just makes it much easier to debug. Your function will be doing just one this. . Making it general enough will be even helpful so that you can easily use it. . Example: Separate loop and operation section: Clean Code #1 . Rather than implementing own logic, take 5 minutes to see if your modules already provide the implementation . Example: Sorting in Javascript/Typescript . . . A library in java which you can find is Apache Common Lang 3 which does provide a lot of utilities. . Python has much more abundance. Just google a solution for python and you will probably find a pip package. . Previous: Remove unnecessary code . Next: Always know why you are catching an exception . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/complexity/",
            "relUrl": "/complexity/",
            "date": " • Dec 25, 2019"
        }
        
    
  
    
        ,"post78": {
            "title": "Avoid creating god classes and long methods",
            "content": "As you gain experience as a developer you start to see repeating patterns that crop up over and over again in your solutions. . When you use chunking (design patterns, algorithms and standard functions) appropriately, it allows you to stop thinking about how the code you write does something and instead think about what it does . Source: Why Your Code Is So Hard to Understand . Classes . One class should do one thing not everything like StatusChanger or StatusManager, not StatusGod . Keep classes small, a 1000 line class is a pain . Methods . Name . Avoid using and in method names like validateAndSave, one method needs to do one thing and one thing well . Don’t Repeat Yourself . There should be one — and preferably only one — obvious way to do it. . ~The Zen of Python, by Tim Peters . Lines of Code . Keep methods small, a 50 line method is a problem. . My rule of thumb is: The method should not be more than the size of my screen. (Source: Jeremy Howard fast.ai) . Passing variables . Keep the instance variables as low. If you are passing 4,5 variables you are probably doing more than one thing . Pass an object instead of multiple methods . Don’t pass the variables that you don’t need. . If creating an object requires multiple steps . Convert it into a factory method . Previous: Leave clues (Naming convention) . Next: Make database do the heavy lifting . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/god_classes/",
            "relUrl": "/god_classes/",
            "date": " • Dec 25, 2019"
        }
        
    
  
    
        ,"post79": {
            "title": "Make the database do the heavy lifting",
            "content": "Rule of thumb: Avoid filtering loops . SQL/Databases are good at 2 jobs: storing data. filtering data as fast as possible. You’re for loop cannot compete with SQL. . The performance of your program will be much faster if you let SQL manage the filtering of data. Plus it will also result in a smaller line of code. . Try to filter with smaller queries with a smaller number of columns before fetching all the columns. Smaller the data, the faster will be the data transfer. You will find a better example of this in the section of Complex Queries bellow. . Use ORM . For Spring (Java), ideally, use JPA method query things.*** . . _Tips: Use tools to make Entities POJO . youtube: https://www.youtube.com/watch?v=LrbaDRcu3Y0 . For Python, SQLAlchemy is popular and preferred or Django ORM for Django. (I have less experience with this) . Complex queries . In the case of Java, you can also JPA specific things like Specifications or Criteria API. . Honestly, I haven’t tried them I know they exist. I have seen them and found that the code looked really ugly . I do find Django ORM to be easier than Spring JPA (you can pass arguments rather than always create a separate function). . Break down big-bang (complex) queries into multiple simpler queries . note: This might be very controversial and I have not seen this talked about anywhere or used in other people’s code. You are not likely to use this unless you are like me (bad at ORMs). . Many times you have a complex feature like search and you want to filter by multiple parameters. . What usually ends up happening you end up with a custom query generator or Criteria API (Java) or a query which is too long. Especially if this query requires additional features like ordering and pagination. . I think a simpler solution is to break it into smaller queries. I give a simplified example below. . Note that this is a much simpler version of what you would encounter but I think it will make the point. . There are 3 tables: . . . . Suppose you want to find who are male grandparents of children whose name start with ‘A’ . You can go for some complex query like . . . These 33 lines can quickly increase in size when you have too many tables. Multiple shorter queries are always much better than one big bang query. . I’ve seen queries which go beyond 100 lines 😖 . Making changes in such large 100+ line queries is a pain. . (Even when writing the 33 line query above, I introduced bug by not writing join on lines 30 and 31. writing smaller queries helped me debug.) . You could break into something simpler queries like: . . . . . . . . . Then code the method yourself to call these in a certain sequence: . . You will find that even though your line of code has increased, the modularity of code has also increased and these functions can be arranged in any way you like. . . Previous: Avoid creating god classes and long methods . Next: Remove unnecessary code . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/sql_is_fast/",
            "relUrl": "/sql_is_fast/",
            "date": " • Dec 22, 2019"
        }
        
    
  
    
        ,"post80": {
            "title": "Leave Clues",
            "content": "These apply to name everything: variable, class names, methods, package, etc. . When you have the semantic model fresh in your mind it’s easy to map your code onto it . It’s not hard to remember that a variable named “x” is the date a record was created and “y” the date it was deleted. . Leave clues that will allow you to rebuild the semantic model when you come back at a later time. . Source: Why your code is so hard to understand . Comments . Comments can lie. The code does not. . Ideally, your code should be so good that you do not require comments. . This might not be true in one case which is when you code something weird and required domain-specific explanation. . Like in Machine Learning, a choice of certain parameters or a certain step can be understood better by putting the link to explanation/research paper in the comment. While reading just the code, it might not be obvious for the reader to understand what to make of it. (Source: Jeremy Howard fast.ai). . Intent giving names . Use pronounceable names . Variables should be named so that they make it clear what it contains. . Variable names should always be easy-to-read, be short yet meaningful, mixed case with a lower-case first letter English words. . b)Use plural names for arrays/collections of objects. . c) Constant (static final) variable names should be in all capital letters and separate words in the name with the underscore, i.e., PRIORITY_NORMAL, . Source: java coding-convention and cleancode . . For matrix operations use row columns instead of y and x because in some languages matrix is treated as [y,x] . . Source: Gayle Laakmann McDowell (Cracking the Coding Interview Book) . Abbreviations and short forms . Many people try to optimize for vertical space of the screen but forget horizontal space. . This is kind of an exception to the above rule: for things that are very very common, short forms are better. (You also type less). . Just don’t short everything to be a single letter. Be small but descriptive. . Also, having a list of abbreviations used in your project readme/documentation can be helpful. . Examples, . repo for repository . | util for utility. . | serv for service . | len for length . | dto for Data Transfer Object (pretty common) . | . Make sure you use the same abbreviations everywhere in your code aka one word per concept in all classes. . (Below examples are for method names) . get/fetch/find . | set/update . | . In case you are trying machine learning, I guess this article is much better suited: Jeremy’s notes on fastai coding style . Magic numbers and strings . Any number or string in your code that isn’t immediately obvious to someone with very little knowledge. . Source: StackOverflow . Better to declare them in a separate constants file. . Constants should be snake_case and CAPITAL. . . In the case of Java, enums can also be used to achieve something similar but they will contain a lot of java boilerplate. . . There are also language-specific naming conventions involved like: . Java and Typescript prefer camelCase . | Python and SQL prefer snake_case . | For Unit test cases . My aim is not so much about reducing the lines of code. Tests are usually small. (In case if your tests are huge and complex then you must have written a bad code) . I prefer to keep the end of each method the same. Like: . . I use Mockito so I skip the first line. The start of the function then is with all stub actions. . The last 3 lines are usually similar. . A variable expected: expected value . | A variable actual: calls the function/method . | assertion . | I find that for most tasks it is easier to make changes to expected and actual variables rather than put everything into assertions. The assertion is always clean. . An alternative to the above assertion is to write like below which I find to be messy. . . Previous: Flat is better than nested . Next: Avoid creating god classes and long methods #NotEnoughChunks . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/naming_conventions/",
            "relUrl": "/naming_conventions/",
            "date": " • Dec 20, 2019"
        }
        
    
  
    
        ,"post81": {
            "title": "Flat is better than nested",
            "content": "This might be the most important tip of all the tips covered which applies mainly to if-else statements. . Nesting clutters your code. . Where does the block end . It becomes hard to find where a particular block ends easily (especially if someone writes 8 or more nests 😖) . Unnecessary horizontal scrolling . Also, you might have to scroll horizontally to see what the complete code is since it does not fit your screen. . Nesting makes your code hard to understand. . While you are reading your nested block, you have to remember what all conditions preceded it. . The below guideline should counter that: . Max indent should be 2, in case of exceptions 3 . Avoid the use of else. . Return/throw when not okay . By returning early you make sure that in each of your functions the last line of your function returns what it is actually supposed to return. This will make your code consistent. . | Also, you would find that you avoid unnecessary nesting (which will calm your eyes 👁 and your linter). Thus, making your code easy to understand. . | . . Bubble vs Gateway . Bad (left): Bubble-Style . Good (right): Gateway-Style . If deep nests exist? Separate loop and operation . Extract the logic to other readable methods or use streams (Java)/lambda or something equivalent in your programming language of choice. . Usually, there is a problem where you have to perform a bunch of operations on an array of objects. . I tend to create at-least** 2 functions** for this: . One that performs an operation on a single object. . | Other calls the first function in a loop. . | In case if something goes wrong, it is easier to debug it since I know what function has what responsibility. . Simplified Example: Link to Code . . You have a bunch of students for which you calculate the average grade. . . In the above BadGrader, you can see than the code of calculating the grades is within the loop. This is bad as we cannot use the same piece of code elsewhere in the program. . . The BetterGrader separates the calculation part from the printing part. . . GoodGrader removes the naive logic that was used to calculate average and replaces it with a much shorter code that makes use of inbuilt functions. . This is an example of chunking which will be explained more in the next post. . Next: Leave clues (Naming convention) . Index: Tips on writing Clean Code .",
            "url": "www.ankushchoubey.com/flat_is_better/",
            "relUrl": "/flat_is_better/",
            "date": " • Dec 20, 2019"
        }
        
    
  
    
        ,"post82": {
            "title": "Clean Code",
            "content": "I’m not a great programmer; I’m just a good programmer with great habits . ~Kent Beck (Creator of Extreme Programming) . I started writing this as a single post but the number of paragraphs much so like any good programmer I decided to release in chunks. . These come from a series of notes I took since I was in college. . The attributions are lose. I did not think about writing a post while taking notes. . I will do by best to find the authors and link to their work when I find them any time in the future. Most of these came for searching for keywords like “clean code {language}”. . Some ideas I found while experimenting on my own. . . Usually building a software looks like this . You start small. But by the time you reach halfway, it becomes chaotic. . . Reading vs Writing Code . While coding we spend more time reading the existing code than writing the code. We can estimate the ratio to be something like 10:1. . Most of the time you are more likely to modify and improve your code than to produce a new functionality. . . For something we spend the most time on, it is very important that we make the process of reading and understanding our code easier for ourselves and other developers. . Why do we write bad code? . Work needed to be done fast . | Tired of project/work . | Requirement changed . | Managers . | WE — Developers . | Work, for now, will clean up later . If we don’t follow good coding guidelines, we risk initial coding speed for long term code quality and productivity. . Usually, once you start on a path you are more likely to continue on the same path. . . What is Clean code? . Constructing the simplest possible code that would solve your problem. . Benefits . Problems become easier to solve since code is modular. . | Less time is wasted on maintenance since lines of code are less. . | Ideas are more clearly communicated. . | Unit Test cases are much smaller and easier to write. . | Making changes is much faster. . | Pleasing to your eyes 👀. . | . More posts in this series . Clean Code Resources and Tools • May 11, 2020 . Leave it better than you found it • Jan 6, 2020 . Exception handling • Jan 6, 2020 . Remove un-necessary code • Jan 4, 2020 . Avoid inventing algorithms and data structures • Dec 25, 2019 . Avoid creating god classes and long methods • Dec 25, 2019 . Make the database do the heavy lifting • Dec 22, 2019 . Leave Clues • Dec 20, 2019 . Flat is better than nested • Dec 20, 2019 . Clean Code • Dec 19, 2019 .",
            "url": "www.ankushchoubey.com/clean_code/",
            "relUrl": "/clean_code/",
            "date": " • Dec 19, 2019"
        }
        
    
  
    
        ,"post83": {
            "title": "10 Google Collab Tips",
            "content": "Collab is my favorite place to do deep learning because: . No setup needed . | Free . | Faster than typical local setup . | It is better than Kaggle and easier than Google Cloud. . | Really good editor features. . | . Similar: Code better in Jupyter Notebook . 1. Always Turn On Experimental Feature . Dynamically typed languages like Python are a pain (for me) because they do not provide good auto-complete. This is the best one I have seen so far. . . 2. ️ Jump to Definition . 3. Use GUI for exploring files and Mounting Google Drive . Deep Learning is intimating enough. . You don’t want to remember everything as code. Use the GUI. . . If a certain file you are looking for you can explore right click and click on copy path. . 4. Creating Custom Snippets . You can add custom snippets by: . Creating a collab notebook with a header followed by a snippet | . Including it in your other notebooks by going to Tools -&gt; Preferences and pasting URL of the custom notebook. | . Search and use your snippet in code snippet section on the left | . 5. Get GPU Info . Type: . !nvidia-smi . If you have GPU mounted you will get this reply. . . In case if you don’t know how to mount GPU: . Click RunTime Menu → Change RunTime→ Hardware Accelerator → Choose GPU . 6. Opening Notebooks from Github with ease . To open a notebook from Github. Go to https://colab.research.google.com switch to the Github tab and enter an organization or URL. . . A much easier way is to use “Open in Colab” Extension for Chrome . After installation, whenever you find a Jupyter notebook in Github, click the icon of the plugin and it will open in Colab. . . 7. Send email when the task is complete . This can be helpful when you want to leave your computer for a long time and want to just get a notification when training is completed. . This is a perfect candidate to apply with Tip #4. . **`import** smtpl`ib `server **=** smtplib**.**SMTP(&#39;smtp.gmail.com&#39;, 587) server**.**starttls() server**.**login(&quot;sender_gmail_here@gmail.com&quot;, &quot;your_password_here&quot;)` `msg **=** &quot;COLAB WORK FINISH ALERT!&quot; server**.**sendmail(&quot;sender_gmail_here@gmail.com&quot;, &quot;receiver_gmail_here@gmail.com&quot;, msg) server**.**quit()` . Source: Colab Tricks by Rohit Midha . 8.️ HyperDash . This one is more of an ML/DL DevOps tips which can work anywhere, even in other Jupyter notebook envs. Hyperdash | Machine Learning Monitoring . $ hyperdash run -n &quot;MNIST&quot; python mnist.py Iter 1280, Loss= 1.576423, Acc= 0.51562 Iter 2560, Loss= 1.450179, Acc= 0.53906 Iter 3840, Loss= 1.160066, Acc= 0.64844 Iter 5120, Loss= 0.898589, Acc= 0.73438 Iter 6400, Loss= 0.685712, Acc= 0.75781 Iter 7680, Loss= 1.085666, Acc= 0.64844 . $ hyperdash run -n &quot;MNIST RNN&quot; python mnist.py Iter 1280, Loss= 1.576423, Accuracy= 0.51562 Iter 2560, Loss= 1.450179, Accuracy= 0.53906 Iter 3840, Loss= 1.160066, Accuracy= 0.64844 Iter 5120, Loss= 0.898589, Accuracy= 0.73438 Iter 6400, Loss= 0.685712, Accuracy= 0.75781 Iter 7680, Loss= 1.085666, Accuracy= 0.64844 . HyperDash allows you to monitor your model training or anything that is printed via your phone. It supports both iOS and Android and is super simple to get setup. . Installation Step: . Install HyperDash on your phone | . Go to your Jupyter notebook and run the below cell | I used GitHub login so I added -github in the end . pip install hyperdash &amp;&amp; hyperdash login — github . Import module | from hyperdash import monitor_cell . Use this magic in the cell you want to monitor. Which for most will be the training loop. | %%monitor_cell “model/experiment name” . In the app, you can see something like this. While I have included this as a tip, it is not something I have used. Because I have never trained for a very long duration. . . As per HyperDash website, it also allows detection of the status of your training and can notify when your training completes, fails, crashes or gets disconnected. . 9. 10. — Random Filler Tips: Dark Mode and Corgi/Kitti Mode . This is kind of a filler tip. (Just because I wanted to round off to 10 tips 😜). . . Go into Tools -&gt; Preferences -&gt; Theme -&gt; Select dark. . . While the dark mode is cool. I prefer using a light theme. . There is also a Corgi and Kitty mode under Miscellaneous which will add animated Corgis and Kitties in the header. . . Other useful tips: . Colab’s New Code Editor . | Colab Tricks by Rohit Midha . | 8 Tips For Google Colab Notebooks To Take Advantage Of Their Free-of-charge 12GB-RAM GPU. . | . Previous: Easy Jupyter Notebook Tips . Next: How to Download Dataset from Kaggle . I respond to all my comments. ありがとう .",
            "url": "www.ankushchoubey.com/collab/",
            "relUrl": "/collab/",
            "date": " • Aug 18, 2019"
        }
        
    
  
    
        ,"post84": {
            "title": "How To Download Dataset From Kaggle",
            "content": "2 Sentence Pre-requisite: . Kaggle is a platform for data science where you can find competitions, datasets, and other’s solutions. . | Some Kaggle datasets cannot be downloaded directly and can only be downloaded through Kaggle via it’s CLI. . | The Setup (One-time activity) . 1 — Install Kaggle CLI . To get started to Kaggle CLI you will need Python, open terminal and write . $ pip install kaggle . 2 — API credentials . Once you have Kaggle installed, type kaggle to check it is installed and you will get an output similar to this . . In the above line, you will see the path (highlighted) of where to put your kaggle.json file. . To get kaggle.json file go to: . https://www.kaggle.com/&lt;username&gt;/account . In the API section, click Create New API Token. And copy it the path mentioned in the terminal output. . . Type kaggle once again to check. . . In my case, even after copying it was not working. I had the file in place but it did not have the right permissions so I had to type the exact command they gave me. And it started working. . Downloading Dataset via CLI . You can open kaggle help via . kaggle -h . For getting info on competitions you can type . kaggle competitions download -h . whatever the Kaggle CLI command is, add -h to get help. . Find Data . while you can explore Competitions, Datasets, and kernels via Kaggle, here I am going to only focus on downloading of datasets. . What I do is I explore competitions or datasets via Kaggle website. . Download Entire Dataset . To download the dataset, go to Data *subtab. *In API section you will find the exact command that you can copy to the terminal to download the entire dataset. . . . The syntax is like . kaggle competitions download &lt;competition name&gt; . Download Particular File From Dataset . As you can see, the size of the data is 34 GB which is huge. . So instead of downloading entire dataset, you can select which files to download. . You cannot provide download multiple files with a single command (as of 2019/Aug/10) so you will have to download it one by one using the following command. . kaggle competitions download -f &lt;file-name&gt; &lt;competition-name&gt; . . Extract it and start using it. . I usually (plan to) put up a blog post every Saturday and create a YouTube video about it. My next post is a collection of Google Collab tips which will also include a way to download data from Kaggle into collab. . If there are any other useful tips/link/suggestion you would like to share, please put in the comment section below. . I respond to all my comments. . Thank you for reading so far. Have a good day. .",
            "url": "www.ankushchoubey.com/download_kaggle/",
            "relUrl": "/download_kaggle/",
            "date": " • Aug 10, 2019"
        }
        
    
  
    
        ,"post85": {
            "title": "Easy Jupyter Notebook Tips",
            "content": "In case you are not familiar with Jupyter Notebook, I recommend watching the following videos: . youtube: https://youtu.be/2eCHD6f_phE . Use Wild Card Import . import * . In Jupyter Notebook where you want to be able to quickly interactively try stuff out, you don’t want to constantly going back up to the top and importing more stuff. You want to be able to use lots of tab complete and be very experimental, so import * is great. . When you are building stuff in production, you can do the normal PEP8 style proper software engineering practices. . This is a different style of coding. It’s not that there are no rules in data science programming, the rules are different. . ~ Jeremy Howard (Source: FastAI v3 Lesson 1) . Types of Notebooks . It is best to consider 2 types of notebooks for your projects . Lab Notebooks . | Delivery Notebooks . | Lab Notebooks help in trying stuff out without worrying about making things every reproducible. The goal is just to refer back to what was done in the past. . Delivery Notebooks are ‘production’ grade, well documented and reproducible which can be shared with the entire team/client. . For Lab Notebook naming convention can be something like: . date_initialsOfAuthor_actualName.ipynb . Source: IPython Notebook best practices for data science by Jonathan Whitmore (Blog Post) . Split code into multiple cells to get better code-completion . This is a no-brainer but I struggled with this for a long time. . Weakly typed programming languages like Python do not work well with code completions provided by IDEs because the type of value return by a function is defined at run-time. IDEs have a hard time figuring out what the return type is. . . But when running Jupyter Notebook you can avoid this by splitting your code into multiple cells instead of one, running them one by one and then hitting Tab. . . Use %time for measuring the rough speed of cell’s execution . . . This is an ‘always-updated’ blog post. You won’t find all Jupyter Notebooks tips. These are just the once I find the most helper. For a much more comprehensive list check out these links: . Python for Data Science — Getting More out of Jupyter (Video #4) . | 28 Jupyter Notebook Tips, Tricks, and Shortcuts . | . If there are any other useful tips/link/suggestion you would like to share, please put in the comment section below. I respond to all my comments. Thank you for reading so far. Have a good day. . Edit: 01 August 2019: Video Version . youtube: https://youtu.be/wnhHz3eFNMc .",
            "url": "www.ankushchoubey.com/jupyter_notebook/",
            "relUrl": "/jupyter_notebook/",
            "date": " • Jul 29, 2019"
        }
        
    
  
    
        ,"post86": {
            "title": "Lessons Learned from my first Deep Learning contest",
            "content": ". My rank is 41 out of 441. (0.97 F1 Score). . Before this, I had only practiced 2 lessons from Fast.ai and watched the first 5 lessons. . After the contest, I saw other participant’s approaches and found that their approach was much clearer and cleaner than mine. . Therefore, I decided to complete Fast.ai’s Deep Learning for Coders. . The contest was a month ago from this writing. I had the time to really sit and figure out what went well and what didn’t. . Approach . Here was my approach which I did in stages: . Step 1: Make models . 1. Make a simple resnet50 model. And make sure input and output submission file are correct. . 2. Improve the model. I found that the images were black and old. But the number of images were less and we cannot use external data so my solution was. . Heavy data augmentation (warping, crops, rotations): lead to 5–7 percent increase in F1 score and accuracy. . | Progressive increase image size. . | I initially started with (50,70) images . | Trained it that then increased it. Trained it again. . | . 3. Training approach. . Freeze the model train for 4 epochs | Unfreeze the model train for 7 epochs | I found unfreezing was getting higher accuracy but only when done more than freeze training. 7 is what I stuck at. | I replicated the kernel and trained resnet18, resnet34, vgg16, vgg19 and densenet121 so that I can ensemble there outputs | Model Making Environment: Kaggle Code at Models directory | . Step 2: Max Ensemble . After I had all the outputs from different models. . I used the output CSVs to make a max ensemble. . (You will see that I have renamed file names to be ‘modelname’.csv in ensemble folder and the output file is ‘simple.csv’) . Ensemble making environment: Local . Code: ankschoubey/AnalyticsVidya_Game_Of_Deep_Learning . Lessons and Mistakes Learned . Code . Environment . I trained on Kaggle Kernel. The only way to get output files was to commit. . | I also did not load existing models because on Kaggle you have to attach it as a dataset and then load. It’s a pain so I did not bother. . | It would have been much easier to train on Google Cloud, Collab or Clouderizer. . | . Should have used discriminative learning rate. . Transfer learning without discriminative learning rate is stupid. | . Refactor code early before replicating the kernel . I replicated kernels so that I can train different models on different kernels and get results faster. . | The problem was that I had introduced a bug which got replicated. Also, making changes was a pain because I had to copy paste things multiple times. . | . Use metrics used in the contest . Kind of dumb to mention this: I did not use the F1 score. Rather relied on accuracy. . Save as many things as I can so that you save time later . Save results . | Save model . | Save data . | . Use Checkpoints . Did forget the idea of checkpoints entirely. | . Useless Model . I made an ensemble which sucked because it only lead to 0.05 percent improvement. . | The reason was I used a lot of mediocre models. . | 1 ResNet 34/50 would have been fine. . | Also did not know about DenseNet very well back then. . | I believe that an ensemble of ResNet and DenseNet would have been wonderful. . | . Data . Look at the data and use good augmentation . I saw some images were grey scale and old. I might have got a higher score if I had taken time | . . Using good data augmentation. . My model was not performing well. 93–94% accuracy was the limit. . I buffed up every transformation. And it started reaching 96+. Warping helped a lot. . . Developer Habits . Start submissions early in the contest. And complete your work at least 3–4 days before the end. | .",
            "url": "www.ankushchoubey.com/first_competition/",
            "relUrl": "/first_competition/",
            "date": " • Jun 23, 2019"
        }
        
    
  
    
        ,"post87": {
            "title": "Copying Others vs Being Yourself",
            "content": "People love having role models — I have role models too. They include, Steve Jobs (for changing the world), Tim Ferriss (for becoming healthy, wealthy and wise — 4HB, 4HWW, 4HC), Jony Ive (for beautiful product designs), Narendra Modi (for the power to do good), Warren Buffet (for art of making money), Elon Musk (for becoming Iron Man), Buddha (for Nirvana/inner peace), Marcus Aurelius (for being a good empirer and stoic philosphy), Akira Toriyama (for Dragon Ball)… the list continous. . I wanted to be like these people for reasons mention in the brackets. I would sometime imagine what my roll model(s) would do if they were in my situation. . My mind changed when I heard Tim saying more than once something which went like this — I am no super hero. — I don’t know how it feels to be Elon Musk. But I like being Tim Ferriss. . After putting some brain to use and reading this article I realised — . Everyone is different. And are supposed to be different. . Here different means . — Different Strengths and Weakness . — Different Situations including Birth Year and Country . No roles models of mine had the same story. They all made different choices depending on the situation they were in — without copying anyone else. . The principles they used are helpful. Their story? Not so much. .",
            "url": "www.ankushchoubey.com/copying/",
            "relUrl": "/copying/",
            "date": " • Oct 4, 2015"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "",
          "content": "How to recover from injuries faster • Feb 23, 2021 . The Path / Ethics • Feb 4, 2021 .",
          "url": "www.ankushchoubey.com/personal/",
          "relUrl": "/personal/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  

  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "www.ankushchoubey.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}